name: HumanEval_59_largest_prime_factor
language: ruby
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
  def largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i\
    \ <= n\n    factors.push(i)\n    i += 2\n  factors.each do |factor|\n    if n\
    \ % factor == 0\n      return factor\n    end\n  end\n  return n\nend", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  i = 2\n  while i * i <= n\n    i += 1\n  factors.reverse\n  factors.last\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    factors << factor\n  \
    \  factor += 1\n    n /= factor\n  factors << factor\n  factor\nend\n</code>\n\
    <|/ a |>\n<| c |>\nI like this solution, but I wonder if there is a way to do\
    \ it without recursion.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ use recursion.\n<|/ c |>\n<| c |>\nThanks for the solution. I was thinking about\
    \ a solution without recursion, but I couldn't think of a way to do it without\
    \ recursion. Your solution is very elegant, and I like it.\n<|/ c |>\n<| c |>\n\
    : I added a solution without recursion.\n<|/ c |>\n<| c |>\nThanks for the solution.\
    \ I like it too. I'm going to accept the other answer because it was first, but\
    \ I really appreciate your solution. I'm going to try it out and see how it works.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere's a solution without recursion:\n<code>", " \
    \ prime_candidates = [2, 3]\n  prime_factors = []\n  while prime_candidates.count\
    \ < n\n    candidate = prime_candidates.first\n    prime_factors << candidate\n\
    \    prime_candidates.delete_if { |i| n % i == 0 }\n    candidate = prime_candidates.first\n\
    \    prime_factors << candidate\n    prime_candidates.delete_if { |i| n % i ==\
    \ 0 }\n  end\n  prime_factors.max\nend\n</code>\n<|/ a tags=ruby,primes |>\n<|\
    \ c |>\nThis code doesn't work. `largest_prime_factor(13195)` returns `2` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just\
    \ tested it again and it returns `3` now.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it returns `3` now. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI\
    \ tested it again and it returns `3` now. Thanks for pointing that out.\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it returns `3` now. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  prime_divisor = 1\n  prime_factors\
    \ = []\n  while n > prime_divisor\n    prime_divisor *= prime_divisor\n    prime_factors\
    \ << prime_divisor\n    n /= prime_divisor\n  end\n  prime_factors.reverse\n \
    \ prime_factors.last\nend", "  factors = []\n  i = 2\n  while i * i <= n\n   \
    \ i += 1\n  while n % i == 0\n    factors << i\n    n /= i\n  factors << n\n \
    \ factors.uniq!\n  factors.max\nend", "  primes = prime_factors(n)\n  primes.each\
    \ do |prime|\n    return prime if primes.count(prime) == 1 && prime > 1\n  end\n\
    \  2\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ n % i == 0\n    n /= i\n    factors << i\n    i += 1\n  factors << n if n >\
    \ 1\n  factors.max\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i\
    \ += 1\n  while n % i == 0\n    n /= i\n    factors << i\n    i += 1\n  factors\
    \ << n if n > 1\n  factors.max\nend", "  primes = prime_factors(n)\n  primes.each\
    \ do |prime|\n    return prime if prime > n\n  end\n  n\nend", "  primes = []\n\
    \  i = 2\n  while i * i <= n\n    primes << i\n    i += 1\n  primes.each do |prime|\n\
    \    i = 2\n    while i * i <= prime\n      i <<= 1\n    end\n    break if i *\
    \ i > n\n  end\n  i\nend", "  prime_divisors = []\n  i = 2\n  while i * i <= n\n\
    \    prime_divisors << i\n    i += 1\n  prime_divisors.max\nend", "  i = 2\n \
    \ while i * i <= n\n    i += 1\n  i\nend", "  prime_divisors(n)\n  largest_divisor\
    \ = divisors(n)[0]\n  largest_divisor_prime = divisors(largest_divisor)\n  largest_divisor_prime.reject!{|i|\
    \ n % i == 0}\n  largest_divisor_prime.first\nend", "  factors = []\n  i = 2\n\
    \  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n    i +=\
    \ 2\n  factors.each do |factor|\n    if n % factor == 0\n      break\n    end\n\
    \  end\n  return factor\nend", "  factors = []\n  factor = 1\n  while n > 1\n\
    \    factors << factor\n    factor += 1\n    n /= factor\n  factors << factor\n\
    \  factor\nend", "  factors = []\n  factor = 1\n  while n > 1\n    factors <<\
    \ factor\n    factor += 1\n    n /= factor\n  factors << factor\n  factors.max\n\
    end\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\nThe first part of this answer\
    \ is incorrect. `largest_prime_factor(13195)` returns `29` but `largest_prime_factor(2048)`\
    \ returns `2`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the\
    \ answer.\n<|/ c |>\n<| a dscore=4 |>\nHere's a solution using Ruby's prime number\
    \ generator:\n<code>\nrequire 'prime'", "  prime_divisor = 1\n  while n % prime_divisor\
    \ == 0\n    prime_divisor *= prime_divisor\n    n /= prime_divisor\n  n\nend",
  "  i = 2\n  while i * i <= n\n    i += 1\n  i\nend", "  primes = prime_table(n)\n\
    \  largest = primes.last\n  largest = primes.find { |x| x > largest } if largest\n\
    \  largest\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n \
    \ while n >= i\n    n /= i\n    factors.push(i)\n  end\n  factors.reverse\n  factors.find\
    \ { |f| n % f == 0 }\nend", "  primes = prime_factors(n)\n  primes.each do |prime|\n\
    \    return prime if n / prime == 1\n  end\n  return n\nend", "  i = 2\n  factors\
    \ = []\n  while i * i <= n\n    i += 1\n    while n % i == 0\n      n /= i\n \
    \     factors << i\n    end\n  end\n  factors << n if n > 1\n  factors.max\nend",
  "  factors = []\n  factor = 1\n  while n > 1\n    if n % factor == 0\n      factors\
    \ << factor\n      n /= factor\n    else\n      factor += 1\n    end\n  end\n\
    \  factors << n\n  factors.uniq!\n  factors.max\nend", "  prime_divisors = prime_divisors(n)\n\
    \  prime_divisors.each do |prime|\n    if n % prime == 0\n      return prime\n\
    \    end\n  end\n  raise \"n must be greater than 1 and be a prime\"\nend", " \
    \ primes = prime_factors(n)\n  primes.each do |prime|\n    return prime if primes.count(prime)\
    \ == 1 and prime > 1\n  end\n  return n\nend", "  factors = []\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each\
    \ do |factor|\n    if n % factor == 0\n      return factor\n    end\n  end\n \
    \ return n\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n \
    \ while n >= i\n    n /= i\n    factors.push(i)\n  end\n  factors.reverse\n  factors.find\
    \ { |f| n % f == 0 }\nend\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\nThis code\
    \ will fail for large numbers. For example, `largest_prime_factor(2**64-1)` returns\
    \ `nil`.\n<|/ c |>\n<| c |>\n: That's true, but that's not what the OP asked for.\
    \ He asked for the largest prime factor, not the largest prime number.\n<|/ c\
    \ |>\n<| c |>\n: I see your point, but I believe that OP asked for the largest\
    \ prime factor, not the largest prime number. For example, `largest_prime_factor(2**64-1)`\
    \ returns `nil`.\n<|/ c |>\n<| c |>\n: I see your point, but I believe that OP\
    \ asked for the largest prime factor, not the largest prime number. For example,\
    \ `largest_prime_factor(2**64-1)` returns `nil`.\n<|/ c |>\n<| c |>\n: I see your\
    \ point, but I believe that OP asked for the largest prime factor, not the largest\
    \ prime number. For example, `largest_prime_factor(2**64-1)` returns `nil`.\n\
    <|/ c |>\n<| a tags=ruby,primes |>\n<code>", "  factors = []\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while n >= i\n    n /= i\n    factors.push(i)\n  factors.reverse\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while n >= i\n    n /= i\n    factors.push(i)\n\
    \  factors.reverse\n  factors.first\nend", "  primes = prime_factors(n)\n  primes.each\
    \ do |prime|\n    return prime if prime > n\n  end\n  return n\nend", "  i = 2\n\
    \  while i * i <= n\n    i += 1\n  i\nend", "  prime_divisors(n)\n  prime_divisors.max_by\
    \ { |prime| prime }\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i\
    \ += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n\
    \  factors.find { |f| n % f == 0 }\nend", "  factors = []\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n\
    \  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n /\
    \ 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  factors.find { |f|\
    \ f > n }\nend", "  factors = []\n  i = 1\n  while i * i <= n\n    i += 1\n  while\
    \ n >= i\n    n /= i\n    factors.push(i)\n  factors.reverse\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while n >= i\n    n /= i\n    factors.push(i)\n  factors.reverse\n\
    \  factors.last\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,primes |>\n<code>",
  "  primes = prime_factors(n)\n  primes.each do |prime|\n    return prime if prime\
    \ > n\n  end\n  return n\nend", "  i = 2\n  while i * i <= n\n    i += 1\n  i\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while n % i\
    \ == 0\n    n /= i\n    factors << i\n    i += 1\n  factors << n\n  factors.uniq.size\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for `largest_prime_factor(13195)`\
    \ which should return `29` but returns `3`.\n<|/ c |>\n<| c |>\n: Thanks for pointing\
    \ that out. I fixed the code accordingly.\n<|/ c |>\n<| c |>\nI believe this algorithm\
    \ is O(n^2) in complexity. Is there a way to make it O(n)?\n<|/ c |>\n<| c |>\n\
    : Yes, you can make it O(n) by using a sieve. I'll post an answer shortly.\n<|/\
    \ c |>\n<| c |>\n: I added an O(n) algorithm that uses Sieve of Eratosthenes and\
    \ should be much faster than the O(n^2) algorithm I posted earlier.\n<|/ c |>\n\
    <| a tags=ruby,primes,algorithm |>\n<code>", "  primes = prime_factors(n)\n  largest\
    \ = primes.max\n  largest.times { primes.delete(largest) }\n  largest\nend", " \
    \ prime_divisors = prime_divisors(n)\n  prime_divisors.each do |prime_divisor|\n\
    \    return prime_divisor if prime_divisor > n\n  end\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  factors.each do |factor|\n    if n % factor == 0\n      return\
    \ factor\n    end\n  end\n  raise \"No prime factor found\"\nend", "  prime_divisors\
    \ = prime_factors(n)\n  prime_divisors.each do |prime|\n    if n % prime == 0\n\
    \      return prime\n    end\n  end\n  return n\nend", "  prime_divisors(n)\n\
    \  largest_prime = nil\n  largest_divisor = nil\n  n.times do |i|\n    prime_divisors(i)\n\
    \    largest_divisor = nil\n    prime_divisors.each do |divisor|\n      largest_divisor\
    \ = divisor if largest_divisor == nil || largest_divisor > divisor\n    end\n\
    \    largest_prime = largest_divisor if largest_divisor != nil\n  end\n  largest_prime\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n\
    \    factors.push(i)\n    i += 2\n  i = 2\n  while i * i <= n\n    i += 1\n  factors.reverse\n\
    \  factors.last\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i +=\
    \ 1\n  while n % i == 0\n    n /= i\n    factors << i\n    i += 1\n  factors <<\
    \ n if n > 1\n  factors.max\nend", "  factors = []\n  i = 2\n  while i * i <=\
    \ n\n    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each\
    \ do |factor|\n    if n % factor == 0\n      return factor\n    end\n  end\n \
    \ return n\nend", "  i = 2\n  while i * i <= n\n    i += 1\n  i\nend", "  prime_divisors(n)\n\
    \  largest_prime = prime_divisors.max\n  prime_divisors.delete(largest_prime)\n\
    \  return largest_prime\nend", "  primes = primes_up_to_n(n)\n  primes.each do\
    \ |prime|\n    if n % prime == 0\n      return prime\n    end\n  end\n  2\nend",
  "  primes = prime_factors(n)\n  primes.each do |prime|\n    return prime if prime\
    \ > n\n  end\n  n\nend", "  i = 2\n  while i * i <= n\n    i += 1\n  i\nend",
  "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n\
    \    i += 1\n  factors.each do |factor|\n    if n % factor == 0\n      break\n\
    \    end\n  end\n  return factor\nend", "  primes = prime_factors(n)\n  largest\
    \ = primes.last\n  largest = primes.last if largest.odd? && largest.positive?\
    \ && n > 1 \n  largest.times do |i|\n    prime = primes[i]\n    next if prime\
    \ > largest\n    largest = prime\n  end\n  largest\nend", "  factors = []\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while n % i == 0\n    factors << i\n\
    \    n /= i\n  factors << n\n  factors.uniq!\n  factors.max\nend", "  factors\
    \ = []\n  i = 1\n  while i * i <= n\n    i += 1\n  while n % i == 0\n    n /=\
    \ i\n    factors << i\n    i = 1\n  factors << n\n  factors.max\nend", "  prime_divisors\
    \ = []\n  i = 2\n  while i * i <= n\n    prime_divisors << i\n    i += 1\n  prime_divisors.max\n\
    end", "  primes = prime_factors(n)\n  primes.each do |prime|\n    return prime\
    \ if prime > n\n  end\n  n\nend", "  factors = []\n  i = 2\n  while i * i <= n\n\
    \    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 1\n  factors.each\
    \ do |factor|\n    if n % factor == 0\n      n /= factor\n      break\n    end\n\
    \  end\n  n\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n\
    \  while n > 1\n    if n % i == 0\n      n /= i\n      factors << i\n    end\n\
    \    i += 1\n  end\n  factors << n if n > 1\n  factors.max\nend", "  factors =\
    \ []\n  factor = 1\n  while n > 1\n    factors << factor\n    factor += 1\n  \
    \  n /= factor\n  end\n  factors.reverse\n  factors.last\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n\
    \    i += 1\n  i = 1\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n   \
    \ factors.push(i)\n    i += 1\n  factors.reverse\n  factors.last\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=ruby,primes |>\n<code>", "  factors = []\n  i = 2\n\
    \  while i * i <= n\n    i += 1\n  while n % i == 0\n    n /= i\n    factors <<\
    \ i\n    i += 1\n  factors << n\n  factors.max\nend", "  factors = []\n  factor\
    \ = 1\n  while n > 1\n    factors << factor\n    factor += 1\n    n /= factor\n\
    \  factors << factor\n  factors.max\nend", "  factors = []\n  i = 1\n  while i\
    \ * i <= n\n    i += 1\n  while n != 1\n    factors.push n\n    n /= i\n  end\n\
    \  factors.push n\n  factors.reverse\n  factors.inject(0, :*)\nend", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  factors.each do |factor|\n    if n % factor == 0\n      return\
    \ factor\n    end\n  end\n  return n\nend", "  primes = prime_factors(n)\n  primes.each\
    \ do |prime|\n    return prime if primes.count(prime) == 1 and prime > 1\n  end\n\
    \  2\nend", "  factors = []\n  factor = 1\n  while n > 1\n    factor = (factor\
    \ * n).to_i\n    factors << factor\n    n /= factor\n  end\n  factors.reverse\n\
    \  factors.last\nend", "  prime_divisors = []\n  i = 2\n  while i * i <= n\n \
    \   prime_divisors << i\n    i += 1\n  prime_divisors.max\nend", "  primes = []\n\
    \  i = 2\n  while i * i <= n\n    primes << i\n    i += 1\n  primes.each do |prime|\n\
    \    break if n % prime == 0\n    n /= prime\n  end\n  n\nend", "  primes = prime_factors(n)\n\
    \  return primes.reduce(:max)\nend", "  factors = []\n  i = 1\n  while i * i <=\
    \ n\n    i += 1\n  factors.push i\n  i = 2\n  while i * i <= n\n    i += 1\n \
    \   while i * i <= n\n      i += 1\n      factors.push i\n  return factors.max\
    \ { |a, b| b }\nend", "  i = 2\n  while i * i <= n\n    i += 1\n  i\nend", " \
    \ primes = primes_up_to_n(n)\n  primes.each do |prime|\n    return prime if n\
    \ % prime == 0\n  end\n  2\nend", "  factors = []\n  i = 2\n  while i * i <= n\n\
    \    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each do\
    \ |factor|\n    if n % factor == 0\n      break\n    end\n  end\n  return factor\n\
    end", "  i = 2\n  factors = []\n  while i * i <= n\n    i += 1\n    while n %\
    \ i == 0\n      n /= i\n      factors << i\n    end\n  end\n  factors << n if\
    \ n > 1\n  factors.max\nend", "  prime_candidates = []\n  i = 1\n  while i * i\
    \ <= n\n    prime_candidates << i\n    i += 1\n  prime_candidates.each do |prime|\n\
    \    break if n % prime == 0\n  end\n  prime_candidates.each do |prime|\n    break\
    \ if prime > n\n  end\n  prime_candidates.each do |prime|\n    break if prime\
    \ == 1\n  end\n  prime_candidates.each do |prime|\n    break if prime > n / prime\n\
    \  end\n  prime_candidates.each do |prime|\n    break if prime > n / prime * prime\n\
    \  end\n  prime_candidates.each do |prime|\n    break if prime > n / prime * prime\
    \ * prime\n  end\n  prime_candidates.each do |prime|\n    break if prime > n /\
    \ prime * prime * prime * prime\n  end\n  prime_candidates.each do |prime|\n \
    \   break if prime > n / prime * prime * prime * prime * prime\n  end\n  prime_candidates.each\
    \ do |prime|\n    break if prime > n / prime * prime * prime * prime * prime *\
    \ prime\n  end\n  prime_candidates.each do |prime|\n    break if prime > n / prime\
    \ * prime * prime * prime * prime * prime * prime\n  end\n  prime_candidates.each\
    \ do |prime|\n    break if prime > n / prime * prime * prime * prime * prime *\
    \ prime * prime * prime\n  end\n  prime_candidates.each do |prime|\n    break\
    \ if prime > n / prime * prime * prime * prime * prime * prime * prime * prime\
    \ * prime * prime\n  end\n  prime_candidates.each do |prime|\n    break if prime\
    \ > n / prime * prime * prime * prime * prime * prime * prime * prime * prime\
    \ * prime * prime\n  end\n  prime_candidates.each do |prime|\n    break if prime\
    \ > n / prime * prime * prime * prime * prime * prime * prime * prime * prime\
    \ * prime * prime * prime\n  end\n  prime_candidates.each do |prime|\n    break\
    \ if prime > n / prime * prime * prime * prime * prime * prime * prime * prime\
    \ * prime * prime * prime * prime * prime * prime\n  end\n  prime_candidates.each\
    \ do |prime|\n    break if prime > n / prime * prime * prime * prime * prime *\
    \ prime * prime * prime * ", "  prime_divisors(n)\n  largest_prime = prime_divisors.last\n\
    \  prime_divisors.delete(largest_prime)\n  return largest_prime\nend", "  i =\
    \ 2\n  factors = []\n  while i * i <= n\n    i += 1\n    while n % i == 0\n  \
    \    n /= i\n      factors << i\n    end\n  end\n  factors << n if n > 1\n  factors\n\
    end", "  primes = prime_factors(n)\n  primes.each do |prime|\n    return prime\
    \ if prime > n\n  end\n  n\nend", "  factors = []\n  i = 2\n  while i * i <= n\n\
    \    i += 1\n  while n >= i\n    n /= i\n    factors.push(i)\n  factors.reverse\n\
    \  factors.find { |f| f > n }\nend\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\n\
    I like the idea of factoring out a prime factorization and using that to find\
    \ the largest prime factor.\n<|/ c |>\n<| c |>\nI like the idea of factoring out\
    \ a prime factorization and using that to find the largest prime factor.\n<|/\
    \ c |>\n<| c |>\nI like the idea of factoring out a prime factorization and using\
    \ that to find the largest prime factor.\n<|/ c |>\n<| c |>\nI like the idea of\
    \ factoring out a prime factorization and using that to find the largest prime\
    \ factor.\n<|/ c |>\n<| c |>\nI like the idea of factoring out a prime factorization\
    \ and using that to find the largest prime factor.\n<|/ c |>\n<| a dscore=5 |>\n\
    Here's a solution using Ruby's prime library:\n<code>\nrequire 'prime'", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while n % i == 0\n    n /=\
    \ i\n    factors << i\n    i += 1\n  factors << n\n  factors.max\nend", "  factors\
    \ = []\n  factor = 1\n  while n > 1\n    factors << factor\n    n /= factor\n\
    \    factor += 1\n  end\n  factors << factor\n  factor\nend", "  prime_divisors(n)\n\
    \  largest_prime = prime_divisors.max_by { |d| d }\n  prime_divisors.delete(largest_prime)\n\
    \  largest_prime\nend", "  factors = []\n  i = 1\n  while i * i <= n\n    i +=\
    \ 1\n  while n >= i\n    factors.push(i)\n    n /= i\n  factors.push(n)\n  factors.reverse\n\
    \  factors.inject(0, :+)\nend\n</code>\n<|/ a tags=ruby,primes,algorithm |>\n\
    <| c |>\nI like your solution, but I wonder why you didn't use [Sieve of Eratosthenes](http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\
    \ instead?\n<|/ c |>\n<| c |>\n: I didn't know about that one. Thanks!\n<|/ c\
    \ |>\n<| c |>\n: I didn't know about that one. Thanks!\n<|/ c |>\n<| c |>\n: I\
    \ didn't know about that one. Thanks!\n<|/ c |>\n<| c |>\n: I didn't know about\
    \ that one. Thanks!\n<|/ c |>\n<| a tags=ruby,primes,algorithm |>\nHere's a solution\
    \ in Ruby 1.8.7 (I haven't tested it on 1.9.2):\n<code>", "  prime_divisors =\
    \ prime_factors(n)\n  prime_divisors.each do |prime|\n    return prime if prime.is_a?(Integer)\n\
    \  end\n  raise \"n must be greater than 1\"\nend", "  prime_divisors(n)\n  prime_divisors.max_by\
    \ { |i| i }\nend", "  i = 2\n  factors = []\n  while i * i <= n\n    i += 1\n\
    \    while n % i == 0\n      n /= i\n      factors << i\n    end\n  end\n  factors\
    \ << n if n > 1\n  factors.max\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ this solution, but I wonder if it can be made more efficient by using a sieve\
    \ of Eratosthenes or something.\n<|/ c |>\n<| c |>\n: Yes, it can. I've added\
    \ an implementation that uses this technique.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  primes = prime_factors(n)\n  return primes.reduce(:max)\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while n != 1\n    if n % i == 0\n\
    \      factors << i\n      n /= i\n    end\n    i += 1\n  end\n  factors << n\
    \ if n > 1\n  factors.max\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for small numbers but for large numbers\
    \ it takes too long to compute. Do you know any way to speed it up?\n<|/ c |>\n\
    <| c |>\nI added a faster version. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for small numbers but for large numbers\
    \ it takes too long to compute. Do you know any way to speed it up?\n<|/ c |>\n\
    <| c |>\nI added a faster version. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for small numbers but for large numbers\
    \ it takes too long to compute. Do you know any way to speed it up?\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "  primes = prime_factors(n)\n  primes.each do |prime|\n\
    \    return prime if prime > n\n  end\n  n\nend", "  i = 2\n  while i * i <= n\n\
    \    i += 1\n  i\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i +=\
    \ 1\n  while n >= i\n    n /= i\n    factors.push(i)\n    i += 1\n  factors.reverse\n\
    \  factors.last\nend\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\nThis doesn't\
    \ work for `largest_prime_factor(2**1000)`\n<|/ c |>\n<| c |>\n: It works for\
    \ me in Ruby 2.1.1. What version are you using?\n<|/ c |>\n<| c |>\n: I tested\
    \ it in Ruby 2.1.1 and 2.1.2. In 2.1.2 it returns `2**1000` as `2**1000` rather\
    \ than `2**1000` as `2**1000` as `2**1000` as `2**1000`.\n<|/ c |>\n<| c |>\n\
    : I tested it in Ruby 2.1.1 and 2.1.2. In 2.1.2 it returns `2**1000` as `2**1000`\
    \ rather than `2**1000` as `2**1000` as `2**1000` as `2**1000`.\n<|/ c |>\n<|\
    \ c |>\n: I tested it in Ruby 2.1.1 and 2.1.2. In 2.1.2 it returns `2**1000` as\
    \ `2**1000` rather than `2**1000` as `2**1000` as `2**1000` as `2**1000`.\n<|/\
    \ c |>\n<| a tags=ruby,primes |>\n<code>", "  factors = []\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while n % i == 0\n    factors << i\n    n /= i\n  factors\
    \ << n\n  factors.uniq.size\nend", "  factors = []\n  i = 2\n  while i * i <=\
    \ n\n    i += 1\n  while i <= n / 2\n    factors << i\n    i += 1\n  factors.max\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    factors << i\n    i +=\
    \ 1\n  factors.max\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i\
    \ += 1\n  while n % i == 0\n    n /= i\n    factors.push(i)\n  factors.reverse\n\
    \  factors.find { |f| f > n } || n\nend\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This doesn't work for large numbers. Try `largest_prime_factor(2**64-1)`\n<|/\
    \ c |>\n<| c |>\n: I believe it does. Try `largest_prime_factor(2**64-1)` on irb\
    \ and see what happens.\n<|/ c |>\n<| c |>\n: It doesn't work for me in irb. Try\
    \ `largest_prime_factor(2**64-1)` and see what happens.\n<|/ c |>\n<| c |>\n:\
    \ It works for me in irb. Try `largest_prime_factor(2**64-1)` and see what happens.\n\
    <|/ c |>\n<| c |>\n: It works for me in irb. Try `largest_prime_factor(2**64-1)`\
    \ and see what happens.\n<|/ c |>\n<| a tags=ruby,primes |>\n<code>", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i\nend", "  factors = []\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.reverse\n\
    \  factors.each do |factor|\n    if n % factor == 0\n      return factor\n   \
    \ end\n  end\n  nil\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i\
    \ += 1\n  while n % i == 0\n    n /= i\n    factors << i\n    i += 1\n  factors\
    \ << n if n > 1\n  factors.max\nend", "  prime_divisors = []\n  i = 2\n  while\
    \ i * i <= n\n    prime_divisors << i\n    i += 1\n  prime_divisors.max\nend\n\
    </code>\n<|/ a tags=ruby,primes |>\n<| c |>\nThis doesn't work for me. `largest_prime_factor(13195)`\
    \ returns `29` instead of `3`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\n`largest_prime_factor(13195)` returns `29`\
    \ instead of `3` because `29` is greater than `3`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've fixed the code accordingly.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>", "  prime_divisors = prime_divisors(n)\n  largest_prime_factor =\
    \ prime_divisors.max\n  prime_divisors.each do |prime|\n    if n % prime == 0\n\
    \      largest_prime_factor = prime\n    end\n  end\n  largest_prime_factor\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    factors.push(i)\n    i\
    \ += 2\n  factors.each do |factor|\n    break if n % factor == 0\n    n /= factor\n\
    \  end\n  n\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>", "  prime_divisors\
    \ = prime_factors(n)\n  max_prime_divisor = prime_divisors.max\n  max_prime_factor\
    \ = prime_divisors[max_prime_divisor]\n  return max_prime_factor\nend", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors <<\
    \ i\n    i += 1\n  factors.max\nend", "  factors = []\n  i = 2\n  while i * i\
    \ <= n\n    i += 1\n  while n >= i\n    n /= i\n    factors.push(i)\n    i +=\
    \ 1\n  factors.reverse\n  factors.first\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=ruby,primes,algorithm |>\n<code>", "  factors = []\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each\
    \ do |factor|\n    if n % factor == 0\n      break\n    end\n  end\n  return n\
    \ if factors.size == 1\n  factors.last\nend", "  factors = []\n  factor = 1\n\
    \  while n > 1\n    factors << factor\n    factor += 1\n    n /= factor\n  factors\
    \ << factor\n  factor\nend", "  factors = []\n  i = 1\n  while i * i <= n\n  \
    \  i += 1\n  while n % i == 0\n    factors << i\n    n /= i\n  factors << n if\
    \ n > 1\n  factors.max\nend", "  factors = []\n  i = 2\n  while i * i <= n\n \
    \   i += 1\n  while n != 1\n    if n % i == 0\n      factors << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  factors << n if n != 1\n  factors.max\nend",
  "  i = 2\n  factors = []\n  while i * i <= n\n    i += 1\n    while n % i == 0\n\
    \      n /= i\n      factors << i\n    end\n  end\n  factors << n if n > 1\n \
    \ factors.max\nend\n</code>\n<|/ a |>\n<| c |>\nThis is not the fastest solution,\
    \ since it requires iterating over all prime factors up to sqrt(n).\n<|/ c |>\n\
    <| c |>\n: I agree. But the OP asked for the fastest solution. Also, the OP asked\
    \ for the largest prime factor, not the largest *prime* factor.\n<|/ c |>\n<|\
    \ c |>\nI agree, that's why I said \"fastest\" instead of \"best\".\n<|/ c |>\n\
    <| c |>\n: I agree. But the OP asked for the largest prime factor, not the largest\
    \ *prime* factor.\n<|/ c |>\n<| c |>\n: I agree, that's why I said \"fastest\"\
    \ instead of \"best\".\n<|/ c |>\n<| a dscore=5 tags=ruby,primes,algorithm |>\n\
    <code>", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <=\
    \ n\n    factors.push(i)\n    i += 2\n  factors.each do |factor|\n    if n % factor\
    \ == 0\n      return factor\n    end\n  end\n  return n\nend", "  prime_divisors(n)\n\
    \  prime_divisors(n)\n  max_divisor = n.to_s.split('.').map(&:to_i).max\n  max_divisor\
    \ == 1 ? max_divisor = 2 : max_divisor\n  max_divisor\nend", "  i = 2\n  factor\
    \ = 1\n  while i * i <= n\n    i += 1\n    while n % i == 0\n      n /= i\n  \
    \    factor += 1\n    end\n  end\n  factor\nend", "  primes = []\n  i = 2\n  while\
    \ i * i <= n\n    primes << i\n    i += 1\n  primes.each do |prime|\n    if n\
    \ % prime == 0\n      return prime\n    end\n  end\n  return n\nend", "  prime_candidates\
    \ = []\n  i = 2\n  while i * i <= n\n    prime_candidates << i\n    i += 1\n \
    \ prime_candidates.uniq.each do |prime|\n    break if n % prime == 0\n    n /=\
    \ prime\n  end\n  n\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i\
    \ += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each do |factor|\n\
    \    if n % factor == 0\n      return factor\n    end\n  end\n  return n\nend",
  "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  factors.each do |factor|\n    if n % factor == 0\n      break\n\
    \    end\n  end\n  factor\nend", "  primes = prime_factors(n)\n  largest = primes.max\n\
    \  largest = primes[largest]\n  primes.delete(largest)\n  primes.each do |prime|\n\
    \    if n % prime == 0\n      return prime\n    end\n  end\n  return largest\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n\
    \    factors.push(i)\n    i += 2\n  factors.each do |factor|\n    if n % factor\
    \ == 0\n      return factor\n    end\n  end\n  return n\nend", "  primes = prime_factors(n)\n\
    \  primes.each do |prime|\n    return prime if prime > n\n  end\n  n\nend", " \
    \ prime_divisors = prime_divisors(n)\n  largest_prime_factor = prime_divisors.max\n\
    \  prime_divisors.each do |prime|\n    return prime if prime > largest_prime_factor\n\
    \  end\n  largest_prime_factor\nend", "  factors = []\n  i = 2\n  while i * i\
    \ <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each\
    \ do |factor|\n    break if n % factor == 0\n    n /= factor\n  end\n  n\nend",
  "  i = 2\n  while i * i <= n\n    i += 1\n  i\nend", "  i = 2\n  while i * i <=\
    \ n\n    i += 1\n  i\nend", "  factors = []\n  i = 1\n  while i * i <= n\n   \
    \ i += 1\n  while n % i == 0\n    n /= i\n    factors << i\n  factors << n\n \
    \ factors.max\nend", "  primes = prime_factors(n)\n  primes.each do |prime|\n\
    \    return prime if prime > n\n  end\n  n\nend", "  primes = prime_table(n)\n\
    \  primes.each do |prime|\n    return prime if n / prime == 1 # Only return factors\
    \ of 2\n  end\n  2\nend", "  primes = prime_sieve(n)\n  primes.each do |prime|\n\
    \    return prime if n / prime == 1\n  end\n  2\nend", "  primes = primes_up_to_n(n)\n\
    \  primes.each do |prime|\n    return prime if n % prime == 0\n  end\n  2\nend",
  "  factors = []\n  i = 2\n  while i * i <= n\n    factors.push(i)\n    i += 2\n\
    \  factors.each do |factor|\n    if n % factor == 0\n      return factor\n   \
    \ end\n  end\n  return n\nend", "  factors = []\n  i = 2\n  while i * i <= n\n\
    \    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.reverse\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    i -= 1\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    i -= 1\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    i -= 1\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    i -= 1\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    i -= 1\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    i -= 1\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    i -= 1\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    i -= 1\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    i -= 1\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    i -= 1\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    i -= 1\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    i -= 1\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    i -= 1\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= ", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while n != 1\n    if n % i == 0\n\
    \      factors << i\n      n /= i\n    end\n    i += 1\n  end\n  factors << n\
    \ if n > 1\n  factors.max\nend", "  i = 2\n  while i * i <= n\n    i += 1\n  i\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while n >= i\n\
    \    n /= i\n    factors.push(i)\n    i += 1\n  factors.reverse\n  factors.last\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n\
    \    factors << i\n    i += 1\n  factors.max\nend", "  factors = []\n  i = 2\n\
    \  while i * i <= n\n    i += 1\n  while n > 1\n    if n % i == 0\n      factors\
    \ << i\n      n /= i\n    end\n    i += 1\n  end\n  factors << n if n > 1\n  factors.max\n\
    end", "  i = 2\n  while i * i <= n\n    i += 1\n  i\nend", "  prime_divisors(n)\n\
    \  largest_prime_factor = nil\n  n.times do |i|\n    prime_divisor = prime_divisors[i]\n\
    \    if prime_divisor > largest_prime_factor\n      largest_prime_factor = prime_divisor\n\
    \    end\n  end\n  largest_prime_factor\nend", "  factors = []\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while n % i == 0\n    n /= i\n    factors << i\n \
    \   i += 1\n  factors << n\n  factors.uniq!\n  factors.max\nend", "  factors =\
    \ []\n  i = 1\n  while i * i <= n\n    i += 1\n  while n % i == 0\n    n /= i\n\
    \    factors << i\n  end\n  factors << n if n > 1\n  factors.max\nend\n</code>\n\
    <|/ a tags=ruby,primes |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for small numbers but for large numbers it takes too long to compute. Do you\
    \ know any way to improve the speed of it?\n<|/ c |>\n<| c |>\n: I added a faster\
    \ version. Hope it helps.\n<|/ c |>\n<| c |>\nThanks a lot! It works perfectly.\
    \ Do you know any way to improve the speed of it?\n<|/ c |>\n<| c |>\n: I added\
    \ a faster version. Hope it helps.\n<|/ c |>\n<| c |>\nThanks a lot! It works\
    \ perfectly. Do you know any way to improve the speed of it?\n<|/ c |>\n<| a tags=ruby,primes\
    \ |>\n<code>", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while i * i <= n\n    i\
    \ += 1\n  i = 2\n  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while\
    \ i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n\
    \  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n  \
    \  factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n\
    \  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n  \
    \  factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n\
    \  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n  \
    \  factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n\
    \  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n  \
    \  factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n\
    \  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n  \
    \  factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  i = 2\n  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n\
    \  while i <= n\n    factors.push(i)\n    i += 2\n  i = 2\n  while i <= n\n  \
    \  factors.push(i)\n    i += 2\n", "  prime_divisors = []\n  i = 2\n  while i\
    \ * i <= n\n    prime_divisors << i\n    i += 1\n  prime_divisors.max\nend", " \
    \ prime_divisors(n)\n  prime_divisors.max\nend", "  factors = []\n  i = 1\n  while\
    \ i * i <= n\n    i += 1\n  i\n  while n % i == 0\n    n /= i\n    factors <<\
    \ i\n    i\n  factors << n\n  factors\nend", "  prime_divisors(n)\n  prime_divisors.max\n\
    end", "  factors = []\n  i = 1\n  while i * i <= n\n    i += 1\n  while n % i\
    \ == 0\n    factors << i\n    n /= i\n  factors << n\n  factors.uniq.first\nend",
  "  prime_candidates = []\n  i = 2\n  while i * i <= n\n    prime_candidates << i\n\
    \    i += 1\n  prime_candidates.max\nend", "  factors = []\n  factor = 1\n  while\
    \ n > 1\n    factors << factor\n    factor += 1\n    n /= factor\n  factors <<\
    \ factor\n  factor\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,primes |>\n\
    <code>", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <=\
    \ n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  factors.find {\
    \ |f| n % f == 0 }\nend", "  primes = prime_factors(n)\n  largest = primes.last\n\
    \  largest = primes.find { |x| x > largest } if primes.any?\n  largest\nend",
  "  prime_divisors(n)\n  largest = 1\n  largest_divisor = 1\n  n.times do |i|\n \
    \   largest = i if largest * i != n\n    largest_divisor = i if largest_divisor\
    \ * i != n\n  end\n  largest\nend", "  i = 2\n  factors = []\n  while i * i <=\
    \ n\n    i += 1\n    factors << i\n  factors.max\nend", "  factors = []\n  i =\
    \ 2\n  while i * i <= n\n    i += 1\n  while n != 1\n    if n % i == 0\n     \
    \ factors << i\n      n /= i\n    end\n    i += 1\n  end\n  factors << n if n\
    \ != 1\n  factors.max\nend", "  factors = []\n  factor = 1\n  while n > 1\n  \
    \  factors << factor\n    factor += 1\n    n /= factor\n  end\n  factors.last\n\
    end", "  primes = prime_factors(n)\n  primes.each do |prime|\n    return prime\
    \ if prime > n\n  end\n  n\nend", "  prime_divisor = 1\n  prime_factors = []\n\
    \  while n > 1\n    prime_factor = prime_divisor\n    prime_divisor = 1\n    prime_factors\
    \ = []\n    while n % prime_divisor == 0\n      prime_divisor = prime_divisor\
    \ + 1\n      prime_factors << prime_divisor\n      n /= prime_divisor\n    end\n\
    \    prime_factors << n\n    n /= prime_factor\n  end\n  prime_factors.reverse\n\
    \  prime_factors.inject(:*)\nend", "  factors = []\n  i = 2\n  while i * i <=\
    \ n\n    factors.push(i)\n    i += 2\n  factors.each do |factor|\n    if n % factor\
    \ == 0\n      return factor\n    end\n  end\n  return n\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while n >= i\n    n /= i\n    factors.push(i)\n\
    \    i += 1\n  factors.reverse\n  factors.last\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This code doesn't work correctly for large numbers. Try it with `largest_prime_factor(2**64-1)`.\n\
    <|/ c |>\n<| c |>\nI tested it on Ruby 2.4.0 and it works fine. `2**64-1` returns\
    \ `9223372036854775807` which is larger than the largest `int` so `largest_prime_factor`\
    \ returns `9223372036854775807`.\n<|/ c |>\n<| c |>\nI tested it on Ruby 2.4.0\
    \ and it works fine. `2**64-1` returns `9223372036854775807` which is larger than\
    \ the largest `int` so `largest_prime_factor` returns `9223372036854775807`.\n\
    <|/ c |>\n<| c |>\nI tested it on Ruby 2.4.0 and it works fine. `2**64-1` returns\
    \ `9223372036854775807` which is larger than the largest `int` so `largest_prime_factor`\
    \ returns `9223372036854775807`.\n<|/ c |>\n<| c |>\nI tested it on Ruby 2.4.0\
    \ and it works fine. `2**64-1` returns `9223372036854775807` which is larger than\
    \ the largest `int` so `largest_prime_factor` returns `9223372036854775807`.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  i = 2\n  while i * i <= n\n    i += 1\n\
    \  i\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ n % i == 0\n    factors << i\n    n /= i\n  factors << n\n  factors.uniq!\n\
    \  factors.max\nend\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\nI like your\
    \ solution, but I wonder if there is a faster way to find primes than to check\
    \ every number from 2 to sqrt(n).\n<|/ c |>\n<| c |>\n: I doubt it. The prime\
    \ factorization is pretty fast and you only need to check up to sqrt(n) anyway.\
    \ Even if you were to check every number from 2 to sqrt(n), you'd have to check\
    \ every number from 2 to sqrt(n) anyway. You'd have to check every number from\
    \ 2 to sqrt(n) anyway if you were to check every number from 2 to sqrt(n) anyway.\n\
    <|/ c |>\n<| c |>\n: I doubt it either. Even if you were to check every number\
    \ from 2 to sqrt(n), you'd have to check every number from 2 to sqrt(n) anyway.\
    \ You'd have to check every number from 2 to sqrt(n) anyway if you were to check\
    \ every number from 2 to sqrt(n) anyway.\n<|/ c |>\n<| c |>\n: I doubt it either.\
    \ Even if you were to check every number from 2 to sqrt(n), you'd have to check\
    \ every number from 2 to sqrt(n) anyway. You'd have to check every number from\
    \ 2 to sqrt(n) anyway if you were to check every number from 2 to sqrt(n) anyway.\n\
    <|/ c |>\n<| c |>\n: I doubt it either. Even if you were to check every number\
    \ from 2 to sqrt(n), you'd have to check every number from 2 to sqrt(n) anyway.\
    \ You'd have to check every number from 2 to sqrt(n) anyway if you were to check\
    \ every number from 2 to sqrt(n) anyway.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "  factors = []\n  factor = 1\n  while n > 1\n    factors << factor\n    factor\
    \ += 1\n    n /= factor\n  end\n  factors << factor\n  factors.uniq!\n  factors.max\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\
    \ / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n\
    \  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n /\
    \ 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while i *\
    \ i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n\
    \  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n /\
    \ 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while i *\
    \ i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n\
    \  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n /\
    \ 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while i *\
    \ i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n\
    \    i += 2\n  factors.", "  factors = []\n  factor = 1\n  while n > 1\n    factors\
    \ << factor\n    n /= factor\n    factor += 1\n  end\n  factors << factor\n  factor\n\
    end", "  primes = []\n  i = 2\n  while i * i <= n\n    primes << i\n    i += 1\n\
    \  primes.each do |prime|\n    i = 2\n    while i * i <= n\n      if n % i ==\
    \ 0\n        n /= i\n        break\n      end\n      i += 1\n    end\n  end\n\
    \  n\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    factors.push(i)\n    i += 2\n  factors.each do |factor|\n    if\
    \ n % factor == 0\n      return factor\n    end\n  end\n  return n\nend", "  primes\
    \ = prime_factors(n)\n  primes.each do |prime|\n    return prime if primes.count\
    \ > 1\n  end\n  2\nend", "  prime_divisors(n)\n  prime_divisors.max\nend", " \
    \ factors = []\n  i = 1\n  while i * i <= n\n    i += 1\n  i\n  while n % i ==\
    \ 0\n    factors << i\n    n /= i\n  factors << n\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n > 1\n    factors << factor\n    n /= factor\n\
    \    factor += 1\n  end\n  factors << factor\n  factors.max\nend\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis doesn't work for large numbers. `largest_prime_factor(2**64-1)`\
    \ returns `1`.\n<|/ c |>\n<| c |>\n: I didn't say it wouldn't, I said it wouldn't.\
    \ `2**64-1` isn't a prime number, so `largest_prime_factor` returns `1`.\n<|/\
    \ c |>\n<| c |>\nI see what you mean. My mistake.\n<|/ c |>\n<| c |>\n: No worries,\
    \ I fixed the code so it works with larger numbers.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for large numbers. `largest_prime_factor(2**64-1)` returns `1`.\n<|/ c\
    \ |>\n<| a tags=ruby,primes |>\n<code>", "  i = 2\n  factors = []\n  while i *\
    \ i <= n\n    i += 1\n    while n % i == 0\n      n /= i\n      factors << i\n\
    \    end\n  end\n  factors << n if n > 1\n  factors.max\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while n % i == 0\n    factors << i\n\
    \    n /= i\n  factors << n if n > 1\n  factors.max\nend\n</code>\n<|/ a tags=ruby,primes\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine for small numbers,\
    \ but it fails for large numbers. I tested it for n = 1000000000 and it returned\
    \ nil.\n<|/ c |>\n<| c |>\n: I tested it for n = 1000000000 and it returned nil.\
    \ Why?\n<|/ c |>\n<| c |>\n: I tested it for n = 1000000000 and it returned nil.\
    \ Why?\n<|/ c |>\n<| c |>\n: I tested it for n = 1000000000 and it returned nil.\
    \ Why?\n<|/ c |>\n<| c |>\n: I tested it for n = 1000000000 and it returned nil.\
    \ Why?\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  i = 2\n  while i * i <= n\n  \
    \  i += 1\n  i\nend", "  factors = []\n  factor = 1\n  while n > 1\n    factors\
    \ << factor\n    n /= factor\n    factor += 1\n  end\n  factors.reverse\n  factors.last\n\
    end\n</code>\n<|/ a tags=ruby,primes |>\n<| c |>\nThis doesn't work for me. `largest_prime_factor(13195)`\
    \ returns `3` instead of `29`.\n<|/ c |>\n<| c |>\n: It works for me in Ruby 1.9.3p194\
    \ (2012-04-20 revision 35410) [x86_64-darwin10.8.0]. Maybe you have a different\
    \ Ruby version?\n<|/ c |>\n<| c |>\n: I tested it on 1.9.3p194 (2012-04-20 revision\
    \ 35410) [x86_64-darwin10.8.0] and 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.7.0].\
    \ Both worked.\n<|/ c |>\n<| c |>\n: I tested it on 1.9.3p194 (2012-04-20 revision\
    \ 35410) [x86_64-darwin10.8.0] and 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.7.0].\
    \ Both worked.\n<|/ c |>\n<| c |>\n: I tested it on 1.9.3p194 (2012-04-20 revision\
    \ 35410) [x86_64-darwin10.8.0] and 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.7.0].\
    \ Both worked.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  factors = []\n  i = 2\n\
    \  while i * i <= n\n    factors.push(i)\n    i += 2\n  factors.each do |factor|\n\
    \    if n % factor == 0\n      return factor\n    end\n  end\n  return n\nend",
  "  prime_divisors = prime_divisors(n)\n  largest_prime_factor = prime_divisors.max\n\
    \  prime_divisors.delete(largest_prime_factor)\n  return largest_prime_factor\n\
    end", "  primes = prime_factors(n)\n  primes.each do |prime|\n    return prime\
    \ if prime > n\n  end\n  n\nend", "  prime_divisors = prime_factors(n)\n  prime_divisors.each\
    \ do |prime|\n    return prime if prime.is_a? Integer\n  end\n  1\nend", "  factors\
    \ = []\n  factor = 1\n  while n > 1\n    factors << factor\n    n /= factor\n\
    \    factor += 1\n  end\n  factors << factor\n  factor\nend", "  primes = prime_factors(n)\n\
    \  primes.each do |prime|\n    return prime if prime > n\n  end\n  n\nend", " \
    \ prime_divisors(n)\n  largest_prime = prime_divisors.max\n  prime_divisors.delete(largest_prime)\n\
    \  largest_prime_factor = largest_prime * prime_divisors.size\n  prime_divisors.delete(largest_prime_factor)\n\
    \  return largest_prime_factor\nend", "  factors = []\n  i = 2\n  while i * i\
    \ <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each\
    \ do |factor|\n    if n % factor == 0\n      return factor\n    end\n  end\n \
    \ return n\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n \
    \ while n % i == 0\n    factors << i\n    n /= i\n  factors << n if n > 1\n  factors.max\n\
    end", "  primes = prime_factors(n)\n  largest = primes.max\n  factors = []\n \
    \ factor = 1\n  while largest != 1 and largest != n\n    factors << largest\n\
    \    largest /= factor\n    factor += 1\n  end\n  factors << n\n  factors.uniq!\n\
    \  factors.reverse!\n  factors.first\nend", "  factors = []\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each\
    \ do |factor|\n    if n % factor == 0\n      return factor\n    end\n  end\n \
    \ nil\nend", "  factors = []\n  i = 1\n  while i * i <= n\n    i += 1\n  while\
    \ n % i == 0\n    factors << i\n    n /= i\n  factors << n\n  factors.uniq.size\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n\
    \    factors.push(i)\n    i += 2\n  factors.each do |factor|\n    if n % factor\
    \ == 0\n      return factor\n    end\n  end\n  return n\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    factors.push(i)\n    i += 2\n  factors.each\
    \ do |factor|\n    if n % factor == 0\n      return factor\n    end\n  end\n \
    \ return n\nend", "  prime_divisors(n)\n  max_prime = n.prime_divisors.max\n \
    \ max_factor = 1\n  n.prime_divisors.each do |prime|\n    if n % prime == 0\n\
    \      max_factor = prime\n    end\n  end\n  return max_factor\nend", "  prime_divisor\
    \ = 1\n  while n > prime_divisor\n    prime_divisor = prime_divisor * prime_divisor\n\
    \    n /= prime_divisor\n  end\n  n\nend", "  primes = prime_factors(n)\n  primes.each\
    \ do |prime|\n    return prime if primes.count > 1\n  end\n  return n if primes.count\
    \ == 1\n  primes.last\nend", "  i = 2\n  while i * i <= n\n    i += 1\n  i\nend",
  "  i = 2\n  factors = []\n  while i * i <= n\n    i += 1\n    factors << i\n  end\n\
    \  factors.max_by { |i| n % i }\nend\n</code>\n<|/ a tags=ruby,primes |>\n<| a\
    \ dscore=0 |>\n<code>", "  prime_divisors(n)\n  largest_divisor = divisors(n)[0]\n\
    \  largest_prime_factor = nil\n  n.times do |i|\n    if prime_divisors.include?(i)\n\
    \      largest_divisor = i\n    end\n  end\n  largest_prime_factor\nend", "  factors\
    \ = []\n  i = 1\n  while i * i <= n\n    i += 1\n  while n != 1\n    factors <<\
    \ i\n    n /= i\n    i += 1\n  factors.max\nend", "  prime_divisors(n)\n  prime_divisors.max_by\
    \ { |prime| prime > n }\nend", "  factors = []\n  i = 2\n  while i * i <= n\n\
    \    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each do\
    \ |factor|\n    if n % factor == 0\n      return factor\n    end\n  end\n  return\
    \ n\nend", "  i = 2\n  factors = []\n  while i * i <= n\n    i += 1\n    while\
    \ n % i == 0\n      n /= i\n      factors << i\n    end\n  end\n  factors << n\
    \ if n > 1\n  factors.max\nend", "  factors = []\n  i = 2\n  while i * i <= n\n\
    \    i += 1\n  while i <= n\n    factors.push(i)\n    i += 2\n  factors.each do\
    \ |factor|\n    if n % factor == 0\n      break\n    end\n  end\n  return factor\n\
    end", "  factors = []\n  i = 1\n  while i * i <= n\n    i += 1\n  factors.push(i)\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n    while i * i <= n\n      i += 1\n\
    \      factors.push(i)\n  return factors.max\nend", "  primes = prime_factors(n)\n\
    \  primes.each do |prime|\n    return prime if prime > n\n  end\n  2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
