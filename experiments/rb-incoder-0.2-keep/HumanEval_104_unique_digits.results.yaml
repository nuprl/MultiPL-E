name: HumanEval_104_unique_digits
language: ruby
results:
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like your solution, but I believe it can be simplified a bit. `x.sort!` will\
    \ sort the array in-place, which is unnecessary. Also, you don't need to convert\
    \ the array to a string before counting its characters. `x.each { |i| result <<\
    \ i unless i.to_s.chars.uniq.count % 2 == 0 }` is enough.\n<|/ c |>\n<| c |>\n\
    , thanks for the suggestions. I updated the answer accordingly.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6k_oyhe2.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxuvue0u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxuvue0u.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 297.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ < i.to_s.size\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `unique_digits([15, 33, 1422, 1])`.\n<|/ c |>\n<|\
    \ c |>\nYes, I missed that case. Thanks for pointing it out. I've updated my answer.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39sqfah_.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpseh0j4zp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpseh0j4zp.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.21 tests/s, 291.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c\
    \ |>\nThanks for your answer. Can you please explain the code a little bit more?\
    \ I didn't quite understand it.\n<|/ c |>\n<| c |>\nSure. `x.sort!` sorts the\
    \ array in ascending order. `x.each do |i|` iterates through the array and checks\
    \ if the element has any even digit. `result << i if i.to_s.chars.uniq.count !=\
    \ 1` adds the element to the result array if the condition holds.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. Can you please tell me what is the purpose\
    \ of x.sort! and x.each do |i|? I didn't quite understand it.\n<|/ c |>\n<| c\
    \ |>\n`x.sort!` sorts the array in ascending order. `x.each do |i|` iterates through\
    \ the array and checks if the element has any even digit. `result << i if i.to_s.chars.uniq.count\
    \ != 1` adds the element to the result array if the condition holds.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. Can you please tell me what is the purpose\
    \ of x.sort! and x.each do |i|? I didn't quite understand it.\n<|/ c |>\n<| a\
    \ |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyhlc9jm5.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.size == 1\n\
    \      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps7yi64e_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps7yi64e_.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.45 tests/s, 286.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n\
    </cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgil7sz_v.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</cell>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6rqr7zt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6rqr7zt.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.53 tests/s, 283.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowvs30gk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowvs30gk.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.52 tests/s, 271.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwm4qdvoo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwm4qdvoo.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.56 tests/s, 279.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp677qfm_5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp677qfm_5.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.17 tests/s, 284.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzovw67d7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzovw67d7.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.007275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.46 tests/s, 137.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,algorithm |>\n<| c\
    \ |>\nThis doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I added a test case in the answer.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added a test case in the answer.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n\
    <| a |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxnifiddq.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_so9w4r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_so9w4r.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.33 tests/s, 272.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpst_z3k7l.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9luthey8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9luthey8.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.09 tests/s, 276.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3i2f8gq7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3i2f8gq7.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.95 tests/s, 295.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.count > 1\n\
    \      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplalgugmc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplalgugmc.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.63 tests/s, 276.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work.\
    \ Try it with `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<| c |>\n: Thanks\
    \ for pointing out. I've fixed the code now.\n<|/ c |>\n<| c |>\n: Thanks for\
    \ pointing out. I've fixed the code now.\n<|/ c |>\n<| c |>\n: Thanks for pointing\
    \ out. I've fixed the code now.\n<|/ c |>\n<| c |>\n: Thanks for pointing out.\
    \ I've fixed the code now.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyus7z82m.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7q79f0ep\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7q79f0ep.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.66 tests/s, 280.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvht11z2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvht11z2.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.21 tests/s, 291.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.map(&:to_i).uniq.count\
    \ == 1\n      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprpef604l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprpef604l.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.28 tests/s, 306.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdakh8gts\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdakh8gts.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.00514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.55 tests/s, 194.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68dgt3lu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68dgt3lu.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.067174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    14.89 tests/s, 14.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau1wh_7_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau1wh_7_.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.009999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.01 tests/s, 100.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqu8ugk2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqu8ugk2.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.0037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.27 tests/s, 270.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x % 2 == 0\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hbh2zmh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hbh2zmh.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1422]>\n\ndiff:\n? [1, 15, 33]\n?   422      \n?   ????????\
    \      \n===============================================================================\n\
    \nFinished in 0.003277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.16 tests/s, 305.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp07ytj4e7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp07ytj4e7.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.14 tests/s, 281.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dhiavvn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dhiavvn.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.98 tests/s, 280.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffxsxsnx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffxsxsnx.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003431 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.46 tests/s, 291.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1kwrfh23\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1kwrfh23.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.37 tests/s, 283.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis\
    \ doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case in the answer.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I added the test case in the answer.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I added the test case in the answer.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test case in the answer.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp55m62nej.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.map(&:to_i).uniq.count\
    \ == 1\n      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4gsnad8s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4gsnad8s.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.31 tests/s, 266.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\n</cell>\n<cell>\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1v6_0x8.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</cell>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdvfbufwg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdvfbufwg.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.02464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.58 tests/s, 40.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gxyw7wc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gxyw7wc.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.004052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.79 tests/s, 246.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.size == 1\n\
    \      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12heej9k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12heej9k.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.004899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.12 tests/s, 204.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ != i.to_s.chars.size\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgdqpamu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgdqpamu.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.52 tests/s, 234.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qtrjsep\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qtrjsep.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.95 tests/s, 274.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq5pwz3c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq5pwz3c.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.004373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.68 tests/s, 228.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl28kut9x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl28kut9x.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.014736 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.86 tests/s, 67.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpwkj9ca\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpwkj9ca.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003583 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.10 tests/s, 279.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.count ==\
    \ 1\n      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpllmn1nda\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpllmn1nda.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.16 tests/s, 277.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsd3rvso4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsd3rvso4.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.24 tests/s, 246.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1eqn5ox0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1eqn5ox0.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.067898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    14.73 tests/s, 14.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0fhotuk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw0fhotuk.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.12 tests/s, 286.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdyjmmkz_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdyjmmkz_.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.19 tests/s, 249.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qu71c1b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qu71c1b.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.21 tests/s, 238.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprsalbfx0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprsalbfx0.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.006763 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.86 tests/s, 147.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6hg7cdk1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6hg7cdk1.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.04 tests/s, 238.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1brmyiar\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1brmyiar.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.004427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.89 tests/s, 225.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohov6qq1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohov6qq1.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.004892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.42 tests/s, 204.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 1\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vg21j4i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vg21j4i.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.010446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.73 tests/s, 95.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir6pdc8p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir6pdc8p.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.74 tests/s, 284.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzjv59iur\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzjv59iur.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.03 tests/s, 300.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr56ug1kn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr56ug1kn.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.55 tests/s, 243.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lim3lmu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lim3lmu.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.32 tests/s, 269.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2zz_ffo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2zz_ffo.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 292.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfegh5ia5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfegh5ia5.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.98 tests/s, 284.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2p_ovcae\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2p_ovcae.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.91 tests/s, 296.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8w1404f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8w1404f.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.005135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.74 tests/s, 194.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjw7kc8bc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjw7kc8bc.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.19 tests/s, 287.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpip9xuhme\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpip9xuhme.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.00 tests/s, 297.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot69uek4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot69uek4.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.03 tests/s, 287.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qkss6ae\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qkss6ae.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.10 tests/s, 275.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvofr45z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvofr45z.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    257.47 tests/s, 257.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpbcy44k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpbcy44k.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.35 tests/s, 280.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95_2eljp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95_2eljp.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.010371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.42 tests/s, 96.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wc2ct0q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wc2ct0q.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.49 tests/s, 282.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ < i.to_s.chars.size\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuwfd3th\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuwfd3th.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.061569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.24 tests/s, 16.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47nvxi_b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47nvxi_b.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.027672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.14 tests/s, 36.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl0gb98o7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl0gb98o7.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.006498 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.89 tests/s, 153.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,arrays,algorithm\
    \ |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd730k6t.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3qeu5ru.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19dlwx0o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19dlwx0o.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.005869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.39 tests/s, 170.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodjc1cgb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodjc1cgb.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 290.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.size != 1\n\
    \      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzy6ry6d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzy6ry6d.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.004137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.72 tests/s, 241.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2f10n3t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2f10n3t.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.80 tests/s, 274.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtrggyr9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtrggyr9.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.005955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.93 tests/s, 167.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkxx5xpu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkxx5xpu.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.33 tests/s, 282.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/\
    \ c |>\n<| c |>\nThanks for pointing out. I've updated the answer.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n\
    <| c |>\nThanks for pointing out. I've updated the answer.\n<|/ c |>\n<| c |>\n\
    This doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<| a tags=ruby,algorithm\
    \ |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb84g8n0z.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x % 10 == 0\n \
    \ end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81is1awb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81is1awb.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.044701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.37 tests/s, 22.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsp3zmwrv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsp3zmwrv.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.17 tests/s, 284.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_i_hp9m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_i_hp9m.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.00399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.63 tests/s, 250.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ < i.to_s.size\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw22bywbt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw22bywbt.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.008696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.00 tests/s, 115.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgaoa51f0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgaoa51f0.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.78 tests/s, 272.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp190aonar\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp190aonar.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.26 tests/s, 160.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8yepuqe1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8yepuqe1.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.005896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.61 tests/s, 169.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try\
    \ it with `unique_digits([15, 33, 1422, 1])`.\n<|/ c |>\n<| c |>\n: I tested it\
    \ and it works. I added the test case in the answer. Can you please give me the\
    \ test case where it doesn't work?\n<|/ c |>\n<| c |>\n: I added the test case\
    \ in the answer. Can you please give me the test case where it doesn't work?\n\
    <|/ c |>\n<| c |>\n: I added the test case in the answer. Can you please give\
    \ me the test case where it doesn't work?\n<|/ c |>\n<| c |>\n: I added the test\
    \ case in the answer. Can you please give me the test case where it doesn't work?\n\
    <|/ c |>\n<| a tags=ruby,arrays,algorithm |>\n<code>\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp07mx1m8d.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case in the answer. Can you please check it\
    \ again?\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test case in\
    \ the answer. Can you please check it again?\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I added the test case in the answer. Can you please check it again?\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\
    \ Can you please check it again?\n<|/ c |>\n<| a tags=ruby |>\n<code>\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3gjju1h.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count ==\
    \ 1\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5pfu3s4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5pfu3s4.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003787 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.06 tests/s, 264.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2y2mi6jp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2y2mi6jp.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.20 tests/s, 286.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprftx19w0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprftx19w0.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.01 tests/s, 277.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm4ebffyr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm4ebffyr.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.01 tests/s, 242.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x % 2 == 0\n  end\n\
    \  result\nend\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<cell>\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvz2kfyna.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</cell>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `unique_digits([15, 33, 1422, 1])`.\n<|/ c |>\n<| c |>\nYes,\
    \ I forgot to add `x.sort!` before `x.each`. Thanks for pointing out.\n<|/ c |>\n\
    <| a |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvzs_8wbz.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppsk5vcij\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppsk5vcij.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.21 tests/s, 283.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</cell>\n<cell>\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_hvb5iz.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</cell>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasvp5_ar\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasvp5_ar.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.86 tests/s, 286.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5q3yx8s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5q3yx8s.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.022355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.73 tests/s, 44.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfckd9l98\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfckd9l98.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.03 tests/s, 294.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5t7jkliy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5t7jkliy.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.60 tests/s, 288.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4p52w8t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4p52w8t.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.55 tests/s, 285.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tchex3n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tchex3n.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.010592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.41 tests/s, 94.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cq74egd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cq74egd.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.016535 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.48 tests/s, 60.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplo1gkd03\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplo1gkd03.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.004038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.65 tests/s, 247.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4gv0ofrn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4gv0ofrn.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.06 tests/s, 298.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like this solution, but I wonder if it would be faster to sort the array first\
    \ (O(n log n) instead of O(n))\n<|/ c |>\n<| c |>\nI agree with you, sorting is\
    \ O(n log n). But in this case I believe that sorting is unnecessary because we\
    \ only need to know if an element has even digit.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I wonder if it would be faster to sort the array first (O(n log\
    \ n) instead of O(n))\n<|/ c |>\n<| c |>\nI agree with you, but I wonder if it\
    \ would be faster to sort the array first (O(n log n) instead of O(n))\n<|/ c\
    \ |>\n<| c |>\nI agree with you, but I wonder if it would be faster to sort the\
    \ array first (O(n log n) instead of O(n))\n<|/ c |>\n<| a tags=ruby,arrays |>\n\
    <code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy67ntki3.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x unless x.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfxyjbx2j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfxyjbx2j.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.007885 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.82 tests/s, 126.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</cell>\n<cell>\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb86s4_hs.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</cell>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9k95l8r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9k95l8r.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.004525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.99 tests/s, 220.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8veq2543\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8veq2543.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 278.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjzyf976\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjzyf976.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.44 tests/s, 290.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n\
    <code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyt18nh6.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ < i.to_s.size\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcd_src38\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcd_src38.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.70 tests/s, 231.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x % 10 == 0\n \
    \ end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp82en_fpx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp82en_fpx.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.53 tests/s, 265.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.count\
    \ == 1\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3qra0y2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3qra0y2.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.051445 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    19.44 tests/s, 19.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp79sqg479\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp79sqg479.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 292.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu45e1dyr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu45e1dyr.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.99 tests/s, 110.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdw63s_su\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdw63s_su.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.82 tests/s, 182.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8bxp_8r9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8bxp_8r9.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.37 tests/s, 281.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5yjilp3x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5yjilp3x.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.076538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    13.07 tests/s, 13.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vciji1t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vciji1t.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.015717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.63 tests/s, 63.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4s3alp1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4s3alp1.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.005601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.54 tests/s, 178.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh_qye3_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh_qye3_.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.006205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.16 tests/s, 161.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprr7ru1qb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprr7ru1qb.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.045688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.89 tests/s, 21.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjg59n0um\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjg59n0um.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.012579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.50 tests/s, 79.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ != i.to_s.chars.size && i.to_s.chars.uniq.size != 0\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpln8pk2b9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpln8pk2b9.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.02 tests/s, 267.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ != i.to_s.chars.length\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1p1ks63\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1p1ks63.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.38 tests/s, 215.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbmxqx0f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbmxqx0f.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.053582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    18.66 tests/s, 18.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam0dcvfq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam0dcvfq.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.80 tests/s, 274.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8a3hihtk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8a3hihtk.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.95 tests/s, 290.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxrief1lz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxrief1lz.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.77 tests/s, 295.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpll3fc96h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpll3fc96h.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.021237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.09 tests/s, 47.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\n</cell>\n<cell>\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrc9yzyp.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</cell>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj53z1mxh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj53z1mxh.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.38 tests/s, 267.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktjkhcvk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktjkhcvk.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.00355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.69 tests/s, 281.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_nb88pw0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_nb88pw0.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.81 tests/s, 267.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjs9rub7_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjs9rub7_.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.15 tests/s, 271.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a tags=ruby,arrays\
    \ |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bkb9zev.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x % 2 == 0\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn3226fw5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn3226fw5.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1422]>\n\ndiff:\n? [1, 15, 33]\n?   422      \n?   ????????\
    \      \n===============================================================================\n\
    \nFinished in 0.003527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.53 tests/s, 283.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjm2zv3a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjm2zv3a.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.72 tests/s, 279.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsa77dg9k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsa77dg9k.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 292.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvzkzrdac\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvzkzrdac.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.40 tests/s, 276.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8sh5fun1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8sh5fun1.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.82 tests/s, 280.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\n</code>\n<|/ a |>\n<| c |>\nI like this solution.\
    \ Very concise. Thanks!\n<|/ c |>\n<| c |>\nThis solution doesn't work if you\
    \ have a list like `[1,2,3]`\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require the list to be sorted.\n<|/ c |>\n<| a tags=ruby,arrays,sorting |>\n\
    <code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8698f4o_.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ > 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmih89vm0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmih89vm0.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.018541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.93 tests/s, 53.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5pkg6gcs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5pkg6gcs.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.00476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.08 tests/s, 210.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.length\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7hozjb1k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7hozjb1k.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.66 tests/s, 284.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsireo0s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsireo0s.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.006052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.23 tests/s, 165.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68tvfhj5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68tvfhj5.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.86 tests/s, 270.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.count !=\
    \ 0\n      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2gvnewd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2gvnewd.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.007584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.86 tests/s, 131.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkrs58us6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkrs58us6.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.0036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.78 tests/s, 277.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8lpadqj8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8lpadqj8.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.040398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.75 tests/s, 24.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelkxddze\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelkxddze.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.006511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.59 tests/s, 153.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n\
    <| c |>\nThanks for your answer. Your solution works well for small arrays, but\
    \ for large arrays it takes too much time. My array is of size 10^6 and it takes\
    \ more than a minute to execute.\n<|/ c |>\n<| c |>\nI added a solution that uses\
    \ `uniq` instead of `sort`, which should speed things up considerably.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. Your solution works well for small arrays,\
    \ but for large arrays it takes too much time. My array is of size 10^6 and it\
    \ takes more than a minute to execute.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses `uniq` instead of `sort`, which should speed things up considerably.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf15swar5.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpecfjk9w8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpecfjk9w8.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.009196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.74 tests/s, 108.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7s57dsq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7s57dsq.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.58 tests/s, 284.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce4imb1j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce4imb1j.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.024444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.91 tests/s, 40.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqbaxxdv2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqbaxxdv2.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.30 tests/s, 273.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr8ypoxr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr8ypoxr.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.004841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.57 tests/s, 206.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp58v90cfy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp58v90cfy.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.006526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.23 tests/s, 153.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp290b3pwn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp290b3pwn.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.108057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    9.25 tests/s, 9.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpriuycx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpriuycx.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.007773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.65 tests/s, 128.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i % 2 == 0\n      result <<\
    \ i\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q3n3fe_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q3n3fe_.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1422]>\n\ndiff:\n? [1, 15, 33]\n?   422      \n?   ????????\
    \      \n===============================================================================\n\
    \nFinished in 0.003516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.41 tests/s, 284.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vsn4odl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vsn4odl.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.37 tests/s, 117.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_o9d4ks2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_o9d4ks2.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.009664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.48 tests/s, 103.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ != i.to_s.chars.size\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0xkjxj8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0xkjxj8.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.012322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.16 tests/s, 81.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ < i.to_s.chars.size\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_dyq628\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_dyq628.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.007156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.74 tests/s, 139.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjun0zw_d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjun0zw_d.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.005061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.59 tests/s, 197.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5pt6j3rh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5pt6j3rh.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003922 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.97 tests/s, 254.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptp69qty_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptp69qty_.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.21 tests/s, 260.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajarfwk7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajarfwk7.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.22 tests/s, 186.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count ==\
    \ 1\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgb58nzg9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgb58nzg9.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.008286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.69 tests/s, 120.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp026emhwy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp026emhwy.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.004576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.53 tests/s, 218.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi1simptz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi1simptz.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.10 tests/s, 268.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n      result << i\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdn_0ggka\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdn_0ggka.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.026538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.68 tests/s, 37.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ != i.to_s.chars.size\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nThis doesn't work. `unique_digits([15, 33, 1422, 1])` returns `[1,\
    \ 15, 33]`, not `[1, 15, 33, 1422]`.\n<|/ c |>\n<| c |>\n, you're right, I missed\
    \ that requirement. I've updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa24biz7g.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count > 1\n\
    \      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5209chnp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5209chnp.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.94 tests/s, 275.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis\
    \ solution doesn't work for negative numbers. For example, `unique_digits([-1,\
    \ -15, -33])` returns `[-1, -33]`.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ works for negative numbers. Please take a look.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that works for negative numbers. Please take a look.\n<|/ c |>\n\
    <| c |>\nI added a solution that works for negative numbers. Please take a look.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkaab2ped.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo96200is\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo96200is.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.01 tests/s, 276.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc552etd6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc552etd6.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.25 tests/s, 279.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x % 2 == 0\n      result <<\
    \ x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4jxlv9y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4jxlv9y.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1422]>\n\ndiff:\n? [1, 15, 33]\n?   422      \n?   ????????\
    \      \n===============================================================================\n\
    \nFinished in 0.021306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.94 tests/s, 46.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki6q0spm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki6q0spm.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.005792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.65 tests/s, 172.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgia8u5r3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgia8u5r3.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.005723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.73 tests/s, 174.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdegnc3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdegnc3.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003992 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.50 tests/s, 250.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.length\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyza9v514\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyza9v514.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 278.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8anab98l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8anab98l.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.009596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.21 tests/s, 104.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n`x.sort!`\
    \ will mutate the array in-place. `x.sort!(&:itself)` will create a new array\
    \ and leave the original untouched.\n<|/ c |>\n<| c |>\nYes, you are right. I\
    \ just wanted to show that `sort!` will mutate the array in-place and `sort!(&:itself)`\
    \ will create a new array and leave the original untouched.\n<|/ c |>\n<| c |>\n\
    `x.sort!(&:itself)` will create a new array and leave the original untouched.\n\
    <|/ c |>\n<| c |>\n`x.sort!(&:itself)` will create a new array and leave the original\
    \ untouched.\n<|/ c |>\n<| c |>\n`x.sort!(&:itself)` will create a new array and\
    \ leave the original untouched.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxoh8eqco.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyanx9l_p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyanx9l_p.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.038629 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.89 tests/s, 25.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mhns79e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mhns79e.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.006787 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.34 tests/s, 147.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1rs5y6om\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1rs5y6om.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.006253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.92 tests/s, 159.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,arrays\
    \ |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7hwfxzrr.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiphss3jx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiphss3jx.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.18 tests/s, 297.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.size <= 1\n\
    \      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6q1wjq5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6q1wjq5.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.00345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.86 tests/s, 289.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count !=\
    \ 0\n      result << x\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjssi81yj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjssi81yj.rb:23:in\
    \ `test_unique_digits'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_unique_digits\n     22:     candidate = method(:unique_digits)\n\
    \  => 23:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    24:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     25:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 26:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n? [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.003704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.98 tests/s, 269.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays,sorting |>\n\
    <| c |>\nI like your solution, but I believe that `x.sort!` should be `x.sort`.\
    \ `sort!` modifies the array in place, while `sort` returns a new array.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. Thanks for pointing out. I've updated my\
    \ answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr0zl45a6.rb:17: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpveddckfd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpveddckfd.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003741 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.31 tests/s, 267.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptb0goi08\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptb0goi08.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[15, 1422]>\n\ndiff:\n? [1, 15, 33  ]\n?         1422 \n\
    ?  ---    ?? \n===============================================================================\n\
    \nFinished in 0.003367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.00 tests/s, 297.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n\
    \  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1i79ya9n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1i79ya9n.rb:21:in\
    \ `test_unique_digits'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_unique_digits\n     20:     candidate = method(:unique_digits)\n\
    \  => 21:     assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n \
    \    22:     assert_equal([], candidate.call([152, 323, 1422, 10]))\n     23:\
    \     assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    \
    \ 24:     assert_equal([31, 135], candidate.call([135, 103, 31]))\n<[1, 15, 33]>\
    \ expected but was\n<[1, 33]>\n\ndiff:\n? [1, 15, 33]\n===============================================================================\n\
    \nFinished in 0.003148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.66 tests/s, 317.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
