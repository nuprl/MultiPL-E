name: HumanEval_25_factorize
language: ruby
prompt: "# Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n# Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n# Input number should be equal\
  \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
  # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
  \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
  \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
  \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
  \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
  \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
  \ 3, 3], candidate.call(18))\n  end\nend\n"
completions: ["  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n   \
    \ factors << factor\n    n /= factor\n  end\n  factors << factor\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors <<\
    \ i\n    i += 1\n  end\n  factors.uniq!\n  factors\nend", "  factors = []\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors << i\n    i\
    \ += 1\n  factors.uniq!\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\
    \ << factor\n  factors\nend", "  factors = []\n  factor = 1\n  while n > 1\n \
    \   if n % factor == 0\n      factors << factor\n      n /= factor\n    else\n\
    \      factor += 1\n    end\n  end\n  factors << n\n  return factors\nend", " \
    \ factors = []\n  factor = 1\n  while n > 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while i <= n\n    factors << i\n    i += 1\n  factors.uniq!\n\
    \  factors\nend", "  factors = []\n  factor = 1\n  while n > 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "    factors = []\n    i = 2\n    while\
    \ i * i <= n\n        if n % i == 0\n            i += 1\n            factors <<\
    \ i\n            n /= i\n        end\n    end\n    factors << n if n != 1\n  \
    \  return factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors << factor\n \
    \ factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n > 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factorization = factor(n)\n  factorization.each do |factor|\n\
    \    factors << factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n\
    \  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n\
    \  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors << factor\n  factors\n\
    end", "    factors = []\n    i = 2\n    while i * i <= n\n        i += 1\n   \
    \ while i <= sqrt(n)\n        if n % i == 0\n            factors << i\n      \
    \      n /= i\n        i += 1\n    if n > 1\n        factors << n\n    end\n \
    \   return factors\nend", "  factors = []\n  factor = 1\n  while n > 1\n    factor\
    \ *= n\n    n /= factor\n    factors << factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factorization = factor(n)\n  factorization.each do |factor|\n    factors\
    \ << factor\n  end\n  factors\nend", "  factors = []\n  factorization = factor(n)\n\
    \  factorization.each do |factor|\n    factors << factor\n    factors << factor\
    \ * factor\n  end\n  factors\nend", "  factors = []\n  factorization = factor(n)\n\
    \  factorization.each do |factor|\n    factors << factor\n    factors << factors[factors.index(factor)\
    \ + 1] if factors.index(factor) + 1 < factors.length\n  end\n  return factors\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while n >= i\n\
    \    factors << i\n    n /= i\n    i += 1\n  factors << n if n > 0\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors << factor\n \
    \ factors\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    factors << i\n    i += 1\n  factors.uniq!\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors << factor\n  factors\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while n != 1\n    if n % i == 0\n\
    \      factors << i\n      n /= i\n    end\n    i += 1\n  end\n  factors << n\n\
    \  return factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    if\
    \ n % factor == 0\n      factors << factor\n      n /= factor\n    else\n    \
    \  factor += 1\n    end\n  end\n  factors << n\n  factors\nend", "  factors =\
    \ []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n \
    \   n /= factor\n  end\n  factors << factor\n  factors\nend", "  factors = []\n\
    \  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /=\
    \ factor\n  end\n  factors << factor\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n > 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors << n\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    if n % factor == 0\n \
    \     factors << factor\n      n /= factor\n    else\n      factor += 1\n    end\n\
    \  end\n  factors << n\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factorization = factor(n)\n  factors.push factorization[0]\n\
    \  factors.push factorization[1]\n  factors.push factorization[2]\n  factors.push\
    \ factorization[3]\n  factors.push factorization[4]\n  factors.push factorization[5]\n\
    \  factors.push factorization[6]\n  factors.push factorization[7]\n  return factors\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    if n % factor == 0\n \
    \     factors << factor\n      n /= factor\n    else\n      factor += 1\n    end\n\
    \  end\n  factors << n if n > 1\n  factors\nend", "  factors = []\n  factorization\
    \ = factor(n)\n  factorization = factorization.to_a\n  factorization.each do |factor|\n\
    \    factors << factor\n    factors << factors[factors.length-1].to_i\n  end\n\
    \  return factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ = 1\n    factors.push factor\n    while n % factor == 0\n      factor = factor\
    \ * 2\n      factors.push factor\n      n /= factor\n  end\n  factors.push n\n\
    \  factors\nend", "  factors = []\n  factor = 1\n  while n > 1\n    if n % factor\
    \ == 0\n      factors << factor\n      n /= factor\n    else\n      factor +=\
    \ 1\n    end\n  end\n  factors << n\n  return factors\nend", "  factors = []\n\
    \  factor = 1\n  while n > 1\n    factor *= n\n    factors << factor\n    n /=\
    \ factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n !=\
    \ 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors << factor\n \
    \ factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factorization = factor(n)\n  factors.push factorization[0]\n  factors.push\
    \ factorization[1]\n  factors.push factorization[2]\n  factors.push factorization[3]\n\
    \  factors.push factorization[4]\n  factors.push factorization[5]\n  factors.push\
    \ factorization[6]\n  factors.push factorization[7]\n  factors.push factorization[8]\n\
    \  factors.push factorization[9]\n  factors.push factorization[10]\n  factors.push\
    \ factorization[11]\n  factors.push factorization[12]\n  factors.push factorization[13]\n\
    \  factors.push factorization[14]\n  factors.push factorization[15]\n  factors.push\
    \ factorization[16]\n  factors.push factorization[17]\n  factors.push factorization[18]\n\
    \  factors.push factorization[19]\n  factors.push factorization[20]\n  factors.push\
    \ factorization[21]\n  factors.push factorization[22]\n  factors.push factorization[23]\n\
    \  factors.push factorization[24]\n  factors.push factorization[25]\n  factors.push\
    \ factorization[26]\n  factors.push factorization[27]\n  factors.push factorization[28]\n\
    \  factors.push factorization[29]\n  factors.push factorization[30]\n  factors.push\
    \ factorization[31]\n  factors.push factorization[32]\n  factors.push factorization[33]\n\
    \  factors.push factorization[34]\n  factors.push factorization[35]\n  factors.push\
    \ factorization[36]\n  factors.push factorization[37]\n  factors.push factorization[38]\n\
    \  factors.push factorization[39]\n  factors.push factorization[40]\n  factors.push\
    \ factorization[41]\n  factors.push factorization[42]\n  factors.push factorization[43]\n\
    \  factors.push factorization[44]\n  factors.push factorization[45]\n  factors.push\
    \ factorization[46]\n  factors.push factorization[47]\n  factors.push factorization[48]\n\
    \  factors.push factorization[49]\n  factors.push factorization[50]\n  factors.push\
    \ factorization[51]\n  factors.push factorization[5", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    if n % factor == 0\n      factors <<\
    \ factor\n      n /= factor\n    else\n      factor += 1\n    end\n  end\n  factors\
    \ << n\n  return factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n\
    \    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend",
  "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors\
    \ << i\n    i += 1\n  factors.uniq!\n  factors\nend", "  factors = []\n  i = 2\n\
    \  while i * i <= n\n    i += 1\n  while i <= n\n    factors << i\n    i += 1\n\
    \  factors.uniq!\n  factors\nend", "  factors = []\n  factor = 1\n  while n >\
    \ 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factorization = factor(n)\n  factors.push factorization[0]\n\
    \  factors.push factorization[1]\n  factors.push factorization[2]\n  factors.push\
    \ factorization[3]\n  factors.push factorization[4]\n  factors.push factorization[5]\n\
    \  factors.push factorization[6]\n  factors.push factorization[7]\n  factors.push\
    \ factorization[8]\n  factors.push factorization[9]\n  factors.push factorization[10]\n\
    \  factors.push factorization[11]\n  factors.push factorization[12]\n  factors.push\
    \ factorization[13]\n  factors.push factorization[14]\n  factors.push factorization[15]\n\
    \  factors.push factorization[16]\n  factors.push factorization[17]\n  factors.push\
    \ factorization[18]\n  factors.push factorization[19]\n  factors.push factorization[20]\n\
    \  factors.push factorization[21]\n  factors.push factorization[22]\n  factors.push\
    \ factorization[23]\n  factors.push factorization[24]\n  factors.push factorization[25]\n\
    \  factors.push factorization[26]\n  factors.push factorization[27]\n  factors.push\
    \ factorization[28]\n  factors.push factorization[29]\n  factors.push factorization[30]\n\
    \  factors.push factorization[31]\n  factors.push factorization[32]\n  factors.push\
    \ factorization[33]\n  factors.push factorization[34]\n  factors.push factorization[35]\n\
    \  factors.push factorization[36]\n  factors.push factorization[37]\n  factors.push\
    \ factorization[38]\n  factors.push factorization[39]\n  factors.push factorization[40]\n\
    \  factors.push factorization[41]\n  factors.push factorization[42]\n  factors.push\
    \ factorization[43]\n  factors.push factorization[44]\n  factors.push factorization[45]\n\
    \  factors.push factorization[46]\n  factors.push factorization[47]\n  factors.push\
    \ factorization[48]\n  factors.push factorization[49]\n  factors.push factorization[50]\n\
    \  factors.push factorization[51]\n  factors.push factorization[5", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    factor += 1\n    n /=\
    \ factor\n    factors << factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n > 1\n    factor += 1\n    while n % factor == 0\n      n /= factor\n\
    \      factors << factor\n    end\n  end\n  factors << n\n  factors\nend", " \
    \ factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors\
    \ << i\n    i += 1\n  factors.uniq!\n  factors\nend", "  factors = []\n  i = 2\n\
    \  while i * i <= n\n    i += 1\n  while i <= n\n    factors << i\n    i += 1\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors << factor\n \
    \ factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors << factor\n  factors\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    factors.push(i)\n    i\
    \ += 1\n  factors.reverse\n  factors.each_with_index do |f, i|\n    factors.delete_at(i)\n\
    \    factors.push f\n  end\n  factors\nend", "  factors = []\n  factor = 1\n \
    \ while n > 1\n    if n % factor == 0\n      factors << factor\n      n /= factor\n\
    \    else\n      factor += 1\n    end\n  end\n  factors << n if n > 1\n  factors\n\
    end", "    factors = []\n    i = 2\n    while i * i <= n\n        i += 1\n   \
    \ while i <= sqrt(n)\n        if n % i == 0\n            factors << i\n      \
    \      n /= i\n        else\n            i += 1\n    factors << n\n    return\
    \ factors\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n\n    factors << i\n    i += 1\n  factors.uniq!\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n > 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factorization = factor(n)\n\
    \  factorization.each do |factor|\n    factors << factor\n  end\n  factors\nend",
  "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n > 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i +=\
    \ 1\n  while i <= n\n    factors << i\n    i += 1\n  factors.uniq!\n  factors\n\
    end", "  factors = []\n  factorization = factor(n)\n  factorization.reverse!\n\
    \  factorization.each do |factor|\n    factors << factor if factors.count(factor)\
    \ == factorization.count(factor)\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n > 1\n    if n % factor == 0\n      factors << factor\n      n\
    \ /= factor\n    else\n      factor += 1\n    end\n  end\n  factors << n if n\
    \ > 1\n  factors\nend", "    factors = []\n    i = 2\n    while i * i <= n\n \
    \       i += 1\n    while i <= n\n        if n % i == 0\n            factors <<\
    \ i\n            n /= i\n        i += 1\n    factors << n\n    return factors\n\
    end", "    factors = []\n    i = 2\n    while i * i <= n\n        i += 1\n   \
    \ while i <= sqrt(n)\n        if n % i == 0\n            factors << i\n      \
    \      n /= i\n        else\n            i += 1\n    end\n    factors << n\n \
    \   return factors\nend", "  factors = []\n  factorization = factor(n)\n  factors.push\
    \ factorization[0]\n  factors.push factorization[1]\n  factors.push factorization[2]\n\
    \  factors.push factorization[3]\n  factors.push factorization[4]\n  factors.push\
    \ factorization[5]\n  factors.push factorization[6]\n  factors.push factorization[7]\n\
    \  factors.push factorization[8]\n  factors.push factorization[9]\n  factors.push\
    \ factorization[10]\n  factors.push factorization[11]\n  factors.push factorization[12]\n\
    \  factors.push factorization[13]\n  factors.push factorization[14]\n  factors.push\
    \ factorization[15]\n  factors.push factorization[16]\n  factors.push factorization[17]\n\
    \  factors.push factorization[18]\n  factors.push factorization[19]\n  factors.push\
    \ factorization[20]\n  factors.push factorization[21]\n  factors.push factorization[22]\n\
    \  factors.push factorization[23]\n  factors.push factorization[24]\n  factors.push\
    \ factorization[25]\n  factors.push factorization[26]\n  factors.push factorization[27]\n\
    \  factors.push factorization[28]\n  factors.push factorization[29]\n  factors.push\
    \ factorization[30]\n  factors.push factorization[31]\n  factors.push factorization[32]\n\
    \  factors.push factorization[33]\n  factors.push factorization[34]\n  factors.push\
    \ factorization[35]\n  factors.push factorization[36]\n  factors.push factorization[37]\n\
    \  factors.push factorization[38]\n  factors.push factorization[39]\n  factors.push\
    \ factorization[40]\n  factors.push factorization[41]\n  factors.push factorization[42]\n\
    \  factors.push factorization[43]\n  factors.push factorization[44]\n  factors.push\
    \ factorization[45]\n  factors.push factorization[46]\n  factors.push factorization[47]\n\
    \  factors.push factorization[48]\n  factors.push factorization[49]\n  factors.push\
    \ factorization[50]\n  factors.push factorization[51]\n  factors.push factorization[5",
  "    factors = []\n    i = 2\n    while i * i <= n\n        i += 1\n    while i\
    \ <= sqrt(n)\n        if n % i == 0\n            factors << i\n            n /=\
    \ i\n        i += 1\n    factors << n\n    return factors\nend", "    factors\
    \ = []\n    i = 2\n    while i * i <= n\n        i += 1\n    while i <= n\n  \
    \      factors << i\n        i += 1\n    return factors\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push i\n\
    \    i += 1\n  factors.push n\n  factors.uniq!\n  factors\nend", "  factors =\
    \ []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n \
    \   n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    factor += 1\n    n /=\
    \ factor\n    factors << factor\n  end\n  factors\nend", "  factors = []\n  factorization\
    \ = factor(n)\n  factorization.each do |factor|\n    factors << factor\n    factors.count(factor)\
    \ += 1\n  end\n  factors\nend", "  factors = []\n  factorization = factor(n)\n\
    \  factorization.each do |factor|\n    factors << factor\n  end\n  factors\nend",
  "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors\
    \ << i\n    i += 1\n  factors.uniq!\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n > 1\n    factor\
    \ = 2\n    while n % factor == 0\n      factor = factor\n      n /= factor\n \
    \   factors << factor\n  end\n  factors\nend", "  factors = []\n  factorization\
    \ = factor(n)\n  factorization.each do |factor|\n    factors << factor\n    factors\
    \ << factors[factors.index(factor)].to_i + 1\n  end\n  factors\nend", "    factors\
    \ = []\n    i = 2\n    while i * i <= n\n        i += 1\n    while i <= sqrt(n)\n\
    \        if n % i == 0\n            factors << i\n            n /= i\n       \
    \ i += 1\n    factors << n\n    return factors\nend\n</code>\n<|/ a tags=ruby,primes\
    \ |>\n<| a tags=ruby,primes |>\n<code>", "  factors = []\n  factor = 1\n  while\
    \ n > 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factorization = factor(n)\n  factorization.each do |factor|\n\
    \    factors << factor\n    factors << factors[factors.index(factor)].to_i if\
    \ factors.index(factor) != factors.size - 1\n  end\n  factors\nend", "    factors\
    \ = []\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            factors\
    \ << i\n            n /= i\n        else\n            i += 1\n    end\n    factors\
    \ << n if n > 1\n    return factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n > 1\n    factor += 1\n    n /= factor\n    factors << factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i +=\
    \ 1\n  while n >= i\n    factors << i\n    n /= i\n    i += 1\n  factors << n\
    \ if n != 1\n  factors\nend", "    factors = []\n    i = 2\n    while i * i <=\
    \ n\n        i += 1\n    while i <= sqrt(n)\n        if n % i == 0\n         \
    \   factors << i\n            n /= i\n        end\n        i += 1\n    factors\
    \ << n\n    return factors\nend", "  factors = []\n  factor = 1\n  while n !=\
    \ 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "    factors = []\n    i = 2\n    while i * i <= n\n        i += 1\n   \
    \ while i <= n\n        factors << i\n        i += 1\n    end\n    factors\nend",
  "  factors = []\n  factor = 1\n  while n > 1\n    factor = factor * n\n    n /=\
    \ factor\n    factors << factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "    factors = []\n    i = 2\n    while\
    \ i * i <= n\n        i += 1\n    while i <= sqrt(n)\n        if n % i == 0\n\
    \            factors << i\n            n /= i\n        i += 1\n    factors <<\
    \ n\n    return factors\nend", "  factors = []\n  factor = 1\n  while n > 1\n\
    \    if n % factor == 0\n      factors << factor\n      n /= factor\n    else\n\
    \      factor += 1\n    end\n  end\n  factors << n if n > 1\n  factors\nend",
  "  factors = []\n  factor = 1\n  while n > 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    if n % factor == 0\n      factors << factor\n      n /= factor\n\
    \    else\n      factor += 1\n    end\n  end\n  factors << n\n  factors\nend",
  "    factors = []\n    i = 2\n    while i * i <= n\n        i += 1\n    while i\
    \ <= sqrt(n)\n        if n % i == 0\n            factors << i\n            n /=\
    \ i\n        i += 1\n    if n > 0\n        factors << n\n    return factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n > 1\n    factor = 2\n    while n % factor == 0\n      factor\
    \ = factor\n      n /= factor\n    factors << factor\n  end\n  factors\nend",
  "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while i <= n\n    factors << i\n    i += 1\n  factors.uniq!\n\
    \  factors\nend", "  factors = []\n  factor = 1\n  while n > 1\n    factor *=\
    \ n\n    n /= factor\n    factors << factor\n  end\n  factors\nend", "    factors\
    \ = []\n    i = 2\n    while i * i <= n\n        i += 1\n    while i <= sqrt(n)\n\
    \        if n % i == 0\n            factors << i\n            n /= i\n       \
    \ end\n        i += 1\n    factors << n\n    return factors\nend", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors <<\
    \ i\n    i += 1\n  end\n  factors.uniq!\n  factors\nend", "  factors = []\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors << i\n    i\
    \ += 1\n  factors.uniq!\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n > 1\n    factor = factor * n\n    n /= factor\n    factors << factor\n  end\n\
    \  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors << factor\n  factors\n\
    end", "    factors = []\n    i = 2\n    while i * i <= n\n        i += 1\n   \
    \ while i <= sqrt(n)\n        if n % i == 0\n            factors << i\n      \
    \      n /= i\n        else\n            i += 1\n    factors << n\n    return\
    \ factors\nend", "  factors = []\n  factorization = factor(n)\n  factors.push\
    \ factorization[0]\n  for i in 1..factorization[1]\n    factors.push factorization[i]\
    \ * factors[i]\n  factors\nend", "    factors = []\n    i = 2\n    while i * i\
    \ <= n\n        i += 1\n    while i <= sqrt(n)\n        if n % i == 0\n      \
    \      factors << i\n            n /= i\n        i += 1\n    factors << n\n  \
    \  return factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "    factors\
    \ = []\n    i = 2\n    while i * i <= n\n        i += 1\n    while i <= sqrt(n)\n\
    \        if n % i == 0\n            factors << i\n            n /= i\n       \
    \     i += 1\n            factors << n if n != 1\n        end\n    end\n    factors\
    \ << n if n != 1\n    return factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors << factor\n  factors\nend", " \
    \   factors = []\n    i = 2\n    while i * i <= n\n        i += 1\n    while n\
    \ % i == 0\n        n /= i\n        factors << i\n        i += 1\n    factors\
    \ << n\n    return factors\nend", "  factors = []\n  factor = 1\n  while n !=\
    \ 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\
    \ << factor\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n\
    \    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors <<\
    \ factor\n  factors\nend", "  factors = []\n  factor = 1\n  while n > 1\n    factor\
    \ = 2\n    while n % factor == 0\n      factor = factor\n      n /= factor\n \
    \   factors << factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n\
    \  while n > 1\n    factor = 2\n    while n % factor == 0\n      factor = factor\n\
    \      n /= factor\n    factors << factor\n  end\n  factors << n if n != 1\n \
    \ factors\nend", "    factors = []\n    i = 2\n    while i * i <= n\n        i\
    \ += 1\n    while i <= n\n        if n % i == 0\n            factors << i\n  \
    \          n /= i\n        i += 1\n    factors << n\n    return factors\nend",
  "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors << factor\n  factors\nend", "  factors = []\n\
    \  factorization = factor(n)\n  factorization.reverse!\n  factorization.each do\
    \ |factor|\n    factors << factor\n  end\n  factors\nend", "  factors = []\n \
    \ factor = 1\n  while n > 1\n    factor *= n\n    n /= factor\n    factors <<\
    \ factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n !=\
    \ 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    if n % factor == 0\n \
    \     factors << factor\n      n /= factor\n    else\n      factor += 1\n    end\n\
    \  end\n  factors << n if n != 1\n  factors\nend", "    factors = []\n    factor\
    \ = 1\n    while n != 1\n        factor *= n\n        factors << factor\n    \
    \    n /= factor\n    end\n    factors\nend", "  factors = []\n  factor = 1\n\
    \  while n != 1\n    factor = 1\n    factors = factors + factor\n    while n %\
    \ factor == 0\n      factor = factor * 2\n      factors = factors + factor\n \
    \     n = n / factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n\
    \  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n\
    \  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    if n % factor == 0\n      factors.push(factor)\n\
    \      n /= factor\n    else\n      factor = 1\n    end\n    factor += 1\n  end\n\
    \  factors.push(factor) if n != 1\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while i <= n\n    factors << i\n    i += 1\n  factors.uniq!\n\
    \  factors\nend", "  factors = []\n  factorization = factor(n)\n  factorization.each\
    \ do |factor|\n    factors << factor\n    factors.count(factor) += 1\n  end\n\
    \  factors\nend", "    factors = []\n    i = 2\n    while i * i <= n\n       \
    \ i += 1\n    while i <= sqrt(n)\n        if n % i == 0\n            factors <<\
    \ i\n            n /= i\n        else\n            i += 1\n    factors << n\n\
    \    return factors\nend\n</code>\n<|/ a tags=ruby,primes,factorization |>\n<|\
    \ c |>\nI like the idea of factorizing primes first, but this doesn't work for\
    \ factoring large numbers. For example, factorize(100) returns [2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ", "  factors = []\n  factorization\
    \ = factor(n)\n  factors.push factorization.first\n  factors.push factorization.last\n\
    \  factors.push factorization.second\n  factors.push factorization.third\n  factors.push\
    \ factorization.fourth\n  factors.push factorization.fifth\n  factors.push factorization.sixth\n\
    \  factors.push factorization.seventh\n  factors.push factorization.eighth\n \
    \ factors.push factorization.ninth\n  factors.push factorization.tenth\n  factors.push\
    \ factorization.eleventh\n  factors.push factorization.twelfth\n  factors.push\
    \ factorization.thirteenth\n  factors.push factorization.fourteenth\n  factors.push\
    \ factorization.fifteenth\n  factors.push factorization.sixteenth\n  factors.push\
    \ factorization.seventeenth\n  factors.push factorization.eighteenth\n  factors.push\
    \ factorization.nineteenth\n  factors.push factorization.twentieth\n  factors.push\
    \ factorization.twentyfirst\n  factors.push factorization.twentysecond\n  factors.push\
    \ factorization.twentythird\n  factors.push factorization.twentyfourth\n  factors.push\
    \ factorization.twentyfifth\n  factors.push factorization.twentysixth\n  factors.push\
    \ factorization.twentyseventh\n  factors.push factorization.twentyeighth\n  factors.push\
    \ factorization.twentyninth\n  factors.push factorization.thirtieth\n  factors.push\
    \ factorization.thirtyfirst\n  factors.push factorization.thirtysecond\n  factors.push\
    \ factorization.thirtythird\n  factors.push factorization.thirtyfourth\n  factors.push\
    \ factorization.thirtyfifth\n  factors.push factorization.thirtysixth\n  factors.push\
    \ factorization.thirtyseventh\n  factors.push factorization.thirtyeighth\n  factors.push\
    \ factorization.thirtyninth\n  factors.push factorization.fourtieth\n  factors.push\
    \ factorization.fourtyfirst\n  factors.push factorization.fourtysecond\n  factors.push\
    \ factorization.fourtythird\n  factors.push factorization.fourtyfourth\n  factors.push\
    \ factorization.fourtyfifth\n  factors.push factorization.fourtysixth\n  factors.push\
    \ factorization.four", "  factors = []\n  factor = 1\n  while n > 1\n    factor\
    \ *= n\n    n /= factor\n    factors << factor\n  end\n  factors\nend", "    factors\
    \ = []\n    i = 2\n    while i * i <= n\n        i += 1\n    while i <= sqrt(n)\n\
    \        if n % i == 0\n            factors << i\n            n /= i\n       \
    \ i += 1\n    factors << n\n    return factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors << factor\n \
    \ factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors <<\
    \ i\n    i += 1\n  factors.uniq!\n  factors\nend", "    factors = []\n    factorization\
    \ = factor(n)\n    factorization = factorization.to_a\n    factorization.each\
    \ do |factor|\n        factors << factor\n    end\n    factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors << factor\n  factors\nend", "  factors = []\n\
    \  factor = 1\n  while n > 1\n    factor = 2\n    while n % factor == 0\n    \
    \  factor = factor\n      n /= factor\n    factors << factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors << factor\n  factors\nend", " \
    \ factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors <<\
    \ factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factorization\
    \ = factor(n)\n  factorization.each do |factor|\n    factors << factor\n    factors\
    \ << factor * factor\n  end\n  factors\nend", "  factors = []\n  factorization\
    \ = factor(n)\n  factorization.reverse!\n  factorization.each do |factor|\n  \
    \  factors << factor\n  end\n  factors\nend", "  factors = []\n  factorization\
    \ = factor(n)\n  factorization.reverse!\n  factorization.each do |factor|\n  \
    \  factors << factor if factors.count(factor) == factorization.count(factor)\n\
    \  end\n  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor\
    \ *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    factor = 2\n    while\
    \ n % factor == 0\n      factor = factor\n      n /= factor\n    factors << factor\n\
    \  end\n  factors << n if n > 1\n  factors\nend", "  factors = []\n  i = 2\n \
    \ while i * i <= n\n    i += 1\n  while i <= n\n    factors.push i\n    i += 1\n\
    \  factors.push n\n  factors.uniq!\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n\
    \  end\n  factors\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i +=\
    \ 1\n  while i <= n\n    factors << i\n    i += 1\n  factors\nend", "  factors\
    \ = []\n  factor = 1\n  while n > 1\n    factor = factor * n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  i = 2\n  while i\
    \ * i <= n\n    i += 1\n  while n >= i\n    factors << i\n    n /= i\n    i +=\
    \ 1\n  factors << n if n > 0\n  factors\nend", "  factors = []\n  factor = 1\n\
    \  while n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n\
    \  factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n    factor *=\
    \ n\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n\
    \    i += 1\n  factors.reverse\n  factors.each do |factor|\n    factors.delete(factor)\n\
    \  end\n  return factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n\
    \    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend",
  "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n != 1\n    factor *= n\n    factors\
    \ << factor\n    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n > 1\n    factor = 2\n    while n % factor == 0\n      factor\
    \ = factor\n      n /= factor\n    factors << factor\n  end\n  factors\nend",
  "  factors = []\n  factor = 1\n  while n > 1\n    factor *= n\n    factors << factor\n\
    \    n /= factor\n  end\n  factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor = 1\n    factors.push factor\n    while n % factor == 0\n\
    \      factor = factor * 2\n      factors.push factor\n      n /= factor\n  end\n\
    \  factors.push n\n  return factors\nend", "  factors = []\n  factor = 1\n  while\
    \ n != 1\n    factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\n\
    end", "  factors = []\n  factor = 1\n  while n > 1\n    if n % factor == 0\n \
    \     factors << factor\n      n /= factor\n    else\n      factor += 1\n    end\n\
    \  end\n  factors << n\n  return factors\nend", "  factors = []\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while i <= n\n    factors << i\n    i += 1\n  factors.uniq!\n\
    \  factors\nend", "    factors = []\n    i = 2\n    while i * i <= n\n       \
    \ i += 1\n    while i <= sqrt(n)\n        if n % i == 0\n            factors <<\
    \ i\n            n /= i\n        else\n            i += 1\n    factors << n\n\
    \    return factors\nend", "  factors = []\n  factor = 1\n  while n != 1\n   \
    \ factor *= n\n    factors << factor\n    n /= factor\n  end\n  factors\nend",
  "  factors = []\n  factor = 1\n  while n > 1\n    factor = factor * n\n    n /=\
    \ factor\n    factors << factor\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 1\n  while n != 1\n    if n % factor == 0\n      factors.push(factor)\n  \
    \    n /= factor\n    else\n      factor = 1\n    end\n  end\n  factors.push(factor)\
    \ if n != 1\n  return factors\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
