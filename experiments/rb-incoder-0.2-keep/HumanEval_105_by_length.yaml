name: HumanEval_105_by_length
language: ruby
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# arr = [2, 1, 1, 4, 5,\
  \ 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n# -> reverse arr -> [8,\
  \ 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n\
  # arr = []\n# return []\n# If the array has any strange number ignore it:\n# arr\
  \ = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n# -> reverse arr -> [55, 1, -1]\n\
  # return = ['One']\ndef by_length(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n\
  \    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5,\
  \ 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"\
  ], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"],\
  \ candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"\
  ], candidate.call([9, 4, 8]))\n  end\nend\n"
completions: ["  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x.to_s))\
    \ }\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map { |x| x.to_s.gsub(/\\\
    d/) { |y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"].index(y) } }\nend\n</code>\n<|/ a tags=ruby,arrays |>\n\
    <| a dscore=0 |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map { |x| x.to_s.reverse\
    \ }\nend", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/) {\
    \ |y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"].index(y) } }\n  arr\nend", "  arr.sort!\n  arr.reverse!\n \
    \ arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x|\
    \ x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n\
    \  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x|\
    \ x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n\
    \  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x|\
    \ x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n\
    \  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x|\
    \ x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n\
    \  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x|\
    \ x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n\
    \  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x|\
    \ x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.reverse.to_i}\n\
    \  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ].index(y)}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][y.to_i - 1]}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| names[x]}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].index(y)}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x % 10 == 0 ? \"One\" : x % 10 == 1 ? \"Two\" :\
    \ x % 10 == 2 ? \"Three\" : x % 10 == 3 ? \"Four\" : x % 10 == 4 ? \"Five\" :\
    \ x % 10 == 5 ? \"Six\" : x % 10 == 6 ? \"Seven\" : x % 10 == 7 ? \"Eight\" :\
    \ x % 10 == 8 ? \"Nine\" : nil}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n \
    \ arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x| x.to_s.to_i}\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/) { |y| [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][y.to_i - 1]}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/, one_or_nine)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n\
    \  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n\
    \  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n\
    \  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n\
    \  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n\
    \  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n\
    \  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n\
    \  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n\
    \  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n\
    \  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n\
    \  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n\
    \  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n\
    \  arr.map!{|x| x.", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ].include?(x) ? x : nil}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=ruby,arrays,sorting |>\n<code>", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map { |i| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i] }\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/,\
    \ one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map do |x|\n   \
    \ if x % 10 == 1\n      \"One\"\n    elsif x % 10 == 2\n      \"Two\"\n    elsif\
    \ x % 10 == 3\n      \"Three\"\n    elsif x % 10 == 4\n      \"Four\"\n    elsif\
    \ x % 10 == 5\n      \"Five\"\n    elsif x % 10 == 6\n      \"Six\"\n    elsif\
    \ x % 10 == 7\n      \"Seven\"\n    elsif x % 10 == 8\n      \"Eight\"\n    elsif\
    \ x % 10 == 9\n      \"Nine\"\n    else\n      x\n    end\n  end\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\nend\n\
    </code>\n<|/ a |>\n<| a tags=ruby,arrays,sorting |>\n<code>", "  arr.sort!\n \
    \ arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x.to_s)) }\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map { |x| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].find { |y| y >=\
    \ x } }\nend", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/,\
    \ one_or_nine)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"].index(y)}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/) { |y| y.to_i }}\n\
    end\n</code>\n<|/ a tags=ruby,arrays,sorting |>\n<| c |>\nThis doesn't work if\
    \ you have a number like `10` as a first element in the array. `by_length([10,\
    \ 2, 1])` returns `[\"One\", \"Two\", \"One\"]` instead of `[\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]`\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't require the array to be sorted.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require the array to be sorted.\n\
    <|/ c |>\n<| a tags=ruby,arrays,sorting |>\n<code>", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map { |x| [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].include?(x)\
    \ ? x : nil }\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map {|x| x.to_s.gsub(/\\\
    d/) { |y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"].index(y) } }\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map\
    \ {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map! {|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to use an if statement to determine if the array is empty or\
    \ has any strange numbers?\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use an if statement.\n<|/ c |>\n<| c |>\nI like the second solution, but I wonder\
    \ if there is a way to do this without having to use an if statement to determine\
    \ if the array is empty or has any strange numbers?\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't use an if statement.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/,\
    \ one_or_nine(x))}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/, one_or_nine(x))}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine_to_name(x))}\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/) { |y| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"].index(y) } }\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!\
    \ {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x.to_s)) }\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.reverse.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map { |i| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][i] }\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!\
    \ {|x| x.to_s.gsub(/\\d/) { |y| y.to_i }}\n  arr\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"].include?(x) ? x : nil}\n  arr\nend\n\
    </code>\n<|/ a tags=ruby,arrays,sorting |>\n<| a tags=ruby,arrays,sorting |>\n\
    <code>", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map { |x| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x] }\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ].index(y)}}\n  arr\nend\n</code>\n<|/ a tags=ruby,sorting,arrays |>\n<| c |>\n\
    This doesn't work if the array contains negative numbers. For example, `[-1, 1,\
    \ 55]` returns `['One']` instead of `['Eight', 'Five', 'Four', 'Three', 'Two',\
    \ 'Two', 'One', 'One']`.\n<|/ c |>\n<| c |>\nI added a solution that works with\
    \ negative numbers. I didn't want to change your answer because I thought it would\
    \ be too much to change your answer just to fix the negative numbers problem.\
    \ Feel free to edit my answer if you think it's worth it.\n<|/ c |>\n<| c |>\n\
    I added a solution that works with negative numbers. I didn't want to change your\
    \ answer because I thought it would be too much to change your answer just to\
    \ fix the negative numbers problem. Feel free to edit my answer if you think it's\
    \ worth it.\n<|/ c |>\n<| c |>\nI added a solution that works with negative numbers.\
    \ I didn't want to change your answer because I thought it would be too much to\
    \ change your answer just to fix the negative numbers problem. Feel free to edit\
    \ my answer if you think it's worth it.\n<|/ c |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map do |x|\n    if x % 10 ==\
    \ 1\n      \"One\"\n    elsif x % 10 == 2\n      \"Two\"\n    elsif x % 10 ==\
    \ 3\n      \"Three\"\n    elsif x % 10 == 4\n      \"Four\"\n    elsif x % 10\
    \ == 5\n      \"Five\"\n    elsif x % 10 == 6\n      \"Six\"\n    elsif x % 10\
    \ == 7\n      \"Seven\"\n    elsif x % 10 == 8\n      \"Eight\"\n    elsif x %\
    \ 10 == 9\n      \"Nine\"\n    else\n      nil\n    end\n  end\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"].index(y)}}\n  arr\nend\n</code>\n<|/ a tags=ruby,arrays,sorting |>\n\
    <| c |>\nThis doesn't work if there are multiple numbers in the array that are\
    \ the same length. For example, `[1, 1, 2, 2, 3, 4, 5, 8, 2]` returns `[\"One\"\
    , \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]` instead of `[\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\"]`.\n<|/ c |>\n<| c |>\n\
    I guess I misunderstood the question. I'll leave the answer here anyway in case\
    \ it helps someone else.\n<|/ c |>\n<| a tags=ruby,arrays,sorting |>\n<code>",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][y.to_i - 1]}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"].index(y)}}\nend\n</code>\n<|/ a |>\n<| c |>\nI like how\
    \ you used `gsub` to replace each digit with a corresponding name from the array.\
    \ Very clever!\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\nend\n\
    </code>\n<|/ a tags=ruby,arrays |>\n<| a dscore=1 |>\n<code>", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine_to_name(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/) { |y| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"].index(y) } }\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/){|y| y.to_s.reverse}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].index(x)}\n  arr\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a |>\n\
    <code>", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"].index(y)}}\n  arr\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].index(y)}}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s.upcase}\n  arr.map!{|x| x.to_s.to_s.downcase}\n\
    \  arr.map!{|x| x.to_s.to_s.capitalize}\n  arr.map!{|x| x.to_s.to_s.titleize}\n\
    \  arr.map!{|x| x.to_s.to_s.gsub(/[^0-9]/, \"\")}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| names[x]}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map do |x|\n    if x % 10 ==\
    \ 1\n      \"One\"\n    elsif x % 10 == 2\n      \"Two\"\n    elsif x % 10 ==\
    \ 3\n      \"Three\"\n    elsif x % 10 == 4\n      \"Four\"\n    elsif x % 10\
    \ == 5\n      \"Five\"\n    elsif x % 10 == 6\n      \"Six\"\n    elsif x % 10\
    \ == 7\n      \"Seven\"\n    elsif x % 10 == 8\n      \"Eight\"\n    elsif x %\
    \ 10 == 9\n      \"Nine\"\n    end\n  end\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map! {|x| x.to_s.reverse.tr('0123456789', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.to_i}\n  arr.map!\
    \ {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n\
    \  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n\
    \  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n\
    \  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n\
    \  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n\
    \  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n\
    \  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n\
    \  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n\
    \  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n\
    \  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n\
    \  arr.map! {|x| x.to_s.to_s}\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n\
    \  arr.map! {|x| x.", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"].index(y)}}\n  arr\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=ruby,arrays |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map do |i|\n\
    \    i = i.to_s\n    i = i.to_i\n    if i.between?(1, 9)\n      i = i.to_s\n \
    \     i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n     \
    \ i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i =\
    \ i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n\
    \      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n    \
    \  i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i =\
    \ i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n\
    \      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n    \
    \  i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i =\
    \ i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n\
    \      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n    \
    \  i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i =\
    \ i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n\
    \      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n    \
    \  i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i =\
    \ i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n\
    \      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n    \
    \  i = i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i =\
    \ i.to_s\n      i = i.to_i\n      i = i.to_s\n      i = i.to_i\n      i = i.to_s\n\
    \      i = ", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ names[x]}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"][y-1]}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map do |x|\n    if x % 10 == 1\n      \"One\"\n    elsif\
    \ x % 10 == 2\n      \"Two\"\n    elsif x % 10 == 3\n      \"Three\"\n    elsif\
    \ x % 10 == 4\n      \"Four\"\n    elsif x % 10 == 5\n      \"Five\"\n    elsif\
    \ x % 10 == 6\n      \"Six\"\n    elsif x % 10 == 7\n      \"Seven\"\n    elsif\
    \ x % 10 == 8\n      \"Eight\"\n    elsif x % 10 == 9\n      \"Nine\"\n    else\n\
    \      x\n    end\n  end\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][y.to_i]}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\n\
    end\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n`arr.sort!.reverse!` can be\
    \ written as `arr.sort_by(&:length).reverse`\n<|/ c |>\n<| c |>\n`arr.sort_by(&:length).reverse`\
    \ doesn't work if `arr` is empty or has strange numbers. `arr.sort_by(&:length).reverse`\
    \ returns `[]` instead of `['One']`.\n<|/ c |>\n<| c |>\n`arr.sort_by(&:length).reverse`\
    \ returns `['One']` when `arr = [1, -1 , 55]`.\n<|/ c |>\n<| c |>\n`arr.sort_by(&:length).reverse`\
    \ returns `['One']` when `arr = [1, -1 , 55]` because `-1` comes before `1` in\
    \ lexicographical order.\n<|/ c |>\n<| c |>\n`arr.sort_by(&:length).reverse` returns\
    \ `['One']` because `-1` comes before `1` in lexicographical order.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.reverse.upcase\
    \ }\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"][y].to_s}}\n  arr\nend\n</code>\n<|/ a tags=ruby |>\n<|\
    \ c |>\nI like the use of gsub to replace digits with their names. I didn't know\
    \ about that method.\n<|/ c |>\n<| c |>\nI like your use of gsub. Thanks for sharing.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\n  arr\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  arr.sort!\n  arr.reverse!\n \
    \ arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"].index(x)}\n  arr\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=ruby,arrays |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x|\
    \ x.to_s.gsub(/\\d/) { |y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"].index(y) } }\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map { |x| x.to_s.gsub(/\\d/) { |y| y.to_i }\
    \ }\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].index(y)}}\n  arr\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like this solution. Very concise. Thanks!\n<|/ c |>\n<| a tags=ruby,arrays |>\n\
    <code>", "  arr.sort!\n  arr.reverse!\n  arr.map { |x| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x] }\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x.to_s))\
    \ }\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].index(y)}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"].include?(x) ? x : nil}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine)}\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.", "  arr.sort!\n  arr.reverse!\n  arr.map { |i| i.to_s.reverse }.uniq\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1]}\n  arr\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"].index(y)}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!\
    \ {|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"].index(x) || x}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map! {|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map do |x|\n    case\n    when\
    \ x < 1 then \"One\"\n    when x < 2 then \"Two\"\n    when x < 3 then \"Three\"\
    \n    when x < 4 then \"Four\"\n    when x < 5 then \"Five\"\n    when x < 6 then\
    \ \"Six\"\n    when x < 7 then \"Seven\"\n    when x < 8 then \"Eight\"\n    when\
    \ x < 9 then \"Nine\"\n    else x\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].include?(x) ? x : nil }\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"].include?(x) ? x : nil}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ].index(y)}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/, one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n\
    \  arr.map!{|x| x % 10 == 0 ? \"One\" : x % 10 == 1 ? \"Two\" : x % 10 == 2 ?\
    \ \"Three\" : x % 10 == 3 ? \"Four\" : x % 10 == 4 ? \"Five\" : x % 10 == 5 ?\
    \ \"Six\" : x % 10 == 6 ? \"Seven\" : x % 10 == 7 ? \"Eight\" : x % 10 == 8 ?\
    \ \"Nine\" : nil}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"][y.to_i - 1]}}\nend\n</code>\n<|/ a tags=ruby,arrays,sorting\
    \ |>\n<| a tags=ruby,arrays,sorting |>\n<code>", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].index(y)}}\n  arr\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer. I think this solution is more elegant than mine.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\\
    d/) { |y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"].index(y) } }\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x if x >= 1 && x <= 9}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map! {|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x) ? x : nil }\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.to_i}\n  arr.map! {|x| x.to_s.to_s}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/,\
    \ one_or_nine(x))}\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\\
    d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"][y.to_i - 1]}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map { |x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][x - 1] }\nend", "  arr.sort!\n  arr.reverse!\n \
    \ arr.map!{|x| x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.reverse.tr('0123456789', 'OneTwoThreeFourFiveSixSevenEightNine')}\n\
    \  arr\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,sorting,arrays |>\n<code>",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/) { |y| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"].index(y) } }\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| y.to_s.reverse}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map { |x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][x - 1] } \nend", "  arr.sort!\n  arr.reverse!\n\
    \  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][y.to_i - 1]}}\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  arr.sort!\n  arr.reverse!\n \
    \ arr.map! {|x| x.to_s.gsub(/\\d/, one_nine[x.to_i])}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][y-1]}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"].index(y)}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][y.to_i - 1]}}\n\
    \  arr\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a dscore=1 |>\n<code>", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map { |x| [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1] }\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine_to_name(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map { |x| x.to_s.reverse }.uniq\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map do |x|\n    if x % 10 == 1\n   \
    \   \"One\"\n    elsif x % 10 == 2\n      \"Two\"\n    elsif x % 10 == 3\n   \
    \   \"Three\"\n    elsif x % 10 == 4\n      \"Four\"\n    elsif x % 10 == 5\n\
    \      \"Five\"\n    elsif x % 10 == 6\n      \"Six\"\n    elsif x % 10 == 7\n\
    \      \"Seven\"\n    elsif x % 10 == 8\n      \"Eight\"\n    elsif x % 10 ==\
    \ 9\n      \"Nine\"\n    else\n      nil\n    end\n  end\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n  arr\nend",
  "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n  arr\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map! {|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\n\
    end", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"].index(y)}}\n  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x|\
    \ x.to_s.gsub(/\\d/){|y| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][y.to_i - 1]}}\n  arr\nend", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x|\
    \ x.to_s.to_s}\n  arr.map!{|x| x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x|\
    \ x.to_s.to_i}\n  arr.map!{|x| x.to_s.to_s}\n  arr.map!{|x| x.", "  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/, one_or_nine(x))}\nend", " \
    \ arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y| [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ].index(y)}}\n  arr\nend\n</code>\n<|/ a tags=ruby,arrays,sorting |>\n<| a tags=ruby,arrays,sorting\
    \ |>\n<code>", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].index(x)}\n\
    \  arr\nend", "  arr.sort!\n  arr.reverse!\n  arr.map!{|x| x.to_s.gsub(/\\d/){|y|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"].index(y)}}\n  arr\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
