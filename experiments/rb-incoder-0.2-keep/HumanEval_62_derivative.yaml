name: HumanEval_62_derivative
language: ruby
prompt: "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>>\
  \ derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n#\
  \ [2, 6]\ndef derivative(xs)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_derivative\n\
  \    candidate = method(:derivative)\n    assert_equal([1, 4, 12, 20], candidate.call([3,\
  \ 1, 2, 4, 5]))\n    assert_equal([2, 6], candidate.call([1, 2, 3]))\n    assert_equal([2,\
  \ 2], candidate.call([3, 2, 1]))\n    assert_equal([2, 2, 0, 16], candidate.call([3,\
  \ 2, 1, 0, 4]))\n    assert_equal([], candidate.call([1]))\n  end\nend\n"
completions: ["  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(:+) do |sum, term|\n    sum + term * derivative(term.to_a)\n\
    \  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc.inject(1) do |acc, y|\n      acc * x ** y\n    end\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(:+) do |sum, term|\n   \
    \ sum * term\n  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum + term * derivative(term.to_a)\n  end\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc *\
    \ x ** y\n    end\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum * term\n\
    \  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc * x + y\n    end\n  end\n\
    end", "  xs.inject(:+) do |sum, el|\n    sum + el * el\n  end\nend", "  xs.inject([])\
    \ do |result, x|\n    result << 1 if x == 0\n    result << 1 if x == 1\n    result\
    \ << 1 if x == 2\n    result << 1 if x == 3\n    result << 1 if x == 4\n    result\
    \ << 1 if x == 5\n    result << 1 if x == 6\n    result << 1 if x == 7\n    result\
    \ << 1 if x == 8\n    result << 1 if x == 9\n    result << 1 if x == 10\n    result\
    \ << 1 if x == 11\n    result << 1 if x == 12\n    result << 1 if x == 13\n  \
    \  result << 1 if x == 14\n    result << 1 if x == 15\n    result << 1 if x ==\
    \ 16\n    result << 1 if x == 17\n    result << 1 if x == 18\n    result << 1\
    \ if x == 19\n    result << 1 if x == 20\n    result << 1 if x == 21\n    result\
    \ << 1 if x == 22\n    result << 1 if x == 23\n    result << 1 if x == 24\n  \
    \  result << 1 if x == 25\n    result << 1 if x == 26\n    result << 1 if x ==\
    \ 27\n    result << 1 if x == 28\n    result << 1 if x == 29\n    result << 1\
    \ if x == 30\n    result << 1 if x == 31\n    result << 1 if x == 32\n    result\
    \ << 1 if x == 33\n    result << 1 if x == 34\n    result << 1 if x == 35\n  \
    \  result << 1 if x == 36\n    result << 1 if x == 37\n    result << 1 if x ==\
    \ 38\n    result << 1 if x == 39\n    result << 1 if x == 40\n    result << 1\
    \ if x == 41\n    result << 1 if x == 42\n    result << 1 if x == 43\n    result\
    \ << 1 if x == 44\n    result << 1 if x == 45\n    result << 1 if x == 46\n  \
    \  result << 1 if x == 47\n    result << 1 if x == 48\n    result << 1 if x ==\
    \ 49\n    result << 1 if x == 50\n    result << 1 if x == 51\n    result << 1\
    \ if x == 52\n    result << 1 if x == 53\n    result << 1 if x == 54\n    result\
    \ << 1 if x == 55\n    result << 1 if x == 56\n    result << 1 if x == 57\n  \
    \  result << 1 if x == 58\n    result << 1 if x == 59\n    result << 1 if x ==\
    \ 60\n    result << 1 if x == 61\n    result << 1 if x == 62\n    result << 1\
    \ if x == 63\n    result << 1 if x == 64\n    result << 1 if x == 65\n    result\
    \ << 1 if x == 66\n    result << 1 if x == 67\n    result << 1 if x == 68\n  \
    \  result << 1 if x == 69\n    result << 1 if x == 70\n    ", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc *\
    \ x * y\n    end\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(0)\
    \ do |acc, y|\n      acc.push(acc.last + x * y)\n    end\n  end\nend", "  xs.inject([])\
    \ do |acc, x|\n    acc.unshift(1)\n    acc.unshift(x) if x > 1\n    acc\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do\
    \ |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n\
    \  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc, y|\n   \
    \   acc * x ** y\n    end\n  end\nend", "  xs.inject(:+) do |result, x|\n    result\
    \ * x\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend",
  "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(0) do\
    \ |acc, x|\n    acc.inject(0) do |acc, y|\n      acc * x + y\n    end\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc *\
    \ x + y\n    end\n  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:+).reduce(:*)\nend",
  "  xs.inject(:+) do |sum, term|\n    sum + term * term\n  end\nend", "  xs.inject(0,\
    \ :+).reduce(:*)\nend", "  xs.inject([]) do |acc, x|\n    acc.unshift(1)\n   \
    \ acc.unshift(x) if x.is_a?(Integer)\n    acc.inject(acc[1..-1]) do |acc, x|\n\
    \      acc * x\n    end\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum\
    \ * term\n  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject([1,1],\
    \ :+).reduce(:*)\nend", "  xs.inject(:+) do |sum, element|\n    sum * element\
    \ / xs.last\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc,\
    \ y|\n      acc * x\n    end\n  end\nend", "  xs.inject(:+) do |sum, element|\n\
    \    sum * element / xs.length\n  end\nend", "  xs.inject(:+) do |sum, term|\n\
    \    sum * term\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject([1,1],\
    \ :+).reduce(:*)\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject([1,1], :+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc * x\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum + term * term\n\
    \  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n", "  xs.inject(0) do |acc, x|\n    acc * x\n\
    \  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+) do |sum, term|\n\
    \    sum + term * derivative(term.coef)\n  end\nend", "  xs.inject([]) do |acc,\
    \ x|\n    acc.unshift(acc.last * x)\n    acc\n  end\nend", "  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n", "  xs.inject(0) do |acc,\
    \ x|\n    acc * x\n  end\nend", "  xs.inject(:+) do |result, x|\n    result *\
    \ x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject([1,1],\
    \ :+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend",
  "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:+) do\
    \ |result, x|\n    result * x\n  end\nend", "  xs.inject(:+) do |sum, el|\n  \
    \  sum * el\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend",
  "  xs.inject(:+) do |result, x|\n    result * x\n  end\nend", "  xs.inject(:+) do\
    \ |sum, e|\n    sum * e ** 2\n  end\nend", "  xs.inject(:+).reduce(:*)\nend",
  "  xs.inject(:+).reduce(:*)\nend", "  xs.inject([1,1], :+).reduce(:*)\nend", " \
    \ xs.inject(:+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n \
    \ end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\nend", "  xs.inject(0) do |acc,\
    \ x|\n    acc * x\n  end\nend", "  xs.inject(:+) do |result, x|\n    result *\
    \ x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc, y|\n\
    \      acc * x * y\n    end\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", " \
    \ xs.inject(:+) do |result, x|\n    result * x\n  end\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(0) do |acc, x|\n \
    \   acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x ** y\n    end\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do\
    \ |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\n\
    end", "  xs.inject([]) do |acc, x|\n    acc.unshift(1)\n    acc.unshift(x)\n \
    \   acc.inject(:*) do |acc, x|\n      acc.to_f * x + acc\n    end\n  end\nend",
  "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x * y\n\
    \    end\n  end\nend", "  xs.inject(:+) do |result, x|\n    result * x\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc *\
    \ x + y\n    end\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\n\
    end", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+) do |sum, term|\n   \
    \ sum * term\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum + term * derivative(term.to_a)\n\
    \  end\nend", "  xs.inject(:+) do |sum, term|\n    sum + term * term\n  end\n\
    end", "  xs.inject([]) do |acc, x|\n    acc.unshift(1)\n    acc.unshift(x) unless\
    \ x == 0\n    acc\n  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\n\
    end", "  xs.inject(:+) do |sum, term|\n    sum + term * derivative(term.to_a)\n\
    \  end\nend", "  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc *\
    \ x * y\n    end\n  end\nend", "  xs.inject([1,1], :+).reduce(:*)\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc * x + y\n    end\n  end\n\
    end", "  xs.inject([1,1], :+).reduce(:*)\nend", "  xs.inject(:+) do |sum, term|\n\
    \    sum + term * derivative(term.to_a)\n  end\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\n\
    end", "  xs.inject(:+) do |result, x|\n    result * x\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(:+).reduce(:*)\nend", " \
    \ xs.inject([]) do |acc, x|\n    acc.unshift(1)\n    acc.unshift(x) if xs.last\
    \ == 0\n    acc.inject(acc[-1] * x) do |acc, x|\n      acc / x\n    end\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc *\
    \ x + y\n    end\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\n\
    end", "  xs.inject([1,1], :+).reduce(:*)\nend", "  xs.inject([]) do |acc, x|\n\
    \    acc.unshift(1)\n    acc.unshift(x)\n    acc.inject(:*) || acc\n  end\nend",
  "  xs.inject(:+) do |sum, e|\n    sum * e ** 2\n  end\nend", "  xs.inject(0) do\
    \ |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x ** y\n    end\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc *\
    \ x + y\n    end\n  end\nend", "  xs.inject(:+) do |result, x|\n    result * x\n\
    \  end\nend", "  xs.inject([1,1], :+).reduce(:*)\nend", "  xs.inject(:+) do |sum,\
    \ term|\n    sum * term\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum\
    \ * term\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\n\
    end", "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\n\
    end", "  xs.inject(:+) do |sum, el|\n    sum * el\n  end\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum + term * derivative(term.to_a)\n  end\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:+) do |sum, el|\n\
    \    sum * el\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(0) do\
    \ |acc, y|\n      acc.push(acc.last + x * y)\n    end\n  end\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:+).reduce(:*)\nend",
  "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:+) do\
    \ |sum, term|\n    sum + term * derivative(term.to_a)\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  xs.inject(:+) do |result, x|\n    result * x\n  end\nend",
  "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+) do |sum, item|\n    sum + item\
    \ * item\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc,\
    \ y|\n      acc * x * y\n    end\n  end\nend", "  xs.inject(:+).reduce(:*)\nend",
  "  xs.inject(:+) do |result, x|\n    result * x\n  end\nend", "  xs.inject(0) do\
    \ |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n\
    \  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  xs.inject(:+) do |result, x|\n    result * x\n  end\nend",
  "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\n\
    end", "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum + term * term\n  end\nend", "  xs.inject(:*)\n  xs.inject(:*)\n\
    \  xs.inject(:*)\n  xs.inject(:*)\n  xs.inject(:*)\nend", "  xs.inject([1,1],\
    \ :+).reduce(:*)\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+) do\
    \ |sum, term|\n    sum + term * derivative(term.to_a)\n  end\nend", "  xs.inject(:+)\
    \ do |result, x|\n    result * x\n  end\nend", "  xs.inject(:+) do |sum, term|\n\
    \    sum + term * derivative(term.coef)\n  end\nend", "  xs.inject(0) do |acc,\
    \ x|\n    acc * x\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum * term\n\
    \  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc * x\n  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  xs.inject([]) do |acc, x|\n\
    \    acc.unshift(1)\n    acc.unshift(x) unless x == 0\n    acc\n  end\nend", " \
    \ xs.inject(:+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n \
    \ end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n\
    \    acc * x\n  end\nend", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(0,\
    \ :*) # xs.inject(0, :*) is same as xs.inject(0) {|sum, element| sum + element\
    \ }\n  xs.inject(:+) # xs.inject(:+) is same as xs.inject(:+) {|sum, element|\
    \ sum + element }\nend", "  xs.inject(:+) do |sum, el|\n    sum * el\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", "  xs.inject(:+)\
    \ do |sum, el|\n    sum * el\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(0)\
    \ do |acc, y|\n      acc * x + y\n    end\n  end\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(:+) do |sum, el|\n    sum * el\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\n\
    end", "  xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(0)\
    \ do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc + x * y\n    end\n  end\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc *\
    \ x * y\n    end\n  end\nend", "  xs.inject(:+) do |sum, el|\n    sum * el\n \
    \ end\nend", "  xs.inject([1,1], :*)\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", " \
    \ xs.inject(0) do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc * x + y\n\
    \    end\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(0) do |acc,\
    \ y|\n      acc * x + y\n    end\n  end\nend", "  xs.inject(0) do |acc, x|\n \
    \   acc.inject(0) do |acc, y|\n      acc * x + y\n    end\n  end\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(0) do |acc, y|\n      acc *\
    \ x + y\n    end\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(1)\
    \ do |acc, y|\n      acc * x * y\n    end\n  end\nend", "  xs.inject(:+) do |sum,\
    \ term|\n    sum * term\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc.inject(0)\
    \ do |acc, y|\n      acc * x + y\n    end\n  end\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(0) do |acc, x|\n    acc.inject(1) do |acc, y|\n      acc *\
    \ x * y\n    end\n  end\nend", "  xs.inject(:+) do |sum, term|\n    sum + term\
    \ * term\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
