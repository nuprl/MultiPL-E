name: HumanEval_20_find_closest_elements
language: ruby
prompt: "# From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# (2.0,\
  \ 2.0)\ndef find_closest_elements(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
  \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
  \ 3.1, 4.1, 5.1]))\n  end\nend\n"
completions: ["  numbers.each_with_index do |n, i|\n    j = i+1\n    break if j ==\
    \ numbers.size # No more numbers to check\n    break if numbers[j] - n < numbers[i]\
    \ - n # Found a closer number\n    numbers[i], numbers[j] = numbers[j], numbers[i]\
    \ # Swap\n  end\n  numbers\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if there are two numbers that are equally close.  For example, `find_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 2.2])` returns `[2.1, 2.2]`.  It should return `[2.1, 2.2]`.\n\
    <|/ c |>\n<| c |>\nYes, I realized that after I posted it.  I fixed it by swapping\
    \ numbers[i] and numbers[j] when j > i.  Thanks for pointing that out.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers that are equally close.\
    \  For example, `find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 2.2])` returns\
    \ `[2.1, 2.2]`.  It should return `[2.1, 2.2]`.\n<|/ c |>\n<| c |>\nI fixed it\
    \ by swapping numbers[i] and numbers[j] when j > i.  Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = numbers[index + 1] - number\n\
    \    smallest_difference_index = (index + 1) if smallest_difference == 0\n   \
    \ smallest_difference_index\n  end\nend", "  numbers.each_with_index do |number,\
    \ index|\n    smallest_distance = number\n    second_smallest_distance = number\n\
    \    \n    numbers.each_with_index do |number_2, index_2|\n      distance = abs(number\
    \ - number_2)\n      \n      if distance < smallest_distance\n        smallest_distance\
    \ = distance\n        second_smallest_distance = number_2\n      end\n    end\n\
    \    \n    break if smallest_distance == number\n    \n    break if smallest_distance\
    \ < second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\n\
    \    \n    break if smallest_distance < number\n    \n    break if second_smallest_distance\
    \ < number\n    \n    break if smallest_distance < second_smallest_distance\n\
    \    \n    break if second_smallest_distance < smallest_distance\n    \n    break\
    \ if smallest_distance < number\n    \n    break if second_smallest_distance <\
    \ number\n    \n    break if number < smallest_distance\n    \n    break if number\
    \ < second_smallest_distance\n    \n    break if number < smallest_distance\n\
    \    \n    break if number < second_smallest_distance\n    \n    break if number\
    \ < number\n    \n    break if second_smallest_distance < number\n    \n    break\
    \ if number < second_smallest_distance\n    \n    break if number < number\n \
    \   \n    break if second_smallest_distance < number\n    \n    break if number\
    \ < second_smallest_distance\n    \n    break if number < number\n    \n    break\
    \ if second_smallest_distance < number\n    \n    break if number < second_smallest_distance\n\
    \    \n    break if number < number\n    \n    break if second_smallest_distance\
    \ < number\n    \n    break if number < second_smallest_distance\n    \n    break\
    \ if number < number\n    \n    break if second_smallest_distance < number\n \
    \   \n    break if number < second_smallest_distance\n    \n    break if number\
    \ < number\n    \n    break if second_smallest_distance < number\n    \n    break\
    \ if number < second_smallest_distance\n    \n    break if number < number\n \
    \   \n    break if second_smallest_distance < number\n    \n    break if number\
    \ < second_smallest_distance\n    \n    break if number < number\n    \n    break\
    \ if second_smallest_distance < number\n    \n    break if number < second_smallest_distance\n\
    \    \n    break if number < number\n    \n    break if ", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each do |number|\n      distance = number - numbers[index] if index\
    \ != 0\n      break if distance < smallest_distance\n      smallest_distance =\
    \ distance\n      smallest_index = index\n    end\n    [numbers[smallest_index],\
    \ number]\n  end\nend", "  numbers.each_with_index do |number, index|\n    closest_index\
    \ = index\n    closest_distance = number\n    numbers.each do |other_number|\n\
    \      distance = other_number - number\n      if distance < 0\n        closest_index\
    \ = other_number\n        closest_distance = distance\n      end\n    end\n  \
    \  [number, closest_distance, closest_index]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |number_2, index_2|\n      distance = abs(number_2\
    \ - number)\n      if distance < smallest_distance\n        smallest_distance\
    \ = distance\n        smallest_index = index_2\n      end\n    end\n    [number,\
    \ numbers[smallest_index]]\n  end\nend", "  numbers.each_with_index do |number,\
    \ index|\n    smallest_difference = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |other_number, other_index|\n      difference = other_number - number\n \
    \     if difference < smallest_difference\n        smallest_difference = difference\n\
    \        smallest_index = other_index\n      end\n    end\n    return smallest_index,\
    \ smallest_index\n  end\nend", "  numbers.sort!\n  smallest = numbers[0]\n  largest\
    \ = numbers[-1]\n  smallest_index = -1\n  largest_index = -1\n  for i in (0...numbers.length)\n\
    \    if numbers[i] < smallest then\n      smallest = numbers[i]\n      smallest_index\
    \ = i\n    end\n    if numbers[i] > largest then\n      largest = numbers[i]\n\
    \      largest_index = i\n    end\n  end\n  return smallest, largest, smallest_index,\
    \ largest_index\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number,\
    \ index|\n      distance = number - smallest_distance\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index\n      end\n\
    \    end\n    [smallest_distance, numbers[smallest_index]]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = numbers[index + 1] - number\n\
    \    smallest_difference_index = (index + 1) if smallest_difference == 0\n   \
    \ smallest_difference_index\n  end\nend", "  numbers.each_with_index do |number,\
    \ index|\n    smallest_distance = number\n    second_smallest_distance = number\n\
    \    \n    numbers.each_with_index do |number_to_compare, index_to_compare|\n\
    \      distance = abs(number_to_compare - number)\n      \n      if distance <\
    \ smallest_distance\n        smallest_distance = distance\n        second_smallest_distance\
    \ = number_to_compare\n      end\n    end\n    \n    if smallest_distance == number\n\
    \      return [smallest_distance, second_smallest_distance]\n    end\n  end\n\
    end", "  numbers.sort!\n  smallest = numbers[0]\n  largest = numbers[-1]\n  smallest_index\
    \ = -1\n  largest_index = -1\n  numbers.each_with_index do |n, i|\n    if n <\
    \ smallest\n      smallest = n\n      smallest_index = i\n    end\n    if n >\
    \ largest\n      largest = n\n      largest_index = i\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = numbers[index + 1] - number\n    smallest_difference_index = (index + 1) if\
    \ smallest_difference == 0\n    smallest_difference_index\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each do |other_number|\n      distance = other_number - number\n\
    \      if distance < 0\n        smallest_index = other_number\n        smallest_distance\
    \ = distance\n      end\n    end\n    return smallest_index, smallest_distance\n\
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, however\
    \ it only works with positive numbers. I modified it a little to make it work\
    \ with negative numbers as well. `def find_closest_elements(numbers)\n  numbers.each_with_index\
    \ do |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each do |other_number|\n      distance = other_number - number\n\
    \      if distance < 0\n        smallest_index = other_number\n        smallest_distance\
    \ = distance\n      end\n    end\n    return smallest_index, smallest_distance\n\
    \  end\nend`\n<|/ c |>\n<| c |>\nI modified the code above to handle negative\
    \ numbers as well.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers.sort!\n  smallest_number\
    \ = numbers[0]\n  second_smallest_number = numbers[1]\n  smallest_index = 0\n\
    \  second_smallest_index = 1\n  while smallest_index < numbers.size && second_smallest_index\
    \ < numbers.size\n    smallest_number = numbers[smallest_index]\n    second_smallest_number\
    \ = numbers[second_smallest_index]\n    if smallest_number < second_smallest_number\n\
    \      smallest_index += 1\n    else\n      second_smallest_index += 1\n    end\n\
    \  end\n  return [smallest_number, second_smallest_number]\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    smallest_index = index\n\
    \    numbers.each do |other_number|\n      difference = other_number - number\n\
    \      if difference < smallest_difference\n        smallest_difference = difference\n\
    \        smallest_index = other_number\n      end\n    end\n    return smallest_index,\
    \ smallest_difference\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    closest_index = index\n    closest_distance = number\n    numbers.each do\
    \ |other_number|\n      distance = other_number - number\n      if distance <\
    \ 0\n        closest_index = other_number\n        closest_distance = distance\n\
    \      end\n    end\n    return numbers[closest_index], numbers[closest_index]\
    \ if closest_distance < number\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    second_smallest_distance = number\n    \n    numbers.each_with_index\
    \ do |number_2, index_2|\n      distance = abs(number - number_2)\n      \n  \
    \    if distance < smallest_distance\n        smallest_distance = distance\n \
    \       second_smallest_distance = number_2\n      end\n    end\n    \n    break\
    \ if smallest_distance == number\n    \n    break if smallest_distance < second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance\n    \n    break\
    \ if smallest_distance > second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance && number < second_smallest_distance\n    \n   \
    \ break if smallest_distance == second_smallest_distance && number > second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance && number ==\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ && number != second_smallest_distance\n    \n    break if smallest_distance\
    \ != second_smallest_distance && number < second_smallest_distance\n    \n   \
    \ break if smallest_distance != second_smallest_distance && number > second_smallest_distance\n\
    \    \n    break if smallest_distance != second_smallest_distance && number ==\
    \ second_smallest_distance\n    \n    break if smallest_distance != second_smallest_distance\
    \ && number != second_smallest_distance\n    \n    break if smallest_distance\
    \ != second_smallest_distance && number < second_smallest_distance && number >\
    \ second_smallest_distance\n    \n    break if smallest_distance != second_smallest_distance\
    \ && number == second_smallest_distance && number != second_smallest_distance\n\
    \    \n    break if smallest_distance != second_smallest_distance && number >\
    \ second_smallest_distance && number < second_smallest_distance\n    \n    break\
    \ if smallest_distance != second_smallest_distance && number == second_smallest_distance\
    \ && number != second_smallest_distance\n    \n    break if smallest_distance\
    \ != second_smallest_distance && number != second_smallest_distance && number\
    \ < second_smallest_distance\n    \n    break if smallest_distance != second_smallest_distance\
    \ && number != second_smallest_distance && number > second_smallest_distance\n\
    \    \n    break if smallest_distance != second_smallest_distance && number !=\
    \ second_smallest_distance && number == second_smallest_distance\n    \n    break\
    \ if smallest_distance != second_smallest_distance && number != second_smallest_distance ",
  "  numbers.each_with_index do |number, index|\n    smallest_index = index\n    smallest_distance\
    \ = number\n    numbers.each do |other_number|\n      distance = other_number\
    \ - number\n      next if distance == 0\n      next if distance < 0\n      next\
    \ if distance > smallest_distance\n      smallest_distance = distance\n      smallest_index\
    \ = other_number\n    end\n    break if smallest_index == index\n    numbers[smallest_index],\
    \ numbers[index] = numbers[index], numbers[smallest_index]\n  end\n  numbers\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_index = index\n\
    \    smallest_distance = number\n    numbers.each do |number|\n      distance\
    \ = number - numbers[index] if index != 0\n      break if distance < smallest_distance\n\
    \      smallest_distance = distance\n      smallest_index = index\n    end\n \
    \   break if smallest_distance == 0\n    numbers[smallest_index], numbers[index]\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    smallest_index = index\n\
    \    second_smallest_index = index\n    numbers.each do |number|\n      difference\
    \ = number - numbers[index - 1]\n      if difference < smallest_difference\n \
    \       second_smallest_difference = smallest_difference\n        second_smallest_index\
    \ = smallest_index\n        smallest_difference = difference\n        smallest_index\
    \ = index\n      elsif difference > second_smallest_difference\n        second_smallest_difference\
    \ = difference\n        second_smallest_index = index\n      end\n    end\n  \
    \  [smallest_difference, numbers[smallest_index], numbers[second_smallest_index]]\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number_to_compare,\
    \ index_to_compare|\n      distance = abs(number_to_compare - number)\n      if\
    \ distance < smallest_distance\n        smallest_distance = distance\n       \
    \ smallest_index = index_to_compare\n      end\n    end\n    [number, numbers[smallest_index]]\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    break if index\
    \ == 0\n    break if number == numbers[index - 1]\n    break if number == numbers[index\
    \ + 1]\n    break if number == numbers[index - 2]\n    break if number == numbers[index\
    \ + 2]\n    break if number == numbers[index - 3]\n    break if number == numbers[index\
    \ + 3]\n    break if number == numbers[index - 4]\n    break if number == numbers[index\
    \ + 4]\n    break if number == numbers[index - 5]\n    break if number == numbers[index\
    \ + 5]\n    break if number == numbers[index - 6]\n    break if number == numbers[index\
    \ + 6]\n    break if number == numbers[index - 7]\n    break if number == numbers[index\
    \ + 7]\n    break if number == numbers[index - 8]\n    break if number == numbers[index\
    \ + 8]\n    break if number == numbers[index - 9]\n    break if number == numbers[index\
    \ + 9]\n    break if number == numbers[index - 10]\n    break if number == numbers[index\
    \ + 10]\n    break if number == numbers[index - 11]\n    break if number == numbers[index\
    \ + 11]\n    break if number == numbers[index - 12]\n    break if number == numbers[index\
    \ + 12]\n    break if number == numbers[index - 13]\n    break if number == numbers[index\
    \ + 13]\n    break if number == numbers[index - 14]\n    break if number == numbers[index\
    \ + 14]\n    break if number == numbers[index - 15]\n    break if number == numbers[index\
    \ + 15]\n    break if number == numbers[index - 16]\n    break if number == numbers[index\
    \ + 16]\n    break if number == numbers[index - 17]\n    break if number == numbers[index\
    \ + 17]\n    break if number == numbers[index - 18]\n    break if number == numbers[index\
    \ + 18]\n    break if number == numbers[index - 19]\n    break if number == numbers[index\
    \ + 19]\n    break if number == numbers[index - 20]\n    break if number == numbers[index\
    \ + 20]\n    break if number == numbers[index - 21]\n    break if number == numbers[index\
    \ + 21]\n    break if number == numbers[index - 22]\n    break if number == numbers[index\
    \ + 22]\n    break if number == numbers[index - 23]\n    break if number == numbers[index\
    \ + 23]\n    break if number == numbers[index - 24]\n", "  numbers.sort!\n  smallest\
    \ = numbers[0]\n  largest = numbers[-1]\n  smallest_index = -1\n  largest_index\
    \ = -1\n  numbers.each_with_index do |n, i|\n    if n < smallest\n      smallest\
    \ = n\n      smallest_index = i\n    end\n    if n > largest\n      largest =\
    \ n\n      largest_index = i\n    end\n  end\n  [smallest, largest]\nend", " \
    \ numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |number2, index2|\n\
    \      distance = number - number2\n      next if distance == 0\n      next if\
    \ distance < 0\n      next if index == index2\n      next if index2 < index\n\
    \      next if distance < smallest_distance\n      smallest_distance = distance\n\
    \      smallest_index = index2\n    end\n    [number, numbers[smallest_index]]\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number,\
    \ index|\n      distance = number - smallest_distance\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index\n      end\n\
    \    end\n    yield smallest_distance, numbers[smallest_index]\n  end\nend", " \
    \ numbers.each_with_index do |number, index|\n    smallest_difference = number\n\
    \    second_smallest_difference = number\n    index = index + 1\n    numbers.each_with_index\
    \ do |number_to_compare, index_to_compare|\n      difference = number_to_compare\
    \ - number\n      if difference < smallest_difference\n        smallest_difference\
    \ = difference\n        second_smallest_difference = number_to_compare\n     \
    \ end\n      if difference > smallest_difference\n        second_smallest_difference\
    \ = difference\n      end\n    end\n    if smallest_difference != number\n   \
    \   return [smallest_difference, second_smallest_difference]\n    end\n  end\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |other_number, other_index|\n\
    \      distance = other_number - number\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = other_index\n\
    \      end\n    end\n    return smallest_index, smallest_distance\n  end\nend",
  "  numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |other_number, other_index|\n\
    \      distance = abs(number - other_number)\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = other_index\n\
    \      end\n    end\n    return smallest_index, smallest_distance\n  end\nend",
  "  numbers.each_with_index do |number, index|\n    closest_index = index\n    closest_distance\
    \ = number\n    numbers.each_with_index do |number2, index2|\n      distance =\
    \ number2 - number\n      if distance < 0\n        closest_index = index2\n  \
    \      closest_distance = distance\n      end\n    end\n    return numbers[closest_index],\
    \ numbers[closest_index] if closest_distance < number\n  end\nend", "  numbers.each_with_index\
    \ do |n, i|\n    break if i == 0\n    break if numbers[i-1] <= n\n    break if\
    \ numbers[i+1] <= n\n    numbers[i-1], numbers[i+1] = numbers[i+1], numbers[i-1]\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |n, i|\n    break if i\
    \ == 0\n    break if numbers[i-1] < n\n    break if numbers[i-1] > n\n    numbers[i-1],\
    \ numbers[i] = numbers[i], numbers[i-1]\n  end\n  numbers\nend\n</code>\n<|/ a\
    \ tags=ruby,arrays |>\n<| c |>\nThanks for your answer. Your solution is very\
    \ elegant and works perfectly. However I accepted the other answer because I like\
    \ the way you used the each_with_index method. Thanks again!\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number,\
    \ index|\n      distance = number - smallest_distance\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index\n      end\n\
    \    end\n    smallest_index, smallest_distance\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    closest_index = index\n    closest_distance = number\n\
    \    numbers.each do |other_number|\n      distance = other_number - number\n\
    \      if distance < 0\n        closest_index = other_number\n        closest_distance\
    \ = distance\n      end\n    end\n    [number, closest_distance]\n  end\nend",
  "  numbers.sort!\n  smallest = numbers[0]\n  largest = numbers[-1]\n  smallest_index\
    \ = -1\n  largest_index = -1\n  numbers.each do |number|\n    if number < smallest\n\
    \      smallest = number\n      smallest_index = numbers.index(number)\n    end\n\
    \    if number > largest\n      largest = number\n      largest_index = numbers.index(number)\n\
    \    end\n  end\n  [smallest, largest]\nend", "  numbers.each_with_index do |n,\
    \ i|\n    break if i == 0\n    break if numbers[i-1] > n\n    break if numbers[i+1]\
    \ < n\n    numbers[i-1], numbers[i+1] = numbers[i+1], numbers[i-1]\n  end\n  numbers\n\
    end", "  numbers.each_with_index do |n, i|\n    j = i+1\n    break if j == numbers.size\
    \ # if we have reached the end of the list, stop\n    break if numbers[j] - numbers[i]\
    \ < numbers[j] - numbers[i] # if the difference between the two numbers is less\
    \ than the difference between the two numbers before, stop\n    return numbers[i],\
    \ numbers[j] # return the two numbers that are closest to each other\n  end\n\
    end\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like the use of each_with_index\
    \ here, but I believe this would fail if the array is sorted in descending order.\
    \ For example, `find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 2.2])` would return\
    \ `[2.1, 2.2]` instead of `[2.1, 2.0]`.\n<|/ c |>\n<| c |>\nGood point. I'll add\
    \ a note about that to the answer.\n<|/ c |>\n<| c |>\nI added a note about that\
    \ to the answer.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    smallest_index = index\n\
    \    numbers.each do |other_number|\n      difference = other_number - number\n\
    \      if difference < smallest_difference\n        smallest_difference = difference\n\
    \        smallest_index = other_number\n      end\n    end\n    return smallest_index,\
    \ smallest_index\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |number, index|\n      distance = number - smallest_distance\n      if distance\
    \ < smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = index\n      end\n    end\n    [smallest_distance, numbers[smallest_index]]\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      distance = other_number - number\n      next if distance\
    \ == 0\n      distance = distance * distance\n      distance = distance ** 0.5\n\
    \      if distance < smallest_distance\n        smallest_distance = distance\n\
    \        smallest_index = other_index\n      end\n    end\n    return smallest_index,\
    \ smallest_distance\n  end\nend", "  numbers.each_with_index do |n, i|\n    smallest\
    \ = i\n    largest = i\n    numbers.each_with_index do |n2, j|\n      if n2 >\
    \ n && n2 < largest\n        largest = j\n      elsif n2 < n && n2 < smallest\n\
    \        smallest = j\n      end\n    end\n    if smallest != i\n      yield numbers[smallest],\
    \ numbers[largest]\n    end\n  end\nend", "  numbers.each_with_index do |n, i|\n\
    \    smallest_difference = numbers[i+1] - n\n    smallest_difference_index = i\
    \ + 1\n    break if smallest_difference == 0\n    break if smallest_difference\
    \ < 0\n  end\n  [numbers[smallest_difference_index], numbers[smallest_difference_index+1]]\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |number, index|\n\
    \      distance = number - smallest_distance\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index\n      end\n\
    \    end\n    return smallest_distance, numbers[smallest_index]\n  end\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like this solution, but\
    \ I feel like it could be improved. For example, if you have `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]`\
    \ and you want the closest two numbers to each other, you could do `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15].each_cons(2).map\
    \ { |a,b| [a,b].min }`\n<|/ c |>\n<| c |>\nYes, that would work, but I thought\
    \ it would be more efficient to find the closest two numbers to each other and\
    \ then find the closest two numbers to those two numbers. I guess it depends on\
    \ how big the array is.\n<|/ c |>\n<| c |>\nI agree that your solution is more\
    \ efficient, but I thought it would be more efficient to find the closest two\
    \ numbers to each other and then find the closest two numbers to those two numbers.\
    \ I guess it depends on how big the array is.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. My solution was more of a proof of concept to show that there could be\
    \ a better solution. Your solution is more efficient.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "  numbers.sort!\n  smallest = numbers[0]\n  largest = numbers[-1]\n\
    \  smallest_index = numbers.index(smallest)\n  largest_index = numbers.index(largest)\n\
    \  if smallest_index == largest_index\n    return smallest, largest\n  else\n\
    \    smallest_difference = largest - smallest\n    largest_difference = largest\
    \ - largest\n    smallest_index = numbers.index(smallest)\n    largest_index =\
    \ numbers.index(largest)\n    if smallest_difference < largest_difference\n  \
    \    return numbers[smallest_index], numbers[largest_index]\n    else\n      return\
    \ numbers[largest_index], numbers[smallest_index]\n    end\n  end\nend", "  numbers.each_with_index\
    \ do |n, i|\n    smallest = i\n    largest = i\n    numbers.each_with_index do\
    \ |m, j|\n      next if j == i\n      next if m == n\n      next if m < n and\
    \ m < smallest\n      next if m > n and m > largest\n      smallest = j\n    \
    \  largest = j\n    end\n    [numbers[smallest], numbers[largest]]\n  end\nend",
  "  numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    second_smallest_distance = number\n    second_smallest_index = index\n  \
    \  smallest_index = index\n    numbers.each_with_index do |number_to_compare,\
    \ index_to_compare|\n      distance = abs(number_to_compare - number)\n      if\
    \ distance < smallest_distance\n        smallest_distance = distance\n       \
    \ smallest_index = index_to_compare\n      elsif distance < second_smallest_distance\n\
    \        second_smallest_distance = distance\n        second_smallest_index =\
    \ index_to_compare\n      end\n    end\n    [smallest_distance, second_smallest_distance,\
    \ smallest_index, second_smallest_index]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    closest_index = index\n    closest_distance = number\n\
    \    numbers.each_with_index do |number2, index2|\n      next if index == index2\n\
    \      distance = number - number2\n      next if distance == 0\n      distance\
    \ = distance * distance\n      if distance < closest_distance\n        closest_distance\
    \ = distance\n        closest_index = index2\n      end\n    end\n    return numbers[closest_index],\
    \ numbers[closest_index + 1]\n  end\nend", "  numbers.sort!\n  smallest = numbers[0]\n\
    \  largest = numbers[-1]\n  smallest_index = numbers.index(smallest)\n  largest_index\
    \ = numbers.index(largest)\n  smallest_number = numbers[smallest_index]\n  largest_number\
    \ = numbers[largest_index]\n  return [smallest_number, largest_number]\nend",
  "  numbers.each_with_index do |number, index|\n    closest_index = index\n    closest_distance\
    \ = number\n    numbers.each_with_index do |number2, index2|\n      next if index\
    \ == index2\n      distance = number2 - number\n      break if distance < 0\n\
    \      break if distance > closest_distance\n      closest_distance = distance\n\
    \      closest_index = index2\n    end\n    return numbers[closest_index], numbers[closest_index]\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    break if index\
    \ == 0\n    break if index == numbers.length - 1\n    break if number == numbers[index\
    \ + 1]\n    break if number == numbers[index - 1]\n    break if number == numbers[index\
    \ - 2]\n    break if number == numbers[index - 3]\n    break if number == numbers[index\
    \ - 4]\n    break if number == numbers[index - 5]\n    break if number == numbers[index\
    \ - 6]\n    break if number == numbers[index - 7]\n    break if number == numbers[index\
    \ - 8]\n    break if number == numbers[index - 9]\n    break if number == numbers[index\
    \ - 10]\n    break if number == numbers[index - 11]\n    break if number == numbers[index\
    \ - 12]\n    break if number == numbers[index - 13]\n    break if number == numbers[index\
    \ - 14]\n    break if number == numbers[index - 15]\n    break if number == numbers[index\
    \ - 16]\n    break if number == numbers[index - 17]\n    break if number == numbers[index\
    \ - 18]\n    break if number == numbers[index - 19]\n    break if number == numbers[index\
    \ - 20]\n    break if number == numbers[index - 21]\n    break if number == numbers[index\
    \ - 22]\n    break if number == numbers[index - 23]\n    break if number == numbers[index\
    \ - 24]\n    break if number == numbers[index - 25]\n    break if number == numbers[index\
    \ - 26]\n    break if number == numbers[index - 27]\n    break if number == numbers[index\
    \ - 28]\n    break if number == numbers[index - 29]\n    break if number == numbers[index\
    \ - 30]\n    break if number == numbers[index - 31]\n    break if number == numbers[index\
    \ - 32]\n    break if number == numbers[index - 33]\n    break if number == numbers[index\
    \ - 34]\n    break if number == numbers[index - 35]\n    break if number == numbers[index\
    \ - 36]\n    break if number == numbers[index - 37]\n    break if number == numbers[index\
    \ - 38]\n    break if number == numbers[index - 39]\n    break if number == numbers[index\
    \ - 40]\n    break if number == numbers[index - 41]\n    break if number == numbers[index\
    \ - 42]\n    break if number == numbers[index - 43]\n    break if number == numbers[index\
    \ - 44]\n    break if number ", "  numbers.each_with_index do |number, index|\n\
    \    smallest_difference = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |other_number, other_index|\n      difference = other_number - number\n \
    \     if difference < smallest_difference\n        smallest_difference = difference\n\
    \        smallest_index = other_index\n      end\n    end\n    smallest_index\n\
    \  end\nend", "  numbers.sort!\n  smallest = numbers[0]\n  largest = numbers[-1]\n\
    \  smallest_index = nil\n  largest_index = nil\n  numbers.each_with_index do |number,\
    \ index|\n    if number < smallest then\n      smallest = number\n      smallest_index\
    \ = index\n    end\n    if number > largest then\n      largest = number\n   \
    \   largest_index = index\n    end\n  end\n  [smallest, largest]\nend", "  numbers.each_with_index\
    \ do |number, index|\n    closest_index = index\n    closest_distance = number\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number2 -\
    \ number\n      if distance < closest_distance\n        closest_distance = distance\n\
    \        closest_index = index2\n      end\n    end\n    return numbers[closest_index],\
    \ numbers[closest_index + 1]\n  end\nend", "  numbers.each_with_index do |number,\
    \ index|\n    smallest_distance = number\n    second_smallest_distance = number\n\
    \    \n    numbers.each_with_index do |other_number, other_index|\n      distance\
    \ = calculate_distance(number, other_number)\n      \n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        second_smallest_distance = other_number\n\
    \      end\n    end\n    \n    return smallest_distance, second_smallest_distance\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    second_smallest_index\
    \ = index\n    smallest_index = index\n    numbers.each_with_index do |number_2,\
    \ index_2|\n      difference = abs(number - number_2)\n      if difference < smallest_difference\n\
    \        smallest_difference = difference\n        second_smallest_difference\
    \ = difference\n        second_smallest_index = index_2\n        smallest_index\
    \ = index_2\n      end\n    end\n    break if smallest_index == second_smallest_index\n\
    \  end\n  [numbers[smallest_index], numbers[second_smallest_index]]\nend", " \
    \ numbers.each_with_index do |n, i|\n    j = i+1\n    break if j == numbers.size\
    \ # No more numbers to check\n    break if numbers[j] - n < numbers[i] - n # Found\
    \ a closer number\n    break if numbers[j] - n > numbers[i] - n # Found a closer\
    \ number\n    numbers[i], numbers[j] = numbers[j], numbers[i]\n  end\n  numbers\n\
    end", "  numbers.each_with_index do |number, index|\n    closest_index = index\n\
    \    closest_distance = number\n    numbers.each_with_index do |number2, index2|\n\
    \      next if index == index2\n      distance = number - number2\n      break\
    \ if distance < 0\n      break if distance < closest_distance\n      closest_index\
    \ = index2\n      closest_distance = distance\n    end\n    return numbers[closest_index],\
    \ numbers[closest_index + 1]\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ looping through the array twice?\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't require looping through the array twice. Hope it helps.\n<|/ c |>\n\
    <| c |>\nI like the second solution, but I wonder if there is a way to do it without\
    \ looping through the array twice?\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't require looping through the array twice. Hope it helps.\n<|/ c |>\n\
    <| c |>\nI like the second solution, but I wonder if there is a way to do it without\
    \ looping through the array twice?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number - number2\n\
    \      if distance < 0\n        smallest_index = index2\n        smallest_distance\
    \ = distance\n      end\n    end\n    break if smallest_distance == number\n \
    \   break if smallest_distance < number\n    break if smallest_distance > number\n\
    \    break if smallest_distance == 0\n    break if smallest_distance == -1\n \
    \   break if smallest_distance == -2\n    break if smallest_distance == -3\n \
    \   break if smallest_distance == -4\n    break if smallest_distance == -5\n \
    \   break if smallest_distance == -6\n    break if smallest_distance == -7\n \
    \   break if smallest_distance == -8\n    break if smallest_distance == -9\n \
    \   break if smallest_distance == -10\n    break if smallest_distance == -11\n\
    \    break if smallest_distance == -12\n    break if smallest_distance == -13\n\
    \    break if smallest_distance == -14\n    break if smallest_distance == -15\n\
    \    break if smallest_distance == -16\n    break if smallest_distance == -17\n\
    \    break if smallest_distance == -18\n    break if smallest_distance == -19\n\
    \    break if smallest_distance == -20\n    break if smallest_distance == -21\n\
    \    break if smallest_distance == -22\n    break if smallest_distance == -23\n\
    \    break if smallest_distance == -24\n    break if smallest_distance == -25\n\
    \    break if smallest_distance == -26\n    break if smallest_distance == -27\n\
    \    break if smallest_distance == -28\n    break if smallest_distance == -29\n\
    \    break if smallest_distance == -30\n    break if smallest_distance == -31\n\
    \    break if smallest_distance == -32\n    break if smallest_distance == -33\n\
    \    break if smallest_distance == -34\n    break if smallest_distance == -35\n\
    \    break if smallest_distance == -36\n    break if smallest_distance == -37\n\
    \    break if smallest_distance == -38\n    break if smallest_distance == -39\n\
    \    break if smallest_distance == -40\n    break if smallest_distance == -41\n\
    \    break if smallest_distance == -42\n    break if smallest_distance == -43\n\
    \    ", "  numbers.sort!\n  smallest_number = numbers[0]\n  largest_number = numbers[-1]\n\
    \  smallest_index = 0\n  largest_index = numbers.length - 1\n  while smallest_index\
    \ < largest_index\n    mid_index = (smallest_index + largest_index) / 2\n    mid_value\
    \ = numbers[mid_index]\n    if mid_value < smallest_number\n      smallest_number\
    \ = mid_value\n      smallest_index = mid_index\n    elsif mid_value > largest_number\n\
    \      largest_number = mid_value\n      largest_index = mid_index\n    else\n\
    \      break\n    end\n  end\n  return [smallest_number, largest_number]\nend",
  "  numbers.each_with_index do |number, index|\n    closest_index = index\n    closest_distance\
    \ = number\n    numbers.each_with_index do |number2, index2|\n      distance =\
    \ number - number2\n      if distance < 0\n        closest_index = index2\n  \
    \      closest_distance = distance\n      end\n    end\n    return numbers[closest_index],\
    \ numbers[closest_index] if closest_distance < 0\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  numbers.each_with_index do |number, index|\n\
    \    closest_index = index\n    closest_distance = number\n    numbers.each_with_index\
    \ do |number2, index2|\n      distance = number - number2\n      if distance <\
    \ closest_distance\n        closest_distance = distance\n        closest_index\
    \ = index2\n      end\n    end\n    break if closest_index == index\n    numbers[closest_index],\
    \ numbers[index] = numbers[index], numbers[closest_index]\n  end\n  numbers\n\
    end", "  numbers.sort!\n  smallest_number = numbers[0]\n  largest_number = numbers[-1]\n\
    \  smallest_index = numbers.index(smallest_number)\n  largest_index = numbers.index(largest_number)\n\
    \  if smallest_index == largest_index\n    return smallest_number, smallest_number\n\
    \  else\n    return numbers[smallest_index], numbers[largest_index]\nend", " \
    \ numbers.each_with_index do |n, i|\n    j = i+1\n    break if j == numbers.length\n\
    \    break if numbers[j] - n < numbers[i] - n\n    break if numbers[j] - n > numbers[i]\
    \ - n\n    break if numbers[j] - n == numbers[i] - n\n    break if numbers[j]\
    \ - n < numbers[i] - n\n    break if numbers[j] - n > numbers[i] - n\n    break\
    \ if numbers[j] - n == numbers[i] - n\n    break if numbers[j] - n < numbers[i]\
    \ - n\n    break if numbers[j] - n > numbers[i] - n\n    break if numbers[j] -\
    \ n == numbers[i] - n\n    break if numbers[j] - n < numbers[i] - n\n    break\
    \ if numbers[j] - n > numbers[i] - n\n    break if numbers[j] - n == numbers[i]\
    \ - n\n    break if numbers[j] - n < numbers[i] - n\n    break if numbers[j] -\
    \ n > numbers[i] - n\n    break if numbers[j] - n == numbers[i] - n\n    break\
    \ if numbers[j] - n < numbers[i] - n\n    break if numbers[j] - n > numbers[i]\
    \ - n\n    break if numbers[j] - n == numbers[i] - n\n    break if numbers[j]\
    \ - n < numbers[i] - n\n    break if numbers[j] - n > numbers[i] - n\n    break\
    \ if numbers[j] - n == numbers[i] - n\n    break if numbers[j] - n < numbers[i]\
    \ - n\n    break if numbers[j] - n > numbers[i] - n\n    break if numbers[j] -\
    \ n == numbers[i] - n\n    break if numbers[j] - n < numbers[i] - n\n    break\
    \ if numbers[j] - n > numbers[i] - n\n    break if numbers[j] - n == numbers[i]\
    \ - n\n    break if numbers[j] - n < numbers[i] - n\n    break if numbers[j] -\
    \ n > numbers[i] - n\n    break if numbers[j] - n == numbers[i] - n\n    break\
    \ if numbers[j] - n < numbers[i] - n\n    break if numbers[j] - n > numbers[i]\
    \ - n\n    break if numbers[j] - n == numbers[i] - n\n    break if numbers[j]\
    \ - n < numbers[i] - n\n    break if numbers[j] - n > numbers[i] - n\n    break\
    \ if numbers[j] - n == numbers[i] - n\n    break if numbers[j] - n < numbers[i]\
    \ - n\n    break if numbers[j] - n > numbers[i] - n\n    break if numbers[j] -\
    \ n == numbers[i] - n\n    break if numbers[j] - n < numbers[i] - n\n    break\
    \ if numbers[j] - n > number", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |number_to_compare, index_to_compare|\n      distance = abs(number_to_compare\
    \ - number)\n      if distance < smallest_distance\n        smallest_distance\
    \ = distance\n        smallest_index = index_to_compare\n      end\n    end\n\
    \    [number, numbers[smallest_index]]\n  end\nend", "  numbers.sort!\n  smallest\
    \ = numbers[0]\n  largest = numbers[0]\n  smallest_index = nil\n  largest_index\
    \ = nil\n  numbers.each do |number|\n    if number < smallest\n      smallest\
    \ = number\n      smallest_index = numbers.index(number)\n    end\n    if number\
    \ > largest\n      largest = number\n      largest_index = numbers.index(number)\n\
    \    end\n  end\n  [smallest, largest]\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't work if the array has duplicates. For example, `find_closest_elements([1,\
    \ 2, 3, 1, 2, 3])` returns `[3, 3]` instead of `[1, 3]`.\n<|/ c |>\n<| c |>\n\
    I added a version that works with duplicates.\n<|/ c |>\n<| c |>\nThanks, I added\
    \ a version that works with duplicates.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  numbers.sort!\n  smallest = numbers[0]\n  largest = numbers[0]\n\
    \  smallest_index = -1\n  largest_index = -1\n  numbers.each do |number|\n   \
    \ if number < smallest then\n      smallest = number\n      smallest_index = numbers.index(number)\n\
    \    end\n    if number > largest then\n      largest = number\n      largest_index\
    \ = numbers.index(number)\n    end\n  end\n  [smallest, largest]\nend", "  numbers.sort!\n\
    \  smallest = numbers[0]\n  largest = numbers[-1]\n  smallest_index = -1\n  largest_index\
    \ = -1\n  numbers.each_with_index do |number, index|\n    if number < smallest\
    \ then\n      smallest_index = index\n      smallest = number\n    elsif number\
    \ > largest then\n      largest_index = index\n      largest = number\n    end\n\
    \  end\n  [smallest, largest]\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |number, index|\n      distance = number - smallest_distance\n      if distance\
    \ < smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = index\n      end\n    end\n    smallest_index, smallest_distance\n  end\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_index = index\n\
    \    smallest_distance = number\n    numbers.each_with_index do |number, index|\n\
    \      distance = abs(number - number)\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index\n      end\n\
    \    end\n    return smallest_index, smallest_distance\n  end\nend", "  numbers.each_with_index\
    \ do |n, i|\n    break if i == 0\n    break if numbers[i-1] <= n\n    break if\
    \ numbers[i+1] <= n\n    break if numbers[i-1] > n\n    break if numbers[i+1]\
    \ > n\n    return [n,n]\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    second_smallest_distance = number\n    \n\
    \    numbers.each_with_index do |number_2, index_2|\n      distance = calculate_distance(number,\
    \ number_2)\n      \n      if distance < smallest_distance\n        smallest_distance\
    \ = distance\n        second_smallest_distance = number_2\n      end\n    end\n\
    \    \n    if smallest_distance == number\n      smallest_distance = number\n\
    \      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance < number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance != number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance < number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance == number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance == number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance < number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance < number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance == number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance == number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance < number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance < number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance == number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance == number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance < number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance < number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance == number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance == number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance < number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance < number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance == number\n      smallest_distance\
    \ = number\n    end\n    \n    if second_smallest_distance == number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance < number\n      ", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    smallest_difference_index = index\n    second_smallest_difference_index\
    \ = index\n    numbers.each do |other_number|\n      difference = other_number\
    \ - number\n      smallest_difference = other_number if difference < smallest_difference\n\
    \      second_smallest_difference = other_number if difference < second_smallest_difference\n\
    \      smallest_difference_index = index if difference < smallest_difference_index\n\
    \      second_smallest_difference_index = index if difference < second_smallest_difference_index\n\
    \    end\n  end\n  [numbers[smallest_difference_index], numbers[second_smallest_difference_index]]\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_difference =\
    \ number\n    smallest_index = index\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      difference = other_number - number\n      if difference\
    \ < smallest_difference\n        smallest_difference = difference\n        smallest_index\
    \ = other_index\n      end\n    end\n    return smallest_index, smallest_index\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    second_smallest_distance = number\n    \n    if index > 0\n  \
    \    second_smallest_distance = numbers[index-1]\n    end\n    \n    if smallest_distance\
    \ == second_smallest_distance\n      smallest_distance = number\n    end\n   \
    \ \n    if smallest_distance != number\n      smallest_distance = number\n   \
    \   second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ != number\n      smallest_distance = number\n      second_smallest_distance\
    \ = number\n    end\n    \n    if smallest_distance != number\n      smallest_distance\
    \ = number\n      second_smalle", "  numbers.sort!\n  smallest = numbers[0]\n\
    \  largest = numbers[0]\n  smallest_index = nil\n  largest_index = nil\n  numbers.each\
    \ do |number|\n    if number < smallest\n      smallest = number\n      smallest_index\
    \ = number\n    end\n    if number > largest\n      largest = number\n      largest_index\
    \ = number\n    end\n  end\n  [smallest, largest]\nend", "  numbers.sort!\n  smallest\
    \ = numbers[0]\n  largest = numbers[0]\n  numbers.each do |number|\n    if number\
    \ < smallest then\n      smallest = number\n    elsif number > largest then\n\
    \      largest = number\n    end\n  end\n  [smallest, largest]\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=ruby,arrays |>\n<code>", "  numbers.sort!\n  smallest\
    \ = numbers[0]\n  largest = numbers[0]\n  smallest_index = nil\n  largest_index\
    \ = nil\n  numbers.each do |number|\n    if number < smallest then\n      smallest\
    \ = number\n      smallest_index = numbers.index(number)\n    end\n    if number\
    \ > largest then\n      largest = number\n      largest_index = numbers.index(number)\n\
    \    end\n  end\n  [smallest, largest]\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't work if there are two elements that are equally close.\
    \ For example, `find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6])` returns\
    \ `[4.4, 5.5]`.\n<|/ c |>\n<| c |>\nI added a version that does work if there\
    \ are two elements that are equally close.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\nHere's a solution using Enumerable#min_by and Enumerable#max_by:\n<code>",
  "  numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |number2, index2|\n\
    \      distance = number - number2\n      next if distance == 0\n      next if\
    \ distance < 0\n      next if smallest_index == index2\n      next if smallest_distance\
    \ > distance\n      smallest_distance = distance\n      smallest_index = index2\n\
    \    end\n    [number, numbers[smallest_index]]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    second_smallest_distance\
    \ = number\n    \n    numbers.each_with_index do |number_2, index_2|\n      distance\
    \ = number_2 - number\n      \n      if distance < smallest_distance\n       \
    \ smallest_distance = distance\n        second_smallest_distance = number_2\n\
    \      end\n    end\n    \n    return smallest_distance, second_smallest_distance\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are\
    \ two numbers that are equally close. Try it with `find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])`\n<|/ c |>\n<| c |>\nI see what you mean. I've updated\
    \ the answer to account for that case.\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ numbers.each_with_index do |number, index|\n    smallest_difference = number\n\
    \    second_smallest_difference = number\n    second_smallest_index = index\n\
    \    smallest_index = index\n    numbers.each_with_index do |number_2, index_2|\n\
    \      difference = number - number_2\n      if difference < smallest_difference\n\
    \        smallest_difference = difference\n        smallest_index = index_2\n\
    \      elsif difference > second_smallest_difference\n        second_smallest_difference\
    \ = difference\n        second_smallest_index = index_2\n      end\n    end\n\
    \    [number, numbers[smallest_index]]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |number, index|\n      distance = number - smallest_distance\n\
    \      if distance < smallest_distance\n        smallest_distance = distance\n\
    \        smallest_index = index\n      end\n    end\n    [smallest_distance, numbers[smallest_index]]\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    second_smallest_index\
    \ = index\n    smallest_index = index\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      difference = other_number - number\n      smallest_difference\
    \ = difference if difference < smallest_difference\n      second_smallest_difference\
    \ = difference if difference < second_smallest_difference\n      second_smallest_index\
    \ = other_index if other_index < second_smallest_index\n      smallest_index =\
    \ other_index if other_index < smallest_index\n    end\n    [smallest_difference,\
    \ second_smallest_difference, smallest_index, second_smallest_index]\n  end\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_difference =\
    \ number\n    second_smallest_difference = number\n    second_smallest_index =\
    \ index\n    smallest_index = index\n    numbers.each_with_index do |number_to_compare,\
    \ index_to_compare|\n      difference = number_to_compare - number\n      if difference\
    \ < smallest_difference\n        smallest_difference = difference\n        second_smallest_difference\
    \ = difference\n        second_smallest_index = index_to_compare\n        smallest_index\
    \ = index_to_compare\n      end\n    end\n    [number, numbers[second_smallest_index]]\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your answer, but\
    \ this doesn't seem to work. `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])` returns `[2.0, 2.2]` instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nAh,\
    \ I see what you're saying. I'll update my answer.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution that should work. Let me know if it works.\n\
    <|/ c |>\n<| c |>\nI appreciate your effort, but this still doesn't work. `find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])` returns `[2.0, 2.2]` instead of `(2.0, 2.2)`.\n<|/\
    \ c |>\n<| c |>\nI updated my answer to include a solution that should work. Let\
    \ me know if it works.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |number, index|\n      distance = number - smallest_distance\n\
    \      if distance < smallest_distance\n        smallest_distance = distance\n\
    \        smallest_index = index\n      end\n    end\n    return smallest_distance,\
    \ numbers[smallest_index]\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work if there are two numbers that are equally close. Try it with `find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])`\n<|/ c |>\n<| c |>\nYes, I see that now. I'll fix\
    \ it.\n<|/ c |>\n<| c |>\nFixed it. I was thinking about it too much and didn't\
    \ think of it that way.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  numbers.sort!\n\
    \  smallest = numbers[0]\n  largest = numbers[-1]\n  smallest_index = -1\n  largest_index\
    \ = -1\n  numbers.each_with_index do |number, index|\n    if number < smallest\n\
    \      smallest = number\n      smallest_index = index\n    end\n    if number\
    \ > largest\n      largest = number\n      largest_index = index\n    end\n  end\n\
    \  [smallest, largest]\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_difference = number\n    second_smallest_difference = number\n \
    \   second_smallest_index = index\n    smallest_index = index\n    numbers.each\
    \ do |other_number|\n      difference = other_number - number\n      if difference\
    \ < smallest_difference\n        smallest_difference = difference\n        second_smallest_difference\
    \ = difference\n        second_smallest_index = smallest_index\n        smallest_index\
    \ = index\n      end\n    end\n    break if smallest_difference == number\n  \
    \  [number, numbers[second_smallest_index]]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    \n    numbers[index + 1].downto(index - 1) do |number_index|\n\
    \      difference = number_index - index\n      \n      if difference < smallest_difference\n\
    \        smallest_difference = difference\n        second_smallest_difference\
    \ = number\n      end\n    end\n    \n    return smallest_difference, second_smallest_difference\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your\
    \ code is working fine but i want to know that how can i implement this code in\
    \ my code because i want to implement this code in my code but i don't know how\
    \ can i implement this code in my code. Can you please help me to implement this\
    \ code in my code?\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code is working fine\
    \ but i want to know that how can i implement this code in my code because i want\
    \ to implement this code in my code but i don't know how can i implement this\
    \ code in my code. Can you please help me to implement this code in my code?\n\
    <|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  numbers.each_with_index do |number, index|\n   \
    \ smallest_difference = number\n    second_smallest_difference = number\n    \n\
    \    numbers[index + 1].upto(numbers.size - 1) do |index|\n      difference =\
    \ numbers[index] - number\n      \n      if difference < smallest_difference\n\
    \        smallest_difference = difference\n        second_smallest_difference\
    \ = number\n      end\n    end\n    \n    return smallest_difference, second_smallest_difference\n\
    \  end\nend", "  numbers.each_with_index do |n, i|\n    j = i+1\n    break if\
    \ j == numbers.size # No more numbers to check\n    break if numbers[j] - numbers[i]\
    \ < numbers[j] - numbers[i] # Found a closer number\n    numbers[i], numbers[j]\
    \ = numbers[j], numbers[i] # Swap them\n  end\n  numbers\nend", "  numbers.sort!\n\
    \  smallest_number = numbers[0]\n  second_smallest_number = numbers[1]\n  \n \
    \ if smallest_number == second_smallest_number\n    return smallest_number, second_smallest_number\n\
    \  \n  smallest_difference = numbers[1] - smallest_number\n  second_smallest_difference\
    \ = second_smallest_number - numbers[0]\n  \n  if smallest_difference == second_smallest_difference\n\
    \    return smallest_number, second_smallest_number\n  \n  smallest_percentage_difference\
    \ = ((second_smallest_number - smallest_number) / smallest_number) * 100\n  second_smallest_percentage_difference\
    \ = ((second_smallest_number - smallest_number) / second_smallest_number) * 100\n\
    \  \n  if smallest_percentage_difference < second_smallest_percentage_difference\n\
    \    return smallest_number, second_smallest_number\n  \n  return second_smallest_number,\
    \ smallest_number\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    second_smallest_distance = number\n    \n    numbers.each_with_index\
    \ do |number_to_compare, index_to_compare|\n      distance = number_to_compare\
    \ - number\n      \n      if distance < smallest_distance\n        smallest_distance\
    \ = distance\n        second_smallest_distance = number_to_compare\n      end\n\
    \    end\n    \n    break if smallest_distance == number\n    \n    break if smallest_distance\
    \ < second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\n\
    \    \n    break if smallest_distance > second_smallest_distance\n    \n    break\
    \ if smallest_distance == second_smallest_distance and number < second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number >\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ and number == second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance and number < second_smallest_distance\n    \n  \
    \  break if smallest_distance == second_smallest_distance and number > second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number ==\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ and number > second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance and number < second_smallest_distance\n    \n  \
    \  break if smallest_distance == second_smallest_distance and number == second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number >\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ and number < second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance and number == second_smallest_distance\n    \n \
    \   break if smallest_distance == second_smallest_distance and number > second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number <\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ and number == second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance and number > second_smallest_distance\n    \n  \
    \  break if smallest_distance == second_smallest_distance and number < second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number ==\
    \ second_smallest_distance\n    \n", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |number2, index2|\n      distance = number - number2\n      if distance <\
    \ smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = index2\n      end\n    end\n    return smallest_index, smallest_distance\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    break if index\
    \ == 0\n    break if index == numbers.size - 1\n    break if number == numbers[index\
    \ + 1]\n    break if number == numbers[index - 1]\n    break if number == numbers[index\
    \ - 2]\n    break if number == numbers[index - 3]\n    break if number == numbers[index\
    \ - 4]\n    break if number == numbers[index - 5]\n    break if number == numbers[index\
    \ - 6]\n    break if number == numbers[index - 7]\n    break if number == numbers[index\
    \ - 8]\n    break if number == numbers[index - 9]\n    break if number == numbers[index\
    \ - 10]\n    break if number == numbers[index - 11]\n    break if number == numbers[index\
    \ - 12]\n    break if number == numbers[index - 13]\n    break if number == numbers[index\
    \ - 14]\n    break if number == numbers[index - 15]\n    break if number == numbers[index\
    \ - 16]\n    break if number == numbers[index - 17]\n    break if number == numbers[index\
    \ - 18]\n    break if number == numbers[index - 19]\n    break if number == numbers[index\
    \ - 20]\n    break if number == numbers[index - 21]\n    break if number == numbers[index\
    \ - 22]\n    break if number == numbers[index - 23]\n    break if number == numbers[index\
    \ - 24]\n    break if number == numbers[index - 25]\n    break if number == numbers[index\
    \ - 26]\n    break if number == numbers[index - 27]\n    break if number == numbers[index\
    \ - 28]\n    break if number == numbers[index - 29]\n    break if number == numbers[index\
    \ - 30]\n    break if number == numbers[index - 31]\n    break if number == numbers[index\
    \ - 32]\n    break if number == numbers[index - 33]\n    break if number == numbers[index\
    \ - 34]\n    break if number == numbers[index - 35]\n    break if number == numbers[index\
    \ - 36]\n    break if number == numbers[index - 37]\n    break if number == numbers[index\
    \ - 38]\n    break if number == numbers[index - 39]\n    break if number == numbers[index\
    \ - 40]\n    break if number == numbers[index - 41]\n    break if number == numbers[index\
    \ - 42]\n    break if number == numbers[index - 43]\n    break if number == numbers[index\
    \ - 44]\n    break if number ", "  numbers.each_with_index do |n, i|\n    break\
    \ if i == 0\n    break if numbers[i-1] < n\n    break if numbers[i-1] > n\n  \
    \  numbers[i-1], numbers[i] = n, numbers[i-1]\n  end\n  numbers\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |other_number, other_index|\n      distance =\
    \ other_number - number\n      next if distance == 0\n      next if distance <\
    \ 0\n      next if smallest_index == other_index\n      smallest_distance = distance\n\
    \      smallest_index = other_index\n    end\n    break if smallest_index == index\n\
    \    break if smallest_distance == number\n    [number, smallest_distance]\n \
    \ end\nend", "  numbers.sort!\n  smallest_difference = numbers[1] - numbers[0]\n\
    \  smallest_difference_index = 0\n  second_smallest_difference = numbers[1] -\
    \ numbers[0]\n  second_smallest_difference_index = 1\n  while smallest_difference\
    \ != 0\n    if numbers[smallest_difference_index] - numbers[second_smallest_difference_index]\
    \ < smallest_difference\n      smallest_difference_index += 1\n    else\n    \
    \  second_smallest_difference_index += 1\n    end\n    smallest_difference = numbers[smallest_difference_index]\
    \ - numbers[second_smallest_difference_index]\n  end\n  return [numbers[smallest_difference_index],\
    \ numbers[second_smallest_difference_index]]\nend", "  numbers.each_with_index\
    \ do |n, i|\n    break if i == 0\n    break if numbers[i-1] < n\n    break if\
    \ numbers[i+1] > n\n    return [n,n]\n  end\nend\n</code>\n<|/ a |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  numbers.each_with_index do |n, i|\n    j = i+1\n    break if\
    \ j == numbers.length\n    break if numbers[j] < numbers[i]\n    break if numbers[j]\
    \ == numbers[i] and j > i\n    numbers[i], numbers[j] = numbers[j], numbers[i]\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    second_smallest_distance = number\n    index = index + 1\n   \
    \ numbers.each_with_index do |other_number, other_index|\n      distance = other_number\
    \ - number\n      next if distance == 0\n      next if distance < 0\n      next\
    \ if other_index == index\n      next if other_index == index - 1\n      next\
    \ if other_index == index + 1\n      next if other_index == index - 2\n      next\
    \ if other_index == index - 3\n      next if other_index == index - 4\n      next\
    \ if other_index == index - 5\n      next if other_index == index - 6\n      next\
    \ if other_index == index - 7\n      next if other_index == index - 8\n      next\
    \ if other_index == index - 9\n      next if other_index == index - 10\n     \
    \ next if other_index == index - 11\n      next if other_index == index - 12\n\
    \      next if other_index == index - 13\n      next if other_index == index -\
    \ 14\n      next if other_index == index - 15\n      next if other_index == index\
    \ - 16\n      next if other_index == index - 17\n      next if other_index ==\
    \ index - 18\n      next if other_index == index - 19\n      next if other_index\
    \ == index - 20\n      next if other_index == index - 21\n      next if other_index\
    \ == index - 22\n      next if other_index == index - 23\n      next if other_index\
    \ == index - 24\n      next if other_index == index - 25\n      next if other_index\
    \ == index - 26\n      next if other_index == index - 27\n      next if other_index\
    \ == index - 28\n      next if other_index == index - 29\n      next if other_index\
    \ == index - 30\n      next if other_index == index - 31\n      next if other_index\
    \ == index - 32\n      next if other_index == index - 33\n      next if other_index\
    \ == index - 34\n      next if other_index == index - 35\n      next if other_index\
    \ == index - 36\n      next if other_index == index - 37\n      next if other_index\
    \ == index - 38\n      next if other_index == index - 39\n      next if other_index\
    \ == index - 40\n      next if other_index == index - 41\n      next if other_index\
    \ == index - 42\n      next if other_index == index - 43\n      next if ", " \
    \ numbers.each_with_index do |number, index|\n    smallest_index = index\n   \
    \ smallest_distance = number\n    numbers.each_with_index do |other_number, other_index|\n\
    \      distance = other_index - index\n      next if distance == 0\n      distance\
    \ = distance * distance\n      distance = distance + other_number * other_number\n\
    \      if distance < smallest_distance\n        smallest_distance = distance\n\
    \        smallest_index = other_index\n      end\n    end\n    return smallest_index,\
    \ smallest_distance\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_index = index\n    smallest_distance = number\n    numbers.each_with_index\
    \ do |number, index|\n      distance = number - numbers[index]\n      if distance\
    \ < smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = index\n      end\n    end\n    return numbers[smallest_index], number\n  end\n\
    end\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number - number2\n\
    \      if distance < smallest_distance\n        smallest_distance = distance\n\
    \        smallest_index = index2\n      end\n    end\n    [number, numbers[smallest_index]]\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails |>\n<| c |>\nThis doesn't\
    \ work if there are two numbers that are equidistant from each other. For example,\
    \ `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])` returns `[2.0, 2.2]`\
    \ instead of `[2.0, 2.0]`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted\
    \ my comment. I've updated my answer to include a fix for that case.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are two numbers that are equidistant from\
    \ each other. For example, `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])`\
    \ returns `[2.0, 2.2]` instead of `[2.0, 2.0]`.\n<|/ c |>\n<| c |>\nI realized\
    \ that after I posted my comment. I've updated my answer to include a fix for\
    \ that case.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |other_number, other_index|\n      difference\
    \ = other_number - number\n      if difference < smallest_difference\n       \
    \ smallest_difference = difference\n        smallest_index = other_index\n   \
    \   end\n    end\n    [number, numbers[smallest_index]]\n  end\nend\n</code>\n\
    <|/ a tags=ruby,arrays,ruby-on-rails |>\n<| a dscore=0 |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = numbers[index + 1] - number\n\
    \    smallest_difference = smallest_difference if smallest_difference.nonzero?\n\
    \    smallest_difference = smallest_difference if smallest_difference.positive?\n\
    \    smallest_difference = smallest_difference if smallest_difference.zero?\n\
    \    if smallest_difference.nonzero?\n      smallest_difference = smallest_difference\
    \ if smallest_difference < number\n      smallest_difference = smallest_difference\
    \ if smallest_difference > number\n      return [number, numbers[index + 1]] if\
    \ smallest_difference.positive?\n    end\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number2 -\
    \ number\n      next if distance == 0\n      next if distance < 0\n      next\
    \ if smallest_index == index2\n      next if distance < smallest_distance\n  \
    \    smallest_distance = distance\n      smallest_index = index2\n    end\n  \
    \  break if smallest_index == index\n    break if smallest_distance == number\n\
    \    break if smallest_distance == 0\n    break if smallest_distance < number\n\
    \    smallest_distance = number\n    smallest_index = index\n  end\n  [numbers[smallest_index],\
    \ numbers[smallest_index + 1]]\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |number_2, index_2|\n      distance = abs(number_2 - number)\n      if distance\
    \ < smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = index_2\n      end\n    end\n    return smallest_index, smallest_distance\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number2,\
    \ index2|\n      distance = number2 - number\n      next if distance == 0\n  \
    \    next if distance < 0\n      next if distance > smallest_distance\n      smallest_distance\
    \ = distance\n      smallest_index = index2\n    end\n    return smallest_index,\
    \ smallest_distance\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_index = index\n    smallest_distance = number\n    numbers.each_with_index\
    \ do |number2, index2|\n      distance = number2 - number\n      next if distance\
    \ == 0\n      next if distance < 0\n      next if smallest_index == index2\n \
    \     next if distance < smallest_distance\n      smallest_distance = distance\n\
    \      smallest_index = index2\n    end\n    [number, numbers[smallest_index]]\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    \n    numbers.each_with_index\
    \ do |number_2, index_2|\n      difference = number - number_2\n      \n     \
    \ if difference < smallest_difference\n        smallest_difference = difference\n\
    \        second_smallest_difference = number_2\n      end\n    end\n    \n   \
    \ break if smallest_difference == number\n    \n    [smallest_difference, second_smallest_difference]\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm |>\n<| c |>\nThis doesn't\
    \ seem to work. `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])` returns\
    \ `[2.0, 2.2]` instead of `[2.0, 2.0]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it. `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])`\
    \ returns `[2.0, 2.2]` as expected.\n<|/ c |>\n<| c |>\nAh, I see what you mean.\
    \ Yes, it does work. My bad. Sorry for the confusion.\n<|/ c |>\n<| c |>\nNo problem.\
    \ Glad I could help.\n<|/ c |>\n<| a tags=ruby,arrays,algorithm |>\n<code>", " \
    \ numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |number_2, index_2|\n\
    \      distance = abs(number - number_2)\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index_2\n    \
    \  end\n    end\n    smallest_index, number\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers that are equally close.\
    \ For example, `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])` returns\
    \ `[2.0, 2.0]`, which is not the correct answer.\n<|/ c |>\n<| c |>\nAh, I see\
    \ what you mean. I'll edit my answer accordingly.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer accordingly. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  numbers.each_with_index do |n, i|\n    break if i == 0\n   \
    \ break if numbers[i-1] < n\n    break if numbers[i-1] > n\n    numbers[i-1],\
    \ numbers[i] = numbers[i], numbers[i-1]\n  end\n  numbers\nend\n</code>\n<|/ a\
    \ tags=ruby,arrays |>\n<| a dscore=0 |>\n<code>", "  numbers.sort!\n  smallest_number\
    \ = numbers[0]\n  largest_number = numbers[-1]\n  smallest_index = 0\n  largest_index\
    \ = numbers.length - 1\n  while smallest_index <= largest_index\n    middle_index\
    \ = (smallest_index + largest_index) / 2\n    middle_number = numbers[middle_index]\n\
    \    if middle_number == smallest_number\n      smallest_index = middle_index\
    \ + 1\n    elsif middle_number == largest_number\n      largest_index = middle_index\
    \ - 1\n    else\n      smallest_number = middle_number\n      largest_number =\
    \ middle_number\n    end\n  end\n  return [smallest_number, largest_number]\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_difference =\
    \ number\n    second_smallest_difference = number\n    second_index = index\n\
    \    numbers.each_with_index do |number_to_compare, index_to_compare|\n      difference\
    \ = number_to_compare - number\n      if difference < smallest_difference\n  \
    \      smallest_difference = difference\n        second_smallest_difference =\
    \ number_to_compare\n        second_index = index_to_compare\n      end\n    end\n\
    \    break [smallest_difference, second_smallest_difference, second_index]\n \
    \ end\nend", "  numbers.sort!\n  smallest_number = numbers[0]\n  largest_number\
    \ = numbers[-1]\n  smallest_index, largest_index = 0, -1\n  for i in (0...numbers.length)\n\
    \    if numbers[i] < smallest_number\n      smallest_number = numbers[i]\n   \
    \   smallest_index = i\n    elsif numbers[i] > largest_number\n      largest_number\
    \ = numbers[i]\n      largest_index = i\n    end\n  end\n  return [smallest_number,\
    \ largest_number]\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    second_smallest_distance = number\n    \n    numbers.each_with_index\
    \ do |number_2, index_2|\n      distance = number_2 - number\n      \n      if\
    \ distance < smallest_distance\n        smallest_distance = distance\n       \
    \ second_smallest_distance = number_2\n      end\n    end\n    \n    break if\
    \ smallest_distance == number\n    \n    break if second_smallest_distance ==\
    \ number\n    \n    break if smallest_distance < second_smallest_distance\n  \
    \  \n    break if smallest_distance < number\n    \n    break if second_smallest_distance\
    \ < number\n    \n    break if second_smallest_distance < smallest_distance\n\
    \    \n    break if smallest_distance < second_smallest_distance\n    \n    break\
    \ if smallest_distance < number\n    \n    break if second_smallest_distance <\
    \ number\n    \n    break if second_smallest_distance < smallest_distance\n  \
    \  \n    break if smallest_distance < second_smallest_distance\n    \n    break\
    \ if smallest_distance < number\n    \n    break if second_smallest_distance <\
    \ number\n    \n    break if second_smallest_distance < smallest_distance\n  \
    \  \n    break if smallest_distance < second_smallest_distance\n    \n    break\
    \ if smallest_distance < number\n    \n    break if second_smallest_distance <\
    \ number\n    \n    break if second_smallest_distance < smallest_distance\n  \
    \  \n    break if smallest_distance < second_smallest_distance\n    \n    break\
    \ if smallest_distance < number\n    \n    break if second_smallest_distance <\
    \ number\n    \n    break if second_smallest_distance < smallest_distance\n  \
    \  \n    break if smallest_distance < second_smallest_distance\n    \n    break\
    \ if smallest_distance < number\n    \n    break if second_smallest_distance <\
    \ number\n    \n    break if second_smallest_distance < smallest_distance\n  \
    \  \n    break if smallest_distance < second_smallest_distance\n    \n    break\
    \ if smallest_distance < number\n    \n    break if second_smallest_distance <\
    \ number\n    \n    break if second_smallest_distance < smallest_distance\n  \
    \  \n    break if smallest_distance < second_smallest_distance\n    \n    break\
    \ if smallest_distance < number\n    \n    break if second_smallest_distance <\
    \ number\n    \n    break if second_smallest_distance < smallest_distance\n  \
    \  \n    break if smallest_distance ", "  numbers.each_with_index do |number,\
    \ index|\n    smallest_difference = numbers[index + 1] - number\n    smallest_difference_index\
    \ = (index + 1) if smallest_difference == 0\n    smallest_difference_index\n \
    \ end\nend", "  numbers.sort!\n  smallest = numbers[0]\n  largest = numbers[-1]\n\
    \  smallest_index = numbers.index(smallest)\n  largest_index = numbers.index(largest)\n\
    \  if smallest_index == largest_index\n    return smallest, largest\n  else\n\
    \    return numbers[smallest_index], numbers[largest_index]\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |number, index|\n      difference = number - numbers[index\
    \ - 1]\n      if difference < smallest_difference\n        smallest_difference\
    \ = difference\n        smallest_index = index\n      end\n    end\n    return\
    \ numbers[smallest_index], number\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are two elements that are equally close.\n\
    <|/ c |>\n<| c |>\nI believe this would work if you changed the return statement\
    \ to `return numbers[smallest_index], numbers[smallest_index + 1]`\n<|/ c |>\n\
    <| c |>\nI believe this would work if you changed the return statement to `return\
    \ numbers[smallest_index], numbers[smallest_index + 1]`\n<|/ c |>\n<| c |>\nI\
    \ believe this would work if you changed the return statement to `return numbers[smallest_index],\
    \ numbers[smallest_index + 1]`\n<|/ c |>\n<| c |>\nI believe this would work if\
    \ you changed the return statement to `return numbers[smallest_index], numbers[smallest_index\
    \ + 1]`\n<|/ c |>\n<| a dscore=5 tags=ruby,arrays,algorithm |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each_with_index do |other_number, other_index|\n      distance =\
    \ other_number - number\n      if distance < 0\n        smallest_index = other_index\n\
    \        smallest_distance = distance\n      end\n    end\n    break if smallest_distance\
    \ == 0\n    break if smallest_index == index\n    break if smallest_index == index\
    \ - 1\n    break if smallest_index == index + 1\n    break if smallest_index ==\
    \ index - 2\n    break if smallest_index == index - 3\n    break if smallest_index\
    \ == index - 4\n    break if smallest_index == index - 5\n    break if smallest_index\
    \ == index - 6\n    break if smallest_index == index - 7\n    break if smallest_index\
    \ == index - 8\n    break if smallest_index == index - 9\n    break if smallest_index\
    \ == index - 10\n    break if smallest_index == index - 11\n    break if smallest_index\
    \ == index - 12\n    break if smallest_index == index - 13\n    break if smallest_index\
    \ == index - 14\n    break if smallest_index == index - 15\n    break if smallest_index\
    \ == index - 16\n    break if smallest_index == index - 17\n    break if smallest_index\
    \ == index - 18\n    break if smallest_index == index - 19\n    break if smallest_index\
    \ == index - 20\n    break if smallest_index == index - 21\n    break if smallest_index\
    \ == index - 22\n    break if smallest_index == index - 23\n    break if smallest_index\
    \ == index - 24\n    break if smallest_index == index - 25\n    break if smallest_index\
    \ == index - 26\n    break if smallest_index == index - 27\n    break if smallest_index\
    \ == index - 28\n    break if smallest_index == index - 29\n    break if smallest_index\
    \ == index - 30\n    break if smallest_index == index - 31\n    break if smallest_index\
    \ == index - 32\n    break if smallest_index == index - 33\n    break if smallest_index\
    \ == index - 34\n    break if smallest_index == index - 35\n    break if smallest_index\
    \ == index - 36\n    break if smallest_index == index - 37\n    break if smallest_index\
    \ == index - 38\n    ", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number_2,\
    \ index_2|\n      distance = abs(number_2 - number)\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index_2\n    \
    \  end\n    end\n    return smallest_index, smallest_distance\n  end\nend", " \
    \ numbers.each_with_index do |number, index|\n    closest_index = index\n    closest_distance\
    \ = number\n    numbers.each do |other_number|\n      distance = number - other_number\n\
    \      if distance < 0\n        closest_index = other_number\n        closest_distance\
    \ = distance\n      end\n    end\n    break if closest_distance == 0\n    break\
    \ if closest_index == index\n    break if closest_index == (index - 1)\n    break\
    \ if closest_index == (index + 1)\n    break if closest_index == (index - 2)\n\
    \    break if closest_index == (index - 3)\n    break if closest_index == (index\
    \ - 4)\n    break if closest_index == (index - 5)\n    break if closest_index\
    \ == (index - 6)\n    break if closest_index == (index - 7)\n    break if closest_index\
    \ == (index - 8)\n    break if closest_index == (index - 9)\n    break if closest_index\
    \ == (index - 10)\n    break if closest_index == (index - 11)\n    break if closest_index\
    \ == (index - 12)\n    break if closest_index == (index - 13)\n    break if closest_index\
    \ == (index - 14)\n    break if closest_index == (index - 15)\n    break if closest_index\
    \ == (index - 16)\n    break if closest_index == (index - 17)\n    break if closest_index\
    \ == (index - 18)\n    break if closest_index == (index - 19)\n    break if closest_index\
    \ == (index - 20)\n    break if closest_index == (index - 21)\n    break if closest_index\
    \ == (index - 22)\n    break if closest_index == (index - 23)\n    break if closest_index\
    \ == (index - 24)\n    break if closest_index == (index - 25)\n    break if closest_index\
    \ == (index - 26)\n    break if closest_index == (index - 27)\n    break if closest_index\
    \ == (index - 28)\n    break if closest_index == (index - 29)\n    break if closest_index\
    \ == (index - 30)\n    break if closest_index == (index - 31)\n    break if closest_index\
    \ == (index - 32)\n    break if closest_index == (index - 33)\n    break if closest_index\
    \ == (index - 34)\n    break if closest_index == (index - 35)\n    break if closest_index\
    \ == (index - 36)\n    break if closest_index == (index - 37)\n    break if closest_index\
    \ == (index - 38)", "  numbers.each_with_index do |number, index|\n    break if\
    \ index == 0\n    break if index == numbers.length - 1\n    break if number ==\
    \ numbers[index + 1]\n    break if number == numbers[index - 1]\n    break if\
    \ number == numbers[index - 2]\n    break if number == numbers[index - 3]\n  \
    \  break if number == numbers[index - 4]\n    break if number == numbers[index\
    \ - 5]\n    break if number == numbers[index - 6]\n    break if number == numbers[index\
    \ - 7]\n    break if number == numbers[index - 8]\n    break if number == numbers[index\
    \ - 9]\n    break if number == numbers[index - 10]\n    break if number == numbers[index\
    \ - 11]\n    break if number == numbers[index - 12]\n    break if number == numbers[index\
    \ - 13]\n    break if number == numbers[index - 14]\n    break if number == numbers[index\
    \ - 15]\n    break if number == numbers[index - 16]\n    break if number == numbers[index\
    \ - 17]\n    break if number == numbers[index - 18]\n    break if number == numbers[index\
    \ - 19]\n    break if number == numbers[index - 20]\n    break if number == numbers[index\
    \ - 21]\n    break if number == numbers[index - 22]\n    break if number == numbers[index\
    \ - 23]\n    break if number == numbers[index - 24]\n    break if number == numbers[index\
    \ - 25]\n    break if number == numbers[index - 26]\n    break if number == numbers[index\
    \ - 27]\n    break if number == numbers[index - 28]\n    break if number == numbers[index\
    \ - 29]\n    break if number == numbers[index - 30]\n    break if number == numbers[index\
    \ - 31]\n    break if number == numbers[index - 32]\n    break if number == numbers[index\
    \ - 33]\n    break if number == numbers[index - 34]\n    break if number == numbers[index\
    \ - 35]\n    break if number == numbers[index - 36]\n    break if number == numbers[index\
    \ - 37]\n    break if number == numbers[index - 38]\n    break if number == numbers[index\
    \ - 39]\n    break if number == numbers[index - 40]\n    break if number == numbers[index\
    \ - 41]\n    break if number == numbers[index - 42]\n    break if number == numbers[index\
    \ - 43]\n    break if number == numbers[index - 44]\n    break if number ", " \
    \ numbers.each_with_index do |number, index|\n    smallest_difference = number\n\
    \    second_smallest_difference = number\n    \n    numbers.each_with_index do\
    \ |number_to_compare, index_to_compare|\n      difference = number_to_compare\
    \ - number\n      \n      if difference < smallest_difference\n        smallest_difference\
    \ = difference\n        second_smallest_difference = number_to_compare\n     \
    \ end\n    end\n    \n    if smallest_difference != number\n      puts \"#{number}\
    \ is closest to #{second_smallest_difference}\"\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nI like your solution, but I think it can be simplified\
    \ a bit. `numbers.each_with_index.min` will return the smallest number in the\
    \ array. No need to compare each number against each other number. `numbers.each_with_index.min`\
    \ will return the smallest number in the array. No need to compare each number\
    \ against each other number. `numbers.each_with_index.min` will return the smallest\
    \ number in the array. No need to compare each number against each other number.\
    \ `numbers.each_with_index.min` will return the smallest number in the array.\
    \ No need to compare each number against each other number. `numbers.each_with_index.min`\
    \ will return the smallest number in the array. No need to compare each number\
    \ against each other number. `numbers.each_with_index.min` will return the smallest\
    \ number in the array. No need to compare each number against each other number.\
    \ `numbers.each_with_index.min` will return the smallest number in the array.\
    \ No need to compare each number against each other number. `numbers.each_with_index.min`\
    \ will return the smallest number in the array. No need to compare each number\
    \ against each other number. `numbers.each_with_index.min` will return the smallest\
    \ number in the array. No need to compare each number against each other number.\
    \ `numbers.each_with_index.min` will return the smallest number in the array.\
    \ No need to compare each number against each other number. `numbers.each_with_index.min`\
    \ will return the smallest number in the array. No need to compare each number\
    \ against each other number. `numbers.each_with_index.min` will return the smallest\
    \ number in the array. No need to compare each number against each other number.\
    \ `numbers.each_with_index.min` will return the smallest number in the array.\
    \ No need to compare each number against each other number. `numbers.each_with_index.min`\
    \ will return the smallest number in the array. No need to compare each number\
    \ against each other number. `numbers.each_with_index.min` will return the smallest\
    \ number in the array. No need to compare each number ", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    \n    numbers.each_with_index do |number_to_compare, index_to_compare|\n\
    \      difference = number_to_compare - number\n      \n      if difference <\
    \ smallest_difference\n        smallest_difference = difference\n        second_smallest_difference\
    \ = number_to_compare\n      end\n    end\n    \n    if smallest_difference !=\
    \ number\n      puts \"#{number} is closest to #{second_smallest_difference}\"\
    \n    end\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't\
    \ seem to work. Try it with `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])`\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to fix the bug.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried it and it works perfectly.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a more efficient version that doesn't require the second loop.\
    \ I've also added a ", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    smallest_difference_index\
    \ = index\n    second_smallest_difference_index = index\n    break if numbers.size\
    \ == 1\n    numbers.each_with_index do |number_to_compare, index_to_compare|\n\
    \      difference = number_to_compare - number\n      difference_index = (index_to_compare\
    \ + 1) - index\n      break if difference == 0\n      if difference < smallest_difference\n\
    \        second_smallest_difference = smallest_difference\n        second_smallest_difference_index\
    \ = smallest_difference_index\n        smallest_difference = difference\n    \
    \    smallest_difference_index = difference_index\n      elsif difference > smallest_difference\n\
    \        second_smallest_difference = difference\n        second_smallest_difference_index\
    \ = difference_index\n      end\n    end\n  end\n  [smallest_difference, second_smallest_difference]\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |number, index|\n\
    \      distance = number - smallest_distance\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index\n      end\n\
    \    end\n    [smallest_distance, numbers[smallest_index]]\n  end\nend\n</code>\n\
    <|/ a tags=ruby,arrays,ruby-on-rails |>\n<| a tags=ruby,arrays,ruby-on-rails |>\n\
    <code>", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    second_smallest_index\
    \ = index\n    smallest_index = index\n    numbers.each do |other_number|\n  \
    \    difference = other_number - number\n      if difference < smallest_difference\n\
    \        smallest_difference = difference\n        smallest_index = other_number\n\
    \      elsif difference > second_smallest_difference\n        second_smallest_difference\
    \ = difference\n        second_smallest_index = other_number\n      end\n    end\n\
    \    [smallest_index, second_smallest_index]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number - number2\n\
    \      if distance < 0\n        smallest_index = index2\n        smallest_distance\
    \ = distance\n      end\n    end\n    break if smallest_distance == 0\n    numbers[smallest_index],\
    \ numbers[index] = numbers[index], numbers[smallest_index]\n  end\n  numbers\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,arrays |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |number, index|\n      difference = number - numbers[index-1]\n\
    \      if difference < smallest_difference\n        smallest_difference = difference\n\
    \        smallest_index = index\n      end\n    end\n    return numbers[smallest_index],\
    \ numbers[smallest_index+1]\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    second_smallest_distance = number\n    \n    if index > 0\n  \
    \    second_smallest_distance = numbers[index - 1]\n    end\n    \n    if smallest_distance\
    \ == second_smallest_distance\n      smallest_distance = number\n    end\n   \
    \ \n    if smallest_distance < second_smallest_distance\n      smallest_distance,\
    \ second_smallest_distance = second_smallest_distance, smallest_distance\n   \
    \ end\n    \n    if smallest_distance == number\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    \n    if smallest_distance\
    \ < number\n      smallest_distance, second_smallest_distance = number, smallest_distance\n\
    \    end\n    \n    if smallest_distance == second_smallest_distance\n      smallest_distance,\
    \ second_smallest_distance = second_smallest_distance, smallest_distance\n   \
    \ end\n    \n    if smallest_distance < second_smallest_distance\n      smallest_distance,\
    \ second_smallest_distance = second_smallest_distance, smallest_distance\n   \
    \ end\n    \n    if smallest_distance == second_smallest_distance\n      smallest_distance,\
    \ second_smallest_distance = second_smallest_distance, smallest_distance\n   \
    \ end\n    \n    if smallest_distance < number\n      smallest_distance, second_smallest_distance\
    \ = number, second_smallest_distance\n    end\n    \n    if smallest_distance\
    \ == second_smallest_distance\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    \n    if smallest_distance\
    \ < second_smallest_distance\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    \n    if smallest_distance\
    \ == second_smallest_distance\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    \n    if smallest_distance\
    \ < number\n      smallest_distance, second_smallest_distance = number, second_smallest_distance\n\
    \    end\n    \n    if smallest_distance == second_smallest_distance\n      smallest_distance,\
    \ second_smallest_distance = second_smallest_distance, smallest_distance\n   \
    \ end\n    \n    if smallest_distance < second_smallest_distance\n      smallest_distance,\
    \ second_smallest_distance = second_smallest_distance, smallest_distance\n   \
    \ end\n    \n    if smallest_distance == second_smallest_distance\n      smallest_distance,\
    \ second_smallest_distance = second_smallest_distance, smallest_distance\n   \
    \ end\n    \n    if smallest_distance < number\n      smallest_distance, second_smallest_distance\
    \ = number, second_smallest_distance\n    end\n    \n    if smallest_distance\
    \ == second_smallest_distance\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, ", "  numbers.each_with_index do |number, index|\n\
    \    smallest_index = index\n    smallest_distance = number\n    numbers.each_with_index\
    \ do |number_to_compare, index_to_compare|\n      distance = abs(number_to_compare\
    \ - number)\n      if distance < smallest_distance\n        smallest_distance\
    \ = distance\n        smallest_index = index_to_compare\n      end\n    end\n\
    \    yield smallest_distance, numbers[smallest_index]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    second_smallest_distance\
    \ = number\n    \n    if index > 0\n      smallest_distance = numbers[index -\
    \ 1]\n      second_smallest_distance = number\n    end\n    \n    if smallest_distance\
    \ == second_smallest_distance\n      smallest_distance\n    else\n      smallest_distance\n\
    \    end\n  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    second_smallest_index\
    \ = index\n    smallest_index = index\n    numbers.each do |other_number|\n  \
    \    difference = other_number - number\n      if difference < smallest_difference\n\
    \        smallest_difference = difference\n        second_smallest_difference\
    \ = difference\n        second_smallest_index = index\n        smallest_index\
    \ = index\n      elsif difference == smallest_difference\n        if index > second_smallest_index\n\
    \          second_smallest_difference = difference\n          second_smallest_index\
    \ = index\n        end\n      end\n    end\n    [smallest_difference, second_smallest_difference]\n\
    \  end\nend", "  numbers.sort!\n  smallest_number = numbers[0]\n  largest_number\
    \ = numbers[-1]\n  smallest_index = nil\n  largest_index = nil\n  numbers.each\
    \ do |number|\n    if smallest_number > number\n      smallest_number = number\n\
    \      smallest_index = numbers.index(number)\n    end\n    if largest_number\
    \ < number\n      largest_number = number\n      largest_index = numbers.index(number)\n\
    \    end\n  end\n  [smallest_number, largest_number]\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a dscore=0 |>\n<code>", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |number, index|\n      distance = number - smallest_distance\n      if distance\
    \ < smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = index\n      end\n    end\n    return smallest_distance, numbers[smallest_index]\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't seem to\
    \ work. `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])` returns `(2.0,\
    \ 2.2)` instead of `(2.0, 2.0)`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for\
    \ pointing it out. Now it works as expected.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number_to_compare,\
    \ index_to_compare|\n      distance = number_to_compare - number\n      if distance\
    \ < 0\n        smallest_distance = number_to_compare\n        smallest_index =\
    \ index_to_compare\n      end\n    end\n    return smallest_distance, smallest_index\n\
    \  end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  numbers.each_with_index\
    \ do |n, i|\n    break if i == 0\n    break if numbers[i-1] > n\n    break if\
    \ numbers[i-1] == n\n    numbers[i-1], numbers[i] = numbers[i], numbers[i-1]\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    second_smallest_distance = number\n    second_smallest_index =\
    \ index\n    smallest_index = index\n    numbers.each_with_index do |number2,\
    \ index2|\n      distance = number - number2\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        second_smallest_distance = smallest_distance\n\
    \        second_smallest_index = index2\n        smallest_index = index\n    \
    \  end\n    end\n    break if smallest_distance == number\n    break if second_smallest_distance\
    \ == number\n    [number, numbers[second_smallest_index]]\n  end\nend", "  numbers.sort!\n\
    \  smallest_difference = numbers[0] - numbers[1]\n  smallest_difference_index\
    \ = 0\n  second_smallest_difference = numbers[1] - numbers[0]\n  second_smallest_difference_index\
    \ = 1\n  while smallest_difference > 0.01\n    smallest_difference_index += 1\n\
    \    smallest_difference = numbers[smallest_difference_index] - numbers[smallest_difference_index\
    \ + 1]\n  end\n  while second_smallest_difference > 0.01\n    second_smallest_difference_index\
    \ += 1\n    second_smallest_difference = numbers[second_smallest_difference_index]\
    \ - numbers[second_smallest_difference_index + 1]\n  end\n  return [numbers[smallest_difference_index],\
    \ numbers[second_smallest_difference_index]]\nend", "  numbers.each_with_index\
    \ do |n, i|\n    break if i == 0\n    break if numbers[i-1] <= n\n    break if\
    \ numbers[i+1] <= n\n    numbers[i-1], numbers[i+1] = numbers[i+1], numbers[i-1]\n\
    \  end\n  numbers\nend", "  numbers.sort!\n  smallest = numbers[0]\n  largest\
    \ = numbers[-1]\n  smallest_index = numbers.index(smallest)\n  largest_index =\
    \ numbers.index(largest)\n  if smallest_index == largest_index\n    return smallest,\
    \ largest\n  else\n    return numbers[smallest_index], numbers[largest_index]\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_index = index\n\
    \    smallest_distance = number\n    numbers.each do |other_number|\n      distance\
    \ = other_number - number\n      if distance < 0\n        smallest_index = other_number\n\
    \        smallest_distance = distance\n      end\n    end\n    smallest_index,\
    \ smallest_distance\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    This doesn't seem to work. `find_closest_elements([1,2,3,4,5,6,7])` returns `[7,\
    \ 7, 7, 7, 7, 7, 7]`.\n<|/ c |>\n<| c |>\n: It works fine for me. Are you sure\
    \ you copied it correctly? I tested it on `[1,2,3,4,5,6,7]` and it returned `[7,\
    \ 7, 7, 7, 7, 7, 7]`.\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running\
    \ Ruby 1.9.2p290 (though I doubt that matters). I'm running it on 1.9.2p180 as\
    \ well. I'm running it on 1.9.2p180 on Windows 7 x64.\n<|/ c |>\n<| c |>\n: I\
    \ tested it on 1.9.2p180 on Windows 7 x64 and it returned `[7, 7, 7, 7, 7, 7,\
    \ 7]`. What version of Ruby are you using?\n<|/ c |>\n<| c |>\n: I tested it on\
    \ 1.9.2p180 on Windows 7 x64 and it returned `[7, 7, 7, 7, 7, 7, 7]`. What version\
    \ of Ruby are you using?\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    \n    numbers.each do |other_number|\n      difference = other_number\
    \ - number\n      \n      if difference < smallest_difference\n        smallest_difference\
    \ = difference\n        second_smallest_difference = other_number\n      end\n\
    \    end\n    \n    if smallest_difference == 0\n      return [number, number]\n\
    \    end\n    \n    if smallest_difference < 0\n      return [second_smallest_difference,\
    \ number]\n    end\n    \n    return [number, second_smallest_difference]\n  end\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I believe\
    \ it can be optimized a bit. For example, you can avoid the second `each` by using\
    \ a `break` statement in the first `each`.\n<|/ c |>\n<| c |>\nYes, I agree that\
    \ `break` would be a better solution. I was trying to keep it similar to OP's\
    \ original code as much as possible.\n<|/ c |>\n<| c |>\nI believe your solution\
    \ is O(n^2) which is not optimal for large lists.\n<|/ c |>\n<| c |>\nI believe\
    \ my solution is O(n) where n is the number of elements in the list. As I understand\
    \ it, OP's code was O(n^2) because he was iterating through every element in the\
    \ list twice. My solution avoids that by only iterating through it once.\n<|/\
    \ c |>\n<| c |>\nYes, I agree that your solution is O(n), but your solution is\
    \ O(n^2) because you iterate through every element twice. Your solution is O(n^2)\
    \ because you iterate through every element twice. Your solution is O(n^2) because\
    \ you iterate through every element twice. Your solution is O(n^2) because you\
    \ iterate through every element twice. Your solution is O(n^2) because you iterate\
    \ through every element twice. Your solution is O(n^2) because you iterate through\
    \ every element twice. Your solution is O(n^2) because you iterate through every\
    \ element twice. Your solution is O(n^2) because you iterate through every element\
    \ twice. Your solution is O(n^2) because you iterate through every element twice.\
    \ Your solution is O(n^2) because you iterate through every element twice. Your\
    \ solution is O(n^2) because you iterate through every element twice. Your solution\
    \ is O(n^2) because you iterate through every element twice. Your solution is\
    \ O(n^", "  numbers.each_with_index do |number, index|\n    smallest_index = index\n\
    \    smallest_distance = number\n    numbers.each do |other_number|\n      distance\
    \ = other_number - number\n      if distance < 0\n        smallest_index = other_number\n\
    \        smallest_distance = distance\n      end\n    end\n    return smallest_distance,\
    \ smallest_index\n  end\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |number2, index2|\n      distance = number - number2\n      if distance <\
    \ smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = index2\n      end\n    end\n    [number, numbers[smallest_index]]\n  end\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_difference =\
    \ numbers[index + 1] - number\n    smallest_difference_index = index + 1\n   \
    \ smallest_difference\n  end\nend", "  numbers.sort!\n  smallest_number = numbers[0]\n\
    \  largest_number = numbers[-1]\n  smallest_index = 0\n  largest_index = -1\n\
    \  while smallest_index < numbers.size - 1 && largest_index >= 0\n    if numbers[smallest_index]\
    \ == smallest_number\n      smallest_index += 1\n    elsif numbers[largest_index]\
    \ == largest_number\n      largest_index -= 1\n    else\n      break\n    end\n\
    \  end\n  [smallest_number, largest_number]\nend", "  numbers.sort!\n  smallest_number\
    \ = numbers[0]\n  largest_number = numbers[-1]\n  smallest_index = nil\n  largest_index\
    \ = nil\n  numbers.each_with_index do |number, index|\n    if number < smallest_number\n\
    \      smallest_number = number\n      smallest_index = index\n    end\n    if\
    \ number > largest_number\n      largest_number = number\n      largest_index\
    \ = index\n    end\n  end\n  [smallest_number, largest_number]\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't work if you have an array\
    \ of negative numbers. For example, `find_closest_elements([-1, -2, -3, -4, -5,\
    \ -6])` returns `[-6, -5]`.\n<|/ c |>\n<| c |>\nI added a version that handles\
    \ negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have an array of negative numbers. For example, `find_closest_elements([-1,\
    \ -2, -3, -4, -5, -6])` returns `[-6, -5]`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that handles negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| a\
    \ tags=ruby,ruby-on-rails |>\n<code>", "  numbers.each_with_index do |number,\
    \ index|\n    closest_index = index\n    closest_distance = number\n    numbers.each\
    \ do |other_number|\n      distance = other_number - number\n      if distance\
    \ < 0\n        closest_index = other_number\n        closest_distance = distance\n\
    \      end\n    end\n    return number, closest_index\n  end\nend", "  numbers.each_with_index\
    \ do |n, i|\n    break if i == 0\n    break if numbers[i-1] < n\n    break if\
    \ numbers[i-1] > n\n    numbers[i-1], numbers[i] = numbers[i], numbers[i-1]\n\
    \  end\n  numbers\nend", "  numbers.sort!\n  smallest = numbers[0]\n  largest\
    \ = numbers[-1]\n  smallest_index = -1\n  largest_index = -1\n  numbers.each_with_index\
    \ do |number, index|\n    if number < smallest then\n      smallest = number\n\
    \      smallest_index = index\n    end\n    if number > largest then\n      largest\
    \ = number\n      largest_index = index\n    end\n  end\n  [smallest, largest]\n\
    end", "  numbers.sort!\n  smallest = numbers[0]\n  largest = numbers[0]\n  for\
    \ i in 1..numbers.count\n    if numbers[i] < smallest then\n      smallest = numbers[i]\n\
    \    elsif numbers[i] > largest then\n      largest = numbers[i]\n    end\n  end\n\
    \  return [smallest, largest]\nend", "  numbers.each_with_index do |number, index|\n\
    \    smallest_difference = number\n    second_smallest_difference = number\n \
    \   difference = number\n    second_difference = number\n    difference_index\
    \ = index\n    second_difference_index = index\n    difference_index.times do\
    \ |i|\n      difference = difference - numbers[i]\n      second_difference = second_difference\
    \ - numbers[i]\n      difference_index = i\n      second_difference_index = i\n\
    \    end\n    break if difference < smallest_difference\n    break if second_difference\
    \ < smallest_difference\n    smallest_difference = difference\n    second_smallest_difference\
    \ = second_difference\n  end\n  [numbers[difference_index], numbers[second_difference_index]]\n\
    end", "  numbers.sort!\n  smallest_number = numbers[0]\n  largest_number = numbers[-1]\n\
    \  smallest_index = -1\n  largest_index = -1\n  for i in (0...numbers.length)\n\
    \    if numbers[i] < smallest_number\n      smallest_number = numbers[i]\n   \
    \   smallest_index = i\n    elsif numbers[i] > largest_number\n      largest_number\
    \ = numbers[i]\n      largest_index = i\n    end\n  end\n  return [smallest_number,\
    \ largest_number]\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number,\
    \ index|\n      difference = number - numbers[index - 1]\n      break if difference\
    \ < smallest_difference\n      smallest_difference = difference\n      smallest_index\
    \ = index\n    end\n    break if smallest_index == index\n    numbers[smallest_index],\
    \ numbers[index]\n  end\nend", "  numbers.each_with_index do |n, i|\n    smallest\
    \ = i\n    largest = i\n    numbers.each_with_index do |n2, i2|\n      next if\
    \ i == i2\n      next if n2 > n\n      next if n2 < n\n      if smallest > i2\n\
    \        smallest = i2\n      end\n      if largest < i2\n        largest = i2\n\
    \      end\n    end\n    smallest, largest\n  end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers that are equally close.\n\
    <|/ c |>\n<| c |>\nYes, I see that now. I've edited my answer to include a solution\
    \ that does work if there are two numbers that are equally close.\n<|/ c |>\n\
    <| c |>\nI like your solution, but I believe it can be optimized a bit. Instead\
    \ of iterating over all pairs, you can iterate over all numbers and find the closest\
    \ pair. Then, iterate over all pairs again and find the closest pair. Then, iterate\
    \ over all pairs again and find the closest pair. Then, iterate over all pairs\
    \ again and find the closest pair. Then, iterate over all pairs again and find\
    \ the closest pair. Then, iterate over all pairs again and find the closest pair.\
    \ Then, iterate over all pairs again and find the closest pair. Then, iterate\
    \ over all pairs again and find the closest pair. Then, iterate over all pairs\
    \ again and find the closest pair. Then, iterate over all pairs again and find\
    \ the closest pair. Then, iterate over all pairs again and find the closest pair.\
    \ Then, iterate over all pairs again and find the closest pair. Then, iterate\
    \ over all pairs again and find the closest pair. Then, iterate over all pairs\
    \ again and find the closest pair. Then, iterate over all pairs again and find\
    \ the closest pair. Then, iterate over all pairs again and find the closest pair.\
    \ Then, iterate over all pairs again and find the closest pair. Then, iterate\
    \ over all pairs again and find the closest pair. Then, iterate over all pairs\
    \ again and find the closest pair. Then, iterate over all pairs again and find\
    \ the closest pair. Then, iterate over all pairs again and find the closest pair.\
    \ Then, iterate over all pairs again and find the closest pair. Then, iterate\
    \ over all pairs again and find the closest pair. Then, iterate over all pairs\
    \ again and find the closest pair. Then, iterate over all pairs again and find\
    \ the ", "  numbers.each_with_index do |number, index|\n    closest_index = index\n\
    \    closest_distance = number\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      distance = other_number - number\n      if distance < closest_distance\n\
    \        closest_distance = distance\n        closest_index = other_index\n  \
    \    end\n    end\n    return number, numbers[closest_index]\n  end\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't seem to work. `find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])` returns `(2.0, 2.2)` instead of `(2.0, 2.0)`.\n<|/\
    \ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers.each_with_index do |number, index|\n\
    \    smallest_index = index\n    smallest_distance = number\n    numbers.each_with_index\
    \ do |other_number, other_index|\n      distance = number - other_number\n   \
    \   if distance < smallest_distance\n        smallest_distance = distance\n  \
    \      smallest_index = other_index\n      end\n    end\n    smallest_index\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number,\
    \ index|\n      distance = number - smallest_distance\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index\n      end\n\
    \    end\n    [smallest_distance, numbers[smallest_index]]\n  end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=ruby |>\n<code>", "  numbers.each_with_index do |number,\
    \ index|\n    smallest_difference = number\n    second_smallest_difference = number\n\
    \    index = index + 1\n    numbers.each_with_index do |number_to_compare, index_to_compare|\n\
    \      difference = number_to_compare - number\n      if difference < smallest_difference\n\
    \        second_smallest_difference = smallest_difference\n        smallest_difference\
    \ = difference\n      elsif difference > second_smallest_difference\n        second_smallest_difference\
    \ = difference\n      end\n    end\n    smallest_difference, second_smallest_difference\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a dscore=0 |>\n<code>", " \
    \ numbers.each_with_index do |number, index|\n    smallest_difference = number\n\
    \    second_smallest_difference = number\n    \n    if index > 0\n      second_smallest_difference\
    \ = numbers[index - 1]\n    end\n    \n    if index > 1\n      smallest_difference\
    \ = numbers[index - 1]\n    end\n    \n    if smallest_difference == second_smallest_difference\n\
    \      smallest_difference\n    else\n      smallest_difference, second_smallest_difference\n\
    \    end\n  end\nend", "  numbers.sort!\n  smallest_number = numbers[0]\n  largest_number\
    \ = numbers[-1]\n  smallest_index = -1\n  largest_index = -1\n  for i in 0...numbers.size\
    \ - 1\n    if numbers[i] < smallest_number\n      smallest_number = numbers[i]\n\
    \      smallest_index = i\n    elsif numbers[i] > largest_number\n      largest_number\
    \ = numbers[i]\n      largest_index = i\n    end\n  end\n  return [smallest_number,\
    \ largest_number]\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      difference = other_number - number\n      if difference\
    \ < smallest_difference\n        smallest_difference = difference\n        smallest_index\
    \ = other_index\n      end\n    end\n    [number, numbers[smallest_index]]\n \
    \ end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ that are equally close. Try it with `find_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0])`\n<|/ c |>\n<| c |>\nIt does. I tested it before posting it. The\
    \ OP didn't specify that they wanted equally close numbers. I added a comment\
    \ to the question asking for clarification.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. My bad.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = numbers[index + 1] - number\n\
    \    smallest_difference_index = 0\n    smallest_difference_index += smallest_difference\
    \ if smallest_difference > 0\n    smallest_difference_index += smallest_difference\
    \ if smallest_difference < 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smallest_difference > 0\n    smallest_difference_index += 1 if smallest_difference\
    \ == 0\n    smallest_difference_index += 1 if smallest_difference < 0\n    smallest_difference_index\
    \ += 1 if smalle", "  numbers.each_with_index do |n, i|\n    j = i+1\n    break\
    \ if j == numbers.size || numbers[j] - n < numbers[i] - n\n  end\n  [numbers[i],\
    \ numbers[j]]\nend", "  numbers.each_with_index do |n, i|\n    smallest_difference\
    \ = numbers[i+1] - n\n    smallest_difference_index = i + 1\n    smallest_difference_index\
    \ while smallest_difference < numbers[i] and smallest_difference_index < numbers.length\n\
    \    smallest_difference\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a\
    \ dscore=0 |>\n<code>", "  numbers.each_with_index do |n, i|\n    smallest_difference\
    \ = numbers[i+1] - n\n    smallest_difference = smallest_difference if smallest_difference\
    \ > 0\n    smallest_difference = smallest_difference if smallest_difference <\
    \ 0\n    smallest_difference = smallest_difference if smallest_difference == 0\n\
    \    if smallest_difference == 0\n      smallest_difference = numbers[i+1] - n\n\
    \      smallest_difference = smallest_difference if smallest_difference > 0\n\
    \      smallest_difference = smallest_difference if smallest_difference < 0\n\
    \      smallest_difference = smallest_difference if smallest_difference == 0\n\
    \    end\n    if smallest_difference == 0\n      smallest_difference = numbers[i+1]\
    \ - n\n      smallest_difference = smallest_difference if smallest_difference\
    \ > 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ < 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ == 0\n    end\n    if smallest_difference == 0\n      smallest_difference =\
    \ numbers[i+1] - n\n      smallest_difference = smallest_difference if smallest_difference\
    \ > 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ < 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ == 0\n    end\n    if smallest_difference == 0\n      smallest_difference =\
    \ numbers[i+1] - n\n      smallest_difference = smallest_difference if smallest_difference\
    \ > 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ < 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ == 0\n    end\n    if smallest_difference == 0\n      smallest_difference =\
    \ numbers[i+1] - n\n      smallest_difference = smallest_difference if smallest_difference\
    \ > 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ < 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ == 0\n    end\n    if smallest_difference == 0\n      smallest_difference =\
    \ numbers[i+1] - n\n      smallest_difference = smallest_difference if smallest_difference\
    \ > 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ < 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ == 0\n    end\n    if smallest_difference == 0\n      smallest_difference =\
    \ numbers[i+1] - n\n      smallest_difference = smallest_difference if smallest_difference\
    \ > 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ < 0\n      smallest_difference = smallest_difference if smallest_difference\
    \ == 0\n", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    index = index + 1\n \
    \   numbers.each_with_index do |number_2, index_2|\n      difference = number\
    \ - number_2\n      if difference < smallest_difference\n        smallest_difference\
    \ = difference\n        second_smallest_difference = number_2\n      end\n   \
    \   if difference == 0\n        break\n      end\n    end\n    if smallest_difference\
    \ != 0\n      puts \"#{number} - #{number_2} = #{smallest_difference}\"\n    \
    \  puts \"#{number} + #{number_2} = #{second_smallest_difference}\"\n      puts\
    \ \"#{number} - #{number_2} < #{smallest_difference}\"\n      puts \"#{number}\
    \ + #{number_2} < #{second_smallest_difference}\"\n      puts \"#{number} - #{number_2}\
    \ > #{second_smallest_difference}\"\n      puts \"#{number} + #{number_2} > #{smallest_difference}\"\
    \n      puts \"#{number} - #{number_2} > #{second_smallest_difference}\"\n   \
    \   puts \"#{number} + #{number_2} < #{second_smallest_difference}\"\n      puts\
    \ \"#{number} + #{number_2} > #{second_smallest_difference}\"\n      puts \"#{number}\
    \ + #{number_2} > #{smallest_difference}\"\n      puts \"#{number} + #{number_2}\
    \ < #{smallest_difference}\"\n      puts \"#{number} + #{number_2} > #{smallest_difference}\"\
    \n      puts \"#{number} - #{number_2} > #{smallest_difference}\"\n      puts\
    \ \"#{number} - #{number_2} < #{smallest_difference}\"\n      puts \"#{number}\
    \ - #{number_2} > #{second_smallest_difference}\"\n      puts \"#{number} - #{number_2}\
    \ < #{second_smallest_difference}\"\n      puts \"#{number} - #{number_2} > #{second_smallest_difference}\"\
    \n      puts \"#{number} - #{number_2} < #{second_smallest_difference}\"\n   \
    \ end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks\
    \ for your answer. Your code works but it's too slow for my needs. I need a faster\
    \ solution. Thanks anyway.\n<|/ c |>\n<| c |>\nI added a faster solution, let\
    \ me know if it works for you.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ code works but it's too slow for my needs. I need a faster solution. Thanks\
    \ anyway.\n<|/ c |>\n<|", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number2,\
    \ index2|\n      distance = number - number2\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index2\n     \
    \ end\n    end\n    return smallest_index, smallest_distance\n  end\nend", " \
    \ numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |number, index|\n\
    \      if number < smallest_distance\n        smallest_distance = number\n   \
    \     smallest_index = index\n      end\n    end\n    [smallest_distance, numbers[smallest_index]]\n\
    \  end\nend", "  numbers.sort!\n  smallest = numbers[0]\n  largest = numbers[0]\n\
    \  smallest_index = nil\n  largest_index = nil\n  numbers.each do |number|\n \
    \   if number < smallest then\n      smallest = number\n      smallest_index =\
    \ number\n    elsif number > largest then\n      largest = number\n      largest_index\
    \ = number\n    end\n  end\n  [smallest, largest]\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby,arrays,sorting |>\n<code>", "  numbers.each_with_index do\
    \ |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    second_index = index\n    numbers.each do |other_number|\n   \
    \   difference = other_number - number\n      smallest_difference = other_number\
    \ if difference < smallest_difference\n      second_smallest_difference = other_number\
    \ if difference < second_smallest_difference\n    end\n    [smallest_difference,\
    \ second_smallest_difference]\n  end\nend", "  numbers.sort!\n  smallest = numbers[0]\n\
    \  largest = numbers[-1]\n  smallest_index = numbers.index(smallest)\n  largest_index\
    \ = numbers.index(largest)\n  if smallest_index == largest_index\n    return smallest,\
    \ largest\n  midpoint = smallest_index + 1\n  if largest_index - midpoint > 1\n\
    \    midpoint = largest_index - 1\n  midpoint = numbers.index(midpoint)\n  smallest_element\
    \ = numbers[midpoint]\n  largest_element = numbers[midpoint + 1]\n  return smallest_element,\
    \ largest_element\nend", "  numbers.each_with_index do |number, index|\n    closest_index\
    \ = index\n    closest_distance = number\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      distance = other_index - index\n      break if distance\
    \ == 0\n      break if distance < 0\n      break if distance > closest_distance\n\
    \      closest_distance = distance\n      closest_index = other_index\n    end\n\
    \    return number, numbers[closest_index]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    difference = number\n    second_difference = number\n    \n  \
    \  numbers.each_with_index do |number_2, index_2|\n      difference = number_2\
    \ - number\n      second_difference = number_2 - number_2\n      \n      if difference\
    \ < second_difference\n        second_smallest_difference = number_2\n      elsif\
    \ second_difference < difference\n        smallest_difference = number_2\n   \
    \   end\n    end\n    \n    if smallest_difference != number\n      smallest_difference\
    \ = number\n    end\n    \n    if second_smallest_difference != number\n     \
    \ second_smallest_difference = number\n    end\n    \n    if smallest_difference\
    \ != second_smallest_difference\n      smallest_difference, second_smallest_difference\
    \ = second_smallest_difference, smallest_difference\n    end\n    \n    if smallest_difference\
    \ != number\n      smallest_difference = number\n    end\n    \n    if second_smallest_difference\
    \ != number\n      second_smallest_difference = number\n    end\n    \n    if\
    \ smallest_difference != second_smallest_difference\n      smallest_difference,\
    \ second_smallest_difference = second_smallest_difference, smallest_difference\n\
    \    end\n    \n    if smallest_difference != number\n      smallest_difference\
    \ = number\n    end\n    \n    if second_smallest_difference != number\n     \
    \ second_smallest_difference = number\n    end\n    \n    if smallest_difference\
    \ != second_smallest_difference\n      smallest_difference, second_smallest_difference\
    \ = second_smallest_difference, smallest_difference\n    end\n    \n    if smallest_difference\
    \ != number\n      smallest_difference = number\n    end\n    \n    if second_smallest_difference\
    \ != number\n      second_smallest_difference = number\n    end\n    \n    if\
    \ smallest_difference != second_smallest_difference\n      smallest_difference,\
    \ second_smallest_difference = second_smallest_difference, smallest_difference\n\
    \    end\n    \n    if smallest_difference != number\n      smallest_difference\
    \ = number\n    end\n    \n    if second_smallest_difference != number\n     \
    \ second_smallest_difference = number\n    end\n    \n    if smallest_difference\
    \ != second_smallest_difference\n      smallest_difference, second_smallest_difference\
    \ = second_smallest_difference, smallest_difference\n    end\n    \n    if smallest_difference\
    \ != number\n      smallest_difference = number\n    end\n    \n    if second_smallest_difference\
    \ != number\n      second_smallest_difference = number\n    end\n    \n    if\
    \ smallest_difference != second_smallest_difference\n", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    \n    if index > 0\n      difference = number - numbers[index-1]\n\
    \      \n      if difference < smallest_difference\n        smallest_difference\
    \ = difference\n        second_smallest_difference = numbers[index-1]\n      end\n\
    \    end\n    \n    if index < numbers.length - 1\n      difference = number -\
    \ numbers[index+1]\n      \n      if difference < smallest_difference\n      \
    \  smallest_difference = difference\n        second_smallest_difference = numbers[index+1]\n\
    \      end\n    end\n    \n    if smallest_difference == 0\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    \n    break\
    \ if smallest_difference == 0\n  end\n  \n  [smallest_difference, second_smallest_difference]\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_index = index\n\
    \    smallest_distance = number\n    numbers.each_with_index do |number2, index2|\n\
    \      distance = number - number2\n      if distance < 0\n        smallest_index\
    \ = index2\n        smallest_distance = distance\n      end\n    end\n    return\
    \ smallest_distance, smallest_index\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine for small arrays but\
    \ for large arrays it takes too much time to execute. Can you suggest me any faster\
    \ algorithm for large arrays?\n<|/ c |>\n<| c |>\nI added a faster version. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks again for your answer. Your code works\
    \ fine for small arrays but for large arrays it takes too much time to execute.\
    \ Can you suggest me any faster algorithm for large arrays?\n<|/ c |>\n<| c |>\n\
    I added a faster version. Hope it helps.\n<|/ c |>\n<| c |>\nThanks again for\
    \ your answer. Your code works fine for small arrays but for large arrays it takes\
    \ too much time to execute. Can you suggest me any faster algorithm for large\
    \ arrays?\n<|/ c |>\n<| a tags=ruby,arrays,algorithm |>\n<code>", "  numbers.sort!\n\
    \  smallest_number = numbers[0]\n  largest_number = numbers[-1]\n  smallest_index\
    \ = 0\n  largest_index = numbers.length - 1\n  while smallest_index < numbers.length\
    \ && largest_index > 0\n    smallest_number = numbers[smallest_index]\n    largest_number\
    \ = numbers[largest_index]\n    smallest_index += 1\n    largest_index -= 1\n\
    \    if smallest_number == largest_number\n      break\n  end\n  return [smallest_number,\
    \ largest_number]\nend", "  numbers.each_with_index do |number, index|\n    closest_index\
    \ = index\n    closest_distance = number\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      distance = other_number - number\n      if distance < 0\n\
    \        closest_index = other_index\n        closest_distance = distance\n  \
    \    end\n    end\n    return number, closest_distance\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>", "  numbers.each_with_index do |n,\
    \ i|\n    break if i == 0\n    break if numbers[i-1] <= n\n    break if numbers[i+1]\
    \ <= n\n    numbers[i-1], numbers[i+1] = numbers[i+1], numbers[i-1]\n  end\n \
    \ numbers\nend", "  numbers.each_with_index do |n, i|\n    break if i == 0\n \
    \   break if numbers[i-1] <= n\n    break if numbers[i-1] > n\n    numbers[i-1],\
    \ numbers[i] = numbers[i], numbers[i-1]\n  end\n  numbers\nend", "  numbers.each_with_index\
    \ do |number, index|\n    closest_index = index\n    closest_distance = number\n\
    \    numbers.each do |other_number|\n      distance = other_number - number\n\
    \      if distance < 0\n        closest_index = other_number\n        closest_distance\
    \ = distance\n      end\n    end\n    return number, closest_distance\n  end\n\
    end", "  numbers.each_with_index do |number, index|\n    closest_index = index\n\
    \    closest_distance = number\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      distance = other_index - index\n      if distance < 0\n\
    \        closest_index = other_index\n        closest_distance = other_number\n\
    \      end\n    end\n    return number, closest_distance\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not able to understand\
    \ your code. Can you please explain it a bit?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to explain what's going on. Let me know if that helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not able to understand your code. Can you\
    \ please explain it a bit?\n<|/ c |>\n<| c |>\nI added some comments to explain\
    \ what's going on. Let me know if that helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not able to understand your code. Can you please explain it a bit?\n\
    <|/ c |>\n<| a |>\n<code>", "  numbers.each_with_index do |n, i|\n    break if\
    \ i == 0\n    break if numbers[i-1] < n\n    break if numbers[i-1] > n\n    numbers[i-1],\
    \ numbers[i] = numbers[i], numbers[i-1]\n  end\n  numbers\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |other_number, other_index|\n      distance =\
    \ other_number - number\n      if distance < smallest_distance\n        smallest_distance\
    \ = distance\n        smallest_index = other_index\n      end\n    end\n    yield\
    \ smallest_distance, numbers[smallest_index]\n  end\nend", "  numbers.sort!\n\
    \  smallest = numbers[0]\n  largest = numbers[-1]\n  smallest_index = nil\n  largest_index\
    \ = nil\n  numbers.each_with_index do |number, index|\n    if number < smallest\
    \ then\n      smallest = number\n      smallest_index = index\n    end\n    if\
    \ number > largest then\n      largest = number\n      largest_index = index\n\
    \    end\n  end\n  [smallest, largest]\nend", "  numbers.each_with_index do |number,\
    \ index|\n    smallest_distance = number\n    second_smallest_distance = number\n\
    \    \n    numbers.each do |other_number|\n      distance = other_number - number\n\
    \      \n      if distance < smallest_distance\n        smallest_distance = distance\n\
    \        second_smallest_distance = other_number\n      end\n    end\n    \n \
    \   break if smallest_distance == number\n    \n    break if smallest_distance\
    \ < second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\n\
    \    \n    break if smallest_distance > second_smallest_distance\n    \n    break\
    \ if smallest_distance == second_smallest_distance and number < second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number >\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ and number == second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance and number == second_smallest_distance\n    \n \
    \   break if smallest_distance == second_smallest_distance and number < second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number >\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ and number == second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance and number == second_smallest_distance\n    \n \
    \   break if smallest_distance == second_smallest_distance and number < second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number >\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ and number == second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance and number == second_smallest_distance\n    \n \
    \   break if smallest_distance == second_smallest_distance and number < second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number >\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_distance\
    \ and number == second_smallest_distance\n    \n    break if smallest_distance\
    \ == second_smallest_distance and number == second_smallest_distance\n    \n \
    \   break if smallest_distance == second_smallest_distance and number < second_smallest_distance\n\
    \    \n    break if smallest_distance == second_smallest_distance and number >\
    \ second_smallest_distance\n    \n    break if smallest_distance == second_smallest_",
  "  numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    smallest_index = index\n    numbers.each_with_index do |number, index|\n\
    \      distance = number - smallest_distance\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index\n      end\n\
    \    end\n    yield smallest_distance, numbers[smallest_index]\n  end\nend", " \
    \ numbers.sort!\n  smallest_number = numbers[0]\n  second_smallest_number = numbers[1]\n\
    \  \n  if smallest_number == second_smallest_number\n    return smallest_number,\
    \ second_smallest_number\n  \n  smallest_difference = second_smallest_number -\
    \ smallest_number\n  second_smallest_difference = second_smallest_number - second_smallest_number\n\
    \  \n  if smallest_difference < second_smallest_difference\n    return smallest_number,\
    \ second_smallest_number\n  \n  return second_smallest_number, smallest_number\n\
    end", "  numbers.each_with_index do |number, index|\n    break if index == 0\n\
    \    break if index == numbers.size - 1\n    break if number == numbers[index\
    \ + 1]\n    break if number == numbers[index - 1]\n    break if number == numbers[index\
    \ - 2]\n    break if number == numbers[index - 3]\n    break if number == numbers[index\
    \ - 4]\n    break if number == numbers[index - 5]\n    break if number == numbers[index\
    \ - 6]\n    break if number == numbers[index - 7]\n    break if number == numbers[index\
    \ - 8]\n    break if number == numbers[index - 9]\n    break if number == numbers[index\
    \ - 10]\n    break if number == numbers[index - 11]\n    break if number == numbers[index\
    \ - 12]\n    break if number == numbers[index - 13]\n    break if number == numbers[index\
    \ - 14]\n    break if number == numbers[index - 15]\n    break if number == numbers[index\
    \ - 16]\n    break if number == numbers[index - 17]\n    break if number == numbers[index\
    \ - 18]\n    break if number == numbers[index - 19]\n    break if number == numbers[index\
    \ - 20]\n    break if number == numbers[index - 21]\n    break if number == numbers[index\
    \ - 22]\n    break if number == numbers[index - 23]\n    break if number == numbers[index\
    \ - 24]\n    break if number == numbers[index - 25]\n    break if number == numbers[index\
    \ - 26]\n    break if number == numbers[index - 27]\n    break if number == numbers[index\
    \ - 28]\n    break if number == numbers[index - 29]\n    break if number == numbers[index\
    \ - 30]\n    break if number == numbers[index - 31]\n    break if number == numbers[index\
    \ - 32]\n    break if number == numbers[index - 33]\n    break if number == numbers[index\
    \ - 34]\n    break if number == numbers[index - 35]\n    break if number == numbers[index\
    \ - 36]\n    break if number == numbers[index - 37]\n    break if number == numbers[index\
    \ - 38]\n    break if number == numbers[index - 39]\n    break if number == numbers[index\
    \ - 40]\n    break if number == numbers[index - 41]\n    break if number == numbers[index\
    \ - 42]\n    break if number == numbers[index - 43]\n    break if number == numbers[index\
    \ - 44]\n    break if number ", "  numbers.each_with_index do |number, index|\n\
    \    smallest_distance = number\n    smallest_index = index\n    numbers.each_with_index\
    \ do |number2, index2|\n      distance = number - number2\n      if distance <\
    \ smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = index2\n      end\n    end\n    smallest_index\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    second_smallest_distance\
    \ = number\n    \n    numbers.each_with_index do |number_2, index_2|\n      distance\
    \ = number_2 - number\n      \n      if distance < smallest_distance\n       \
    \ smallest_distance = distance\n        second_smallest_distance = number_2\n\
    \      end\n    end\n    \n    if smallest_distance < second_smallest_distance\n\
    \      smallest_distance, second_smallest_distance = second_smallest_distance,\
    \ smallest_distance\n    end\n    \n    if smallest_distance == second_smallest_distance\n\
    \      smallest_distance, second_smallest_distance = second_smallest_distance,\
    \ smallest_distance\n    end\n    \n    if smallest_distance == number\n     \
    \ smallest_distance, second_smallest_distance = second_smallest_distance, smallest_distance\n\
    \    end\n    \n    if smallest_distance == number\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    \n    if smallest_distance\
    \ == number\n      smallest_distance, second_smallest_distance = second_smallest_distance,\
    \ smallest_distance\n    end\n    \n    if smallest_distance == number\n     \
    \ smallest_distance, second_smallest_distance = second_smallest_distance, smallest_distance\n\
    \    end\n    \n    if smallest_distance == number\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    \n    if smallest_distance\
    \ == number\n      smallest_distance, second_smallest_distance = second_smallest_distance,\
    \ smallest_distance\n    end\n    \n    if smallest_distance == number\n     \
    \ smallest_distance, second_smallest_distance = second_smallest_distance, smallest_distance\n\
    \    end\n    \n    if smallest_distance == number\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    \n    if smallest_distance\
    \ == number\n      smallest_distance, second_smallest_distance = second_smallest_distance,\
    \ smallest_distance\n    end\n    \n    if smallest_distance == number\n     \
    \ smallest_distance, second_smallest_distance = second_smallest_distance, smallest_distance\n\
    \    end\n    \n    if smallest_distance == number\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    \n    if smallest_distance\
    \ == number\n      smallest_distance, second_smallest_distance = second_smallest_distance,\
    \ smallest_distance\n    end\n    \n    if smallest_distance == number\n     \
    \ smallest_distance, second_smallest_distance = second_smallest_distance, smallest_distance\n\
    \    end\n    \n    if smallest_distance == number\n      smallest_distance, second_smallest_distance\
    \ = second_smallest_distance, smallest_distance\n    end\n    ", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if difference < second_smallest_difference\n\
    \    end\n    \n    if index > 0\n      difference = numbers[index] - number\n\
    \      smallest_difference = difference if difference < smallest_difference\n\
    \      second_smallest_difference = difference if ", "  numbers.sort!\n  smallest_difference\
    \ = numbers[0] - numbers[1]\n  smallest_difference_index = nil\n  second_smallest_difference\
    \ = numbers[1] - numbers[0]\n  second_smallest_difference_index = nil\n  \n  numbers.each_with_index\
    \ do |number, index|\n    if smallest_difference > number\n      smallest_difference\
    \ = number\n      smallest_difference_index = index\n    end\n    \n    if second_smallest_difference\
    \ > number\n      second_smallest_difference = number\n      second_smallest_difference_index\
    \ = index\n    end\n  end\n  \n  [numbers[smallest_difference_index], numbers[second_smallest_difference_index]]\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_distance = number\n\
    \    second_smallest_distance = number\n    \n    numbers.each_with_index do |number_2,\
    \ index_2|\n      distance = number_2 - number\n      \n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        second_smallest_distance = number_2\n\
    \      end\n    end\n    \n    break if smallest_distance == number\n    \n  \
    \  break if smallest_distance == second_smallest_distance\n    \n    break if\
    \ smallest_distance < number\n    \n    break if second_smallest_distance < number\n\
    \    \n    [smallest_distance, second_smallest_distance]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each do |other_number|\n      distance = other_number - number\n\
    \      if distance < 0\n        smallest_index = other_number\n        smallest_distance\
    \ = distance\n      end\n    end\n    return smallest_index, smallest_distance\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    index = index + 1\n \
    \   numbers.each_with_index do |number_to_compare, index_to_compare|\n      difference\
    \ = number_to_compare - number\n      smallest_difference = difference if difference\
    \ < smallest_difference\n      second_smallest_difference = difference if difference\
    \ < second_smallest_difference\n    end\n    break if smallest_difference == number\n\
    \    break if second_smallest_difference == number\n    [smallest_difference,\
    \ second_smallest_difference, index]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    \n    numbers.each_with_index do |number_to_compare, index_to_compare|\n\
    \      difference = number_to_compare - number\n      \n      if difference <\
    \ smallest_difference\n        smallest_difference = difference\n        second_smallest_difference\
    \ = number_to_compare\n      end\n    end\n    \n    break if smallest_difference\
    \ == number\n    \n    break if second_smallest_difference == number\n    \n \
    \   break if smallest_difference < second_smallest_difference\n    \n    break\
    \ if smallest_difference == second_smallest_difference\n    \n    break if smallest_difference\
    \ < second_smallest_difference\n    \n    break if second_smallest_difference\
    \ == smallest_difference\n    \n    break if second_smallest_difference == number\n\
    \    \n    break if smallest_difference == number\n    \n    break if second_smallest_difference\
    \ == number\n    \n    break if smallest_difference < number\n    \n    break\
    \ if second_smallest_difference < number\n    \n    break if smallest_difference\
    \ < number\n    \n    break if second_smallest_difference < number\n    \n   \
    \ break if smallest_difference < second_smallest_difference\n    \n    break if\
    \ second_smallest_difference < second_smallest_difference\n    \n    break if\
    \ smallest_difference < second_smallest_difference\n    \n    break if second_smallest_difference\
    \ < second_smallest_difference\n    \n    break if smallest_difference < second_smallest_difference\n\
    \    \n    break if second_smallest_difference < second_smallest_difference\n\
    \    \n    break if smallest_difference < second_smallest_difference\n    \n \
    \   break if second_smallest_difference < second_smallest_difference\n    \n \
    \   break if smallest_difference < second_smallest_difference\n    \n    break\
    \ if second_smallest_difference < second_smallest_difference\n    \n    break\
    \ if smallest_difference < second_smallest_difference\n    \n    break if second_smallest_difference\
    \ < second_smallest_difference\n    \n    break if smallest_difference < second_smallest_difference\n\
    \    \n    break if second_smallest_difference < second_smallest_difference\n\
    \    \n    break if smallest_difference < second_smallest_difference\n    \n \
    \   break if second_smallest_difference < second_smallest_difference\n    \n \
    \   break if smallest_difference < second_smallest_difference\n    \n    break\
    \ if second_smallest_difference < second_smallest_difference\n    \n    break\
    \ if smallest_", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    smallest_index = index\n\
    \    second_smallest_index = index\n    numbers.each_with_index do |number_to_compare,\
    \ index_to_compare|\n      difference = number_to_compare - number\n      if difference\
    \ < smallest_difference\n        smallest_difference = difference\n        second_smallest_difference\
    \ = difference\n        smallest_index = index_to_compare\n        second_smallest_index\
    \ = index_to_compare\n      end\n    end\n    [smallest_difference, second_smallest_difference,\
    \ smallest_index, second_smallest_index]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_difference = number\n    second_smallest_difference\
    \ = number\n    second_smallest_index = index\n    smallest_index = index\n  \
    \  numbers.each_with_index do |other_number, other_index|\n      difference =\
    \ other_number - number\n      if difference < smallest_difference\n        smallest_difference\
    \ = difference\n        smallest_index = other_index\n      elsif difference >\
    \ second_smallest_difference\n        second_smallest_difference = difference\n\
    \        second_smallest_index = other_index\n      end\n    end\n    if smallest_difference\
    \ != number\n      yield number, smallest_index\n    end\n    if second_smallest_difference\
    \ != number\n      yield second_smallest_difference, second_smallest_index\n \
    \   end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
