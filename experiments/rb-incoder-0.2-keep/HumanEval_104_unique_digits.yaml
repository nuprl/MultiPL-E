name: HumanEval_104_unique_digits
language: ruby
prompt: "# Given a list of positive integers x. return a sorted list of all \n# elements\
  \ that hasn't any even digit.\n# Note: Returned list should be sorted in increasing\
  \ order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n\
  # >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
  \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
  \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n \
  \   assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
  \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
completions: ["  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like your solution, but I believe it can be simplified a bit. `x.sort!` will\
    \ sort the array in-place, which is unnecessary. Also, you don't need to convert\
    \ the array to a string before counting its characters. `x.each { |i| result <<\
    \ i unless i.to_s.chars.uniq.count % 2 == 0 }` is enough.\n<|/ c |>\n<| c |>\n\
    , thanks for the suggestions. I updated the answer accordingly.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ < i.to_s.size\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `unique_digits([15, 33, 1422, 1])`.\n<|/ c |>\n<|\
    \ c |>\nYes, I missed that case. Thanks for pointing it out. I've updated my answer.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c\
    \ |>\nThanks for your answer. Can you please explain the code a little bit more?\
    \ I didn't quite understand it.\n<|/ c |>\n<| c |>\nSure. `x.sort!` sorts the\
    \ array in ascending order. `x.each do |i|` iterates through the array and checks\
    \ if the element has any even digit. `result << i if i.to_s.chars.uniq.count !=\
    \ 1` adds the element to the result array if the condition holds.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. Can you please tell me what is the purpose\
    \ of x.sort! and x.each do |i|? I didn't quite understand it.\n<|/ c |>\n<| c\
    \ |>\n`x.sort!` sorts the array in ascending order. `x.each do |i|` iterates through\
    \ the array and checks if the element has any even digit. `result << i if i.to_s.chars.uniq.count\
    \ != 1` adds the element to the result array if the condition holds.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. Can you please tell me what is the purpose\
    \ of x.sort! and x.each do |i|? I didn't quite understand it.\n<|/ c |>\n<| a\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.size\
    \ == 1\n      result << i\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size <= 1\n  end\n\
    \  result\nend\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<cell>", "  x.sort!\n  result =\
    \ []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend\n\
    </code>\n<|/ a tags=ruby,algorithm |>\n<| c |>\nThis doesn't work. Try `unique_digits([15,\
    \ 33, 1422, 1])`\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test\
    \ case in the answer.\n<|/ c |>\n<| c |>\nThis doesn't work. Try `unique_digits([15,\
    \ 33, 1422, 1])`\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test\
    \ case in the answer.\n<|/ c |>\n<| c |>\nThis doesn't work. Try `unique_digits([15,\
    \ 33, 1422, 1])`\n<|/ c |>\n<| a |>\n<code>", "  x.sort!\n  result = []\n  x.each\
    \ do |x|\n    if x.to_s.chars.uniq.count != 0\n      result << x\n    end\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count == 1\n  end\n  result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    if i.to_s.chars.uniq.count > 1\n      result << i\n    end\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work.\
    \ Try it with `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<| c |>\n: Thanks\
    \ for pointing out. I've fixed the code now.\n<|/ c |>\n<| c |>\n: Thanks for\
    \ pointing out. I've fixed the code now.\n<|/ c |>\n<| c |>\n: Thanks for pointing\
    \ out. I've fixed the code now.\n<|/ c |>\n<| c |>\n: Thanks for pointing out.\
    \ I've fixed the code now.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n   \
    \ result << i if i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.map(&:to_i).uniq.count\
    \ == 1\n      result << i\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x % 2 == 0\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count\
    \ != 0\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size <= 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis\
    \ doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case in the answer.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I added the test case in the answer.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I added the test case in the answer.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test case in the answer.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    if i.to_s.chars.map(&:to_i).uniq.count == 1\n      result << i\n    end\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend\n\
    </cell>\n<cell>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i\
    \ unless i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count >\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    if\
    \ i.to_s.chars.uniq.size == 1\n      result << i\n    end\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ != i.to_s.chars.size\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    if\
    \ i.to_s.chars.uniq.count == 1\n      result << i\n    end\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    if\
    \ x.to_s.chars.uniq.count != 0\n      result << x\n    end\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n\
    \    if x.to_s.chars.uniq.count != 0\n      result << x\n    end\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i unless i.to_s.chars.uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n  \
    \  if x.to_s.chars.uniq.count != 1\n      result << x\n    end\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n   \
    \ result << i if i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size < i.to_s.chars.size\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=ruby,arrays,algorithm |>\n<code>", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n\
    \  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.size != 1\n      result\
    \ << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do\
    \ |i|\n    result << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != i.to_s.chars.count\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/\
    \ c |>\n<| c |>\nThanks for pointing out. I've updated the answer.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n\
    <| c |>\nThanks for pointing out. I've updated the answer.\n<|/ c |>\n<| c |>\n\
    This doesn't work. Try `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<| a tags=ruby,algorithm\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |x|\n    result << x if\
    \ x % 10 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size < i.to_s.size\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.count == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n   \
    \ result << x if x.to_s.chars.uniq.count != 1\n  end\n  result\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. Try it with `unique_digits([15, 33, 1422,\
    \ 1])`.\n<|/ c |>\n<| c |>\n: I tested it and it works. I added the test case\
    \ in the answer. Can you please give me the test case where it doesn't work?\n\
    <|/ c |>\n<| c |>\n: I added the test case in the answer. Can you please give\
    \ me the test case where it doesn't work?\n<|/ c |>\n<| c |>\n: I added the test\
    \ case in the answer. Can you please give me the test case where it doesn't work?\n\
    <|/ c |>\n<| c |>\n: I added the test case in the answer. Can you please give\
    \ me the test case where it doesn't work?\n<|/ c |>\n<| a tags=ruby,arrays,algorithm\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `unique_digits([15, 33, 1422, 1])`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\
    \ Can you please check it again?\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the test case in the answer. Can you please check it again?\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test case in the answer. Can you\
    \ please check it again?\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the test case in the answer. Can you please check it again?\n<|/ c |>\n<| a\
    \ tags=ruby |>\n<code>", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count\
    \ == 1\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count % 2 == 0\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    result << x if\
    \ x % 2 == 0\n  end\n  result\nend\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `unique_digits([15, 33, 1422, 1])`.\n<|/ c |>\n<| c |>\nYes,\
    \ I forgot to add `x.sort!` before `x.each`. Thanks for pointing out.\n<|/ c |>\n\
    <| a |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i\
    \ if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend\n</cell>\n<cell>", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    result << x if\
    \ x.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n  result =\
    \ []\n  x.each do |i|\n    result << i if i.to_s.chars.map(&:to_i).uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.size == 1\n    \
    \  result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\n\
    end\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like this solution, but I\
    \ wonder if it would be faster to sort the array first (O(n log n) instead of\
    \ O(n))\n<|/ c |>\n<| c |>\nI agree with you, sorting is O(n log n). But in this\
    \ case I believe that sorting is unnecessary because we only need to know if an\
    \ element has even digit.\n<|/ c |>\n<| c |>\nI agree with you, but I wonder if\
    \ it would be faster to sort the array first (O(n log n) instead of O(n))\n<|/\
    \ c |>\n<| c |>\nI agree with you, but I wonder if it would be faster to sort\
    \ the array first (O(n log n) instead of O(n))\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I wonder if it would be faster to sort the array first (O(n log n)\
    \ instead of O(n))\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x unless x.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend\n\
    </cell>\n<cell>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i\
    \ if i.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count > 1\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size < i.to_s.size\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    result\
    \ << x if x % 10 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each\
    \ do |x|\n    if x.to_s.chars.map(&:to_i).uniq.count == 1\n      result << x\n\
    \    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.uniq.size == 1\n  end\n  result\nend", " \
    \ x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n  \
    \  if x.to_s.chars.map(&:to_i).uniq.size == 1\n      result << x\n    end\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.count == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count !=\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size !=\
    \ i.to_s.chars.size && i.to_s.chars.uniq.size != 0\n  end\n  result\nend", " \
    \ x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ != i.to_s.chars.length\n  end\n  result\nend", "  x.sort!\n  result = []\n \
    \ x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend\n</cell>\n<cell>", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n\
    \    if x.to_s.chars.uniq.count != 0\n      result << x\n    end\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count\
    \ != 0\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a tags=ruby,arrays |>\n\
    <code>", "  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x % 2\
    \ == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.count != 1\n  end\n  result\nend\n</code>\n<|/ a |>\n\
    <| c |>\nI like this solution. Very concise. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work if you have a list like `[1,2,3]`\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't require the list to be sorted.\n<|/ c |>\n<| a\
    \ tags=ruby,arrays,sorting |>\n<code>", "  x.sort!\n  result = []\n  x.each do\
    \ |i|\n    result << i unless i.to_s.chars.map(&:to_i).uniq.size > 0\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != i.to_s.chars.length\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count > 1\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.count\
    \ != 0\n      result << i\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count > 1\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.map(&:to_i).uniq.size\
    \ == 1\n      result << i\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size <= 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. Your solution works well for small arrays,\
    \ but for large arrays it takes too much time. My array is of size 10^6 and it\
    \ takes more than a minute to execute.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses `uniq` instead of `sort`, which should speed things up considerably.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your solution works well for small\
    \ arrays, but for large arrays it takes too much time. My array is of size 10^6\
    \ and it takes more than a minute to execute.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses `uniq` instead of `sort`, which should speed things up considerably.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n   \
    \ if x.to_s.chars.uniq.count != 0\n      result << x\n    end\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n  \
    \  result << x unless x.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  if i % 2 == 0\n      result << i\n    end\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size != i.to_s.chars.size\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size < i.to_s.chars.size\n  end\n  result\nend", " \
    \ x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count != 0\n      result\
    \ << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do\
    \ |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count == 1\n\
    \      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count > 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    if i.to_s.chars.map(&:to_i).uniq.size == 1\n      result\
    \ << i\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do\
    \ |i|\n    result << i if i.to_s.chars.uniq.size != i.to_s.chars.size\n  end\n\
    \  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work.\
    \ `unique_digits([15, 33, 1422, 1])` returns `[1, 15, 33]`, not `[1, 15, 33, 1422]`.\n\
    <|/ c |>\n<| c |>\n, you're right, I missed that requirement. I've updated my\
    \ answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  x.sort!\n  result = []\n  x.each\
    \ do |x|\n    if x.to_s.chars.uniq.count > 1\n      result << x\n    end\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\nend\n</code>\n<|/\
    \ a tags=ruby,arrays |>\n<| c |>\nThis solution doesn't work for negative numbers.\
    \ For example, `unique_digits([-1, -15, -33])` returns `[-1, -33]`.\n<|/ c |>\n\
    <| c |>\nI added a solution that works for negative numbers. Please take a look.\n\
    <|/ c |>\n<| c |>\nI added a solution that works for negative numbers. Please\
    \ take a look.\n<|/ c |>\n<| c |>\nI added a solution that works for negative\
    \ numbers. Please take a look.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n\
    \    if x.to_s.chars.map(&:to_i).uniq.size == 1\n      result << x\n    end\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    if x %\
    \ 2 == 0\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count != 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.chars.length\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n   \
    \ result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\n`x.sort!` will mutate the array in-place.\
    \ `x.sort!(&:itself)` will create a new array and leave the original untouched.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I just wanted to show that `sort!` will\
    \ mutate the array in-place and `sort!(&:itself)` will create a new array and\
    \ leave the original untouched.\n<|/ c |>\n<| c |>\n`x.sort!(&:itself)` will create\
    \ a new array and leave the original untouched.\n<|/ c |>\n<| c |>\n`x.sort!(&:itself)`\
    \ will create a new array and leave the original untouched.\n<|/ c |>\n<| c |>\n\
    `x.sort!(&:itself)` will create a new array and leave the original untouched.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |x|\n    if x.to_s.chars.uniq.size <= 1\n      result << x\n    end\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count\
    \ != 0\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays,sorting |>\n<| c |>\n\
    I like your solution, but I believe that `x.sort!` should be `x.sort`. `sort!`\
    \ modifies the array in place, while `sort` returns a new array.\n<|/ c |>\n<|\
    \ c |>\nYes, you are right. Thanks for pointing out. I've updated my answer.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.map(&:to_i).uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n  \
    \  result << x if x.to_s.chars.uniq.size == 1\n  end\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
