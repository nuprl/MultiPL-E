name: HumanEval_89_encrypt
language: ruby
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# encrypt('hi') returns 'lm'\n# encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n# encrypt('gf') returns 'kj'\n# encrypt('et') returns 'ix'\n\
  def encrypt(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n\
  \    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"\
  ))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"\
  kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n\
  \    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"\
  lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  , candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"\
  e\", candidate.call(\"a\"))\n  end\nend\n"
completions: ["  s.chars.map { |c| c.ord % 26 }.rotate(2).join\nend", "  alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  s.chars.map { |c| alphabet.index(c) }.rotate(2).join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == 'z'\n    next\
    \ if char == 'a'\n    next if char == 'b'\n    next if char == 'c'\n    next if\
    \ char == 'd'\n    next if char == 'e'\n    next if char == 'f'\n    next if char\
    \ == 'g'\n    next if char == 'h'\n    next if char == 'i'\n    next if char ==\
    \ 'j'\n    next if char == 'k'\n    next if char == 'l'\n    next if char == 'm'\n\
    \    next if char == 'n'\n    next if char == 'o'\n    next if char == 'p'\n \
    \   next if char == 'q'\n    next if char == 'r'\n    next if char == 's'\n  \
    \  next if char == 't'\n    next if char == 'u'\n    next if char == 'v'\n   \
    \ next if char == 'w'\n    next if char == 'x'\n    next if char == 'y'\n    next\
    \ if char == 'z'\n    next if char == 'A'\n    next if char == 'B'\n    next if\
    \ char == 'C'\n    next if char == 'D'\n    next if char == 'E'\n    next if char\
    \ == 'F'\n    next if char == 'G'\n    next if char == 'H'\n    next if char ==\
    \ 'I'\n    next if char == 'J'\n    next if char == 'K'\n    next if char == 'L'\n\
    \    next if char == 'M'\n    next if char == 'N'\n    next if char == 'O'\n \
    \   next if char == 'P'\n    next if char == 'Q'\n    next if char == 'R'\n  \
    \  next if char == 'S'\n    next if char == 'T'\n    next if char == 'U'\n   \
    \ next if char == 'V'\n    next if char == 'W'\n    next if char == 'X'\n    next\
    \ if char == 'Y'\n    next if char == 'Z'\n    next if char == '0'\n    next if\
    \ char == '1'\n    next if char == '2'\n    next if char == '3'\n    next if char\
    \ == '4'\n    next if char == '5'\n    next if char == '6'\n    next if char ==\
    \ '7'\n    next if char == '8'\n    next if char == '9'\n    next if char == '.'\n",
  "  s.chars.each_with_index do |char, i|\n    next if char == ' '\n    char.upcase!\n\
    \    char.rotate!\n    char.downcase!\n    char.rotate!\n    char.upcase!\n  \
    \  char.rotate!\n    char.downcase!\n  end\n  s\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do\
    \ |char, index|\n    next if index == 0\n    char.upcase + char.downcase\n  end\n\
    end", "  s.chars.each_with_index do |char, i|\n    next if char.upcase == char\n\
    \    next if i == 0\n    next if i == s.length\n    next if i == s.length - 1\n\
    \    next if i == s.length - 2\n    next if i == s.length - 3\n    next if i ==\
    \ s.length - 4\n    next if i == s.length - 5\n    next if i == s.length - 6\n\
    \    next if i == s.length - 7\n    next if i == s.length - 8\n    next if i ==\
    \ s.length - 9\n    next if i == s.length - 10\n    next if i == s.length - 11\n\
    \    next if i == s.length - 12\n    next if i == s.length - 13\n    next if i\
    \ == s.length - 14\n    next if i == s.length - 15\n    next if i == s.length\
    \ - 16\n    next if i == s.length - 17\n    next if i == s.length - 18\n    next\
    \ if i == s.length - 19\n    next if i == s.length - 20\n    next if i == s.length\
    \ - 21\n    next if i == s.length - 22\n    next if i == s.length - 23\n    next\
    \ if i == s.length - 24\n    next if i == s.length - 25\n    next if i == s.length\
    \ - 26\n    next if i == s.length - 27\n    next if i == s.length - 28\n    next\
    \ if i == s.length - 29\n    next if i == s.length - 30\n    next if i == s.length\
    \ - 31\n    next if i == s.length - 32\n    next if i == s.length - 33\n    next\
    \ if i == s.length - 34\n    next if i == s.length - 35\n    next if i == s.length\
    \ - 36\n    next if i == s.length - 37\n    next if i == s.length - 38\n    next\
    \ if i == s.length - 39\n    next if i == s.length - 40\n    next if i == s.length\
    \ - 41\n    next if i == s.length - 42\n    next if i == s.length - 43\n    next\
    \ if i == s.length - 44\n    next if i == s.length - 45\n    next if i == s.length\
    \ - 46\n    next if i == s.length - 47\n    next if i == s.length - 48\n    next\
    \ if i == s.length - 49\n    next if i == s.length - 50\n    next if i == s.length\
    \ - 51\n    next if i == s.length - 52\n    next if i == s.length - 53\n    next\
    \ if i == s.length - 54\n    next if i == s.length - 55\n    next if i == s.length\
    \ - 56\n    next if i == s.length - 57\n    next if i == s.length - 58\n    next\
    \ if i == s.length - 59\n    next if i == s.length - ", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.each_with_index do |char, index|\n    next\
    \ if index == 0\n    next if char == 'z'\n    next if char == 'a'\n    next if\
    \ char == 'b'\n    next if char == 'c'\n    next if char == 'd'\n    next if char\
    \ == 'e'\n    next if char == 'f'\n    next if char == 'g'\n    next if char ==\
    \ 'h'\n    next if char == 'i'\n    next if char == 'j'\n    next if char == 'k'\n\
    \    next if char == 'l'\n    next if char == 'm'\n    next if char == 'n'\n \
    \   next if char == 'o'\n    next if char == 'p'\n    next if char == 'q'\n  \
    \  next if char == 'r'\n    next if char == 's'\n    next if char == 't'\n   \
    \ next if char == 'u'\n    next if char == 'v'\n    next if char == 'w'\n    next\
    \ if char == 'x'\n    next if char == 'y'\n    next if char == 'z'\n    next if\
    \ char == 'A'\n    next if char == 'B'\n    next if char == 'C'\n    next if char\
    \ == 'D'\n    next if char == 'E'\n    next if char == 'F'\n    next if char ==\
    \ 'G'\n    next if char == 'H'\n    next if char == 'I'\n    next if char == 'J'\n\
    \    next if char == 'K'\n    next if char == 'L'\n    next if char == 'M'\n \
    \   next if char == 'N'\n    next if char == 'O'\n    next if char == 'P'\n  \
    \  next if char == 'Q'\n    next if char == 'R'\n    next if char == 'S'\n   \
    \ next if char == 'T'\n    next if char == 'U'\n    next if char == 'V'\n    next\
    \ if char == 'W'\n    next if char == 'X'\n    next if char == 'Y'\n    next if\
    \ char == 'Z'\n    next if char == '0'\n    next if char == '1'\n    next if char\
    \ == '2'\n    next if char == '3'\n    next if char == '4'\n    next if char ==\
    \ '5'\n    next if char == '6'\n    next if char == '7'\n    next if char == '8'\n\
    \    next if char == '9'\n    next if char == '.'\n", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ s.each_char do |c|\n    alphabet = ('A'..'Z').to_a\n    alphabet.rotate!\n \
    \   alphabet.each_with_index do |l, i|\n      alphabet[i] = alphabet[i].next\n\
    \    end\n    alphabet.reverse!\n    alphabet.join\n  end\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if char == ' '\n    char.upcase!\n    char.rotate!\n\
    \    char.downcase!\n    char.rotate!\n    char.upcase!\n  end\n  s\nend", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  s.chars.each_with_index do |c, i|\n    next if i ==\
    \ s.length\n    next if c.upcase == c.downcase\n    next if c.upcase == 'Z'\n\
    \    next if c.downcase == 'Z'\n    next if c.upcase == 'A'\n    next if c.downcase\
    \ == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next\
    \ if c.upcase == '0'\n    next if c.downcase == '0'\n    next if c.upcase == '9'\n\
    \    next if c.downcase == '9'\n    next if c.upcase == '_'\n    next if c.downcase\
    \ == '_'\n    next if c.upcase == '-'\n    next if c.downcase == '-'\n    next\
    \ if c.upcase == '.'\n    next if c.downcase == '.'\n    next if c.upcase == '-'\n\
    \    next if c.downcase == '-'\n    next if c.upcase == '_'\n    next if c.downcase\
    \ == '_'\n    next if c.upcase == '0'\n    next if c.downcase == '0'\n    next\
    \ if c.upcase == '9'\n    next if c.downcase == '9'\n    next if c.upcase == '_'\n\
    \    next if c.downcase == '_'\n    next if c.upcase == '-'\n    next if c.downcase\
    \ == '-'\n    next if c.upcase == '.'\n    next if c.downcase == '.'\n    next\
    \ if c.upcase == '-'\n    next if c.downcase == '-'\n    next if c.upcase == '_'\n\
    \    next if c.downcase == '_'\n    next if c.upcase == '0'\n    next if c.downcase\
    \ == '0'\n    next if c.upcase == '9'\n    next if c.downcase == '9'\n    next\
    \ if c.upcase == '_'\n    next if c.downcase == '_'\n    next if c.upcase == '-'\n\
    \    next if c.downcase == '-'\n    next if c.upcase == '.'\n    next if c.downcase\
    \ == '.'\n    next if c.upcase == '-'\n    next if c.downcase == '-'\n    next\
    \ if c.upcase == '_'\n    next if c.downcase == '_'\n    next if c.upcase == '0'\n\
    \    next if c.downcase == '0'\n    next if c.upcase == '9'\n    next if c.downcase\
    \ == '9'\n    next ", "  s.chars.each_with_index do |c, i|\n    next if i == s.length\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == 'A'\n    next if\
    \ c.upcase == 'Z'\n    next if c.downcase == 'A'\n    next if c.downcase == 'Z'\n\
    \    next if c.upcase == 'a'\n    next if c.upcase == 'z'\n    next if c.downcase\
    \ == 'a'\n    next if c.downcase == 'z'\n    next if c.upcase == '0'\n    next\
    \ if c.upcase == '1'\n    next if c.upcase == '2'\n    next if c.upcase == '3'\n\
    \    next if c.upcase == '4'\n    next if c.upcase == '5'\n    next if c.upcase\
    \ == '6'\n    next if c.upcase == '7'\n    next if c.upcase == '8'\n    next if\
    \ c.upcase == '9'\n    next if c.downcase == '0'\n    next if c.downcase == '1'\n\
    \    next if c.downcase == '2'\n    next if c.downcase == '3'\n    next if c.downcase\
    \ == '4'\n    next if c.downcase == '5'\n    next if c.downcase == '6'\n    next\
    \ if c.downcase == '7'\n    next if c.downcase == '8'\n    next if c.downcase\
    \ == '9'\n    next if c.upcase == 'A'\n    next if c.upcase == 'B'\n    next if\
    \ c.upcase == 'C'\n    next if c.upcase == 'D'\n    next if c.upcase == 'E'\n\
    \    next if c.upcase == 'F'\n    next if c.upcase == 'G'\n    next if c.upcase\
    \ == 'H'\n    next if c.upcase == 'I'\n    next if c.upcase == 'J'\n    next if\
    \ c.upcase == 'K'\n    next if c.upcase == 'L'\n    next if c.upcase == 'M'\n\
    \    next if c.upcase == 'N'\n    next if c.upcase == 'O'\n    next if c.upcase\
    \ == 'P'\n    next if c.upcase == 'Q'\n    next if c.upcase == 'R'\n    next if\
    \ c.upcase == 'S'\n    next if c.upcase == 'T'\n    next if c.upcase == 'U'\n\
    \    next if ", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  alphabet = alphabet.chars.to_a\n\
    \  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet\
    \ = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet\
    \ = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n\
    \  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet\
    \ = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet\
    \ = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n\
    \  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet\
    \ = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet\
    \ = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n\
    \  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet\
    \ = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet\
    \ = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n\
    \  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet\
    \ = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet\
    \ = alphabet.chars.to_a\n  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n\
    \  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n  alphabet\
    \ = alphabet.rotate(2)\n  alphabet = alphabet.chars.to_a\n", "  s.chars.map {\
    \ |c| c.ord % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == 'z'\n    next\
    \ if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if\
    \ char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char\
    \ == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char ==\
    \ 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n\
    \    next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n \
    \   next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n  \
    \  next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n   \
    \ next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next\
    \ if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if\
    \ char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char\
    \ == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char ==\
    \ 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n\
    \    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n \
    \   next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n  \
    \  next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n   \
    \ next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next\
    \ if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if\
    \ char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char\
    \ == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char ==\
    \ 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n\
    \    next if char == 'z'\n    next if char == '", "  s.chars.each_with_index do\
    \ |char, i|\n    next if char.upcase == char\n    char.upcase!\n    char.downcase!\n\
    \    char.upcase!\n    char.downcase!\n  end\n  s\nend", "  s.chars.map { |c|\
    \ c.ord % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.each_with_index do\
    \ |char, index|\n    next if index == 0\n    next if char == 'z'\n    next if\
    \ char == 'a'\n    next if char == 'b'\n    next if char == 'c'\n    next if char\
    \ == 'd'\n    next if char == 'e'\n    next if char == 'f'\n    next if char ==\
    \ 'g'\n    next if char == 'h'\n    next if char == 'i'\n    next if char == 'j'\n\
    \    next if char == 'k'\n    next if char == 'l'\n    next if char == 'm'\n \
    \   next if char == 'n'\n    next if char == 'o'\n    next if char == 'p'\n  \
    \  next if char == 'q'\n    next if char == 'r'\n    next if char == 's'\n   \
    \ next if char == 't'\n    next if char == 'u'\n    next if char == 'v'\n    next\
    \ if char == 'w'\n    next if char == 'x'\n    next if char == 'y'\n    next if\
    \ char == 'z'\n    next if char == 'A'\n    next if char == 'B'\n    next if char\
    \ == 'C'\n    next if char == 'D'\n    next if char == 'E'\n    next if char ==\
    \ 'F'\n    next if char == 'G'\n    next if char == 'H'\n    next if char == 'I'\n\
    \    next if char == 'J'\n    next if char == 'K'\n    next if char == 'L'\n \
    \   next if char == 'M'\n    next if char == 'N'\n    next if char == 'O'\n  \
    \  next if char == 'P'\n    next if char == 'Q'\n    next if char == 'R'\n   \
    \ next if char == 'S'\n    next if char == 'T'\n    next if char == 'U'\n    next\
    \ if char == 'V'\n    next if char == 'W'\n    next if char == 'X'\n    next if\
    \ char == 'Y'\n    next if char == 'Z'\n    next if char == '0'\n    next if char\
    \ == '1'\n    next if char == '2'\n    next if char == '3'\n    next if char ==\
    \ '4'\n    next if char == '5'\n    next if char == '6'\n    next if char == '7'\n\
    \    next if char == '8'\n    next if char == '9'\n    next if char == '.'\n",
  "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  s.chars.map { |c| alphabet.index(c.chr)\
    \ + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet\
    \ = s.chars.to_a\n  alphabet.rotate(2).map{|c| c.chr}.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    char.upcase + char.downcase\n\
    \  end\nend", "  alphabet = s.downcase.chars.to_a\n  alphabet.rotate!\n  alphabet.map!\
    \ {|c| c.to_i + 2}\n  alphabet.join\nend", "  alphabet = s.split('').map { |c|\
    \ c.ord }\n  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.map { |c| c.chr\
    \ }\n  alphabet.join('')\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.each_with_index do |char, i|\n    next if i ==\
    \ 0\n    char.upcase + char.downcase + char.upcase\n  end\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = s.downcase.split(//).map(&:to_i)\n\
    \  alphabet.rotate(2).zip(alphabet).map { |a,b| a.chr + b.chr }.join(\"\")\nend",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  alphabet = s.split('').map { |c| c.ord }\n  alphabet.rotate(2).map\
    \ { |c| c.chr }.join\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  s.split(\"\
    \").map do |c|\n    alphabet.index(c) ? alphabet.index(c) + 2 : alphabet.index(c)\
    \ - 2\n  end.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map\
    \ { |c| c.chr + c.chr }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  alphabet\
    \ = alphabet.reverse\n  s.split(\"\").map { |char| alphabet.index(char) + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ s.chars.map { |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    char.upcase + char.downcase +\
    \ char.upcase + char.downcase\n  end\nend", "  s.each_char do |c|\n    next if\
    \ c.upcase == c.downcase\n    next if c.upcase == 'A'\n    next if c.upcase ==\
    \ 'B'\n    next if c.upcase == 'C'\n    next if c.upcase == 'D'\n    next if c.upcase\
    \ == 'E'\n    next if c.upcase == 'F'\n    next if c.upcase == 'G'\n    next if\
    \ c.upcase == 'H'\n    next if c.upcase == 'I'\n    next if c.upcase == 'J'\n\
    \    next if c.upcase == 'K'\n    next if c.upcase == 'L'\n    next if c.upcase\
    \ == 'M'\n    next if c.upcase == 'N'\n    next if c.upcase == 'O'\n    next if\
    \ c.upcase == 'P'\n    next if c.upcase == 'Q'\n    next if c.upcase == 'R'\n\
    \    next if c.upcase == 'S'\n    next if c.upcase == 'T'\n    next if c.upcase\
    \ == 'U'\n    next if c.upcase == 'V'\n    next if c.upcase == 'W'\n    next if\
    \ c.upcase == 'X'\n    next if c.upcase == 'Y'\n    next if c.upcase == 'Z'\n\
    \    next if c.upcase == 'a'\n    next if c.upcase == 'b'\n    next if c.upcase\
    \ == 'c'\n    next if c.upcase == 'd'\n    next if c.upcase == 'e'\n    next if\
    \ c.upcase == 'f'\n    next if c.upcase == 'g'\n    next if c.upcase == 'h'\n\
    \    next if c.upcase == 'i'\n    next if c.upcase == 'j'\n    next if c.upcase\
    \ == 'k'\n    next if c.upcase == 'l'\n    next if c.upcase == 'm'\n    next if\
    \ c.upcase == 'n'\n    next if c.upcase == 'o'\n    next if c.upcase == 'p'\n\
    \    next if c.upcase == 'q'\n    next if c.upcase == 'r'\n    next if c.upcase\
    \ == 's'\n    next if c.upcase == 't'\n    next if c.upcase == 'u'\n    next if\
    \ c.upcase == 'v'\n    next if c.upcase == 'w'\n    next if c.upcase == 'x'\n\
    \    next if c.upcase ", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ s.chars.each_with_index do |c, i|\n    next if i == 0\n    next if c != s.chars[i-1]\n\
    \    next if c != s.chars[i+1]\n    next if c != s.chars[i-1] && c != s.chars[i+1]\n\
    \    next if c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1] && c\
    \ != s.chars[i+1]\n    next if c != s.chars[i-1] && c != s.chars[i+1] && c !=\
    \ s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1]\n\
    \    next if c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1] && c\
    \ != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1]\
    \ && c != s.chars[i+1]\n    next if c != s.chars[i-1] && c != s.chars[i+1] &&\
    \ c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1]\
    \ && c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1]\n\
    \    next if c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1] && c\
    \ != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1]\
    \ && c != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1]\
    \ && c != s.chars[i+1]\n    next if c != s.chars[i-1] && c != s.chars[i+1] &&\
    \ c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1]\
    \ && c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1]\
    \ && c != s.chars[i-1] && c != s.chars[i+1]\n    next if c != s.chars[i-1] &&\
    \ c != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1]\
    \ && c != s.chars[i+1] && c != s.chars[i-1] && c != s.chars[i+1] && c != s.chars[i-1]\
    \ && c != s.chars[i+1] && c ", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  alphabet\
    \ = alphabet.rotate(2)\n  alphabet = alphabet[alphabet.size - 1]\n  alphabet =\
    \ alphabet.upcase\n  alphabet = alphabet.downcase\n  alphabet = alphabet.gsub(/[^a-z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[^A-Z]/, '')\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(", "  alphabet = s.downcase.split(//)\n  alphabet.rotate(2)\n\
    \  alphabet.map!{|c| c.upcase}\n  alphabet.join('')\nend", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  alphabet = s.split('').map { |c| c.ord }\n \
    \ alphabet.rotate(2).map { |c| c.chr }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == 'A'\n    next if c.upcase == 'Z'\n    next if c.upcase == 'a'\n\
    \    next if c.upcase == 'z'\n    next if c.upcase == '0'\n    next if c.upcase\
    \ == '9'\n    next if c.upcase == '_'\n    next if c.upcase == '-'\n    next if\
    \ c.upcase == '.'\n    next if c.upcase == '$'\n    next if c.upcase == '%'\n\
    \    next if c.upcase == '&'\n    next if c.upcase == '('\n    next if c.upcase\
    \ == ')'\n    next if c.upcase == '*'\n    next if c.upcase == '+'\n    next if\
    \ c.upcase == ','\n    next if c.upcase == '-'\n    next if c.upcase == '.'\n\
    \    next if c.upcase == '/'\n    next if c.upcase == ';'\n    next if c.upcase\
    \ == '\"'\n    next if c.upcase == '?'\n    next if c.upcase == '@'\n    next\
    \ if c.upcase == '['\n    next if c.upcase == ']'\n    next if c.upcase == '{'\n\
    \    next if c.upcase == '}'\n    next if c.upcase == '<'\n    next if c.upcase\
    \ == '>'\n    next if c.upcase == '='\n    next if c.upcase == '~'\n    next if\
    \ c.upcase == '^'\n    next if c.upcase == '|'\n    next if c.upcase == '~'\n\
    \    next if c.upcase == '^'\n    next if c.upcase == '|'\n    next if c.upcase\
    \ == '~'\n    next if c.upcase == '^'\n    next if c.upcase == '|'\n    next if\
    \ c.upcase == '~'\n    next if c.upcase == '^'\n    next if c.upcase == '|'\n\
    \    next if c.upcase == '~'\n    next if c.upcase == '^'\n    next if c.upcase\
    \ == '|'\n    next if c.upcase == '~'\n    next if c.upcase == '^'\n    next if\
    \ c.upcase == '|'\n    next if c.upcase == '~'\n    next if c.upcase == '^", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  s.chars.map\
    \ { |c| alphabet.index(c.chr) + 2 }.join\nend", "  s.chars.each_with_index do\
    \ |char, index|\n    next if char == 'z'\n    next if char == 'a'\n    next if\
    \ char == 'b'\n    next if char == 'c'\n    next if char == 'd'\n    next if char\
    \ == 'e'\n    next if char == 'f'\n    next if char == 'g'\n    next if char ==\
    \ 'h'\n    next if char == 'i'\n    next if char == 'j'\n    next if char == 'k'\n\
    \    next if char == 'l'\n    next if char == 'm'\n    next if char == 'n'\n \
    \   next if char == 'o'\n    next if char == 'p'\n    next if char == 'q'\n  \
    \  next if char == 'r'\n    next if char == 's'\n    next if char == 't'\n   \
    \ next if char == 'u'\n    next if char == 'v'\n    next if char == 'w'\n    next\
    \ if char == 'x'\n    next if char == 'y'\n    next if char == 'z'\n    next if\
    \ char == 'a'\n    next if char == 'b'\n    next if char == 'c'\n    next if char\
    \ == 'd'\n    next if char == 'e'\n    next if char == 'f'\n    next if char ==\
    \ 'g'\n    next if char == 'h'\n    next if char == 'i'\n    next if char == 'j'\n\
    \    next if char == 'k'\n    next if char == 'l'\n    next if char == 'm'\n \
    \   next if char == 'n'\n    next if char == 'o'\n    next if char == 'p'\n  \
    \  next if char == 'q'\n    next if char == 'r'\n    next if char == 's'\n   \
    \ next if char == 't'\n    next if char == 'u'\n    next if char == 'v'\n    next\
    \ if char == 'w'\n    next if char == 'x'\n    next if char == 'y'\n    next if\
    \ char == 'z'\n    next if char == 'A'\n    next if char == 'B'\n    next if char\
    \ == 'C'\n    next if char == 'D'\n    next if char == 'E'\n    next if char ==\
    \ 'F'\n    next if char == 'G'\n    next if char == 'H'\n    next if char == 'I'\n\
    \    next if char == 'J'\n    next if char == 'K'\n    next if char == 'L'\n \
    \   next if char == 'M", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  alphabet = alphabet[alphabet.size\
    \ - 2..-1]\n  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - 1]\n  alphabet = alphabet.rotate(2)\n\
    \  alphabet = alphabet[0..alphabet.size - ", "  s.chars.map { |c| c.ord % 26 +\
    \ 2 }.join\nend", "  alphabet = s.downcase.split('')\n  alphabet.rotate(2)\n \
    \ alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c|\
    \ c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n\
    \  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c|\
    \ c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n\
    \  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c|\
    \ c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n\
    \  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c|\
    \ c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n\
    \  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c|\
    \ c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n\
    \  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c|\
    \ c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n\
    \  alphabet.map!{|c| c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c|\
    \ c.to_i + 2}\n  alphabet.map!{|c| c.to_i + 1}\n  alphabet.map!{|c| c.to_i + 2}\n\
    \  alphabet.map!{|", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  s.chars.map { |c| alphabet.index(c.upcase)\
    \ + alphabet.index(c.downcase) }\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  result = ''\n  s.each_char do |c|\n    result += alphabet.index(c.upcase) +\
    \ alphabet.index(c.downcase) * 2\n  end\n  return result\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == s.length\n    next if c.upcase == c.downcase\n \
    \   next if c.upcase == 'A'\n    next if c.upcase == 'Z'\n    next if c.upcase\
    \ == 'a'\n    next if c.upcase == 'z'\n    next if c.upcase == '0'\n    next if\
    \ c.upcase == '9'\n    next if c.upcase == '_'\n    next if c.upcase == '-'\n\
    \    next if c.upcase == '.'\n    next if c.upcase == '$'\n    next if c.upcase\
    \ == '%'\n    next if c.upcase == '&'\n    next if c.upcase == '('\n    next if\
    \ c.upcase == ')'\n    next if c.upcase == '*'\n    next if c.upcase == '+'\n\
    \    next if c.upcase == ','\n    next if c.upcase == '-'\n    next if c.upcase\
    \ == '.'\n    next if c.upcase == '/'\n    next if c.upcase == ';'\n    next if\
    \ c.upcase == '<'\n    next if c.upcase == '='\n    next if c.upcase == '>'\n\
    \    next if c.upcase == '?'\n    next if c.upcase == '@'\n    next if c.upcase\
    \ == '['\n    next if c.upcase == '\\\\'\n    next if c.upcase == ']'\n    next\
    \ if c.upcase == '^'\n    next if c.upcase == '_'\n    next if c.upcase == '{'\n\
    \    next if c.upcase == '|'\n    next if c.upcase == '}'\n    next if c.upcase\
    \ == '~'\n    next if c.upcase == '`'\n    next if c.upcase == '{'\n    next if\
    \ c.upcase == '}'\n    next if c.upcase == '|'\n    next if c.upcase == '}'\n\
    \    next if c.upcase == '~'\n    next if c.upcase == '`'\n    next if c.upcase\
    \ == '{'\n    next if c.upcase == '}'\n    next if c.upcase == '|'\n    next if\
    \ c.upcase == '}'\n    next if c.upcase == '~'\n    next if c.upcase == '`'\n\
    \    next if c.upcase == '{'\n    next if c.upcase == '}'\n    next if c.upcase\
    \ == '|'\n    next if c.", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ s.chars.each_with_index do |char, i|\n    next if char == 'z'\n    next if char\
    \ == 'a'\n    next if char == 'b'\n    next if char == 'c'\n    next if char ==\
    \ 'd'\n    next if char == 'e'\n    next if char == 'f'\n    next if char == 'g'\n\
    \    next if char == 'h'\n    next if char == 'i'\n    next if char == 'j'\n \
    \   next if char == 'k'\n    next if char == 'l'\n    next if char == 'm'\n  \
    \  next if char == 'n'\n    next if char == 'o'\n    next if char == 'p'\n   \
    \ next if char == 'q'\n    next if char == 'r'\n    next if char == 's'\n    next\
    \ if char == 't'\n    next if char == 'u'\n    next if char == 'v'\n    next if\
    \ char == 'w'\n    next if char == 'x'\n    next if char == 'y'\n    next if char\
    \ == 'z'\n    next if char == 'A'\n    next if char == 'B'\n    next if char ==\
    \ 'C'\n    next if char == 'D'\n    next if char == 'E'\n    next if char == 'F'\n\
    \    next if char == 'G'\n    next if char == 'H'\n    next if char == 'I'\n \
    \   next if char == 'J'\n    next if char == 'K'\n    next if char == 'L'\n  \
    \  next if char == 'M'\n    next if char == 'N'\n    next if char == 'O'\n   \
    \ next if char == 'P'\n    next if char == 'Q'\n    next if char == 'R'\n    next\
    \ if char == 'S'\n    next if char == 'T'\n    next if char == 'U'\n    next if\
    \ char == 'V'\n    next if char == 'W'\n    next if char == 'X'\n    next if char\
    \ == 'Y'\n    next if char == 'Z'\n    next if char == '0'\n    next if char ==\
    \ '1'\n    next if char == '2'\n    next if char == '3'\n    next if char == '4'\n\
    \    next if char == '5'\n    next if char == '6'\n    next if char == '7'\n \
    \   next if char == '8'\n    next if char == '9'\n    next if char == '.'\n  \
    \  next if char == '?", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = %w{a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z}\n  s.chars.map { |c| alphabet.index(c.to_s) }.rotate(2).join\n\
    end", "  s.chars.each_with_index do |c, i|\n    next if i == 0\n    next if c\
    \ != s.chars[i-1]\n    next if c != s.chars[i-2]\n    next if c != s.chars[i-3]\n\
    \    next if c != s.chars[i-4]\n    next if c != s.chars[i-5]\n    next if c !=\
    \ s.chars[i-6]\n    next if c != s.chars[i-7]\n    next if c != s.chars[i-8]\n\
    \    next if c != s.chars[i-9]\n    next if c != s.chars[i-10]\n    next if c\
    \ != s.chars[i-11]\n    next if c != s.chars[i-12]\n    next if c != s.chars[i-13]\n\
    \    next if c != s.chars[i-14]\n    next if c != s.chars[i-15]\n    next if c\
    \ != s.chars[i-16]\n    next if c != s.chars[i-17]\n    next if c != s.chars[i-18]\n\
    \    next if c != s.chars[i-19]\n    next if c != s.chars[i-20]\n    next if c\
    \ != s.chars[i-21]\n    next if c != s.chars[i-22]\n    next if c != s.chars[i-23]\n\
    \    next if c != s.chars[i-24]\n    next if c != s.chars[i-25]\n    next if c\
    \ != s.chars[i-26]\n    next if c != s.chars[i-27]\n    next if c != s.chars[i-28]\n\
    \    next if c != s.chars[i-29]\n    next if c != s.chars[i-30]\n    next if c\
    \ != s.chars[i-31]\n    next if c != s.chars[i-32]\n    next if c != s.chars[i-33]\n\
    \    next if c != s.chars[i-34]\n    next if c != s.chars[i-35]\n    next if c\
    \ != s.chars[i-36]\n    next if c != s.chars[i-37]\n    next if c != s.chars[i-38]\n\
    \    next if c != s.chars[i-39]\n    next if c != s.chars[i-40]\n    next if c\
    \ != s.chars[i-41]\n    next if c != s.chars[i-42]\n    next if c != s.chars[i-43]\n\
    \    next if c != ", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    char.upcase += 2\n  end\n  s.chars.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == 'A'\n    next if c.upcase == 'Z'\n    next if c.upcase == 'a'\n\
    \    next if c.upcase == 'z'\n    next if c.upcase == '0'\n    next if c.upcase\
    \ == '9'\n    next if c.upcase == '_'\n    next if c.upcase == '-'\n    next if\
    \ c.upcase == '.'\n    next if c.upcase == '/'\n    next if c.upcase == '\\\\\
    '\n    next if c.upcase == '#'\n    next if c.upcase == '$'\n    next if c.upcase\
    \ == '%'\n    next if c.upcase == '&'\n    next if c.upcase == '*'\n    next if\
    \ c.upcase == '('\n    next if c.upcase == ')'\n    next if c.upcase == '+'\n\
    \    next if c.upcase == '='\n    next if c.upcase == '<'\n    next if c.upcase\
    \ == '>'\n    next if c.upcase == '['\n    next if c.upcase == ']'\n    next if\
    \ c.upcase == '{'\n    next if c.upcase == '}'\n    next if c.upcase == '|'\n\
    \    next if c.upcase == ';'\n    next if c.upcase == ':'\n    next if c.upcase\
    \ == '\"'\n    next if c.upcase == '\\'' \n    next if c.upcase == '/'\n    next\
    \ if c.upcase == '\\\\'\n    next if c.upcase == '#'\n    next if c.upcase ==\
    \ '$'\n    next if c.upcase == '%'\n    next if c.upcase == '&'\n    next if c.upcase\
    \ == '*'\n    next if c.upcase == '('\n    next if c.upcase == ')'\n    next if\
    \ c.upcase == '+'\n    next if c.upcase == '='\n    next if c.upcase == '<'\n\
    \    next if c.upcase == '>'\n    next if c.upcase == '['\n    next if c.upcase\
    \ == ']'\n    next if c.upcase == '{'\n    next if c.upcase == '}'\n    next if\
    \ c.upcase == '|'\n    next if c.upcase == ';'\n    next if c.upcase == ':'\n\
    \    next if c.upcase ", "  s.chars.each_with_index do |char, index|\n    char\
    \ = char.upcase if index == 0\n    char.succ! if index > 0\n    char.succ! if\
    \ index > 1\n    char.succ! if index > 2\n    char.succ! if index > 3\n    char.succ!\
    \ if index > 4\n    char.succ! if index > 5\n    char.succ! if index > 6\n   \
    \ char.succ! if index > 7\n    char.succ! if index > 8\n    char.succ! if index\
    \ > 9\n    char.succ! if index > 10\n    char.succ! if index > 11\n    char.succ!\
    \ if index > 12\n    char.succ! if index > 13\n    char.succ! if index > 14\n\
    \    char.succ! if index > 15\n    char.succ! if index > 16\n    char.succ! if\
    \ index > 17\n    char.succ! if index > 18\n    char.succ! if index > 19\n   \
    \ char.succ! if index > 20\n    char.succ! if index > 21\n    char.succ! if index\
    \ > 22\n    char.succ! if index > 23\n    char.succ! if index > 24\n    char.succ!\
    \ if index > 25\n    char.succ! if index > 26\n    char.succ! if index > 27\n\
    \    char.succ! if index > 28\n    char.succ! if index > 29\n    char.succ! if\
    \ index > 30\n    char.succ! if index > 31\n    char.succ! if index > 32\n   \
    \ char.succ! if index > 33\n    char.succ! if index > 34\n    char.succ! if index\
    \ > 35\n    char.succ! if index > 36\n    char.succ! if index > 37\n    char.succ!\
    \ if index > 38\n    char.succ! if index > 39\n    char.succ! if index > 40\n\
    \    char.succ! if index > 41\n    char.succ! if index > 42\n    char.succ! if\
    \ index > 43\n    char.succ! if index > 44\n    char.succ! if index > 45\n   \
    \ char.succ! if index > 46\n    char.succ! if index > 47\n    char.succ! if index\
    \ > 48", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  s.chars.map { |c| alphabet.index(c.chr)\
    \ + 2 }.join\nend", "  alphabet = s.split('').map { |c| c.ord }\n  alphabet.rotate(2).map\
    \ { |c| c.chr }.join\nend", "  s.chars.each_with_index do |char, index|\n    next\
    \ if index == 0\n    char.upcase + char.downcase + char.upcase + char.downcase\n\
    \  end\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == 'A'\n    next if c.upcase == 'Z'\n    next if c.upcase == 'a'\n\
    \    next if c.upcase == 'z'\n    next if c.upcase == '0'\n    next if c.upcase\
    \ == '9'\n    next if c.upcase == '_'\n    next if c.upcase == '-'\n    next if\
    \ c.upcase == '.'\n    next if c.upcase == '$'\n    next if c.upcase == '%'\n\
    \    next if c.upcase == '&'\n    next if c.upcase == '*'\n    next if c.upcase\
    \ == '('\n    next if c.upcase == ')'\n    next if c.upcase == '+'\n    next if\
    \ c.upcase == ','\n    next if c.upcase == '-'\n    next if c.upcase == '.'\n\
    \    next if c.upcase == '/'\n    next if c.upcase == ';'\n    next if c.upcase\
    \ == '\"'\n    next if c.upcase == '%'\n    next if c.upcase == '\"'\n    next\
    \ if c.upcase == '('\n    next if c.upcase == ')'\n    next if c.upcase == '+'\n\
    \    next if c.upcase == ','\n    next if c.upcase == '-'\n    next if c.upcase\
    \ == '.'\n    next if c.upcase == '/'\n    next if c.upcase == ';'\n    next if\
    \ c.upcase == '\"'\n    next if c.upcase == '%'\n    next if c.upcase == '\"'\n\
    \    next if c.upcase == '('\n    next if c.upcase == ')'\n    next if c.upcase\
    \ == '+'\n    next if c.upcase == ','\n    next if c.upcase == '-'\n    next if\
    \ c.upcase == '.'\n    next if c.upcase == '/'\n    next if c.upcase == ';'\n\
    \    next if c.upcase == '\"'\n    next if c.upcase == '%'\n    next if c.upcase\
    \ == '\"'\n    next if c.upcase == '('\n    next if c.upcase == ')'\n    next\
    \ if c.upcase == '+'\n    next if c.upcase == ','\n    next if c.upcase == '-'\n\
    \    next if c.upcase == '", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.each_with_index do |char, i|\n    next if i ==\
    \ s.length\n    next if char == ' '\n    next if char == '\\n'\n    next if char\
    \ == '\\t'\n    next if char == '\\r'\n    next if char == '\\v'\n    next if\
    \ char == '\\f'\n    next if char == '\\a'\n    next if char == '\\e'\n    next\
    \ if char == '\\b'\n    next if char == '\\c'\n    next if char == '\\e'\n   \
    \ next if char == '\\f'\n    next if char == '\\r'\n    next if char == '\\n'\n\
    \    next if char == '\\t'\n    next if char == '\\v'\n    next if char == '\\\
    f'\n    next if char == '\\a'\n    next if char == '\\e'\n    next if char ==\
    \ '\\b'\n    next if char == '\\c'\n    next if char == '\\e'\n    next if char\
    \ == '\\f'\n    next if char == '\\r'\n    next if char == '\\n'\n    next if\
    \ char == '\\t'\n    next if char == '\\v'\n    next if char == '\\f'\n    next\
    \ if char == '\\a'\n    next if char == '\\e'\n    next if char == '\\b'\n   \
    \ next if char == '\\c'\n    next if char == '\\e'\n    next if char == '\\f'\n\
    \    next if char == '\\r'\n    next if char == '\\n'\n    next if char == '\\\
    t'\n    next if char == '\\v'\n    next if char == '\\f'\n    next if char ==\
    \ '\\a'\n    next if char == '\\e'\n    next if char == '\\b'\n    next if char\
    \ == '\\c'\n    next if char == '\\e'\n    next if char == '\\f'\n    next if\
    \ char == '\\r'\n    next if char == '\\n'\n    next if char == '\\t'\n    next\
    \ if char == '\\v'\n    next if char == '\\f'\n    next if char == '\\a'\n   \
    \ next if char == '\\e'\n    next if char == '\\b'\n    next if char == '\\c'\n\
    \    next if char == '\\e'\n    next if char == '\\f'\n    next if char == '\\\
    r'\n    next if char == '\\n'\n    next if char == '\\t'\n    next if char ==\
    \ '\\v'\n    next if char", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do\
    \ |char, i|\n    next if i == 0\n    char.upcase + char.downcase + char.upcase\n\
    \  end\nend", "  alphabet = s.downcase.split(//).map(&:to_i)\n  alphabet.rotate(2).zip(alphabet).map\
    \ { |a,b| a.chr + b.chr }.join(\"\")\nend", "  s.chars.each_with_index do |char,\
    \ i|\n    next if char.upcase == char\n    char.upcase!\n    char.next!\n    char.next!\n\
    \  end\n  s\nend", "  s.chars.each_with_index do |char, index|\n    next if char\
    \ == ' '\n    char.upcase!\n    char.rotate!\n    char.downcase!\n  end\n  s\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s + c.to_s }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    char.upcase + char.downcase\n\
    \  end.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  s.chars.map { |c| alphabet.index(c.chr)\
    \ + alphabet.index(c.chr) + 2 }.join\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  new_alphabet = alphabet.chars.map { |c| c.ord % 26 }\n  new_alphabet.rotate(2).chars.map\
    \ { |c| c.ord % 26 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == 'z'\n    next\
    \ if char == 'a'\n    next if char == 'b'\n    next if char == 'c'\n    next if\
    \ char == 'd'\n    next if char == 'e'\n    next if char == 'f'\n    next if char\
    \ == 'g'\n    next if char == 'h'\n    next if char == 'i'\n    next if char ==\
    \ 'j'\n    next if char == 'k'\n    next if char == 'l'\n    next if char == 'm'\n\
    \    next if char == 'n'\n    next if char == 'o'\n    next if char == 'p'\n \
    \   next if char == 'q'\n    next if char == 'r'\n    next if char == 's'\n  \
    \  next if char == 't'\n    next if char == 'u'\n    next if char == 'v'\n   \
    \ next if char == 'w'\n    next if char == 'x'\n    next if char == 'y'\n    next\
    \ if char == 'z'\n    next if char == 'A'\n    next if char == 'B'\n    next if\
    \ char == 'C'\n    next if char == 'D'\n    next if char == 'E'\n    next if char\
    \ == 'F'\n    next if char == 'G'\n    next if char == 'H'\n    next if char ==\
    \ 'I'\n    next if char == 'J'\n    next if char == 'K'\n    next if char == 'L'\n\
    \    next if char == 'M'\n    next if char == 'N'\n    next if char == 'O'\n \
    \   next if char == 'P'\n    next if char == 'Q'\n    next if char == 'R'\n  \
    \  next if char == 'S'\n    next if char == 'T'\n    next if char == 'U'\n   \
    \ next if char == 'V'\n    next if char == 'W'\n    next if char == 'X'\n    next\
    \ if char == 'Y'\n    next if char == 'Z'\n    next if char == '0'\n    next if\
    \ char == '1'\n    next if char == '2'\n    next if char == '3'\n    next if char\
    \ == '4'\n    next if char == '5'\n    next if char == '6'\n    next if char ==\
    \ '7'\n    next if char == '8'\n    next if char == '9'\n    next if char == 'a'\n",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ }.sort.map { |c| c.to_s.ord % 26 }.join\nend", "  alphabet = %w{a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z}\n  s.split('').map { |c| alphabet.index(c.upcase)\
    \ + 2 }.join\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  s.each_char\
    \ do |c|\n    alphabet.rotate(alphabet.index(c) + 2).downcase << c\n  end\nend",
  "  s.chars.map { |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if char == 'z'\n    chars.rotate(index).first\n \
    \ end\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |char, i|\n\
    \    next if i == 0\n    char.rotate(2).chars.each_with_index do |char2, j|\n\
    \      next if j == 0\n      char2 << char\n    end\n  end\n  s.chars.join\nend",
  "  s.chars.map { |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    char.upcase if i % 2 == 0\n  end\nend", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.rotate(2).join\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your help but I am still\
    \ getting this error when I run your code: undefined method `chars' for \"hi\"\
    :String (NoMethodError)\n<|/ c |>\n<| c |>\nI added a comment above to show you\
    \ how I ran your code. Did you copy and paste my code exactly as I wrote it? If\
    \ so, what version of Ruby are you using? I tested this in 2.1.0 and it worked\
    \ fine.\n<|/ c |>\n<| c |>\nI copied your code exactly and ran it on ruby 2.1.0\
    \ and it gave me the same error as before. I am using ruby 1.9.3p484\n<|/ c |>\n\
    <| c |>\nI added a comment above to show you how I ran your code. Did you copy\
    \ and paste my code exactly as I wrote it? If so, what version of Ruby are you\
    \ using? I tested this in 2.1.0 and it worked fine.\n<|/ c |>\n<| c |>\nI copied\
    \ your code exactly and ran it on ruby 2.1.0 and it gave me the same error as\
    \ before. I am using ruby 1.9.3p484\n<|/ c |>\n<| a tags=ruby,encryption,string\
    \ |>\n<code>", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map\
    \ { |c| c.chr }.join\nend", "  alphabet = %w[a b c d e f g h i j k l m n o p q\
    \ r s t u v w x y z]\n  s.chars.map { |c| alphabet.index(c.downcase) + 2 }.join\n\
    end", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  alphabet = alphabet[alphabet.size\
    \ - 2..-1] + alphabet[0..alphabet.size - 2]\n  s.chars.map { |c| alphabet.index(c)\
    \ }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.each_char\
    \ do |c|\n    alphabet = ('A'..'Z').to_a\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do\
    \ |char, index|\n    next if char == 'z'\n    next if char == 'a'\n    next if\
    \ char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char\
    \ == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char ==\
    \ 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n\
    \    next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n \
    \   next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n  \
    \  next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n   \
    \ next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next\
    \ if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if\
    \ char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char\
    \ == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char ==\
    \ 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n\
    \    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n \
    \   next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n  \
    \  next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n   \
    \ next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next\
    \ if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if\
    \ char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char\
    \ == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char ==\
    \ 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n\
    \    next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n \
    \   next if char == 'a'\n    next if char", "  s.chars.map { |c| c.ord % 26 }.rotate(2).join\n\
    end", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  alphabet = alphabet.chars.to_a\n\
    \  alphabet = alphabet.rotate(2).chars.to_a\n  alphabet = alphabet.rotate(1).chars.to_a\n\
    \  alphabet = alphabet.rotate(0).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-2).chars.to_a\n  alphabet = alphabet.rotate(-3).chars.to_a\n\
    \  alphabet = alphabet.rotate(-4).chars.to_a\n  alphabet = alphabet.rotate(-5).chars.to_a\n\
    \  alphabet = alphabet.rotate(-6).chars.to_a\n  alphabet = alphabet.rotate(-7).chars.to_a\n\
    \  alphabet = alphabet.rotate(-8).chars.to_a\n  alphabet = alphabet.rotate(-9).chars.to_a\n\
    \  alphabet = alphabet.rotate(-10).chars.to_a\n  alphabet = alphabet.rotate(-11).chars.to_a\n\
    \  alphabet = alphabet.rotate(-12).chars.to_a\n  alphabet = alphabet.rotate(-13).chars.to_a\n\
    \  alphabet = alphabet.rotate(-14).chars.to_a\n  alphabet = alphabet.rotate(-15).chars.to_a\n\
    \  alphabet = alphabet.rotate(-16).chars.to_a\n  alphabet = alphabet.rotate(-17).chars.to_a\n\
    \  alphabet = alphabet.rotate(-18).chars.to_a\n  alphabet = alphabet.rotate(-19).chars.to_a\n\
    \  alphabet = alphabet.rotate(-20).chars.to_a\n  alphabet = alphabet.rotate(-21).chars.to_a\n\
    \  alphabet = alphabet.rotate(-22).chars.to_a\n  alphabet = alphabet.rotate(-23).chars.to_a\n\
    \  alphabet = alphabet.rotate(-24).chars.to_a\n  alphabet = alphabet.rotate(-25).chars.to_a\n\
    \  alphabet = alphabet.rotate(-26).chars.to_a\n  alphabet = alphabet.rotate(-27).chars.to_a\n\
    \  alphabet = alphabet.rotate(-28).chars.to_a\n  alphabet = alphabet.rotate(-29).chars.to_a\n\
    \  alphabet = alphabet.rotate(-30).chars.to_a\n  alphabet = alphabet.rotate(-31).chars.to_a\n\
    \  alphabet = alphabet.rotate(-32).chars.to_a\n  alphabet = alphabet.rotate(-33).chars.to_a\n\
    \  alphabet = alphabet.rotate(-34).chars.", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  alphabet = alphabet.chars.to_a\n  alphabet.rotate(2).chars.to_a\n  s.chars.zip(alphabet).map\
    \ { |c,a| a.index(c) }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  s.chars.map { |c| alphabet.index(c.upcase) }.inject(:*)\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    char = char.upcase\n    char.succ!\n\
    \    char.succ!\n    char.succ!\n  end\n  s\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ s.chars.each_with_index do |char, index|\n    next if index == 0\n    char.upcase\
    \ + char.downcase\n  end\nend", "  s.chars.each_with_index do |letter, index|\n\
    \    letter = letter.upcase + letter.downcase + letter.upcase\n    letter = letter.rotate(index\
    \ * 2)\n    letter = letter.rotate(index * 2 + 1)\n    letter = letter.rotate(index\
    \ * 2 + 2)\n    letter = letter.rotate(index * 2 + 3)\n    letter = letter.rotate(index\
    \ * 2 + 4)\n    letter = letter.rotate(index * 2 + 5)\n    letter = letter.rotate(index\
    \ * 2 + 6)\n    letter = letter.rotate(index * 2 + 7)\n    letter = letter.rotate(index\
    \ * 2 + 8)\n    letter = letter.rotate(index * 2 + 9)\n    letter = letter.rotate(index\
    \ * 2 + 10)\n    letter = letter.rotate(index * 2 + 11)\n    letter = letter.rotate(index\
    \ * 2 + 12)\n    letter = letter.rotate(index * 2 + 13)\n    letter = letter.rotate(index\
    \ * 2 + 14)\n    letter = letter.rotate(index * 2 + 15)\n    letter = letter.rotate(index\
    \ * 2 + 16)\n    letter = letter.rotate(index * 2 + 17)\n    letter = letter.rotate(index\
    \ * 2 + 18)\n    letter = letter.rotate(index * 2 + 19)\n    letter = letter.rotate(index\
    \ * 2 + 20)\n    letter = letter.rotate(index * 2 + 21)\n    letter = letter.rotate(index\
    \ * 2 + 22)\n    letter = letter.rotate(index * 2 + 23)\n    letter = letter.rotate(index\
    \ * 2 + 24)\n    letter = letter.rotate(index * 2 + 25)\n    letter = letter.rotate(index\
    \ * 2 + 26)\n    letter = letter.rotate(index * 2 + 27)\n    letter = letter.rotate(index\
    \ * 2 + 28)\n    letter = letter.rotate(index * 2 + 29)\n    letter = letter.rotate(index\
    \ * 2 + 30)\n    letter = letter.rotate(index * 2 + 31)\n    letter = letter.rotate(index\
    \ * 2 + 32)\n    letter = letter.rotate(index * 2 + 33)\n    letter = letter.rotate(index\
    \ * 2 + 34)\n    letter = letter.rotate(index * 2 + 35)\n    letter = letter.rotate(index\
    \ * 2 + 36)\n    letter = letter.rotate(index * 2 + 37)\n    letter = letter.rotate(index\
    \ * 2 + 38)\n    letter = letter.rotate(index * 2 + 39)\n    letter = letter.rotate(index\
    \ * 2 + 40)\n    letter = letter.rotate(index * 2 + 41)\n    letter = let", " \
    \ s.chars.each_with_index do |char, index|\n    next if index == 0\n    char.upcase\
    \ + char.downcase\n  end\nend", "  alphabet = s.downcase.chars.to_a\n  alphabet.rotate!\n\
    \  alphabet.map { |c| c.to_s.upcase }.join(\"\")\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2] + alphabet[alphabet.index(alphabet)-1]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)+2]", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |c, i|\n    next\
    \ if i == 0\n    next if c.upcase == c.downcase\n    next if c.upcase == 'A'\n\
    \    next if c.upcase == 'Z'\n    next if c.downcase == 'A'\n    next if c.downcase\
    \ == 'Z'\n    next if c.upcase == 'a'\n    next if c.upcase == 'z'\n    next if\
    \ c.downcase == 'a'\n    next if c.downcase == 'z'\n    next if c.upcase == '0'\n\
    \    next if c.upcase == '1'\n    next if c.upcase == '2'\n    next if c.upcase\
    \ == '3'\n    next if c.upcase == '4'\n    next if c.upcase == '5'\n    next if\
    \ c.upcase == '6'\n    next if c.upcase == '7'\n    next if c.upcase == '8'\n\
    \    next if c.upcase == '9'\n    next if c.upcase == '.'\n    next if c.upcase\
    \ == '-'\n    next if c.upcase == '_'\n    next if c.downcase == '0'\n    next\
    \ if c.downcase == '1'\n    next if c.downcase == '2'\n    next if c.downcase\
    \ == '3'\n    next if c.downcase == '4'\n    next if c.downcase == '5'\n    next\
    \ if c.downcase == '6'\n    next if c.downcase == '7'\n    next if c.downcase\
    \ == '8'\n    next if c.downcase == '9'\n    next if c.downcase == '.'\n    next\
    \ if c.downcase == '-'\n    next if c.downcase == '_'\n    next if c.upcase ==\
    \ 'A'\n    next if c.upcase == 'Z'\n    next if c.downcase == 'A'\n    next if\
    \ c.downcase == 'Z'\n    next if c.upcase == 'a'\n    next if c.upcase == 'z'\n\
    \    next if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next if c.upcase\
    \ == '0'\n    next if c.upcase == '1'\n    next if c.upcase == '2'\n    next if\
    \ c.upcase == '3'\n    next if c.upcase == '4'\n    next if c.upcase == '5'\n\
    \    next if c.upcase == '6'\n    next if c.upcase == '7'\n    next if c.", " \
    \ alphabet = s.downcase.split(//).map(&:to_i)\n  alphabet.rotate(2).zip(alphabet).map\
    \ { |a,b| a.chr + b.chr }.join(//)\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  s.chars.map { |c| alphabet.index(c) }.rotate(2).join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.rotate(2).join\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I appreciate it a lot!\
    \ I understand what you're saying about rotating a string, but I don't understand\
    \ how you get from your example to my example. Could you please explain how you\
    \ get from my example to my example? Thanks again!\n<|/ c |>\n<| c |>\nI added\
    \ some comments to my answer.\n<|/ c |>\n<| c |>\nThanks so much! I really appreciate\
    \ it! I understand it much better now!\n<|/ c |>\n<| a tags=ruby,encryption,string\
    \ |>\nHere's a solution that doesn't use any loops:\n<code>", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == s.length\n    next if c.upcase == c.downcase\n \
    \   next if c.upcase == 'A'\n    next if c.upcase == 'B'\n    next if c.upcase\
    \ == 'C'\n    next if c.upcase == 'D'\n    next if c.upcase == 'E'\n    next if\
    \ c.upcase == 'F'\n    next if c.upcase == 'G'\n    next if c.upcase == 'H'\n\
    \    next if c.upcase == 'I'\n    next if c.upcase == 'J'\n    next if c.upcase\
    \ == 'K'\n    next if c.upcase == 'L'\n    next if c.upcase == 'M'\n    next if\
    \ c.upcase == 'N'\n    next if c.upcase == 'O'\n    next if c.upcase == 'P'\n\
    \    next if c.upcase == 'Q'\n    next if c.upcase == 'R'\n    next if c.upcase\
    \ == 'S'\n    next if c.upcase == 'T'\n    next if c.upcase == 'U'\n    next if\
    \ c.upcase == 'V'\n    next if c.upcase == 'W'\n    next if c.upcase == 'X'\n\
    \    next if c.upcase == 'Y'\n    next if c.upcase == 'Z'\n    next if c.upcase\
    \ == 'a'\n    next if c.upcase == 'b'\n    next if c.upcase == 'c'\n    next if\
    \ c.upcase == 'd'\n    next if c.upcase == 'e'\n    next if c.upcase == 'f'\n\
    \    next if c.upcase == 'g'\n    next if c.upcase == 'h'\n    next if c.upcase\
    \ == 'i'\n    next if c.upcase == 'j'\n    next if c.upcase == 'k'\n    next if\
    \ c.upcase == 'l'\n    next if c.upcase == 'm'\n    next if c.upcase == 'n'\n\
    \    next if c.upcase == 'o'\n    next if c.upcase == 'p'\n    next if c.upcase\
    \ == 'q'\n    next if c.upcase == 'r'\n    next if c.upcase == 's'\n    next if\
    \ c.upcase == 't'\n    next if c.upcase == 'u'\n    next if c.upcase == 'v'\n\
    \    next if c.upcase == 'w'\n    next if c.up", "  alphabet = s.downcase.split(//).map\
    \ { |c| c.ord }\n  alphabet.rotate(2).map { |c| c.chr }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |char, index|\n\
    \    next if index == 0\n    char.upcase!\n    char.rotate!\n    char.downcase!\n\
    \  end\n  s\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet\
    \ = s.downcase.chars.to_a\n  alphabet.rotate(2).map!(&:to_s)\n  alphabet.join\n\
    end", "  alphabet = s.downcase.split('')\n  alphabet = alphabet.rotate(2)\n  alphabet\
    \ = alphabet.join('')\n  return alphabet\nend", "  s.chars.each_with_index do\
    \ |char, index|\n    next if index == 0\n    char.upcase += 2\n  end\n  s\nend",
  "  s.chars.each_with_index do |char, index|\n    next if index == 0\n    char.upcase!\n\
    \    char.rotate!\n    char.downcase!\n  end\n  s\nend", "  s.chars.each_with_index\
    \ do |letter, index|\n    letter = letter.upcase\n    letter = letter.to_sym\n\
    \    letter = letter + 2\n    letter = letter.to_s\n    letter = letter.upcase\n\
    \    letter = letter.to_sym\n    letter = letter + 2\n    letter = letter.to_s\n\
    \    letter = letter.upcase\n    letter = letter.to_sym\n    letter = letter +\
    \ 2\n    letter = letter.to_s\n    letter = letter.upcase\n    letter = letter.to_sym\n\
    \    letter = letter + 2\n    letter = letter.to_s\n    letter = letter.upcase\n\
    \    letter = letter.to_sym\n    letter = letter + 2\n    letter = letter.to_s\n\
    \    letter = letter.upcase\n    letter = letter.to_sym\n    letter = letter +\
    \ 2\n    letter = letter.to_s\n    letter = letter.upcase\n    letter = letter.to_sym\n\
    \    letter = letter + 2\n    letter = letter.to_s\n    letter = letter.upcase\n\
    \    letter = letter.to_sym\n    letter = letter + 2\n    letter = letter.to_s\n\
    \    letter = letter.upcase\n    letter = letter.to_sym\n    letter = letter +\
    \ 2\n    letter = letter.to_s\n    letter = letter.upcase\n    letter = letter.to_sym\n\
    \    letter = letter + 2\n    letter = letter.to_s\n    letter = letter.upcase\n\
    \    letter = letter.to_sym\n    letter = letter + 2\n    letter = letter.to_s\n\
    \    letter = letter.upcase\n    letter = letter.to_sym\n    letter = letter +\
    \ 2\n    letter = letter.to_s\n    letter = letter.upcase\n    letter = letter.to_sym\n\
    \    letter = letter + 2\n    letter = letter.to_s\n    letter = letter.upcase\n\
    \    letter = letter.to_sym\n    letter = letter + 2\n    letter = letter.to_s\n\
    \    letter = letter.upcase\n    letter = letter.to_sym\n    letter = letter +\
    \ 2\n    letter = letter.to_s\n    letter = letter.upcase\n    letter = letter.to_sym\n\
    \    letter = letter + 2\n    letter = letter.to_s\n    letter", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  alphabet = s.downcase.chars.to_a\n  alphabet = alphabet.rotate(2)\n \
    \ alphabet = alphabet.map { |c| c.to_s }\n  alphabet.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.map { |c| c.ord % 26 + 2\
    \ }.join\nend", "  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  result = ''\n  s.each_char\
    \ do |c|\n    index = alphabet.index(c)\n    result << alphabet[(index+2)%26]\n\
    \  end\n  result\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  alphabet = alphabet.chars.to_a\n  alphabet\
    \ = alphabet.rotate(2).chars.to_a\n  alphabet = alphabet.rotate(1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(-1).chars.to_a\n  alphabet = alphabet.rotate(-1).chars.to_a\n\
    \  alphabet = alphabet.rotate(", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  alphabet = s.split('').map { |c| c.ord }\n  alphabet.rotate(-2).map {\
    \ |c| c.chr }.join\nend", "  s.chars.each_with_index do |char, index|\n    next\
    \ if index == 0\n    next if char == 'z'\n    next if char == 'a'\n    next if\
    \ char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char\
    \ == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char ==\
    \ 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n\
    \    next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n \
    \   next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n  \
    \  next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n   \
    \ next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next\
    \ if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if\
    \ char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char\
    \ == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char ==\
    \ 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n\
    \    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n \
    \   next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n  \
    \  next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n   \
    \ next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next\
    \ if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if\
    \ char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char\
    \ == 'a'\n    next if char == 'z'\n    next if char == 'a'\n    next if char ==\
    \ 'z'\n    next if char == 'a'\n    next if char == 'z'\n    next if char == 'a'\n\
    \    next if char == 'z'\n    next if char == 'a'\n    next if char == 'z'\n \
    \   next if char == '", "  s.chars.each_with_index do |char, i|\n    next if i\
    \ == 0\n    char.upcase += 2\n  end\n  s.chars.join\nend", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  alphabet = s.split('').map { |c| c.ord }\n \
    \ alphabet = alphabet.rotate(2)\n  alphabet = alphabet.map { |c| c.chr }\n  alphabet\
    \ = alphabet.join\n  alphabet = alphabet.upcase\n  alphabet = alphabet.gsub(/[^A-Z]/,\
    \ '')\n  alphabet = alphabet.gsub(/[A-Z]/, '')\n  alphabet = alphabet.gsub(/[a-z]/,\
    \ 'z')\n  alphabet = alphabet.gsub(/z/, 'a')\n  alphabet = alphabet.gsub(/[aeiou]/,\
    \ 'o')\n  alphabet = alphabet.gsub(/o/, 'u')\n  alphabet = alphabet.gsub(/u/,\
    \ 't')\n  alphabet = alphabet.gsub(/t/, 's')\n  alphabet = alphabet.gsub(/s/,\
    \ 'd')\n  alphabet = alphabet.gsub(/d/, 'f')\n  alphabet = alphabet.gsub(/f/,\
    \ 'g')\n  alphabet = alphabet.gsub(/g/, 'h')\n  alphabet = alphabet.gsub(/h/,\
    \ 'j')\n  alphabet = alphabet.gsub(/j/, 'k')\n  alphabet = alphabet.gsub(/k/,\
    \ 'l')\n  alphabet = alphabet.gsub(/l/, 'm')\n  alphabet = alphabet.gsub(/m/,\
    \ 'n')\n  alphabet = alphabet.gsub(/n/, 'o')\n  alphabet = alphabet.gsub(/o/,\
    \ 'p')\n  alphabet = alphabet.gsub(/p/, 'q')\n  alphabet = alphabet.gsub(/q/,\
    \ 'r')\n  alphabet = alphabet.gsub(/r/, 's')\n  alphabet = alphabet.gsub(/s/,\
    \ 't')\n  alphabet = alphabet.gsub(/t/, 'u')\n  alphabet = alphabet.gsub(/u/,\
    \ 'v')\n  alphabet = alphabet.gsub(/v/, 'w')\n  alphabet = alphabet.gsub(/w/,\
    \ 'x')\n  alphabet = alphabet.gsub(/x/, 'y')\n  alphabet = alphabet.gsub(/y/,\
    \ 'z')\n  alphabet = alphabet.gsub(/z/, 'a')\n  alphabet = alphabet.gsub(/a/,\
    \ 'b')\n  alphabet = alphabet.gsub(/b/, 'c')\n  alphabet = alphabet.gsub(/c/,\
    \ 'd')\n  alphabet = alphabet.gsub(/d/, 'e')\n  alphabet = alphabet.gsub(/e/,\
    \ 'f')\n  alphabet = alphabet.gsub(/f/, 'g')\n", "  alphabet = ['a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  alphabet = alphabet.rotate(2)\n  alphabet\
    \ = alphabet.reverse\n  alphabet = alphabet.join\n  s.split(\"\").map {|c| alphabet.index(c)\
    \ }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |char, i|\n\
    \    next if char == 'z'\n    next if char == 'a'\n    next if char == 'b'\n \
    \   next if char == 'c'\n    next if char == 'd'\n    next if char == 'e'\n  \
    \  next if char == 'f'\n    next if char == 'g'\n    next if char == 'h'\n   \
    \ next if char == 'i'\n    next if char == 'j'\n    next if char == 'k'\n    next\
    \ if char == 'l'\n    next if char == 'm'\n    next if char == 'n'\n    next if\
    \ char == 'o'\n    next if char == 'p'\n    next if char == 'q'\n    next if char\
    \ == 'r'\n    next if char == 's'\n    next if char == 't'\n    next if char ==\
    \ 'u'\n    next if char == 'v'\n    next if char == 'w'\n    next if char == 'x'\n\
    \    next if char == 'y'\n    next if char == 'z'\n    next if char == 'A'\n \
    \   next if char == 'B'\n    next if char == 'C'\n    next if char == 'D'\n  \
    \  next if char == 'E'\n    next if char == 'F'\n    next if char == 'G'\n   \
    \ next if char == 'H'\n    next if char == 'I'\n    next if char == 'J'\n    next\
    \ if char == 'K'\n    next if char == 'L'\n    next if char == 'M'\n    next if\
    \ char == 'N'\n    next if char == 'O'\n    next if char == 'P'\n    next if char\
    \ == 'Q'\n    next if char == 'R'\n    next if char == 'S'\n    next if char ==\
    \ 'T'\n    next if char == 'U'\n    next if char == 'V'\n    next if char == 'W'\n\
    \    next if char == 'X'\n    next if char == 'Y'\n    next if char == 'Z'\n \
    \   next if char == '0'\n    next if char == '1'\n    next if char == '2'\n  \
    \  next if char == '3'\n    next if char == '4'\n    next if char == '5'\n   \
    \ next if char == '6'\n    next if char == '7'\n    next if char == '8'\n    next\
    \ if char == '9'\n    next if char == 'a'\n    next if char == 'b'", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
