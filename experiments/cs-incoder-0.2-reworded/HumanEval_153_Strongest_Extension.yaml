name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
  \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
  )\n    public static string StrongestExtension(string class_name, List<string> extensions)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        string extension_strength = extensions[0].Length;\n       \
    \ foreach (string extension in extensions) {\n            int extension_length\
    \ = extension.Length;\n            int extension_strength_diff = extension_length\
    \ - extension_strength;\n            if (extension_strength_diff < 0) {\n    \
    \            extension_strength = extension_length;\n            }\n         \
    \   else if (extension_strength_diff > 0) {\n                extension_strength\
    \ = extension_strength - extension_strength_diff;\n            }\n        }\n\
    \        return class_name + \".\" + extensions[0];", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength == 0) return class_name;\n        double extension_strength_double\
    \ = extension_strength / extension_strength.ToString().Length;\n        double\
    \ extension_strength_double2 = extension_strength_double.ToString().Split('.')[1];\n\
    \        double extension_strength_double3 = extension_strength_double2.ToString().Split('.')[0];\n\
    \        double extension_strength_double4 = extension_strength_double3.ToString().Split('.')[0];\n\
    \        double extension_strength_double5 = extension_strength_double4.ToString().Split('.')[0];\n\
    \        double extension_strength_double6 = extension_strength_double5.ToString().Split('.')[0];\n\
    \        double extension_strength_double7 = extension_strength_double6.ToString().Split('.')[0];\n\
    \        double extension_strength_double8 = extension_strength_double7.ToString().Split('.')[0];\n\
    \        double extension_strength_double9 = extension_strength_double8.ToString().Split('.')[0];\n\
    \        double extension_strength_double10 = extension_strength_double9.ToString().Split('.')[0];\n\
    \        double extension_strength_double11 = extension_strength_double10.ToString().Split('.')[0];\n\
    \        double extension_strength_double12 = extension_strength_double11.ToString().Split('.')[0];\n\
    \        double extension_strength_double13 = extension_strength_double12.ToString().Split('.')[0];\n\
    \        double extension_strength_double14 = extension_strength_double13.ToString().Split('.')[0];\n\
    \        double extension_strength_double15 = extension_strength_double14.ToString().Split('.')[0];\n\
    \        double extension_strength_double16 = extension_strength_double15.ToString().Split('.')[0];\n\
    \        double extension_strength_double17 = extension_strength_double16.ToString().Split('.')[0];\n\
    \        double extension_strength_double18 = extension_strength_double17.ToString().Split('.')[0];\n\
    \        double extension_strength_double19 = extension_strength_double18.ToString().Split('.')[0];\n\
    \        double extension_strength_double20 = extension_strength_double19.ToString().Split('.')[0];\n\
    \        double extension_strength_double21 = extension_strength_double20.ToString().Split('.')[0];\n\
    \        ", "        string extension_strength = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            int extension_capital_letters\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_small_letters\
    \ = extension.Count(c => char.IsLower(c));\n            int extension_strength_fraction\
    \ = extension_capital_letters - extension_small_letters;\n            if (extension_strength_fraction\
    \ > extension_strength) {\n                extension_strength = extension_strength_fraction;\n\
    \                extension_strength = extension.Substring(0, extension.Length\
    \ - extension_strength);\n            }\n        }\n        return class_name\
    \ + \".\" + extension_strength;", "        // Your code here\n        string extension\
    \ = extensions[0];\n        string extension_class = class_name + extension;\n\
    \        string extension_class_name = extension_class.Substring(0, extension_class.Length\
    \ - extension.Length);\n        string extension_class_name_with_extension = extension_class_name\
    \ + extension;\n        string extension_class_name_with_extension_2 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length);\n        string\
    \ extension_class_name_with_extension_3 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 1);\n        string extension_class_name_with_extension_4\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 2);\n        string extension_class_name_with_extension_5 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 3);\n       \
    \ string extension_class_name_with_extension_6 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 4);\n        string extension_class_name_with_extension_7\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 5);\n        string extension_class_name_with_extension_8 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 6);\n       \
    \ string extension_class_name_with_extension_9 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 7);\n        string extension_class_name_with_extension_10\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 8);\n        string extension_class_name_with_extension_11 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 9);\n       \
    \ string extension_class_name_with_extension_12 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 10);\n        string extension_class_name_with_extension_13\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 11);\n        string extension_class_name_with_extension_14 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 12);\n      \
    \  string extension_class_name_with_extension_15 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 13);\n        string extension_class_name_with_extension_16\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 14);\n        string extension_class_name_with_extension_17 = extension_class_",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        string extension_strength_str_upper\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower\
    \ = extension_strength_str.ToLower();\n        int extension_strength_int;\n \
    \       if (extension_strength_str_upper.Contains(\"A\") && extension_strength_str_lower.Contains(\"\
    B\") && extension_strength_str_upper.Contains(\"C\")) {\n            extension_strength_int\
    \ = (int)Math.Floor((double)((double)CAP - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"\
    A\") && extension_strength_str_lower.Contains(\"B\") && extension_strength_str_upper.Contains(\"\
    C\") && extension_strength_str_lower.Contains(\"D\")) {\n            extension_strength_int\
    \ = (int)Math.Floor((double)((double)CAP - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"\
    A\") && extension_strength_str_lower.Contains(\"B\") && extension_strength_str_upper.Contains(\"\
    C\") && extension_strength_str_lower.Contains(\"D\") && extension_strength_str_lower.Contains(\"\
    E\")) {\n            extension_strength_int = (int)Math.Floor((double)((double)CAP\
    \ - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"A\"\
    ) && extension_strength_str_lower.Contains(\"B\") && extension_strength_str_upper.Contains(\"\
    C\") && extension_strength_str_lower.Contains(\"D\") && extension_strength_str_lower.Contains(\"\
    E\") && extension_strength_str_lower.Contains(\"F\")) {\n            extension_strength_int\
    \ = (int)Math.Floor((double)((double)CAP - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"\
    A\") && extension_strength_str_lower.Contains(\"B\") && extension_strength_str_upper.Contains(\"\
    C\") && extension_strength_str_lower.Contains(\"D\") && extension_strength_str_lower.Contains(\"\
    E\") && extension_strength_str_lower.Contains(\"F\") && extension_strength_str_lower.Contains(\"\
    G\")) {\n            extension_strength_int = (int)Math.Floor((double)((double)CAP\
    \ - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"A\"\
    ) && extension_", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        string strongest_extension = class_name + extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            if (strength > extension_strength)\
    \ {\n                strongest_extension = class_name + extension;\n         \
    \       extension_strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code goes here\n        string extension = extensions[0];\n        string extension_class\
    \ = class_name + extension;\n        string extension_class_name = extension_class.Substring(0,\
    \ extension_class.Length - extension.Length);\n        string extension_class_name_without_extension\
    \ = extension_class_name.Substring(0, extension_class_name.Length - extension.Length);\n\
    \        string extension_class_name_without_extension_without_extension = extension_class_name_without_extension.Substring(0,\
    \ extension_class_name_without_extension.Length - extension.Length);\n       \
    \ string extension_class_name_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension.Substring(0, extension_class_name_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension",
  "        string strongest_extension = \"\";\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Length;\n            int sm = class_name.Length;\n            double\
    \ strength = cap - sm;\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        // Your code here\n   \
    \     var extension_strength = extensions.Select(x => x.ToUpper().Count() - x.ToUpper().ToLower().Count()).ToList();\n\
    \        var extension_strength_max = extension_strength.Max();\n        var extension_strength_max_index\
    \ = extension_strength.IndexOf(extension_strength_max);\n        var extension_strength_max_name\
    \ = extensions[extension_strength_max_index];\n        return class_name + \"\
    .\" + extension_strength_max_name;", "        string strongest_extension = string.Empty;\n\
    \        double strongest_extension_strength = double.MaxValue;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string extension_strength = extensions[0].Substring(class_name.Length);\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.Substring(class_name.Length);\n            if (extension_strength_int\
    \ > extension_strength) {\n                extension_strength = extension_strength_int;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string strongest_extension = \"\";\n        string extension_strength =\
    \ \"\";\n        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = 0;\n            int extension_cap_int = 0;\n            int extension_sm_int\
    \ = 0;\n            int extension_length = extension.Length;\n            int\
    \ extension_cap_length = extension.ToUpper().Length;\n            int extension_sm_length\
    \ = extension.ToLower().Length;\n            int extension_strength_length = extension.ToUpper().ToLower().Length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = ", "        string extension = extensions.OrderBy(x\
    \ => x.ToUpperInvariant()).First();\n        int cap = extension.Count(x => x.ToUpperInvariant()\
    \ == extension);\n        int sm = extension.Count(x => x.ToLowerInvariant() ==\
    \ extension);\n        double strength = (double)cap - sm;\n        if (strength\
    \ > 0) {\n            return class_name + \".\" + extension;\n        }\n    \
    \    return class_name + \".\" + extensions.OrderBy(x => x).First();", "     \
    \   string extension_strength = extensions[0].ToUpper().Substring(class_name.Length);\n\
    \        string extension_strength_2 = extensions[1].ToUpper().Substring(class_name.Length);\n\
    \        double extension_strength_double = Convert.ToDouble(extension_strength);\n\
    \        double extension_strength_double_2 = Convert.ToDouble(extension_strength_2);\n\
    \        double extension_strength_double_3 = extension_strength_double - extension_strength_double_2;\n\
    \        double extension_strength_double_4 = extension_strength_double_3 / 2;\n\
    \        double extension_strength_double_5 = extension_strength_double_4 / 2;\n\
    \        double extension_strength_double_6 = extension_strength_double_5 / 2;\n\
    \        double extension_strength_double_7 = extension_strength_double_6 / 2;\n\
    \        double extension_strength_double_8 = extension_strength_double_7 / 2;\n\
    \        double extension_strength_double_9 = extension_strength_double_8 / 2;\n\
    \        double extension_strength_double_10 = extension_strength_double_9 / 2;\n\
    \        double extension_strength_double_11 = extension_strength_double_10 /\
    \ 2;\n        double extension_strength_double_12 = extension_strength_double_11\
    \ / 2;\n        double extension_strength_double_13 = extension_strength_double_12\
    \ / 2;\n        double extension_strength_double_14 = extension_strength_double_13\
    \ / 2;\n        double extension_strength_double_15 = extension_strength_double_14\
    \ / 2;\n        double extension_strength_double_16 = extension_strength_double_15\
    \ / 2;\n        double extension_strength_double_17 = extension_strength_double_16\
    \ / 2;\n        double extension_strength_double_18 = extension_strength_double_17\
    \ / 2;\n        double extension_strength_double_19 = extension_strength_double_18\
    \ / 2;\n        double extension_strength_double_20 = extension_strength_double_19\
    \ / 2;\n        double extension_strength_double_21 = extension_strength_double_20\
    \ / 2;\n        double extension_strength_double_22 = extension_strength_double_21\
    \ / 2;\n        double extension_strength_double_23 = extension_strength_double_22\
    \ / 2;\n        double extension_strength_double_24 = extension_strength_double_23\
    \ / 2;\n        double extension_strength_double_25 = extension_strength_double_24\
    \ / 2;\n        double extension_strength_double_26 = extension_strength_double_25\
    \ / 2;\n        double extension_strength_double_27 = extension_strength", " \
    \       string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_strongest = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            string extension_strength_new\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_new > extension_strength) {\n                extension_strength\
    \ = extension_strength_new;\n                extension_strength_strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength_strongest;",
  "        string extension = extensions[0];\n        string extension_class = class_name\
    \ + \".\" + extension;\n        string extension_class_with_strength = extension_class\
    \ + \".\" + extension;\n        string extension_class_with_strength_strength\
    \ = extension_class_with_strength + \".\" + extension;\n        string extension_class_with_strength_strength_strength\
    \ = extension_class_with_strength_strength + \".\" + extension;\n        string\
    \ extension_class_with_strength_strength_strength_strength = extension_class_with_strength_strength_strength\
    \ + \".\" + extension;\n        string extension_class_with_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength_strength + \".\"\
    \ + extension;\n        string extension_class_with_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength_strength + \".\"\
    \ + extension;\n        string extension_class_with_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength_strength + \".\"\
    \ + extension;\n        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength_strength + \".\"\
    \ + extension;\n        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToLower();\n        string extension_strength_fraction\
    \ =\n            extension_strength.Substring(extension_strength.Length - 1).ToLower();\n\
    \        string extension_strength_fraction_remainder =\n            extension_strength_fraction.Substring(extension_strength_fraction.Length\
    \ - 1);\n        int extension_strength_fraction_remainder_int = Convert.ToInt32(extension_strength_fraction_remainder);\n\
    \        int extension_strength_fraction_remainder_int_mod = extension_strength_fraction_remainder_int\
    \ % 10;\n        int extension_strength_fraction_remainder_int_mod_2 = extension_strength_fraction_remainder_int\
    \ % 100;\n        int extension_strength_fraction_remainder_int_mod_3 = extension_strength_fraction_remainder_int\
    \ % 1000;\n        int extension_strength_fraction_remainder_int_mod_4 = extension_strength_fraction_remainder_int\
    \ % 10000; \n        int extension_strength_fraction_remainder_int_mod_5 = extension_strength_fraction_remainder_int\
    \ % 100000;\n        int extension_strength_fraction_remainder_int_mod_6 = extension_strength_fraction_remainder_int\
    \ % 1000000;\n        int extension_strength_fraction_remainder_int_mod_7 = extension_strength_fraction_remainder_int\
    \ % 10000000;\n        int extension_strength_fraction_remainder_int_mod_8 = extension_strength_fraction_remainder_int\
    \ % 100000000; \n        int extension_strength_fraction_remainder_int_mod_9 =\
    \ extension_strength_fraction_remainder_int % 1000000000;\n        int extension_strength_fraction_remainder_int_mod_10\
    \ = extension_strength_fraction_remainder_int % 10000000000;\n        int extension_strength_fraction_remainder_int_mod_11\
    \ = extension_strength_fraction_remainder_int % 100000000000;\n        int extension_strength_fraction_remainder_int_mod_12\
    \ = extension_strength_fraction_remainder_int % 1000000000000;\n        int extension_strength_fraction_remainder_int_mod_13\
    \ = extension_strength_fraction_remainder_int % 10000000000000;\n        int extension_strength_fraction_remainder_int_mod_14\
    \ = extension_strength_fraction_remainder_int % 100000000000000;\n        int\
    \ extension_strength_fraction_remainder_int_mod_15 = extension_strength_fraction_remainder_int\
    \ % 1000000000000000;\n        int extension_strength_fraction_remainder_int_mod_16\
    \ = extension_strength", "        string strongest_extension = null;\n       \
    \ string extension_strength = null;\n        foreach (string extension in extensions)\
    \ {\n            int extension_capitalized = extension.Count(c => char.IsUpper(c));\n\
    \            int extension_smaller = extension.Count(c => char.IsLower(c));\n\
    \            int extension_strength = extension_capitalized - extension_smaller;\n\
    \            if (extension_strength > 0) {\n                if (extension_strength\
    \ > strongest_extension.Length) {\n                    strongest_extension = extension;\n\
    \                    extension_strength = extension_strength;\n              \
    \  }\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_capital = extension.Count(c => char.IsUpper(c));\n\
    \            int extension_smaller = extension.Count(c => char.IsLower(c));\n\
    \            int extension_strength_fraction = extension_capital - extension_smaller;\n\
    \            if (extension_strength_fraction > extension_strength.Count(c => c\
    \ == c)) {\n                extension_strength = extension;\n            }\n \
    \       }\n        return class_name + \".\" + extension_strength;", "       \
    \ // Your code goes here\n        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;"]
stop_tokens:
- "\n    }\n"
