name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
  \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
  )\n    public static string StrongestExtension(string class_name, List<string> extensions)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        string extension_strength = extensions[0].Length;\n       \
    \ foreach (string extension in extensions) {\n            int extension_length\
    \ = extension.Length;\n            int extension_strength_diff = extension_length\
    \ - extension_strength;\n            if (extension_strength_diff < 0) {\n    \
    \            extension_strength = extension_length;\n            }\n         \
    \   else if (extension_strength_diff > 0) {\n                extension_strength\
    \ = extension_strength - extension_strength_diff;\n            }\n        }\n\
    \        return class_name + \".\" + extensions[0];", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength == 0) return class_name;\n        double extension_strength_double\
    \ = extension_strength / extension_strength.ToString().Length;\n        double\
    \ extension_strength_double2 = extension_strength_double.ToString().Split('.')[1];\n\
    \        double extension_strength_double3 = extension_strength_double2.ToString().Split('.')[0];\n\
    \        double extension_strength_double4 = extension_strength_double3.ToString().Split('.')[0];\n\
    \        double extension_strength_double5 = extension_strength_double4.ToString().Split('.')[0];\n\
    \        double extension_strength_double6 = extension_strength_double5.ToString().Split('.')[0];\n\
    \        double extension_strength_double7 = extension_strength_double6.ToString().Split('.')[0];\n\
    \        double extension_strength_double8 = extension_strength_double7.ToString().Split('.')[0];\n\
    \        double extension_strength_double9 = extension_strength_double8.ToString().Split('.')[0];\n\
    \        double extension_strength_double10 = extension_strength_double9.ToString().Split('.')[0];\n\
    \        double extension_strength_double11 = extension_strength_double10.ToString().Split('.')[0];\n\
    \        double extension_strength_double12 = extension_strength_double11.ToString().Split('.')[0];\n\
    \        double extension_strength_double13 = extension_strength_double12.ToString().Split('.')[0];\n\
    \        double extension_strength_double14 = extension_strength_double13.ToString().Split('.')[0];\n\
    \        double extension_strength_double15 = extension_strength_double14.ToString().Split('.')[0];\n\
    \        double extension_strength_double16 = extension_strength_double15.ToString().Split('.')[0];\n\
    \        double extension_strength_double17 = extension_strength_double16.ToString().Split('.')[0];\n\
    \        double extension_strength_double18 = extension_strength_double17.ToString().Split('.')[0];\n\
    \        double extension_strength_double19 = extension_strength_double18.ToString().Split('.')[0];\n\
    \        double extension_strength_double20 = extension_strength_double19.ToString().Split('.')[0];\n\
    \        double extension_strength_double21 = extension_strength_double20.ToString().Split('.')[0];\n\
    \        ", "        string extension_strength = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            int extension_capital_letters\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_small_letters\
    \ = extension.Count(c => char.IsLower(c));\n            int extension_strength_fraction\
    \ = extension_capital_letters - extension_small_letters;\n            if (extension_strength_fraction\
    \ > extension_strength) {\n                extension_strength = extension_strength_fraction;\n\
    \                extension_strength = extension.Substring(0, extension.Length\
    \ - extension_strength);\n            }\n        }\n        return class_name\
    \ + \".\" + extension_strength;", "        // Your code here\n        string extension\
    \ = extensions[0];\n        string extension_class = class_name + extension;\n\
    \        string extension_class_name = extension_class.Substring(0, extension_class.Length\
    \ - extension.Length);\n        string extension_class_name_with_extension = extension_class_name\
    \ + extension;\n        string extension_class_name_with_extension_2 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length);\n        string\
    \ extension_class_name_with_extension_3 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 1);\n        string extension_class_name_with_extension_4\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 2);\n        string extension_class_name_with_extension_5 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 3);\n       \
    \ string extension_class_name_with_extension_6 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 4);\n        string extension_class_name_with_extension_7\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 5);\n        string extension_class_name_with_extension_8 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 6);\n       \
    \ string extension_class_name_with_extension_9 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 7);\n        string extension_class_name_with_extension_10\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 8);\n        string extension_class_name_with_extension_11 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 9);\n       \
    \ string extension_class_name_with_extension_12 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 10);\n        string extension_class_name_with_extension_13\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 11);\n        string extension_class_name_with_extension_14 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 12);\n      \
    \  string extension_class_name_with_extension_15 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 13);\n        string extension_class_name_with_extension_16\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 14);\n        string extension_class_name_with_extension_17 = extension_class_",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        string extension_strength_str_upper\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower\
    \ = extension_strength_str.ToLower();\n        int extension_strength_int;\n \
    \       if (extension_strength_str_upper.Contains(\"A\") && extension_strength_str_lower.Contains(\"\
    B\") && extension_strength_str_upper.Contains(\"C\")) {\n            extension_strength_int\
    \ = (int)Math.Floor((double)((double)CAP - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"\
    A\") && extension_strength_str_lower.Contains(\"B\") && extension_strength_str_upper.Contains(\"\
    C\") && extension_strength_str_lower.Contains(\"D\")) {\n            extension_strength_int\
    \ = (int)Math.Floor((double)((double)CAP - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"\
    A\") && extension_strength_str_lower.Contains(\"B\") && extension_strength_str_upper.Contains(\"\
    C\") && extension_strength_str_lower.Contains(\"D\") && extension_strength_str_lower.Contains(\"\
    E\")) {\n            extension_strength_int = (int)Math.Floor((double)((double)CAP\
    \ - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"A\"\
    ) && extension_strength_str_lower.Contains(\"B\") && extension_strength_str_upper.Contains(\"\
    C\") && extension_strength_str_lower.Contains(\"D\") && extension_strength_str_lower.Contains(\"\
    E\") && extension_strength_str_lower.Contains(\"F\")) {\n            extension_strength_int\
    \ = (int)Math.Floor((double)((double)CAP - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"\
    A\") && extension_strength_str_lower.Contains(\"B\") && extension_strength_str_upper.Contains(\"\
    C\") && extension_strength_str_lower.Contains(\"D\") && extension_strength_str_lower.Contains(\"\
    E\") && extension_strength_str_lower.Contains(\"F\") && extension_strength_str_lower.Contains(\"\
    G\")) {\n            extension_strength_int = (int)Math.Floor((double)((double)CAP\
    \ - SM) / 2);\n        } else if (extension_strength_str_upper.Contains(\"A\"\
    ) && extension_", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        string strongest_extension = class_name + extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            if (strength > extension_strength)\
    \ {\n                strongest_extension = class_name + extension;\n         \
    \       extension_strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code goes here\n        string extension = extensions[0];\n        string extension_class\
    \ = class_name + extension;\n        string extension_class_name = extension_class.Substring(0,\
    \ extension_class.Length - extension.Length);\n        string extension_class_name_without_extension\
    \ = extension_class_name.Substring(0, extension_class_name.Length - extension.Length);\n\
    \        string extension_class_name_without_extension_without_extension = extension_class_name_without_extension.Substring(0,\
    \ extension_class_name_without_extension.Length - extension.Length);\n       \
    \ string extension_class_name_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension.Substring(0, extension_class_name_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_name_without_extension_without_extension_without_extension",
  "        string strongest_extension = \"\";\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Length;\n            int sm = class_name.Length;\n            double\
    \ strength = cap - sm;\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        // Your code here\n   \
    \     var extension_strength = extensions.Select(x => x.ToUpper().Count() - x.ToUpper().ToLower().Count()).ToList();\n\
    \        var extension_strength_max = extension_strength.Max();\n        var extension_strength_max_index\
    \ = extension_strength.IndexOf(extension_strength_max);\n        var extension_strength_max_name\
    \ = extensions[extension_strength_max_index];\n        return class_name + \"\
    .\" + extension_strength_max_name;", "        string strongest_extension = string.Empty;\n\
    \        double strongest_extension_strength = double.MaxValue;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string extension_strength = extensions[0].Substring(class_name.Length);\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.Substring(class_name.Length);\n            if (extension_strength_int\
    \ > extension_strength) {\n                extension_strength = extension_strength_int;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string strongest_extension = \"\";\n        string extension_strength =\
    \ \"\";\n        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = 0;\n            int extension_cap_int = 0;\n            int extension_sm_int\
    \ = 0;\n            int extension_length = extension.Length;\n            int\
    \ extension_cap_length = extension.ToUpper().Length;\n            int extension_sm_length\
    \ = extension.ToLower().Length;\n            int extension_strength_length = extension.ToUpper().ToLower().Length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = extension_strength_length / extension_length;\n\
    \            int extension_cap_frac = extension_cap_length / extension_length;\n\
    \            int extension_sm_frac = extension_sm_length / extension_length;\n\
    \            int extension_strength_frac = ", "        string extension = extensions.OrderBy(x\
    \ => x.ToUpperInvariant()).First();\n        int cap = extension.Count(x => x.ToUpperInvariant()\
    \ == extension);\n        int sm = extension.Count(x => x.ToLowerInvariant() ==\
    \ extension);\n        double strength = (double)cap - sm;\n        if (strength\
    \ > 0) {\n            return class_name + \".\" + extension;\n        }\n    \
    \    return class_name + \".\" + extensions.OrderBy(x => x).First();", "     \
    \   string extension_strength = extensions[0].ToUpper().Substring(class_name.Length);\n\
    \        string extension_strength_2 = extensions[1].ToUpper().Substring(class_name.Length);\n\
    \        double extension_strength_double = Convert.ToDouble(extension_strength);\n\
    \        double extension_strength_double_2 = Convert.ToDouble(extension_strength_2);\n\
    \        double extension_strength_double_3 = extension_strength_double - extension_strength_double_2;\n\
    \        double extension_strength_double_4 = extension_strength_double_3 / 2;\n\
    \        double extension_strength_double_5 = extension_strength_double_4 / 2;\n\
    \        double extension_strength_double_6 = extension_strength_double_5 / 2;\n\
    \        double extension_strength_double_7 = extension_strength_double_6 / 2;\n\
    \        double extension_strength_double_8 = extension_strength_double_7 / 2;\n\
    \        double extension_strength_double_9 = extension_strength_double_8 / 2;\n\
    \        double extension_strength_double_10 = extension_strength_double_9 / 2;\n\
    \        double extension_strength_double_11 = extension_strength_double_10 /\
    \ 2;\n        double extension_strength_double_12 = extension_strength_double_11\
    \ / 2;\n        double extension_strength_double_13 = extension_strength_double_12\
    \ / 2;\n        double extension_strength_double_14 = extension_strength_double_13\
    \ / 2;\n        double extension_strength_double_15 = extension_strength_double_14\
    \ / 2;\n        double extension_strength_double_16 = extension_strength_double_15\
    \ / 2;\n        double extension_strength_double_17 = extension_strength_double_16\
    \ / 2;\n        double extension_strength_double_18 = extension_strength_double_17\
    \ / 2;\n        double extension_strength_double_19 = extension_strength_double_18\
    \ / 2;\n        double extension_strength_double_20 = extension_strength_double_19\
    \ / 2;\n        double extension_strength_double_21 = extension_strength_double_20\
    \ / 2;\n        double extension_strength_double_22 = extension_strength_double_21\
    \ / 2;\n        double extension_strength_double_23 = extension_strength_double_22\
    \ / 2;\n        double extension_strength_double_24 = extension_strength_double_23\
    \ / 2;\n        double extension_strength_double_25 = extension_strength_double_24\
    \ / 2;\n        double extension_strength_double_26 = extension_strength_double_25\
    \ / 2;\n        double extension_strength_double_27 = extension_strength", " \
    \       string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_strongest = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            string extension_strength_new\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_new > extension_strength) {\n                extension_strength\
    \ = extension_strength_new;\n                extension_strength_strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength_strongest;",
  "        string extension = extensions[0];\n        string extension_class = class_name\
    \ + \".\" + extension;\n        string extension_class_with_strength = extension_class\
    \ + \".\" + extension;\n        string extension_class_with_strength_strength\
    \ = extension_class_with_strength + \".\" + extension;\n        string extension_class_with_strength_strength_strength\
    \ = extension_class_with_strength_strength + \".\" + extension;\n        string\
    \ extension_class_with_strength_strength_strength_strength = extension_class_with_strength_strength_strength\
    \ + \".\" + extension;\n        string extension_class_with_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength_strength + \".\"\
    \ + extension;\n        string extension_class_with_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength_strength + \".\"\
    \ + extension;\n        string extension_class_with_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength_strength + \".\"\
    \ + extension;\n        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength_strength + \".\"\
    \ + extension;\n        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extension_class_with_strength_strength_strength_strength + \".\" + extension;\n\
    \        string extension_class_with_strength_strength_strength_strength_strength",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToLower();\n        string extension_strength_fraction\
    \ =\n            extension_strength.Substring(extension_strength.Length - 1).ToLower();\n\
    \        string extension_strength_fraction_remainder =\n            extension_strength_fraction.Substring(extension_strength_fraction.Length\
    \ - 1);\n        int extension_strength_fraction_remainder_int = Convert.ToInt32(extension_strength_fraction_remainder);\n\
    \        int extension_strength_fraction_remainder_int_mod = extension_strength_fraction_remainder_int\
    \ % 10;\n        int extension_strength_fraction_remainder_int_mod_2 = extension_strength_fraction_remainder_int\
    \ % 100;\n        int extension_strength_fraction_remainder_int_mod_3 = extension_strength_fraction_remainder_int\
    \ % 1000;\n        int extension_strength_fraction_remainder_int_mod_4 = extension_strength_fraction_remainder_int\
    \ % 10000; \n        int extension_strength_fraction_remainder_int_mod_5 = extension_strength_fraction_remainder_int\
    \ % 100000;\n        int extension_strength_fraction_remainder_int_mod_6 = extension_strength_fraction_remainder_int\
    \ % 1000000;\n        int extension_strength_fraction_remainder_int_mod_7 = extension_strength_fraction_remainder_int\
    \ % 10000000;\n        int extension_strength_fraction_remainder_int_mod_8 = extension_strength_fraction_remainder_int\
    \ % 100000000; \n        int extension_strength_fraction_remainder_int_mod_9 =\
    \ extension_strength_fraction_remainder_int % 1000000000;\n        int extension_strength_fraction_remainder_int_mod_10\
    \ = extension_strength_fraction_remainder_int % 10000000000;\n        int extension_strength_fraction_remainder_int_mod_11\
    \ = extension_strength_fraction_remainder_int % 100000000000;\n        int extension_strength_fraction_remainder_int_mod_12\
    \ = extension_strength_fraction_remainder_int % 1000000000000;\n        int extension_strength_fraction_remainder_int_mod_13\
    \ = extension_strength_fraction_remainder_int % 10000000000000;\n        int extension_strength_fraction_remainder_int_mod_14\
    \ = extension_strength_fraction_remainder_int % 100000000000000;\n        int\
    \ extension_strength_fraction_remainder_int_mod_15 = extension_strength_fraction_remainder_int\
    \ % 1000000000000000;\n        int extension_strength_fraction_remainder_int_mod_16\
    \ = extension_strength", "        string strongest_extension = null;\n       \
    \ string extension_strength = null;\n        foreach (string extension in extensions)\
    \ {\n            int extension_capitalized = extension.Count(c => char.IsUpper(c));\n\
    \            int extension_smaller = extension.Count(c => char.IsLower(c));\n\
    \            int extension_strength = extension_capitalized - extension_smaller;\n\
    \            if (extension_strength > 0) {\n                if (extension_strength\
    \ > strongest_extension.Length) {\n                    strongest_extension = extension;\n\
    \                    extension_strength = extension_strength;\n              \
    \  }\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_capital = extension.Count(c => char.IsUpper(c));\n\
    \            int extension_smaller = extension.Count(c => char.IsLower(c));\n\
    \            int extension_strength_fraction = extension_capital - extension_smaller;\n\
    \            if (extension_strength_fraction > extension_strength.Count(c => c\
    \ == c)) {\n                extension_strength = extension;\n            }\n \
    \       }\n        return class_name + \".\" + extension_strength;", "       \
    \ // Your code goes here\n        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Substring(class_name.ToUpper().Length);\n        foreach\
    \ (string extension in extensions) {\n            extension_strength = extension_strength.ToUpper().Substring(extension.ToUpper().Length);\n\
    \            if (extension_strength.Equals(extension.ToUpper())) {\n         \
    \       extension_strength = -1;\n            }\n        }\n        string strongest_extension\
    \ = class_name + extension_strength;\n        if (extensions.Count() > 1) {\n\
    \            int min_strength = extension_strength;\n            foreach (string\
    \ extension in extensions) {\n                min_strength = min_strength > extension_strength\
    \ ? min_strength : extension_strength;\n            }\n            strongest_extension\
    \ = class_name + min_strength;\n        }\n        return strongest_extension;",
  "        string extension = extensions[0];\n        string extension_class = class_name\
    \ + extension;\n        string extension_class_with_extension = extension_class\
    \ + \".\";\n        string extension_class_with_extension_2 = extension_class_with_extension\
    \ + \".\";\n        string extension_class_with_extension_3 = extension_class_with_extension_2\
    \ + \".\";\n        string extension_class_with_extension_4 = extension_class_with_extension_3\
    \ + \".\";\n        string extension_class_with_extension_5 = extension_class_with_extension_4\
    \ + \".\";\n        string extension_class_with_extension_6 = extension_class_with_extension_5\
    \ + \".\";\n        string extension_class_with_extension_7 = extension_class_with_extension_6\
    \ + \".\";\n        string extension_class_with_extension_8 = extension_class_with_extension_7\
    \ + \".\";\n        string extension_class_with_extension_9 = extension_class_with_extension_8\
    \ + \".\";\n        string extension_class_with_extension_10 = extension_class_with_extension_9\
    \ + \".\";\n        string extension_class_with_extension_11 = extension_class_with_extension_10\
    \ + \".\";\n        string extension_class_with_extension_12 = extension_class_with_extension_11\
    \ + \".\";\n        string extension_class_with_extension_13 = extension_class_with_extension_12\
    \ + \".\";\n        string extension_class_with_extension_14 = extension_class_with_extension_13\
    \ + \".\";\n        string extension_class_with_extension_15 = extension_class_with_extension_14\
    \ + \".\";\n        string extension_class_with_extension_16 = extension_class_with_extension_15\
    \ + \".\";\n        string extension_class_with_extension_17 = extension_class_with_extension_16\
    \ + \".\";\n        string extension_class_with_extension_18 = extension_class_with_extension_17\
    \ + \".\";\n        string extension_class_with_extension_19 = extension_class_with_extension_18\
    \ + \".\";\n        string extension_class_with_extension_20 = extension_class_with_extension_19\
    \ + \".\";\n        string extension_class_with_extension_21 = extension_class_with_extension_20\
    \ + \".\";\n        string extension_class_with_extension_22 = extension_class_with_extension_21\
    \ + \".\";\n        string extension_class_with_extension_23 = extension_class_with_extension_22\
    \ + \".\";\n        string extension_class_with_extension_24 = extension_class_with_extension_23\
    \ + \".\";\n        string extension_class_with_extension_25 = extension_class_with_extension_24\
    \ + \".\";\n        string extension_class_with_extension_26 = extension_class_with_extension_25\
    \ + \".", "        string extension_strength = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            int extension_capital = extension.Count(c\
    \ => char.IsUpper(c));\n            int extension_smaller = extension.Count(c\
    \ => char.IsLower(c));\n            int extension_strength_fraction = extension_capital\
    \ - extension_smaller;\n            if (extension_strength_fraction > extension_strength.Count(c\
    \ => char.IsUpper(c))) extension_strength = extension;\n        }\n        return\
    \ class_name + \".\" + extension_strength;", "        string extension_strength\
    \ = extensions[0].Length;\n        foreach (string extension in extensions) {\n\
    \            int extension_strength_new = extension.Length;\n            int extension_strength_old\
    \ = extension_strength;\n            while (extension_strength_new > extension_strength_old)\
    \ {\n                extension_strength_old = extension_strength_new;\n      \
    \          extension_strength_new = extension.Length;\n            }\n       \
    \     if (extension_strength_new > extension_strength_old) {\n               \
    \ extension_strength = extension_strength_new;\n            }\n        }\n   \
    \     return class_name + \".\" + extensions[0];", "        string extension =\
    \ extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1).ToUpper();\n        int extension_cap = extension_strength.Length;\n  \
    \      int extension_sm = 0;\n        for (int i = 0; i < extension_strength.Length;\
    \ i++) {\n            if (extension_strength[i] == 'S') {\n                extension_sm\
    \ += 1;\n            }\n        }\n        int extension_strength_frac = extension_cap\
    \ - extension_sm;\n        extension_strength_frac = Math.Abs(extension_strength_frac);\n\
    \        extension_strength_frac = extension_strength_frac / extension_cap;\n\
    \        if (extension_strength_frac > 1) {\n            extension_strength_frac\
    \ = 1;\n        }\n        if (extension_strength_frac < 0) {\n            extension_strength_frac\
    \ = -1;\n        }\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();\n        extension_strength = extension_strength.Substring(0,\
    \ extension.Length - 1).ToUpper();\n        extension_strength = extension_strength\
    \ + extension_strength_frac.ToString();", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(0, extension.Length -\
    \ 1);\n        string extension_strength_without_cap = extension_strength.ToLower();\n\
    \        int extension_cap = extension_strength_without_cap.Count(x => x == 'A');\n\
    \        int extension_sm = extension_strength_without_cap.Count(x => x == 'a');\n\
    \        double extension_strength_without_cap_fraction = extension_cap - extension_sm;\n\
    \        double extension_strength_without_cap_fraction_rounded = Math.Round(extension_strength_without_cap_fraction,\
    \ 1);\n        if (extension_strength_without_cap_fraction_rounded == 0) {\n \
    \           extension_strength_without_cap_fraction_rounded = 1;\n        }\n\
    \        double extension_strength_without_cap_fraction_rounded_rounded = Math.Round(extension_strength_without_cap_fraction_rounded,\
    \ 1);\n        double extension_strength_without_cap_fraction_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_without_cap_fraction_rounded_rounded, 1);\n\
    \        double extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_without_cap_fraction_rounded_rounded_rounded,\
    \ 1);\n        if (extension_strength_without_cap_fraction_rounded_rounded_rounded\
    \ == 0) {\n            extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded\
    \ = 1;\n        }\n        double extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded,\
    \ 1);\n        double extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded_rounded,\
    \ 1);\n        if (extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded_rounded\
    \ == 0) {\n            extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = 1;\n        }\n        double extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 1);\n        double extension_strength_without_cap_fraction_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_without_cap", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string extension_strength_fraction =\n            extension_strength.Substring(0,\
    \ extension_strength.Length - 1).ToLower();\n        string extension_strength_fraction_remainder\
    \ =\n            extension_strength.Substring(extension_strength.Length - 1);\n\
    \        double extension_strength_fraction_remainder_double = \n            double.Parse(extension_strength_fraction_remainder);\n\
    \        double extension_strength_fraction_remainder_double_2 = \n          \
    \  extension_strength_fraction_remainder_double / 2;\n        double extension_strength_fraction_remainder_double_3\
    \ = \n            extension_strength_fraction_remainder_double / 3;\n        double\
    \ extension_strength_fraction_remainder_double_4 = \n            extension_strength_fraction_remainder_double\
    \ / 4;\n        double extension_strength_fraction_remainder_double_5 = \n   \
    \         extension_strength_fraction_remainder_double / 5;\n        double extension_strength_fraction_remainder_double_6\
    \ = \n            extension_strength_fraction_remainder_double / 6;\n        double\
    \ extension_strength_fraction_remainder_double_7 = \n            extension_strength_fraction_remainder_double\
    \ / 7;\n        double extension_strength_fraction_remainder_double_8 = \n   \
    \         extension_strength_fraction_remainder_double / 8;\n        double extension_strength_fraction_remainder_double_9\
    \ = \n            extension_strength_fraction_remainder_double / 9;\n        double\
    \ extension_strength_fraction_remainder_double_10 = \n            extension_strength_fraction_remainder_double\
    \ / 10;\n        double extension_strength_fraction_remainder_double_11 = \n \
    \           extension_strength_fraction_remainder_double / 11;\n        double\
    \ extension_strength_fraction_remainder_double_12 = \n            extension_strength_fraction_remainder_double\
    \ / 12;\n        double extension_strength_fraction_remainder_double_13 = \n \
    \           extension_strength_fraction_remainder_double / 13;\n        double\
    \ extension_strength_fraction_remainder_double_14 = \n            extension_strength_fraction_remainder_double\
    \ / 14;\n        double extension_strength_fraction_remainder_double_15 = \n \
    \           extension_strength_fraction_remainder_double / 15;\n        double\
    \ extension_strength_fraction_remainder_double_16 = \n            extension_strength_fraction_remainder_double\
    \ / 16;\n        double extension_strength_fraction_re", "        string strongest_extension\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension_strength = extensions[0].Substring(class_name.Length);\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.Substring(class_name.Length);\n            if (extension_strength_int\
    \ < extension_strength) {\n                extension_strength = extension_strength_int;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_capital = extension.Count(x => char.IsUpper(x));\n\
    \            int extension_smaller = extension.Count(x => char.IsLower(x));\n\
    \            double extension_strength_fraction = (double)extension_capital -\
    \ (double)extension_smaller;\n            if (extension_strength_fraction > extension_strength)\
    \ {\n                extension_strength = extension_strength_fraction;\n     \
    \           extension_strength = extension.Substring(0, extension.Length - extension_strength.ToString().Length);\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_length = extension.Length;\n\
    \            int extension_strength_diff = extension_length - extension_strength;\n\
    \            if (extension_strength_diff > 0) {\n                extension_strength\
    \ = extension_strength_diff;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[0];", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        double max_strength = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        if (strength > max_strength) {\n            return class_name + \".\"\
    \ + extensions.OrderByDescending(x => x.ToUpper().Count() - x.ToLower().Count()).First();\n\
    \        }\n        return class_name + \".\" + extensions.OrderByDescending(x\
    \ => x.ToUpper().Count() - x.ToLower().Count()).First();", "        string extension_strength\
    \ = extensions[0].Length;\n        string extension_class = \"\";\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength_new =\
    \ extension.Length;\n            if (extension_strength_new > extension_strength)\
    \ {\n                extension_strength = extension_strength_new;\n          \
    \      extension_class = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + extension_class;", "        // Your code here\n       \
    \ string strongest = string.Empty;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Length;\n            int sm = class_name.Length;\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        string strongest_extension\
    \ = null;\n        double strongest_extension_strength = double.MaxValue;\n  \
    \      foreach (string extension in extensions) {\n            string extension_name\
    \ = extension.Substring(0, extension.Length - 1);\n            int extension_capital_letters\
    \ = extension_name.Count(c => char.IsUpper(c));\n            int extension_small_letters\
    \ = extension_name.Count(c => char.IsLower(c));\n            double extension_strength\
    \ = extension_capital_letters - extension_small_letters;\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        int extension_cap = extension.Length\
    \ - extension_strength.Length;\n        int extension_sm = 0;\n        for (int\
    \ i = 0; i < extensions.Count; i++) {\n            string extension_name = extensions[i];\n\
    \            int extension_cap_temp = extension_name.Length - extension_strength.Length;\n\
    \            int extension_sm_temp = extension_name.Length - extension_cap_temp;\n\
    \            if (extension_cap_temp > extension_cap) {\n                extension_cap\
    \ = extension_cap_temp;\n            }\n            if (extension_sm_temp > extension_sm)\
    \ {\n                extension_sm = extension_sm_temp;\n            }\n      \
    \  }\n        if (extension_cap - extension_sm > 0) {\n            extension =\
    \ class_name + extension.Substring(0, extension.Length - extension_cap - extension_sm);\n\
    \        }\n        return extension;", "        // Your code here\n        string\
    \ strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += class_name + \".\" + extension;\n            }\n        }\n        return\
    \ strongest_extension;", "        string extension = extensions[0];\n        foreach\
    \ (string ext in extensions) {\n            int cap = ext.ToUpper().Count();\n\
    \            int sm = ext.ToLower().Count();\n            int strength = cap -\
    \ sm;\n            if (strength > extension.ToUpper().Count() - ext.ToLower().Count())\
    \ {\n                extension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength);\n \
    \       int extension_strength_frac = extension_strength_int - Convert.ToInt32(extension_strength.Substring(0,\
    \ extension_strength.Length - 1));\n        int extension_strength_frac_int =\
    \ Convert.ToInt32(extension_strength_frac);\n        string extension_strength_frac_str\
    \ = extension_strength_frac.ToString();\n        string extension_strength_frac_str_int\
    \ = extension_strength_frac_int.ToString();\n        string extension_strength_frac_str_frac\
    \ = extension_strength_frac_str.Substring(0, extension_strength_frac_str.Length\
    \ - 1);\n        string extension_strength_frac_str_frac_int = Convert.ToInt32(extension_strength_frac_str_frac);\n\
    \        string extension_strength_frac_str_frac_frac = extension_strength_frac_str_frac_int.ToString();\n\
    \        string extension_strength_frac_str_frac_frac_int = Convert.ToInt32(extension_strength_frac_str_frac_frac);\n\
    \        string extension_strength_frac_str_frac_frac_frac = extension_strength_frac_str_frac_frac_int.ToString();\n\
    \        string extension_strength_frac_str_frac_frac_frac_int = Convert.ToInt32(extension_strength_frac_str_frac_frac_frac);\n\
    \        string extension_strength_frac_str_frac_frac_frac_frac = extension_strength_frac_str_frac_frac_frac_int.ToString();\n\
    \        string extension_strength_frac_str_frac_frac_frac_frac_int = Convert.ToInt32(extension_strength_frac_str_frac_frac_frac_frac);\n\
    \        string extension_strength_frac_str_frac_frac_frac_frac_frac = extension_strength_frac_str_frac_frac_frac_frac_int.ToString();\n\
    \        string extension_strength_frac_str_frac_frac_frac_frac_frac_int = Convert.ToInt32(extension_strength_frac_str_frac_frac_frac_frac_frac);\n\
    \        string extension_strength_frac_str_frac_frac_frac_frac_frac_frac = extension_strength_frac_str_frac_frac_frac_frac_frac_int.ToString();\n\
    \        string extension", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        double max_strength = extension_strength;\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    if (extension.ToUpper().Count() - extension.ToLower().Count() > max_strength)\
    \ {\n                max_strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \                strongest_extension = class_name + \".\" + extension;\n     \
    \       }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = string.Empty;\n        string extension_strength = string.Empty;\n       \
    \ foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = extension.Count(x => char.IsUpper(x));\n            int extension_strength_denominator\
    \ = extension.Count(x => char.IsLower(x));\n            double extension_strength_fraction\
    \ = (double)extension_strength_numerator / (double)extension_strength_denominator;\n\
    \            if (extension_strength_fraction > extension_strength) {\n       \
    \         strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_fraction;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string extension_strength = \"\";\n\
    \        foreach (string extension in extensions) {\n            int extension_cap\
    \ = extension.ToUpper().Count();\n            int extension_sm = (extension.ToLower()).Count();\n\
    \            double extension_strength_frac = ((double)extension_cap - (double)extension_sm)\
    \ / extension_cap;\n            if (extension_strength_frac > extension_strength)\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = \"\"\
    ;\n        foreach (string extension in extensions) {\n            if (extension.ToUpper().Count()\
    \ - extension.ToLower().Count() > max_strength) {\n                max_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n             \
    \   strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        // Your code goes here\n\
    \        string strongest_extension = \"\";\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            double strength = (double)cap - sm;\n    \
    \        if (strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   string extension_strength = extensions[0].Length;\n        string extension_class\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ extension_strength_int = extension.Length;\n            if (extension_strength_int\
    \ > extension_strength) {\n                extension_strength = extension_strength_int;\n\
    \                extension_class = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + extension_class;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength == 0)\n            return class_name;\n       \
    \ if (extension_strength == 1)\n            return class_name + \".\" + extensions[0];\n\
    \        double extension_strength_fraction = extension_strength / extension_strength.Count();\n\
    \        double extension_strength_fraction_base = extension_strength_fraction\
    \ - 1;\n        double extension_strength_fraction_base2 = extension_strength_fraction_base\
    \ * extension_strength_fraction_base;\n        double extension_strength_fraction_base3\
    \ = extension_strength_fraction_base2 * extension_strength_fraction_base;\n  \
    \      double extension_strength_fraction_base4 = extension_strength_fraction_base3\
    \ * extension_strength_fraction_base;\n        double extension_strength_fraction_base5\
    \ = extension_strength_fraction_base4 * extension_strength_fraction_base;\n  \
    \      double extension_strength_fraction_base6 = extension_strength_fraction_base5\
    \ * extension_strength_fraction_base;\n        double extension_strength_fraction_base7\
    \ = extension_strength_fraction_base6 * extension_strength_fraction_base;\n  \
    \      double extension_strength_fraction_base8 = extension_strength_fraction_base7\
    \ * extension_strength_fraction_base;\n        double extension_strength_fraction_base9\
    \ = extension_strength_fraction_base8 * extension_strength_fraction_base;\n  \
    \      double extension_strength_fraction_base10 = extension_strength_fraction_base9\
    \ * extension_strength_fraction_base;\n        double extension_strength_fraction_base11\
    \ = extension_strength_fraction_base10 * extension_strength_fraction_base;\n \
    \       double extension_strength_fraction_base12 = extension_strength_fraction_base11\
    \ * extension_strength_fraction_base;\n        double extension_strength_fraction_base13\
    \ = extension_strength_fraction_base12 * extension_strength_fraction_base;\n \
    \       double extension_strength_fraction_base14 = extension_strength_fraction_base13\
    \ * extension_strength_fraction_base;\n        double extension_strength_fraction_base15\
    \ = extension_strength_fraction_base14 * extension_strength_fraction_base;\n \
    \       double extension_strength_fraction_base16 = extension_strength_fraction_base15\
    \ * extension_strength_fraction_base;\n        double extension_strength_fraction_base17\
    \ = extension_strength_fraction_base16 * extension_strength_fraction_base;\n \
    \       ", "        string strongest_extension = null;\n        string extension_strength\
    \ = null;\n        foreach (string extension in extensions) {\n            int\
    \ extension_strength_numerator = 0, extension_strength_denominator = 0;\n    \
    \        int extension_capital_numerator = 0, extension_capital_denominator =\
    \ 0;\n            int extension_small_numerator = 0, extension_small_denominator\
    \ = 0;\n            int extension_large_numerator = 0, extension_large_denominator\
    \ = 0;\n            int extension_extra_numerator = 0, extension_extra_denominator\
    \ = 0;\n            int extension_extra_large_numerator = 0, extension_extra_large_denominator\
    \ = 0;\n            int extension_extra_extra_numerator = 0, extension_extra_extra_denominator\
    \ = 0;\n            int extension_extra_extra_large_numerator = 0, extension_extra_extra_large_denominator\
    \ = 0;\n            int extension_extra_extra_extra_numerator = 0, extension_extra_extra_extra_denominator\
    \ = 0;\n            int extension_extra_extra_extra_large_numerator = 0, extension_extra_extra_extra_large_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_numerator = 0, extension_extra_extra_extra_extra_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_large_numerator = 0,\
    \ extension_extra_extra_extra_extra_large_denominator = 0;\n            int extension_extra_extra_extra_extra_extra_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_denominator = 0;\n            int\
    \ extension_extra_extra_extra_extra_extra_large_numerator = 0, extension_extra_extra_extra_extra_extra_extra_large_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_extra_extra_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_extra_extra_denominator = 0;\n\
    \            int extension_extra_extra_extra_extra_extra_extra_large_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_extra_extra_extra_large_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_extra_extra_extra_extra_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_extra_extra_extra_extra_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_extra_extra_extra_large_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_extra_extra_extra_extra_large_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_extra_extra_extra_extra_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_extra_extra_extra_extra_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_extra_extra_extra_extra_large_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_extra_extra_extra_extra_extra_large_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_extra_extra_extra_extra_extra_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_extra_extra_extra_extra_extra_denominator\
    \ = 0;\n            int extension_extra_extra_extra_extra_extra_extra_extra_extra_extra_large_numerator\
    \ = 0, extension_extra_extra_extra_extra_extra_extra_extra_extra_extra_extra_large_denominator\
    \ = 0;\n            ", "        string extension_strength = \"\";\n        foreach\
    \ (string extension in extensions) {\n            int extension_cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int extension_sm  = extension.Count(c => char.IsLower(c));\n\
    \            double extension_strength = extension_cap - extension_sm;\n     \
    \       if (extension_strength > extension_strength) {\n                extension_strength\
    \ = extension_strength;\n            }\n        }\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        return class_name + \".\" + extension_strength_str;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_strongest = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength_new =\
    \ extension.ToUpper().Count() - extension.ToLower().Count();\n            if (extension_strength_new\
    \ > extension_strength) {\n                extension_strength = extension_strength_new;\n\
    \                extension_strength_strongest = extension;\n            }\n  \
    \      }\n        return class_name + \".\" + extension_strength_strongest;",
  "        string extension = extensions[0];\n        int strength = -1;\n       \
    \ for (int i = 1; i < extensions.Count; i++) {\n            string extension_temp\
    \ = extensions[i];\n            int extension_temp_strength = -1;\n          \
    \  int extension_temp_length = extension_temp.Length;\n            int extension_temp_count_cap\
    \ = 0;\n            int extension_temp_count_sm = 0;\n            for (int j =\
    \ 0; j < extension_temp_length; j++) {\n                if (extension_temp[j].ToUpper()\
    \ == extension_temp[j].ToLower()) {\n                    extension_temp_count_cap++;\n\
    \                }\n                else {\n                    extension_temp_count_sm++;\n\
    \                }\n            }\n            int extension_temp_strength_temp\
    \ = extension_temp_count_cap - extension_temp_count_sm;\n            if (extension_temp_strength_temp\
    \ > strength) {\n                extension = extension_temp;\n               \
    \ strength = extension_temp_strength_temp;\n            }\n        }\n       \
    \ return class_name + \".\" + extension;", "        string strongest_extension\
    \ = null;\n        double strongest_extension_strength = 0;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = class_name + \".\" + extension;\n         \
    \   }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = string.Empty;\n        double strongest_extension_strength = double.MaxValue;\n\
    \        foreach (string extension in extensions) {\n            double extension_strength\
    \ = GetExtensionStrength(class_name, extension);\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n        return strongest_extension;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_without_cap = extension_strength.Substring(0,\
    \ extension_strength.Length - 1);\n        string extension_strength_without_sm\
    \ = extension_strength.Substring(extension_strength.Length - 1, extension_strength.Length);\n\
    \        int extension_cap = extension_strength_without_cap.Length;\n        int\
    \ extension_sm = (extension_strength_without_sm.Length - extension_cap);\n   \
    \     double extension_strength_without_cap_double = Convert.ToDouble(extension_strength_without_cap);\n\
    \        double extension_strength_without_sm_double = Convert.ToDouble(extension_strength_without_sm);\n\
    \        double extension_cap_double = Convert.ToDouble(extension_cap);\n    \
    \    double extension_sm_double = Convert.ToDouble(extension_sm);\n        double\
    \ extension_strength_without_cap_double_divided_by_extension_cap_double = extension_strength_without_cap_double\
    \ / extension_cap_double;\n        double extension_strength_without_sm_double_divided_by_extension_sm_double\
    \ = extension_strength_without_sm_double / extension_sm_double;\n        double\
    \ extension_strength_without_cap_double_divided_by_extension_sm_double_minus_extension_strength_without_cap_double\
    \ = extension_strength_without_cap_double / extension_sm_double - extension_strength_without_cap_double;\n\
    \        double extension_strength_without_sm_double_minus_extension_strength_without_sm_double\
    \ = extension_strength_without_sm_double - extension_strength_without_sm_double;\n\
    \        double extension_strength_without_cap_double_minus_extension_strength_without_sm_double_minus_extension_strength_without_cap_double\
    \ = extension_strength_without_cap_double - extension_strength_without_sm_double\
    \ - extension_strength_without_cap_double;\n        double extension_strength_without_sm_double_minus_extension_strength_without_cap_double_minus_extension_strength_without_sm_double\
    \ = extension_strength_without_sm_double - extension_strength_without_cap_double\
    \ - extension_strength_without_sm_double;\n        double extension_strength_without_cap_double_minus_extension_strength_without_sm_double_minus_extension_strength_without_cap_double_minus_extension_strength_without_sm_double_minus_extension_strength_without_cap_double\
    \ = extension_strength_without_cap_double - extension_strength_without_", "  \
    \      string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        else if (extension_strength == 0) {\n   \
    \         return class_name;\n        }\n        else if (extension_strength <\
    \ 0) {\n            int index = extensions.IndexOf(extension_strength);\n    \
    \        return class_name + \".\" + extensions[index];\n        }\n        return\
    \ class_name + \".\" + extensions[0];", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        extension_strength = extension_strength / extensions.Count();\n\
    \        string strongest_extension = class_name + \".\" + extensions[extensions.FindIndex(x\
    \ => x.ToUpper().Count() - x.ToLower().Count()) == extension_strength ? extensions.IndexOf(x\
    \ => x.ToUpper().Count() - x.ToLower().Count()) : extensions.IndexOf(x => x.ToUpper().Count()\
    \ - x.ToLower().Count()) + 1];\n        return strongest_extension;", "      \
    \  string strongest_extension = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        if (extension_strength > 0) {\n            extension_strength\
    \ = extension_strength / extensions.Count();\n        }\n        string strongest_extension\
    \ = class_name + extensions[0];\n        for (int i = 1; i < extensions.Count;\
    \ i++) {\n            if (extension_strength > extensions[i].ToUpper().Count()\
    \ - extensions[i].ToLower().Count()) {\n                strongest_extension =\
    \ class_name + extensions[i];\n            }\n        }\n        return strongest_extension;",
  "        string strongest = null;\n        double strength = -1;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            double frac = cap - sm;\n            if (strength == -1 || frac >\
    \ strength) {\n                strongest = class_name + \".\" + extension;\n \
    \               strength = frac;\n            }\n        }\n        return strongest;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count;\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            if (extension.ToUpper().Count()\
    \ - extension.ToLower().Count() > max_strength) {\n                max_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n             \
    \   strongest_extension = class_name + \".\" + extension;\n            }\n   \
    \     }\n        return strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string extension_strength_number = int.Parse(extension_strength);\n \
    \       string extension_strength_number_string = extension_strength_number.ToString();\n\
    \        string extension_strength_number_string2 = extension_strength_number_string.Substring(0,\
    \ 1);\n        string extension_strength_number_string3 = extension_strength_number_string2.Substring(0,\
    \ 1);\n        string extension_strength_number_string4 = extension_strength_number_string3.Substring(0,\
    \ 1);\n        string extension_strength_number_string5 = extension_strength_number_string4.Substring(0,\
    \ 1);\n        string extension_strength_number_string6 = extension_strength_number_string5.Substring(0,\
    \ 1);\n        string extension_strength_number_string7 = extension_strength_number_string6.Substring(0,\
    \ 1);\n        string extension_strength_number_string8 = extension_strength_number_string7.Substring(0,\
    \ 1);\n        string extension_strength_number_string9 = extension_strength_number_string8.Substring(0,\
    \ 1);\n        string extension_strength_number_string10 = extension_strength_number_string9.Substring(0,\
    \ 1);\n        string extension_strength_number_string11 = extension_strength_number_string10.Substring(0,\
    \ 1);\n        string extension_strength_number_string12 = extension_strength_number_string11.Substring(0,\
    \ 1);\n        string extension_strength_number_string13 = extension_strength_number_string12.Substring(0,\
    \ 1);\n        string extension_strength_number_string14 = extension_strength_number_string13.Substring(0,\
    \ 1);\n        string extension_strength_number_string15 = extension_strength_number_string14.Substring(0,\
    \ 1);\n        string extension_strength_number_string16 = extension_strength_number_string15.Substring(0,\
    \ 1);\n        string extension_strength_number_string17 = extension_strength_number_string16.Substring(0,\
    \ 1);\n        string extension_strength_number_string18 = extension_strength_number_string17.Substring(0,\
    \ 1);\n        string extension_strength_number_string19 = extension_strength_number_string18.Substring(0,\
    \ 1);\n        string extension_strength_number_string20 = extension_strength_number_string19.Substring(0,\
    \ 1);\n        string extension_strength_number_string21 = extension_strength_number_string20.Substring(0,\
    \ 1);\n        string extension_strength_number_string22 = extension_strength_number_string21.Substring(0,\
    \ 1);\n        string extension_strength_number_string", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Length;\n            int sm = class_name.Length;\n  \
    \          int strength = cap - sm;\n            if (strength > 0) {\n       \
    \         strongest_extension += \".\" + extension;\n            }\n        }\n\
    \        return strongest_extension;", "        string strongest_extension = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength\
    \ = ExtensionStrength(extension);\n            if (extension_strength > 0) {\n\
    \                strongest_extension = class_name + \".\" + extension;\n     \
    \           break;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        if (extension_strength == 0) {\n        \
    \    return class_name;\n        }\n        extension_strength = extension_strength\
    \ / extensions.Count();\n        foreach (string extension in extensions) {\n\
    \            if (extension_strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                return class_name + \".\" + extension;\n            }\n \
    \       }\n        return class_name;", "        // Your code here\n        string\
    \ strongest_extension = string.Empty;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            double strength\
    \ = (double)cap - (double)sm;\n            if (strength > 0) {\n             \
    \   strongest_extension = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  extension_strength = extension_strength.ToString();\n        if (extension_strength.Contains(\"\
    .\")) {\n            extension_strength = extension_strength.Split('.')[1];\n\
    \        }\n        return class_name + \".\" + extension_strength;", "      \
    \  string strongest_extension = string.Empty;\n        double strength = -1;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            double strength_fraction = cap - sm;\n            if (strength_fraction\
    \ > strength) {\n                strongest_extension = extension;\n          \
    \      strength = strength_fraction;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  extension_strength = extension_strength < 0 ? 0 : extension_strength;\n   \
    \     extension_strength = extension_strength > 1 ? 1 : extension_strength;\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    string extension_strength_str_with_dots = extension_strength_str.Replace(\"\
    .\", \",\");\n        string extension_strength_str_with_commas = extension_strength_str_with_dots.Replace(\"\
    ,\", \".\");\n        string extension_strength_str_with_commas_with_dots = extension_strength_str_with_commas.Replace(\"\
    .\", \",\");\n        string extension_strength_str_with_commas_with_commas =\
    \ extension_strength_str_with_commas_with_dots.Replace(\",\", \"+\");\n      \
    \  string extension_strength_str_with_commas_with_commas_with_dots = extension_strength_str_with_commas_with_commas.Replace(\"\
    .\", \"+\");\n        string extension_strength_str_with_commas_with_commas_with_commas_with_dots\
    \ = extension_strength_str_with_commas_with_commas_with_dots.Replace(\",\", \"\
    +\");\n        string extension_strength_str_with_commas_with_commas_with_commas_with_commas_with_dots\
    \ = extension_strength_str_with_commas_with_commas_with_commas_with_dots.Replace(\"\
    .\", \"+\");\n        string extension_strength_str_with_commas_with_commas_with_commas_with_commas_with_commas_with_dots\
    \ = extension_strength_str_with_commas_with_commas_with_commas_with_commas_with_dots.Replace(\"\
    ,\", \"+\");\n        string extension_strength_str_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_dots\
    \ = extension_strength_str_with_commas_with_commas_with_commas_with_commas_with_commas_with_dots.Replace(\"\
    .\", \"+\");\n        string extension_strength_str_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_dots\
    \ = extension_strength_str_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_dots.Replace(\"\
    ,\", \"+\");\n        string extension_strength_", "        string extension_strength\
    \ = extensions[0].Length;\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.Length;\n            if (extension_strength_int > extension_strength)\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_int;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = \"\"\
    ;\n        foreach (string extension in extensions) {\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        string extension\
    \ = extensions.OrderByDescending(x => x.ToUpperInvariant().Count() - x.ToLowerInvariant().Count()).FirstOrDefault();\n\
    \        if (extension != null)\n            return class_name + \".\" + extension;\n\
    \        else\n            return class_name;", "        string strongest_extension\
    \ = string.Empty;\n        double strongest_extension_strength = double.MaxValue;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength\
    \ = GetExtensionStrength(extension);\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        string strongest_extension = class_name\
    \ + extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       if (strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                strongest_extension = class_name + extension;\n         \
    \   }\n        }\n        return strongest_extension;", "        string extension_strength\
    \ = string.Empty;\n        string extension_class_name = string.Empty;\n     \
    \   string extension_class_name_with_extension = string.Empty;\n        string\
    \ extension_class_name_with_extension_with_extension = string.Empty;\n       \
    \ string extension_class_name_with_extension_with_extension_with_extension = string.Empty;\n\
    \        string extension_class_name_with_extension_with_extension_with_extension_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_with_extension_with_extension_with_extension_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension_with_extension",
  "        string extension_strength = \"\";\n        string extension_class = \"\"\
    ;\n        foreach (string extension in extensions) {\n            int extension_cap\
    \ = extension.Count(x => char.IsUpper(x));\n            int extension_sm = extension.Count(x\
    \ => char.IsLower(x));\n            double extension_strength = (double)extension_cap\
    \ - extension_sm;\n            if (extension_strength > extension_strength) {\n\
    \                extension_strength = extension_strength;\n                extension_class\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_class;", "        string extension = extensions[0];\n        string\
    \ extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string extension_strength_str = extension_strength.ToUpper();\n     \
    \   int extension_strength_int = 0;\n        if (int.TryParse(extension_strength_str,\
    \ out extension_strength_int)) {\n            int extension_strength_int_max =\
    \ extension_strength_int + 1;\n            int extension_strength_int_min = extension_strength_int\
    \ - 1;\n            int extension_strength_int_mid = extension_strength_int +\
    \ 1;\n            int extension_strength_int_min = extension_strength_int - 1;\n\
    \            int extension_strength_int_max = extension_strength_int + 1;\n  \
    \          int extension_strength_int_mid = extension_strength_int + 1;\n    \
    \        int extension_strength_int_max = extension_strength_int + 1;\n      \
    \      int extension_strength_int_mid = extension_strength_int + 1;\n        \
    \    int extension_strength_int_max = extension_strength_int + 1;\n          \
    \  int extension_strength_int_mid = extension_strength_int + 1;\n            int\
    \ extension_strength_int_max = extension_strength_int + 1;\n            int extension_strength_int_mid\
    \ = extension_strength_int + 1;\n            int extension_strength_int_max =\
    \ extension_strength_int + 1;\n            int extension_strength_int_mid = extension_strength_int\
    \ + 1;\n            int extension_strength_int_max = extension_strength_int +\
    \ 1;\n            int extension_strength_int_mid = extension_strength_int + 1;\n\
    \            int extension_strength_int_max = extension_strength_int + 1;\n  \
    \          int extension_strength_int_mid = extension_strength_int + 1;\n    \
    \        int extension_strength_int_max = extension_strength_int + 1;\n      \
    \      int extension_strength_int_mid = extension_strength_int + 1;\n        \
    \    int extension_strength_int_max = extension_strength_int + 1;\n          \
    \  int extension_strength_int_mid = extension_strength_int + 1;\n            int\
    \ extension_strength_int_max = extension_strength_int + 1;\n            int extension_strength_int_mid\
    \ = extension_strength_int + 1;\n            int extension_strength_int_max =\
    \ extension_strength_int + 1;\n            int extension_strength_int_mid = extension_strength_int\
    \ + 1;\n            int extension_strength_int_max = extension_strength_int +\
    \ 1;\n            int extension_strength_int_mid = extension_strength_int + 1;\n\
    \            int extension_strength_int_max = extension_strength_int + 1;\n  \
    \          int extension_strength_int_mid = extension_strength_int + 1;\n    \
    \        int extension_strength_int_max = extension_strength_in", "        string\
    \ strongest_extension = null;\n        double strength = -1;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            double fraction = cap -\
    \ sm;\n            if (fraction > strength) {\n                strongest_extension\
    \ = extension;\n                strength = fraction;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(0,\
    \ extension.Length - 1);\n        string extension_strength_length = extension_strength.Length;\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength);\n \
    \       int extension_strength_int2 = extension_strength_int;\n        int extension_strength_int3\
    \ = extension_strength_int;\n        int extension_strength_int4 = extension_strength_int;\n\
    \        int extension_strength_int5 = extension_strength_int;\n        int extension_strength_int6\
    \ = extension_strength_int;\n        int extension_strength_int7 = extension_strength_int;\n\
    \        int extension_strength_int8 = extension_strength_int;\n        int extension_strength_int9\
    \ = extension_strength_int;\n        int extension_strength_int10 = extension_strength_int;\n\
    \        int extension_strength_int11 = extension_strength_int;\n        int extension_strength_int12\
    \ = extension_strength_int;\n        int extension_strength_int13 = extension_strength_int;\n\
    \        int extension_strength_int14 = extension_strength_int;\n        int extension_strength_int15\
    \ = extension_strength_int;\n        int extension_strength_int16 = extension_strength_int;\n\
    \        int extension_strength_int17 = extension_strength_int;\n        int extension_strength_int18\
    \ = extension_strength_int;\n        int extension_strength_int19 = extension_strength_int;\n\
    \        int extension_strength_int20 = extension_strength_int;\n        int extension_strength_int21\
    \ = extension_strength_int;\n        int extension_strength_int22 = extension_strength_int;\n\
    \        int extension_strength_int23 = extension_strength_int;\n        int extension_strength_int24\
    \ = extension_strength_int;\n        int extension_strength_int25 = extension_strength_int;\n\
    \        int extension_strength_int26 = extension_strength_int;\n        int extension_strength_int27\
    \ = extension_strength_int;\n        int extension_strength_int28 = extension_strength_int;\n\
    \        int extension_strength_int29 = extension_strength_int;\n        int extension_strength_int30\
    \ = extension_strength_int;\n        int extension_strength_int31 = extension_strength_int;\n\
    \        int extension_strength_int32 = extension_strength_int;\n        int extension_strength",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        string extension_strength_str_upper\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower\
    \ = extension_strength_str.ToLower();\n        int extension_strength_int = int.Parse(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = int.Parse(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = int.Parse(extension_strength_str);\n\
    \        int extension_strength_int_diff = extension_strength_int - extension_strength_int_lower;\n\
    \        int extension_strength_int_diff_upper = extension_strength_int - extension_strength_int_upper;\n\
    \        int extension_strength_int_diff_lower = extension_strength_int_upper\
    \ - extension_strength_int_lower;\n        int extension_strength_int_diff_diff_upper\
    \ = extension_strength_int_diff_upper - extension_strength_int_diff_lower;\n \
    \       int extension_strength_int_diff_diff_lower = extension_strength_int_diff_lower\
    \ - extension_strength_int_diff;\n        int extension_strength_int_diff_diff_diff_upper\
    \ = extension_strength_int_diff_diff_upper - extension_strength_int_diff_diff_lower;\n\
    \        int extension_strength_int_diff_diff_diff_lower = extension_strength_int_diff_diff_lower\
    \ - extension_strength_int_diff_diff;\n        int extension_strength_int_diff_diff_diff_diff_upper\
    \ = extension_strength_int_diff_diff_diff_upper - extension_strength_int_diff_diff_diff_lower;\n\
    \        int extension_strength_int_diff_diff_diff_diff_lower = extension_strength_int_diff_diff_diff_lower\
    \ - extension_strength_int_diff_diff_diff;\n        int extension_strength_int_diff_diff_diff_diff_diff_upper\
    \ = extension_strength_int_diff_diff_diff_diff_upper - extension_strength_int_diff_diff_diff_diff_lower;\n\
    \        int extension_strength_int_diff_diff_diff_diff_diff_lower = extension_strength_int_diff_diff_diff_diff_lower\
    \ - extension_strength_int_diff_diff_diff_diff;\n        int extension_strength_int_diff_diff_diff_diff_diff_diff_upper\
    \ = extension_strength_int_diff_diff_diff_diff_diff_upper - extension_strength_int_diff_diff_diff_diff_diff_lower;\n\
    \        int extension_strength_int_diff_diff_diff_diff_diff_diff_lower = extension_strength_int_diff_diff_diff_diff_diff_lower\
    \ - extension_strength_int_diff_diff_diff_diff_diff;\n        int extension_strength_int_diff_diff_diff_diff_diff_diff_diff_upper\
    \ = extension_strength_int_diff_diff_diff_diff_diff_diff_upper - extension_strength_int_diff_diff_",
  "        // Your code here\n        string extension = extensions[0];\n        string\
    \ extension_class = class_name + extension;\n        string extension_class_name\
    \ = extension_class.Substring(0, extension_class.Length - extension.Length);\n\
    \        string extension_class_name_with_extension = extension_class_name + extension;\n\
    \        string extension_class_name_with_extension_class = extension_class_name_with_extension.Substring(0,\
    \ extension_class_name_with_extension.Length - extension_class_name.Length);\n\
    \        string extension_class_name_with_extension_class_with_extension = extension_class_name_with_extension_class\
    \ + extension;\n        string extension_class_name_with_extension_class_with_extension_class\
    \ = extension_class_name_with_extension_class_with_extension.Substring(0, extension_class_name_with_extension_class_with_extension.Length\
    \ - extension_class_name_with_extension_class.Length);\n        string extension_class_name_with_extension_class_with_extension_class_with_extension\
    \ = extension_class_name_with_extension_class_with_extension_class + extension;\n\
    \        string extension_class_name_with_extension_class_with_extension_class_with_extension_class\
    \ = extension_class_name_with_extension_class_with_extension_class_with_extension.Substring(0,\
    \ extension_class_name_with_extension_class_with_extension_class_with_extension.Length\
    \ - extension_class_name_with_extension_class_with_extension_class.Length);\n\
    \        string extension_class_name_with_extension_class_with_extension_class_with_extension_class_with_extension\
    \ = extension_class_name_with_extension_class_with_extension_class_with_extension_class\
    \ + extension;\n        string extension_class_name_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension\
    \ = extension_class_name_with_extension_class_with_extension_class_with_extension_class_with_extension\
    \ + extension;\n        string extension_class_name_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension_class\
    \ = extension_class_name_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension\
    \ + extension;\n        string extension_class_name_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension\
    \ = extension_class_name_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension\
    \ + extension;\n        string extension_class_name_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_extension_class_with_",
  "        string extension_strength = extensions[0].Substring(0, extensions[0].Length\
    \ - 1);\n        string extension_strength_2 = extensions[1].Substring(0, extensions[1].Length\
    \ - 1);\n        string extension_strength_3 = extensions[2].Substring(0, extensions[2].Length\
    \ - 1);\n        string extension_strength_4 = extensions[3].Substring(0, extensions[3].Length\
    \ - 1);\n        string extension_strength_5 = extensions[4].Substring(0, extensions[4].Length\
    \ - 1);\n        string extension_strength_6 = extensions[5].Substring(0, extensions[5].Length\
    \ - 1);\n        string extension_strength_7 = extensions[6].Substring(0, extensions[6].Length\
    \ - 1);\n        string extension_strength_8 = extensions[7].Substring(0, extensions[7].Length\
    \ - 1);\n        string extension_strength_9 = extensions[8].Substring(0, extensions[8].Length\
    \ - 1);\n        string extension_strength_10 = extensions[9].Substring(0, extensions[9].Length\
    \ - 1);\n        string extension_strength_11 = extensions[10].Substring(0, extensions[10].Length\
    \ - 1);\n        string extension_strength_12 = extensions[11].Substring(0, extensions[11].Length\
    \ - 1);\n        string extension_strength_13 = extensions[12].Substring(0, extensions[12].Length\
    \ - 1);\n        string extension_strength_14 = extensions[13].Substring(0, extensions[13].Length\
    \ - 1);\n        string extension_strength_15 = extensions[14].Substring(0, extensions[14].Length\
    \ - 1);\n        string extension_strength_16 = extensions[15].Substring(0, extensions[15].Length\
    \ - 1);\n        string extension_strength_17 = extensions[16].Substring(0, extensions[16].Length\
    \ - 1);\n        string extension_strength_18 = extensions[17].Substring(0, extensions[17].Length\
    \ - 1);\n        string extension_strength_19 = extensions[18].Substring(0, extensions[18].Length\
    \ - 1);\n        string extension_strength_20 = extensions[19].Substring(0, extensions[19].Length\
    \ - 1);\n        string extension_strength_21 = extensions[20].Substring(0, extensions[20].Length\
    \ - 1);\n        string extension_strength_22 = extensions[21].Substring(0, extensions[21].Length\
    \ - 1);\n        string extension_strength_23 = extensions[22].Substring(0, extensions[22].Length\
    \ - 1);\n        string extension_strength_24 = extensions[23", "        string\
    \ strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        else {\n            int max_strength = -1;\n\
    \            string max_extension = \"\";\n            foreach (string extension\
    \ in extensions) {\n                if (extension.ToUpper().Count() - extension.ToLower().Count()\
    \ > max_strength) {\n                    max_strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n                    max_extension = extension;\n\
    \                }\n            }\n            return class_name + \".\" + max_extension;\n\
    \        }", "        string extension = extensions[0];\n        foreach (string\
    \ extension2 in extensions) {\n            int cap = extension2.Length;\n    \
    \        int sm = extension.Length;\n            int strength = cap - sm;\n  \
    \          if (strength > 0) {\n                extension = extension2;\n    \
    \        }\n        }\n        return class_name + \".\" + extension;", "    \
    \    // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        string strongest_extension\
    \ = string.Empty;\n        double strongest_extension_strength = double.MaxValue;\n\
    \        foreach (string extension in extensions) {\n            int extension_capital_letters\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_small_letters\
    \ = extension.Count(c => char.IsLower(c));\n            double extension_strength\
    \ = extension_capital_letters - extension_small_letters;\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = string.Empty;\n        double strongest_extension_strength\
    \ = double.MaxValue;\n        foreach (string extension in extensions) {\n   \
    \         int extension_strength = GetExtensionStrength(extension);\n        \
    \    if (extension_strength > strongest_extension_strength) {\n              \
    \  strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            double strength = cap - sm;\n            if (strength > 0) {\n  \
    \              strongest_extension = class_name + \".\" + extension;\n       \
    \         break;\n            }\n        }\n        return strongest_extension;",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToLower();\n        string extension_strength_frac\
    \ = extension_strength.Substring(0, extension_strength.Length - 1).ToLower();\n\
    \        double extension_strength_frac_double = Convert.ToDouble(extension_strength_frac);\n\
    \        double extension_strength_double_sum = extension_strength_frac_double\
    \ * extension_strength_frac_double;\n        double extension_strength_double_max\
    \ = extension_strength_double_sum;\n        double extension_strength_double_min\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum2\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum3\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum4\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum5\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum6\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum7\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum8\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum9\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum10\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum11\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum12\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum13\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum14\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum15\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum16\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum17\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum18\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum19\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum20\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum21\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum22\
    \ = extension_strength_double_sum;\n        double extension_strength_double_sum23\
    \ = extension_strength_double_sum;", "        string extension_strength = extensions[0].ToUpper().Substring(class_name.ToUpper().Length);\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ = extension_strength.ToUpper().Substring(extension.ToUpper().Length);\n    \
    \        if (extension_strength.Equals(extension.ToUpper())) {\n             \
    \   extension_strength = -1;\n                break;\n            }\n        }\n\
    \        if (extension_strength == -1) {\n            extension_strength = extensions[0].ToUpper().Substring(class_name.ToUpper().Length);\n\
    \        }\n        extension_strength = extension_strength.ToUpper();\n     \
    \   extension_strength = extension_strength.Substring(class_name.ToUpper().Length);\n\
    \        return class_name + \".\" + extension_strength;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[0];\n        }\n        else {\n            int extension_strength_counter\
    \ = 0;\n            foreach (string extension in extensions) {\n             \
    \   if (extension_strength_counter < extension_strength) {\n                 \
    \   extension_strength_counter = extension_strength;\n                }\n    \
    \            else {\n                    extension_strength_counter = extension_strength_counter;\n\
    \                }\n            }\n            return class_name + \".\" + extensions[extensions.IndexOf(extension_strength_counter)];\n\
    \        }", "        string strongest_extension = class_name;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        string extension_strength_strongest\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int extension_strength_new = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength_new > extension_strength) {\n            \
    \    extension_strength = extension_strength_new;\n                extension_strength_strongest\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength_strongest;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        extensions.Sort();\n        string strongest_extension = class_name +\
    \ \".\" + extensions[0];\n        for (int i = 1; i < extensions.Count(); i++)\
    \ {\n            if (extensions[i].ToUpper().Count() - extensions[i].ToLower().Count()\
    \ == strength) {\n                strongest_extension = class_name + \".\" + extensions[i];\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = \"\";\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            double strength = (double)cap - sm;\n    \
    \        if (strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   string extension = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1, 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper2 = extension_strength_str_upper.ToUpper();\n\
    \        string extension_strength_str_lower2 = extension_strength_str_lower.ToLower();\n\
    \        string extension_strength_str_upper3 = extension_strength_str_upper2.ToUpper();\n\
    \        string extension_strength_str_lower3 = extension_strength_str_lower2.ToLower();\n\
    \        string extension_strength_str_upper4 = extension_strength_str_upper3.ToUpper();\n\
    \        string extension_strength_str_lower4 = extension_strength_str_lower3.ToLower();\n\
    \        string extension_strength_str_upper5 = extension_strength_str_upper4.ToUpper();\n\
    \        string extension_strength_str_lower5 = extension_strength_str_lower4.ToLower();\n\
    \        string extension_strength_str_upper6 = extension_strength_str_upper5.ToUpper();\n\
    \        string extension_strength_str_lower6 = extension_strength_str_lower5.ToLower();\n\
    \        string extension_strength_str_upper7 = extension_strength_str_upper6.ToUpper();\n\
    \        string extension_strength_str_lower7 = extension_strength_str_lower6.ToLower();\n\
    \        string extension_strength_str_upper8 = extension_strength_str_upper7.ToUpper();\n\
    \        string extension_strength_str_lower8 = extension_strength_str_lower7.ToLower();\n\
    \        string extension_strength_str_upper9 = extension_strength_str_upper8.ToUpper();\n\
    \        string extension_strength_str_lower9 = extension_strength_str_lower8.ToLower();\n\
    \        string extension_strength_str_upper10 = extension_strength_str_upper9.ToUpper();\n\
    \        string extension_strength_str_lower10 = extension_strength_str_lower9.ToLower();\n\
    \        string extension_strength_str_upper11 = extension_strength_str_upper10.ToUpper();\n\
    \        string extension_strength_str_lower11 = extension_strength_str_lower10.ToLower();\n\
    \        string extension_strength_str_upper12 = extension_strength_str_upper11.ToUpper();\n\
    \        string extension_strength_str_lower12 = extension_strength_str_lower11.ToLower",
  "        string strongest_extension = null;\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Length;\n            int sm = class_name.Length;\n            double\
    \ strength = cap - sm;\n            if (strongest_extension_strength < strength)\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int extension_strength_int = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength_int > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        string strongest_extension\
    \ = class_name + \".\" + extensions[0];\n        foreach (string extension in\
    \ extensions) {\n            if (extension.ToUpper().Count() - extension.ToLower().Count()\
    \ == strength) {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + \".\" +\
    \ extensions[extensions.FindIndex(x => x.ToUpper().Count() - x.ToLower().Count())];\n\
    \        }\n        return class_name;", "        string strongest = string.Empty;\n\
    \        string extension = string.Empty;\n        string extension_strength =\
    \ string.Empty;\n        string extension_strength_str = string.Empty;\n     \
    \   string extension_strength_str_upper = string.Empty;\n        string extension_strength_str_lower\
    \ = string.Empty;\n        string extension_strength_str_upper_small = string.Empty;\n\
    \        string extension_strength_str_lower_small = string.Empty;\n        string\
    \ extension_strength_str_upper_small_lower = string.Empty;\n        string extension_strength_str_lower_small_upper\
    \ = string.Empty;\n        string extension_strength_str_upper_lower_small = string.Empty;\n\
    \        string extension_strength_str_lower_lower_upper = string.Empty;\n   \
    \     string extension_strength_str_upper_upper_lower = string.Empty;\n      \
    \  string extension_strength_str_lower_upper_lower = string.Empty;\n        string\
    \ extension_strength_str_upper_upper_upper = string.Empty;\n        string extension_strength_str_lower_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_lower\
    \ = string.Empty;\n        string extension_strength_str_lower_upper_upper_lower\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_lower_upper_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_upper_lower\
    \ = string.Empty;\n        string extension_strength_str_lower_upper_upper_upper_lower\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_lower_upper_upper_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_upper_upper_lower\
    \ = string.Empty;\n        string extension_strength_str_lower_upper_upper_upper_upper_lower\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_upper_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_lower_upper_upper_upper_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_upper_upper_upper_lower\
    \ = string.Empty;\n        string extension_strength_str_lower_upper_upper_upper_upper_upper_lower\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_upper_upper_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_lower_upper_upper_upper_upper_upper_upper\
    \ = string.Empty;\n        string extension_strength_str_upper_upper_upper_upper_upper_upper_upper_lower\
    \ = string.Empty", "        string extension = extensions[0];\n        string\
    \ extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string extension_strength_frac = extension_strength.Substring(0, extension_strength.Length\
    \ - 1).ToLower();\n        string extension_strength_frac_count = extension_strength_frac.Count(c\
    \ => c == 'A');\n        string extension_strength_frac_count_2 = extension_strength_frac.Count(c\
    \ => c == 'B');\n        string extension_strength_frac_count_3 = extension_strength_frac.Count(c\
    \ => c == 'C');\n        string extension_strength_frac_count_4 = extension_strength_frac.Count(c\
    \ => c == 'D');\n        string extension_strength_frac_count_5 = extension_strength_frac.Count(c\
    \ => c == 'E');\n        string extension_strength_frac_count_6 = extension_strength_frac.Count(c\
    \ => c == 'F');\n        string extension_strength_frac_count_7 = extension_strength_frac.Count(c\
    \ => c == 'G');\n        string extension_strength_frac_count_8 = extension_strength_frac.Count(c\
    \ => c == 'H');\n        string extension_strength_frac_count_9 = extension_strength_frac.Count(c\
    \ => c == 'I');\n        string extension_strength_frac_count_10 = extension_strength_frac.Count(c\
    \ => c == 'J');\n        string extension_strength_frac_count_11 = extension_strength_frac.Count(c\
    \ => c == 'K');\n        string extension_strength_frac_count_12 = extension_strength_frac.Count(c\
    \ => c == 'L');\n        string extension_strength_frac_count_13 = extension_strength_frac.Count(c\
    \ => c == 'M');\n        string extension_strength_frac_count_14 = extension_strength_frac.Count(c\
    \ => c == 'N');\n        string extension_strength_frac_count_15 = extension_strength_frac.Count(c\
    \ => c == 'O');\n        string extension_strength_frac_count_16 = extension_strength_frac.Count(c\
    \ => c == 'P');\n        string extension_strength_frac_count_17 = extension_strength_frac.Count(c\
    \ => c == 'Q');\n        string extension_strength_frac_count_18 = extension_strength_frac.Count(c\
    \ => c == 'R');\n        string extension_strength_frac_count_19 = extension_strength_frac.Count(c\
    \ => c == 'S", "        string extension = extensions[0];\n        string extension_strength\
    \ = extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        int extension_strength_int = int.Parse(extension_strength_str);\n\
    \        int extension_strength_frac = extension_strength_int - extension_strength_str.Length;\n\
    \        string extension_strength_frac_str = extension_strength_frac.ToString();\n\
    \        int extension_strength_frac_int = int.Parse(extension_strength_frac_str);\n\
    \        string extension_strength_frac_str_2 = extension_strength_frac_str.Substring(0,\
    \ 1);\n        int extension_strength_frac_int2 = int.Parse(extension_strength_frac_str_2);\n\
    \        string extension_strength_frac_str_3 = extension_strength_frac_str.Substring(1,\
    \ 1);\n        int extension_strength_frac_int3 = int.Parse(extension_strength_frac_str_3);\n\
    \        string extension_strength_frac_str_4 = extension_strength_frac_str.Substring(2,\
    \ 1);\n        int extension_strength_frac_int4 = int.Parse(extension_strength_frac_str_4);\n\
    \        string extension_strength_frac_str_5 = extension_strength_frac_str.Substring(3,\
    \ 1);\n        int extension_strength_frac_int5 = int.Parse(extension_strength_frac_str_5);\n\
    \        string extension_strength_frac_str_6 = extension_strength_frac_str.Substring(4,\
    \ 1);\n        int extension_strength_frac_int6 = int.Parse(extension_strength_frac_str_6);\n\
    \        string extension_strength_frac_str_7 = extension_strength_frac_str.Substring(5,\
    \ 1);\n        int extension_strength_frac_int7 = int.Parse(extension_strength_frac_str_7);\n\
    \        string extension_strength_frac_str_8 = extension_strength_frac_str.Substring(6,\
    \ 1);\n        int extension_strength_frac_int8 = int.Parse(extension_strength_frac_str_8);\n\
    \        string extension_strength_frac_str_9 = extension_strength_frac_str.Substring(7,\
    \ 1);\n        int extension_strength_frac_int9 = int.Parse(extension_strength_frac_str_9);\n\
    \        string extension_strength_frac_str_10 = extension_strength_frac_str.Substring(8,\
    \ 1);\n        int extension_strength_frac_int10 = int.Parse(extension_strength_frac_str_10);\n\
    \        string extension_strength_frac_str_11 = extension_strength_frac_str.Substring(9,\
    \ 1);\n        int ", "        string extension_strength = extensions[0];\n  \
    \      foreach (string extension in extensions) {\n            int extension_capital\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_smaller\
    \ = extension.Count(c => char.IsLower(c));\n            int extension_strength_fraction\
    \ = extension_capital - extension_smaller;\n            if (extension_strength_fraction\
    \ > extension_strength.Count(c => c == c)) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;", "        string extension = extensions[0];\n        string\
    \ extension_strength = extension.Substring(extension.Length - 1, 1);\n       \
    \ string extension_strength_str = extension_strength.ToString();\n        string\
    \ extension_strength_str_upper = extension_strength_str.ToUpper();\n        string\
    \ extension_strength_str_lower = extension_strength_str.ToLower();\n        string\
    \ extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.ToLower();\n\
    \        string extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        string extension_strength_str_upper_lower = extension_strength_str_upper.To",
  "        // Your code here\n        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            double strength = cap - sm;\n            if (strength > 0) {\n  \
    \              strongest_extension += class_name + \".\" + extension;\n      \
    \      }\n        }\n        return strongest_extension;", "        string extension\
    \ = extensions[0];\n        int cap = extension.Count(x => char.IsUpper(x));\n\
    \        int sm = extension.Count(x => char.IsLower(x));\n        int strength\
    \ = cap - sm;\n        extensions.Sort();\n        foreach (string e in extensions)\
    \ {\n            cap = extension.Count(x => char.IsUpper(x));\n            sm\
    \ = extension.Count(x => char.IsLower(x));\n            int new_strength = cap\
    \ - sm;\n            if (new_strength > strength) {\n                extension\
    \ = e;\n                strength = new_strength;\n            }\n        }\n \
    \       return class_name + \".\" + extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        string strongest = class_name + \".\" + extensions[0];\n        for (int\
    \ i = 1; i < extensions.Count; i++) {\n            if (extensions[i].ToUpper().Count()\
    \ - extensions[i].ToLower().Count() == strength) {\n                strongest\
    \ = class_name + \".\" + extensions[i];\n            }\n        }\n        return\
    \ strongest;", "        string extension_strength = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            int extension_capital = extension.Count(x\
    \ => char.IsUpper(x));\n            int extension_smaller = extension.Count(x\
    \ => char.IsLower(x));\n            int extension_strength_fraction = extension_capital\
    \ - extension_smaller;\n            if (extension_strength_fraction > extension_strength.Count(x\
    \ => char.IsUpper(x) - char.IsLower(x))) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;", "        string extension = extensions[0];\n        int\
    \ strength = -1;\n        foreach (string s in extensions) {\n            int\
    \ cap = s.Length;\n            int sm = class_name.ToLower().Count(x => x.Equals('a')\
    \ || x.Equals('b') || x.Equals('c'));\n            int diff = cap - sm;\n    \
    \        if (diff > strength) {\n                extension = s;\n            \
    \    strength = diff;\n            }\n        }\n        return class_name + \"\
    .\" + extension;", "        string extension_strength = extensions[0].Substring(class_name.Length);\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.Substring(class_name.Length);\n            int extension_strength_int2\
    \ = extension_strength_int - extension_strength;\n            if (extension_strength_int\
    \ > extension_strength_int2) {\n                extension_strength = extension;\n\
    \            }\n        }\n        return class_name + extension_strength;", " \
    \       string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToLower();\n        string extension_strength_numerator\
    \ = extension_strength.Substring(0, extension_strength.Length - 1);\n        string\
    \ extension_strength_denominator = extension_strength.Substring(extension_strength.Length\
    \ - 1);\n        double extension_strength_numerator_double = Convert.ToDouble(extension_strength_numerator);\n\
    \        double extension_strength_denominator_double = Convert.ToDouble(extension_strength_denominator);\n\
    \        double extension_strength_double = extension_strength_numerator_double\
    \ / extension_strength_denominator_double;\n        double extension_strength_double_inverse\
    \ = 1 / extension_strength_double;\n        double extension_strength_double_inverse_double\
    \ = Convert.ToDouble(extension_strength_double_inverse);\n        double extension_strength_double_inverse_double_double\
    \ = Convert.ToDouble(extension_strength_double_inverse_double);\n        double\
    \ extension_strength_double_inverse_double_double_double = Convert.ToDouble(extension_strength_double_inverse_double_double);\n\
    \        double extension_strength_double_inverse_double_double_double_double\
    \ = Convert.ToDouble(extension_strength_double_inverse_double_double_double);\n\
    \        double extension_strength_double_inverse_double_double_double_double_double\
    \ = Convert.ToDouble(extension_strength_double_inverse_double_double_double_double);\n\
    \        double extension_strength_double_inverse_double_double_double_double_double_double\
    \ = Convert.ToDouble(extension_strength_double_inverse_double_double_double_double_double);\n\
    \        double extension_strength_double_inverse_double_double_double_double_double_double_double\
    \ = Convert.ToDouble(extension_strength_double_inverse_double_double_double_double_double_double);\n\
    \        double extension_strength_double_inverse_double_double_double_double_double_double_double_double\
    \ = Convert.ToDouble(extension_strength_double_inverse_double_double_double_double_double_double_double);\n\
    \        double extension_strength_double_inverse_double_double_double_double_double_double_double_double_double\
    \ = Convert.ToDouble(extension_strength_double_inverse_double_double_double_double_double_double_double_double_double);\n\
    \        double extension_strength_double_inverse_double_double_double_double_double_double_double_double_double_double\
    \ = Convert.ToDouble(extension_strength_double_inverse_double_double_double_double_double_double_double_double_double_double);\n\
    \        double extension_strength_double_inverse_double_double_", "        string\
    \ strongest = null;\n        double strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            double\
    \ strength_fraction = cap - sm;\n            if (strength > strength_fraction)\
    \ {\n                strongest = extension;\n                strength = strength_fraction;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength == 0) return class_name;\n        double strength\
    \ = extension_strength / class_name.ToUpper().Count();\n        List<string> extensions_sorted\
    \ = extensions.OrderBy(x => x.ToUpper().Count() - x.ToLower().Count()).ToList();\n\
    \        string strongest_extension = extensions_sorted[0];\n        for (int\
    \ i = 1; i < extensions_sorted.Count; i++) {\n            if (extensions_sorted[i].ToUpper().Count()\
    \ - extensions_sorted[i].ToLower().Count() > strength) {\n                strongest_extension\
    \ = extensions_sorted[i];\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        extensions.Sort();\n        string strongest_extension = class_name +\
    \ \".\" + extensions[0];\n        foreach (string extension in extensions) {\n\
    \            if (extension.ToUpper().Count() - extension.ToLower().Count() ==\
    \ strength) {\n                strongest_extension = class_name + \".\" + extension;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += class_name + \".\" + extension;\n            }\n        }\n        if (strongest_extension.Length\
    \ == 0) {\n            throw new Exception(\"No extensions found\");\n       \
    \ }\n        return strongest_extension;", "        string strongest_extension\
    \ = string.Empty;\n        string strongest_extension_strength = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength\
    \ = ExtensionStrength(extension);\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string strongest_extension = string.Empty;\n\
    \        string extension_strength = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_numerator = 0;\n      \
    \      int extension_strength_denominator = 0;\n            int extension_strength_total\
    \ = 0;\n            int extension_cap = 0;\n            int extension_sm = 0;\n\
    \            int extension_total = 0;\n            int extension_total_numerator\
    \ = 0;\n            int extension_total_denominator = 0;\n            int extension_total_total\
    \ = 0;\n            int extension_cap_numerator = 0;\n            int extension_cap_denominator\
    \ = 0;\n            int extension_cap_total = 0;\n            int extension_sm_numerator\
    \ = 0;\n            int extension_sm_denominator = 0;\n            int extension_sm_total\
    \ = 0;\n            int extension_total_numerator_numerator = 0;\n           \
    \ int extension_total_numerator_denominator = 0;\n            int extension_total_numerator_total\
    \ = 0;\n            int extension_total_denominator_numerator = 0;\n         \
    \   int extension_total_denominator_denominator = 0;\n            int extension_total_denominator_total\
    \ = 0;\n            int extension_cap_numerator_numerator = 0;\n            int\
    \ extension_cap_numerator_denominator = 0;\n            int extension_cap_numerator_total\
    \ = 0;\n            int extension_cap_denominator_numerator = 0;\n           \
    \ int extension_cap_denominator_denominator = 0;\n            int extension_cap_denominator_total\
    \ = 0;\n            int extension_sm_numerator_numerator = 0;\n            int\
    \ extension_sm_numerator_denominator = 0;\n            int extension_sm_numerator_total\
    \ = 0;\n            int extension_sm_denominator_numerator = 0;\n            int\
    \ extension_sm_denominator_denominator = 0;\n            int extension_sm_denominator_total\
    \ = 0;\n            int extension_total_numerator_numerator_numerator = 0;\n \
    \           int extension_total_numerator_numerator_denominator = 0;\n       \
    \     int extension_total_numerator_numerator_total = 0;\n            int extension_total_numerator_denominator_numerator\
    \ = 0;\n            int extension_total_numerator_denominator_denominator = 0;\n\
    \            int extension_total_numerator_denominator_total = 0;\n          \
    \  int extension_total_denominator_numerator_numerator = 0;\n            int extension_total_denominator_numerator_denominator\
    \ = 0;\n            int extension_total_denominator_numerator_total = 0;\n   \
    \         int extension_total_denominator_denominator_numerator = 0;\n       \
    \     int extension_total_denominator_denominator_denominator = 0;\n         \
    \   int extension_total_denominator_denominator_total = 0;\n            int extension_cap_numerator_numerator_numerator\
    \ = 0;\n            int extension_cap_numerator_numerator_denominator = 0;\n \
    \           int ", "        string strongest_extension = string.Empty;\n     \
    \   string extension_strength = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_numerator = 0, extension_strength_denominator\
    \ = 0;\n            int extension_capital_letters = 0, extension_small_letters\
    \ = 0;\n            int extension_class_name_length = class_name.Length;\n   \
    \         int extension_length = extension.Length;\n            int extension_class_name_length_with_extension_length\
    \ = extension_class_name_length + extension_length;\n            int extension_capital_letters_numerator\
    \ = 0, extension_capital_letters_denominator = 0;\n            int extension_small_letters_numerator\
    \ = 0, extension_small_letters_denominator = 0;\n            int extension_capital_letters_numerator_with_extension_length\
    \ = 0, extension_capital_letters_denominator_with_extension_length = 0;\n    \
    \        int extension_small_letters_numerator_with_extension_length = 0, extension_small_letters_denominator_with_extension_length\
    \ = 0;\n            int extension_capital_letters_numerator_with_extension_length_with_extension_length\
    \ = 0, extension_capital_letters_denominator_with_extension_length_with_extension_length\
    \ = 0;\n            int extension_small_letters_numerator_with_extension_length_with_extension_length\
    \ = 0, extension_small_letters_denominator_with_extension_length_with_extension_length\
    \ = 0;\n            int extension_capital_letters_numerator_with_extension_length_with_extension_length_with_extension_length\
    \ = 0, extension_capital_letters_denominator_with_extension_length_with_extension_length_with_extension_length\
    \ = 0;\n            int extension_small_letters_numerator_with_extension_length_with_extension_length_with_extension_length\
    \ = 0, extension_small_letters_denominator_with_extension_length_with_extension_length_with_extension_length\
    \ = 0;\n            int extension_capital_letters_numerator_with_extension_length_with_extension_length_with_extension_length_with_extension_length\
    \ = 0, extension_capital_letters_denominator_with_extension_length_with_extension_length_with_extension_length_with_extension_length\
    \ = 0;\n            int extension_small_letters_numerator_with_extension_length_with_extension_length_with_extension_length_with_extension_length\
    \ = 0, extension_small_letters_denominator_with_extension_length_with_extension_length_with_extension_length_with_extension_length\
    \ = 0;\n            int extension_capital_letters_numerator_with_extension_length_with_extension_length_with_extension_length_with_extension_length_with_extension_length\
    \ = 0, extension_capital_letters_denominator_with_extension_length_with_extension_length_with_extension_length_with_extension_length_with_extension_length\
    \ = 0;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        double strength = extension_strength / extensions.Count();\n\
    \        extensions.Sort();\n        string strongest_extension = class_name +\
    \ \".\" + extensions[0];\n        foreach (string extension in extensions) {\n\
    \            if (strength > extension_strength) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                extension_strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_new = extension.Length;\n\
    \            int extension_strength_old = extension_strength;\n            int\
    \ extension_strength_diff = extension_strength_new - extension_strength_old;\n\
    \            extension_strength = extension_strength_new;\n            if (extension_strength_diff\
    \ > extension_strength) {\n                extension_strength = extension_strength_old;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[0];",
  "        string strongest_extension = string.Empty;\n        string strongest_extension_strength\
    \ = string.Empty;\n        string extension_strength = string.Empty;\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            extension_strength\
    \ = cap - sm;\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength == 0) {\n            return class_name;\n     \
    \   }\n        double strength = extension_strength / extension_strength.ToString().Length;\n\
    \        double max_strength = extension_strength;\n        string max_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            double\
    \ extension_strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                max_extension = extension;\n        \
    \    }\n        }\n        return class_name + \".\" + max_extension;", "    \
    \    string extension = extensions[0];\n        string extension_class = class_name\
    \ + extension;\n        string extension_class_with_extension = extension_class\
    \ + \".\";\n        string extension_class_with_extension_without_extension =\
    \ extension_class_with_extension.Remove(extension_class_with_extension.Length\
    \ - 1);\n        string extension_class_with_extension_without_extension_without_extension\
    \ = extension_class_with_extension_without_extension.Remove(extension_class_with_extension_without_extension.Length\
    \ - 1);\n        string extension_class_with_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_extension_without_extension_without_extension.Remove(extension_class_with_extension_without_extension_without_extension.Length\
    \ - 1);\n        string extension_class_with_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_extension_without_extension_without_extension_without_extension.Length\
    \ - 1);\n        string extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_extension_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - 1);\n        string extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - 1);\n        string extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - 1);\n        string extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Length",
  "        string extension_strength = \"\";\n        foreach (string extension in\
    \ extensions) {\n            int extension_strength_counter = 0;\n           \
    \ int extension_strength_counter_lower = 0;\n            int extension_strength_counter_upper\
    \ = 0;\n            int extension_strength_counter_total = 0;\n            int\
    \ extension_strength_counter_total_lower = 0;\n            int extension_strength_counter_total_upper\
    \ = 0;\n            int extension_strength_counter_total_total = 0;\n        \
    \    int extension_strength_counter_total_total_lower = 0;\n            int extension_strength_counter_total_total_upper\
    \ = 0;\n            int extension_strength_counter_total_total_total = 0;\n  \
    \          int extension_strength_counter_total_total_total_lower = 0;\n     \
    \       int extension_strength_counter_total_total_total_upper = 0;\n        \
    \    int extension_strength_counter_total_total_total_total = 0;\n           \
    \ int extension_strength_counter_total_total_total_total_lower = 0;\n        \
    \    int extension_strength_counter_total_total_total_total_upper = 0;\n     \
    \       int extension_strength_counter_total_total_total_total_total = 0;\n  \
    \          int extension_strength_counter_total_total_total_total_total_lower\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_upper\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_lower\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_upper\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_lower\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_upper\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_lower\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total_upper\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total_lower\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total_upper\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total_total_lower\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total_total_upper\
    \ = 0;\n            int extension_strength_counter_total_total_total_total_total_total_total_total_total\
    \ = 0;\n            int ", "        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        // Your code\
    \ here\n        string strongest_extension = \"\";\n        string extension_strength\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ extension_number = extension.ToUpper().Count() - extension.ToUpper().ToLower().Count();\n\
    \            int class_number = class_name.ToUpper().Count() - class_name.ToUpper().ToLower().Count();\n\
    \            int strength = extension_number - class_number;\n            if (strength\
    \ > extension_strength) {\n                strongest_extension = extension;\n\
    \                extension_strength = strength;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   string strongest_extension = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_new = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_new > extension_strength)\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_new;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string extension_strength = extensions[0].Substring(class_name.Length);\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.Substring(class_name.Length);\n            if (extension_strength_int\
    \ > extension_strength) {\n                extension_strength = extension_strength_int;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string strongest_extension = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            extension_strength += extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength > strongest_extension.ToUpper().Count()\
    \ - strongest_extension.ToLower().Count()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        if (extension_strength == 0)\n            return class_name;\n\
    \        if (extension_strength == 1)\n            return class_name + \".\" +\
    \ extensions[0];\n        if (extension_strength == -1)\n            return class_name\
    \ + \".\" + extensions[extensions.IndexOf(extension_strength)];\n        return\
    \ class_name + \".\" + extensions[extensions.IndexOf(extension_strength)];", " \
    \       string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_capitalized = extension.Count(c\
    \ => char.IsUpper(c));\n            int extension_smallcased = extension.Count(c\
    \ => char.IsLower(c));\n            double extension_strength_fraction = (double)extension_capitalized\
    \ / (double)extension_smallcased;\n            if (extension_strength_fraction\
    \ > extension_strength) {\n                extension_strength = extension_strength_fraction;\n\
    \                extension_strength = extension.Substring(0, extension.Length\
    \ - extension_strength.ToString().Length);\n            }\n        }\n       \
    \ return class_name + \".\" + extension_strength;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1, 1);\n        int extension_cap = extension_strength.Length;\n        int\
    \ extension_sm = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n  \
    \          string extension_name = extensions[i];\n            string extension_strength_name\
    \ = extension_name.Substring(extension_name.Length - 1, 1);\n            int extension_cap_name\
    \ = extension_strength_name.Length;\n            int extension_sm_name = extension_cap_name\
    \ - extension_sm;\n            if (extension_cap_name > extension_cap) {\n   \
    \             extension = extension_name;\n                extension_strength\
    \ = extension_strength_name;\n                extension_cap = extension_cap_name;\n\
    \                extension_sm = extension_sm_name;\n            }\n        }\n\
    \        return class_name + \".\" + extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        List<string>\
    \ sorted_extensions = extensions.OrderBy(x => x.ToUpper().Count() - x.ToLower().Count()).ToList();\n\
    \        string strongest_extension = sorted_extensions.First();\n        if (sorted_extensions.Count()\
    \ > 1) {\n            strongest_extension = sorted_extensions.First();\n     \
    \       foreach (string extension in sorted_extensions.Skip(1)) {\n          \
    \      if (extension.ToUpper().Count() > strongest_extension.ToUpper().Count())\
    \ {\n                    strongest_extension = extension;\n                }\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = null;\n        string extension_strength =\
    \ null;\n        foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = 0;\n            int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_length =\
    \ extension.Length;\n            int extension_count_cap = 0;\n            int\
    \ extension_count_sm = 0;\n            int extension_count_length = 0;\n     \
    \       int extension_count_cap_sm = 0;\n            int extension_count_cap_length\
    \ = 0;\n            int extension_count_sm_sm = 0;\n            int extension_count_sm_length\
    \ = 0;\n            int extension_count_cap_sm_length = 0;\n            int extension_count_cap_length_sm\
    \ = 0;\n            int extension_count_cap_length_sm_length = 0;\n          \
    \  int extension_count_sm_cap = 0;\n            int extension_count_sm_cap_length\
    \ = 0;\n            int extension_count_sm_cap_length_sm = 0;\n            int\
    \ extension_count_sm_cap_length_sm_length = 0;\n            int extension_count_cap_sm_cap\
    \ = 0;\n            int extension_count_cap_sm_cap_length = 0;\n            int\
    \ extension_count_cap_sm_cap_length_sm = 0;\n            int extension_count_cap_sm_cap_length_sm_length\
    \ = 0;\n            int extension_count_sm_sm_cap = 0;\n            int extension_count_sm_sm_cap_length\
    \ = 0;\n            int extension_count_sm_sm_cap_length_sm = 0;\n           \
    \ int extension_count_sm_sm_cap_length_sm_length = 0;\n            int extension_count_cap_sm_sm_cap\
    \ = 0;\n            int extension_count_cap_sm_sm_cap_length = 0;\n          \
    \  int extension_count_cap_sm_sm_cap_length_sm = 0;\n            int extension_count_cap_sm_sm_cap_length_sm_length\
    \ = 0;\n            int extension_count_sm_sm_sm_cap = 0;\n            int extension_count_sm_sm_sm_cap_length\
    \ = 0;\n            int extension_count_sm_sm_sm_cap_length_sm = 0;\n        \
    \    int extension_count_sm_sm_sm_cap_length_sm_length = 0;\n            int extension_count_cap_sm_sm_sm_cap\
    \ = 0;\n            int extension_count_cap_sm_sm_sm_cap_length = 0;\n       \
    \     int extension_count_cap_sm_sm_sm_cap_length_sm = 0;\n            int extension_count_cap_sm_sm_sm_cap_length_sm_length\
    \ = 0;\n            int extension_count_sm_sm_sm_sm_cap = 0;\n            int\
    \ extension_count_sm_sm_sm_sm_cap_length = 0;\n            int ", "        //\
    \ Your code here\n        string strongest = string.Empty;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n            }\n        }\n        return\
    \ strongest;", "        string extension = extensions[0];\n        string extension_strength\
    \ = extension.Substring(0, extension.Length - 1);\n        string extension_strength_number\
    \ = extension_strength.ToUpperInvariant().Substring(0, extension_strength.ToUpperInvariant().Length\
    \ - 1);\n        int extension_strength_number_int = Convert.ToInt32(extension_strength_number);\n\
    \        int extension_strength_number_cap = extension_strength_number_int - extension_strength_number_int%CAP;\n\
    \        int extension_strength_number_sm = extension_strength_number_int - extension_strength_number_int%SM;\n\
    \        int extension_strength_number_cap_sm = (extension_strength_number_cap\
    \ - extension_strength_number_cap%CAP);\n        int extension_strength_number_cap_sm_cap\
    \ = (extension_strength_number_cap_sm - extension_strength_number_cap_sm%CAP);\n\
    \        int extension_strength_number_cap_sm_cap_sm = (extension_strength_number_cap_sm_cap\
    \ - extension_strength_number_cap_sm_cap%CAP);\n        int extension_strength_number_cap_sm_cap_sm_cap\
    \ = (extension_strength_number_cap_sm_cap_sm_cap - extension_strength_number_cap_sm_cap_sm_cap%CAP);\n\
    \        int extension_strength_number_cap_sm_cap_sm_cap_sm = (extension_strength_number_cap_sm_cap_sm_cap_sm_cap\
    \ - extension_strength_number_cap_sm_cap_sm_cap_sm_cap%CAP);\n        int extension_strength_number_cap_sm_cap_sm_cap_sm_cap\
    \ = (extension_strength_number_cap_sm_cap_sm_cap_sm_cap_sm_cap - extension_strength_number_cap_sm_cap_sm_cap_sm_cap_sm_cap%CAP);\n\
    \        int extension_strength_number_cap_sm_cap_sm_cap_sm_cap_sm = (extension_strength_number_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ - extension_strength_number_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap%CAP);\n \
    \       int extension_strength_number_cap_sm_cap_sm_cap_sm_cap_sm_cap = (extension_strength_number_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap\
    \ - extension_strength_number_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap%CAP);\n\
    \        int extension_strength_number_cap", "        string extension_strength\
    \ = extensions[0].Substring(0, 1).ToUpperInvariant();\n        foreach (string\
    \ extension in extensions) {\n            string extension_strength_new = extension.Substring(0,\
    \ 1).ToUpperInvariant();\n            if (extension_strength_new == extension_strength)\
    \ {\n                extension_strength = extension_strength_new;\n          \
    \  }\n        }\n        return class_name + \".\" + extension_strength;", " \
    \       string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_new = extension.Length;\n\
    \            if (extension_strength_new > extension_strength) {\n            \
    \    extension_strength = extension_strength_new;\n            }\n        }\n\
    \        return class_name + \".\" + extensions[0];", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(0,\
    \ extension.Length - 1);\n        List<string> extensions_sorted = extensions.OrderBy(x\
    \ => x.Substring(0, x.Length - 1)).ToList();\n        double extension_strength_double\
    \ = Convert.ToDouble(extension_strength);\n        double extension_strength_double_sorted\
    \ = Convert.ToDouble(extensions_sorted[0]);\n        double extension_strength_double_sorted_index\
    \ = extensions_sorted.IndexOf(extension_strength_double);\n        double extension_strength_double_sorted_index_double\
    \ = Convert.ToDouble(extension_strength_double_sorted_index);\n        if (extension_strength_double_sorted_index_double\
    \ == 0) {\n            extension = extensions_sorted[1];\n            extension_strength_double\
    \ = Convert.ToDouble(extension.Substring(0, extension.Length - 1));\n        \
    \    extension_strength_double_sorted = Convert.ToDouble(extensions_sorted[1]);\n\
    \            extension_strength_double_sorted_index = extensions_sorted.IndexOf(extension_strength_double);\n\
    \            extension_strength_double_sorted_index_double = Convert.ToDouble(extension_strength_double_sorted_index);\n\
    \        }\n        if (extension_strength_double_sorted_index_double == 1) {\n\
    \            extension = extensions_sorted[2];\n            extension_strength_double\
    \ = Convert.ToDouble(extension.Substring(0, extension.Length - 1));\n        \
    \    extension_strength_double_sorted = Convert.ToDouble(extensions_sorted[2]);\n\
    \            extension_strength_double_sorted_index = extensions_sorted.IndexOf(extension_strength_double);\n\
    \            extension_strength_double_sorted_index_double = Convert.ToDouble(extension_strength_double_sorted_index);\n\
    \        }\n        if (extension_strength_double_sorted_index_double == 2) {\n\
    \            extension = extensions_sorted[3];\n            extension_strength_double\
    \ = Convert.ToDouble(extension.Substring(0, extension.Length - 1));\n        \
    \    extension_strength_double_sorted = Convert.ToDouble(extensions_sorted[3]);\n\
    \            extension_strength_double_sorted_index = extensions_sorted.IndexOf(extension_strength_double);\n\
    \            extension_strength_double_sorted_index_double = Convert.ToDouble(extension_strength_double_sorted_index);\n\
    \        }\n        if (extension_strength_double_sorted_index_double == 3) {\n\
    \            extension = extensions_sorted[4];\n            extension_strength_double\
    \ = Convert.ToDouble(extension.Substring(0, extension.Length - 1));\n        \
    \    extension_strength_double_sorted = Convert.To", "        string extension_strength\
    \ = extensions[0].Substring(0, extensions[0].Length - 1);\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_int = extension.Substring(0,\
    \ extension.Length - 1);\n            if (extension_strength_int > extension_strength)\
    \ {\n                extension_strength = extension_strength_int;\n          \
    \  }\n        }\n        return class_name + \".\" + extension_strength;", " \
    \       string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string strongest_extension = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            string extension_strength_new = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_new > extension_strength)\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_new;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1,\
    \ 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str);\n\
    \        int extension_strength_int_upper_small = Convert.ToInt32(extension_strength_str_upper.Substring(0,\
    \ extension_strength_str_upper.Length - 1));\n        int extension_strength_int_lower_small\
    \ = Convert.ToInt32(extension_strength_str_lower.Substring(0, extension_strength_str_lower.Length\
    \ - 1));\n        int extension_strength_int_lower_large = Convert.ToInt32(extension_strength_str_lower.Substring(0,\
    \ extension_strength_str_lower.Length - 2));\n        int extension_strength_int_upper_large\
    \ = Convert.ToInt32(extension_strength_str_upper.Substring(0, extension_strength_str_upper.Length\
    \ - 2));\n        int extension_strength_int_upper_small_large = Convert.ToInt32(extension_strength_str_upper.Substring(0,\
    \ extension_strength_str_upper.Length - 3));\n        int extension_strength_int_lower_small_large\
    \ = Convert.ToInt32(extension_strength_str_lower.Substring(0, extension_strength_str_lower.Length\
    \ - 3));\n        int extension_strength_int_lower_large_large = Convert.ToInt32(extension_strength_str_lower.Substring(0,\
    \ extension_strength_str_lower.Length - 4));\n        int extension_strength_int_upper_large_large\
    \ = Convert.ToInt32(extension_strength_str_upper.Substring(0, extension_strength_str_upper.Length\
    \ - 4));\n        int extension_strength_int_upper_small_large_large = Convert.ToInt32(extension_strength_str_upper.Substring(0,\
    \ extension_strength_str_upper.Length - 5));\n        int extension_strength_int_lower_small_large_large\
    \ = Convert.ToInt32(extension_strength_str_lower.Substring(0, extension_strength_str_lower.Length\
    \ - 5));\n        int extension_strength_int_lower_large_large_large = Convert.ToInt32(extension_strength_str_lower.Substring",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1, 1);\n        string extension_strength_str\
    \ = extension_strength.ToString();\n        string extension_strength_str_upper\
    \ = extension_strength_str.ToUpper();\n        string extension_strength_str_lower\
    \ = extension_strength_str.ToLower();\n        string extension_strength_str_upper_small\
    \ = extension_strength_str_upper.Substring(extension_strength_str_upper.Length\
    \ - 1, 1);\n        string extension_strength_str_lower_small = extension_strength_str_lower.Substring(extension_strength_str_lower.Length\
    \ - 1, 1);\n        string extension_strength_str_upper_small_lower = extension_strength_str_upper_small.ToLower();\n\
    \        string extension_strength_str_lower_small_lower = extension_strength_str_lower_small.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower = extension_strength_str_upper_small_lower.ToLower();\n\
    \        string extension_strength_str_lower_small_lower_lower = extension_strength_str_lower_small_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower = extension_strength_str_upper_small_lower_lower.ToLower();\n\
    \        string extension_strength_str_lower_small_lower_lower_lower = extension_strength_str_lower_small_lower_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower_lower = extension_strength_str_upper_small_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_lower_small_lower_lower_lower_lower = extension_strength_str_lower_small_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower_lower_lower\
    \ = extension_strength_str_upper_small_lower_lower_lower_lower.ToLower();\n  \
    \      string extension_strength_str_lower_small_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_str_lower_small_lower_lower_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_str_upper_small_lower_lower_lower_lower_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_lower_small_lower_lower_lower_lower_lower_lower_lower\
    \ = extension_strength_str_lower_small_lower_lower_lower_lower_lower_lower_lower.ToLower();\n\
    \        string extension_strength_str_upper_small_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = extension_", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        extension_strength = extension_strength / extensions.Count();\n\
    \        extensions.Sort();\n        string strongest_extension = class_name +\
    \ \".\" + extensions[0];\n        foreach (string extension in extensions) {\n\
    \            if (extension_strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                strongest_extension = class_name + \".\" + extension;\n \
    \           }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = null;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.ToUpper().Count();\n            int sm =\
    \ extension.ToLower().Count();\n            int strength = cap - sm;\n       \
    \     if (strength > 0) {\n                if (strongest_extension == null) {\n\
    \                    strongest_extension = class_name + \".\" + extension;\n \
    \               } else {\n                    if (strength < strongest_extension.ToUpper().Count())\
    \ {\n                        strongest_extension = class_name + \".\" + extension;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = null;\n       \
    \ double strength = -1;\n        foreach (string extension in extensions) {\n\
    \            int cap = extension.Length;\n            int sm = class_name.Length;\n\
    \            double frac = cap - sm;\n            double strength_of_extension\
    \ = frac / cap;\n            if (strength < strength_of_extension) {\n       \
    \         strongest_extension = extension;\n                strength = strength_of_extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = null;\n        foreach (string extension in\
    \ extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + \".\" + extension;\n\
    \                } else {\n                    if (extension_strength < GetExtensionStrength(strongest_extension))\
    \ {\n                        strongest_extension = class_name + \".\" + extension;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ strongest_extension;", "        string extension = extensions.OrderByDescending(x\
    \ => x.ToUpper().Count() - x.ToLower().Count()).FirstOrDefault();\n        if\
    \ (extension != null)\n            return class_name + \".\" + extension;\n  \
    \      else\n            return class_name;", "        string extension = extensions[0];\n\
    \        int cap = extension.Count(c => char.IsUpper(c));\n        int sm = extension.Count(c\
    \ => char.IsLower(c));\n        double strength = cap - sm;\n        extensions.RemoveAt(0);\n\
    \        extensions.Sort();\n        foreach (string s in extensions) {\n    \
    \        int cap2 = s.Count(c => char.IsUpper(c));\n            int sm2 = s.Count(c\
    \ => char.IsLower(c));\n            double strength2 = cap2 - sm2;\n         \
    \   if (strength2 > strength) {\n                extension = s;\n            \
    \    cap = cap2;\n                sm = sm2;\n                strength = strength2;\n\
    \            }\n        }\n        return class_name + \".\" + extension;", " \
    \       string extension_strength = extensions[0].Substring(0, 1);\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength_int =\
    \ extension.Substring(0, 1).ToUpper().ToCharArray().Count() - extension.Substring(0,\
    \ 1).ToLower().ToCharArray().Count();\n            if (extension_strength_int\
    \ > extension_strength) {\n                extension_strength = extension_strength_int;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength;",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int extension2_strength = extension2.ToUpper().Count()\
    \ - extension2.ToUpper().ToLower().Count();\n            if (extension2_strength\
    \ > extension.ToUpper().Count() - extension.ToUpper().ToLower().Count()) {\n \
    \               extension = extension2;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        string extension_strength = extensions[0].Length;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_new\
    \ = extension.Length;\n            if (extension_strength_new > extension_strength)\
    \ {\n                extension_strength = extension_strength_new;\n          \
    \  }\n        }\n        return class_name + \".\" + extensions[0];", "      \
    \  string strongest_extension = string.Empty;\n        double strongest_extension_strength\
    \ = double.MaxValue;\n        foreach (string extension in extensions) {\n   \
    \         int extension_strength = GetExtensionStrength(extension);\n        \
    \    if (extension_strength > strongest_extension_strength) {\n              \
    \  strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string strongest_extension = \"\";\n\
    \        double strength = 0;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.ToUpper().Count();\n            int sm =\
    \ extension.ToLower().Count();\n            double frac = cap - sm;\n        \
    \    strength += frac;\n        }\n        if (strength > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extensions.OrderByDescending(x => x).First();\n     \
    \   }\n        return strongest_extension;", "        string strongest_extension\
    \ = string.Empty;\n        string extension_strength = string.Empty;\n       \
    \ foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = extension.Count(x => char.IsUpper(x));\n            int extension_strength_denominator\
    \ = extension.Count(x => char.IsLower(x));\n            double extension_strength_fraction\
    \ = extension_strength_numerator / extension_strength_denominator;\n         \
    \   if (extension_strength_fraction > extension_strength) {\n                strongest_extension\
    \ = extension;\n                extension_strength = extension_strength_fraction;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string strongest = \"\";\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1,\
    \ 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str_upper);\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);\n\
    \        int extension_strength_int_upper = Convert.ToInt32(extension_strength_str_upper);\n\
    \        int extension_strength_int_lower = Convert.ToInt32(extension_strength_str_lower);",
  "        string extension_strength = string.Empty;\n        string extension_strength_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension = string.Empty;\n\
    \        string extension_strength_extension_extension_extension = string.Empty;\n\
    \        string extension_strength_extension_extension_extension_extension = string.Empty;\n\
    \        string extension_strength_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = string.Empty;\n        string extension_strength_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string extension_strength_strongest = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            string extension_strength_temp\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_temp > extension_strength) {\n                extension_strength\
    \ = extension_strength_temp;\n                extension_strength_strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength_strongest;",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        extensions.Sort();\n        extensions.Reverse();\n\
    \        extensions.Sort();\n        extensions.Reverse();", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  string strongest_extension = class_name + \".\" + extensions[0];\n        foreach\
    \ (string extension in extensions.Skip(1)) {\n            if (extension_strength\
    \ > extension.ToUpper().Count() - extension.ToLower().Count()) {\n           \
    \     strongest_extension = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction =\n            extension_strength.Substring(extension_strength.Length\
    \ - 1).ToLower();\n        double extension_strength_fraction_value = double.Parse(extension_strength_fraction);\n\
    \        double extension_strength_value = double.Parse(extension_strength);\n\
    \        double extension_strength_fraction_value =\n            extension_strength_fraction\
    \ * extension_strength_value;\n        double extension_strength_fraction_value\
    \ =\n            Math.Round(extension_strength_fraction_value);\n        double\
    \ extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value =\n            Math.Round(extension_strength_fraction_value);\n\
    \        double extension_strength_fraction_value ", "        string extension_strength\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ extension_strength_numerator = 0;\n            int extension_strength_denominator\
    \ = 0;\n            int extension_strength_total = 0;\n            int extension_strength_total_numerator\
    \ = 0;\n            int extension_strength_total_denominator = 0;\n          \
    \  int extension_strength_total_numerator_numerator = 0;\n            int extension_strength_total_numerator_denominator\
    \ = 0;\n            int extension_strength_total_denominator_numerator = 0;\n\
    \            int extension_strength_total_denominator_denominator = 0;\n     \
    \       int extension_strength_total_numerator_numerator_numerator = 0;\n    \
    \        int extension_strength_total_numerator_numerator_denominator = 0;\n \
    \           int extension_strength_total_denominator_numerator_numerator = 0;\n\
    \            int extension_strength_total_denominator_numerator_denominator =\
    \ 0;\n            int extension_strength_total_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_strength_total_numerator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_denominator_numerator_numerator_numerator\
    \ = 0;\n            int extension_strength_total_denominator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_strength_total_numerator_numerator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_denominator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_strength_total_denominator_numerator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_strength_total_numerator_numerator_numerator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_denominator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_strength_total_denominator_numerator_numerator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_strength_total_denominator_numerator_numerator_numerator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_numerator_numerator_numerator_numerator_numerator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_denominator_numerator_numerator_numerator_numerator_numerator_numerator_denominator\
    \ = 0;\n            int extension_strength_total_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_denominator\
    \ = 0;", "        string extension = extensions.First();\n        string extension_strength\
    \ = extension.Substring(extension.Length - 1).ToLower();\n        double extension_strength_double\
    \ = Convert.ToDouble(extension_strength);\n        double extension_strength_double_minus_sm\
    \ = extension_strength_double - 1;\n        double extension_strength_double_minus_cap\
    \ = extension_strength_double - 2;\n        double extension_strength_double_minus_cap_sm\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap = 0;\n\
    \        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm = 0;\n\
    \        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_minus_sm\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap_minus_sm_minus_cap\
    \ = 0;\n        double extension_strength_double_minus_cap_sm_minus_cap_minus_sm_minus_cap_min",
  "        string extension_strength = extensions[0];\n        for (int i = 1; i <\
    \ extensions.Count; i++) {\n            string extension = extensions[i];\n  \
    \          int extension_capitalized = extension.Count(c => char.IsUpper(c));\n\
    \            int extension_smallcased = extension.Count(c => char.IsLower(c));\n\
    \            int extension_strength = extension_capitalized - extension_smallcased;\n\
    \            if (extension_strength > extension_strength) {\n                extension_strength\
    \ = extension_strength;\n                extension = extensions[i];\n        \
    \    }\n        }\n        return class_name + \".\" + extension_strength;", " \
    \       string strongest_extension = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            double strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string extension = extensions[0];\n        int\
    \ strength = -1;\n        foreach (string extension2 in extensions) {\n      \
    \      int extension2_strength = GetExtensionStrength(extension2);\n         \
    \   if (extension2_strength > strength) {\n                extension = extension2;\n\
    \                strength = extension2_strength;\n            }\n        }\n \
    \       return class_name + \".\" + extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   string extension_strength_2 = extensions[1].ToUpper().Count() - extensions[1].ToLower().Count();\n\
    \        string extension_strength_3 = extensions[2].ToUpper().Count() - extensions[2].ToLower().Count();\n\
    \        string extension_strength_4 = extensions[3].ToUpper().Count() - extensions[3].ToLower().Count();\n\
    \        string extension_strength_5 = extensions[4].ToUpper().Count() - extensions[4].ToLower().Count();\n\
    \        string extension_strength_6 = extensions[5].ToUpper().Count() - extensions[5].ToLower().Count();\n\
    \        string extension_strength_7 = extensions[6].ToUpper().Count() - extensions[6].ToLower().Count();\n\
    \        string extension_strength_8 = extensions[7].ToUpper().Count() - extensions[7].ToLower().Count();\n\
    \        string extension_strength_9 = extensions[8].ToUpper().Count() - extensions[8].ToLower().Count();\n\
    \        string extension_strength_10 = extensions[9].ToUpper().Count() - extensions[9].ToLower().Count();\n\
    \        string extension_strength_11 = extensions[10].ToUpper().Count() - extensions[10].ToLower().Count();\n\
    \        string extension_strength_12 = extensions[11].ToUpper().Count() - extensions[11].ToLower().Count();\n\
    \        string extension_strength_13 = extensions[12].ToUpper().Count() - extensions[12].ToLower().Count();\n\
    \        string extension_strength_14 = extensions[13].ToUpper().Count() - extensions[13].ToLower().Count();\n\
    \        string extension_strength_15 = extensions[14].ToUpper().Count() - extensions[14].ToLower().Count();\n\
    \        string extension_strength_16 = extensions[15].ToUpper().Count() - extensions[15].ToLower().Count();\n\
    \        string extension_strength_17 = extensions[16].ToUpper().Count() - extensions[16].ToLower().Count();\n\
    \        string extension_strength_18 = extensions[17].ToUpper().Count() - extensions[17].ToLower().Count();\n\
    \        string extension_strength_19 = extensions[18].ToUpper().Count() - extensions[18].ToLower().Count();\n\
    \        string extension_strength_20 = extensions[19].ToUpper().Count() - extensions[19].ToLower().Count();",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        extensions.Sort();\n\
    \        extensions.Reverse();\n        string strongest_extension = class_name\
    \ + extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       if (extension_strength > strength) {\n                strongest_extension\
    \ = class_name + extension;\n                strength = extension_strength;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  extension_strength = extension_strength.ToString();\n        extension_strength\
    \ = extension_strength.Replace(\".\", \"\");\n        extension_strength = extension_strength.Replace(\"\
    -\", \"\");\n        extension_strength = extension_strength.Replace(\"_\", \"\
    \");\n        extension_strength = extension_strength.Replace(\"0\", \"\");\n\
    \        extension_strength = extension_strength.Replace(\"1\", \"\");\n     \
    \   extension_strength = extension_strength.Replace(\"2\", \"\");\n        extension_strength\
    \ = extension_strength.Replace(\"3\", \"\");\n        extension_strength = extension_strength.Replace(\"\
    4\", \"\");\n        extension_strength = extension_strength.Replace(\"5\", \"\
    \");\n        extension_strength = extension_strength.Replace(\"6\", \"\");\n\
    \        extension_strength = extension_strength.Replace(\"7\", \"\");\n     \
    \   extension_strength = extension_strength.Replace(\"8\", \"\");\n        extension_strength\
    \ = extension_strength.Replace(\"9\", \"\");\n        extension_strength = extension_strength.Replace(\"\
    A\", \"\");\n        extension_strength = extension_strength.Replace(\"B\", \"\
    \");\n        extension_strength = extension_strength.Replace(\"C\", \"\");\n\
    \        extension_strength = extension_strength.Replace(\"D\", \"\");\n     \
    \   extension_strength = extension_strength.Replace(\"E\", \"\");\n        extension_strength\
    \ = extension_strength.Replace(\"F\", \"\");\n        extension_strength = extension_strength.Replace(\"\
    G\", \"\");\n        extension_strength = extension_strength.Replace(\"H\", \"\
    \");\n        extension_strength = extension_strength.Replace(\"I\", \"\");\n\
    \        extension_strength = extension_strength.Replace(\"J\", \"\");\n     \
    \   extension_strength = extension_strength.Replace(\"K\", \"\");\n        extension_strength\
    \ = extension_strength.Replace(\"L\", \"\");\n        extension_strength = extension_strength.Replace(\"\
    M\", \"\");\n        extension_strength = extension_strength.Replace(\"N\", \"\
    \");\n        extension_strength = extension_strength.Replace(\"O\", \"\");\n\
    \        extension_strength = extension_strength.Replace(\"P\", \"\");\n     \
    \   extension_", "        string extension = extensions[0];\n        foreach (string\
    \ extension2 in extensions) {\n            int cap = extension2.Length;\n    \
    \        int sm = extension.Length;\n            int strength = cap - sm;\n  \
    \          if (strength > 0) {\n                extension = extension2;\n    \
    \        }\n        }\n        return class_name + \".\" + extension;", "    \
    \    string strongest_extension = null;\n        double strongest_extension_strength\
    \ = 0;\n        double strongest_extension_strength_percentage = 0;\n        foreach\
    \ (string extension in extensions) {\n            double extension_strength =\
    \ GetExtensionStrength(extension);\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension_strength_percentage\
    \ = extension_strength / class_name.Length;\n            }\n        }\n      \
    \  if (strongest_extension_strength_percentage > 1) {\n            strongest_extension\
    \ = extensions[0];\n        }\n        return strongest_extension;", "       \
    \ string strongest_extension = null;\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int extension_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (strongest_extension_strength < extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code goes here\n        string strongest_extension = \"\";\n  \
    \      double strength = 0;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            double fraction\
    \ = cap - sm;\n            if (fraction > strength) {\n                strongest_extension\
    \ = extension;\n                strength = fraction;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   string extension_strength_2 = extensions[1].ToUpper().Count() - extensions[1].ToLower().Count();\n\
    \        string extension_strength_3 = extensions[2].ToUpper().Count() - extensions[2].ToLower().Count();\n\
    \        string extension_strength_4 = extensions[3].ToUpper().Count() - extensions[3].ToLower().Count();\n\
    \        string extension_strength_5 = extensions[4].ToUpper().Count() - extensions[4].ToLower().Count();\n\
    \        string extension_strength_6 = extensions[5].ToUpper().Count() - extensions[5].ToLower().Count();\n\
    \        string extension_strength_7 = extensions[6].ToUpper().Count() - extensions[6].ToLower().Count();\n\
    \        string extension_strength_8 = extensions[7].ToUpper().Count() - extensions[7].ToLower().Count();\n\
    \        string extension_strength_9 = extensions[8].ToUpper().Count() - extensions[8].ToLower().Count();\n\
    \        string extension_strength_10 = extensions[9].ToUpper().Count() - extensions[9].ToLower().Count();\n\
    \        string extension_strength_11 = extensions[10].ToUpper().Count() - extensions[10].ToLower().Count();\n\
    \        string extension_strength_12 = extensions[11].ToUpper().Count() - extensions[11].ToLower().Count();\n\
    \        string extension_strength_13 = extensions[12].ToUpper().Count() - extensions[12].ToLower().Count();\n\
    \        string extension_strength_14 = extensions[13].ToUpper().Count() - extensions[13].ToLower().Count();\n\
    \        string extension_strength_15 = extensions[14].ToUpper().Count() - extensions[14].ToLower().Count();\n\
    \        string extension_strength_16 = extensions[15].ToUpper().Count() - extensions[15].ToLower().Count();\n\
    \        string extension_strength_17 = extensions[16].ToUpper().Count() - extensions[16].ToLower().Count();\n\
    \        string extension_strength_18 = extensions[17].ToUpper().Count() - extensions[17].ToLower().Count();\n\
    \        string extension_strength_19 = extensions[18].ToUpper().Count() - extensions[18].ToLower().Count();\n\
    \        string extension_strength_20 = extensions[19].ToUpper().Count() - extensions[19].ToLower().Count();",
  "        string strongest_extension = null;\n        double strongest_strength =\
    \ double.MaxValue;\n        foreach (string extension in extensions) {\n     \
    \       double extension_strength = GetExtensionStrength(class_name, extension);\n\
    \            if (extension_strength > strongest_strength) {\n                strongest_extension\
    \ = extension;\n                strongest_strength = extension_strength;\n   \
    \         }\n        }\n        return strongest_extension;", "        string\
    \ strongest = null;\n        double strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Length;\n            int sm\
    \ = class_name.Length;\n            double frac = cap - sm;\n            strength\
    \ += frac;\n            if (strength > 0) {\n                strongest = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     if (strongest == null) {\n            throw new Exception(\"No extensions\
    \ found\");\n        }\n        return strongest;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_str = extension_strength.ToLower();\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength_str);\n\
    \        string extension_strength_str = extension_strength.Substring(0, extension_strength_int);\n\
    \        string extension_strength_str = extension_strength_str.ToUpper();\n \
    \       string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToLower();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToLower();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToLower();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToLower();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToLower();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_str.Length\
    \ - 1);\n        string extension_strength_str = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str = extension_strength_str.Substring(0, extension_strength_",
  "        string extension = extensions[0];\n        string extension_strength =\
    \ extension.Substring(extension.Length - 1).ToUpper();\n        string extension_strength_numerator\
    \ = extension_strength.Substring(0, extension_strength.Length - 1);\n        string\
    \ extension_strength_denominator = extension_strength.Substring(extension_strength.Length\
    \ - 1);\n        double extension_strength_numerator_double = Convert.ToDouble(extension_strength_numerator);\n\
    \        double extension_strength_denominator_double = Convert.ToDouble(extension_strength_denominator);\n\
    \        double extension_strength_double = extension_strength_numerator_double\
    \ / extension_strength_denominator_double;\n        double extension_strength_numerator_double2\
    \ = Convert.ToDouble(extension_strength_numerator);\n        double extension_strength_denominator_double2\
    \ = Convert.ToDouble(extension_strength_denominator);\n        double extension_strength_double2\
    \ = extension_strength_numerator_double2 / extension_strength_denominator_double2;\n\
    \        double extension_strength_numerator_double3 = Convert.ToDouble(extension_strength_numerator);\n\
    \        double extension_strength_denominator_double3 = Convert.ToDouble(extension_strength_denominator);\n\
    \        double extension_strength_double3 = extension_strength_numerator_double3\
    \ / extension_strength_denominator_double3;\n        double extension_strength_numerator_double4\
    \ = Convert.ToDouble(extension_strength_numerator);\n        double extension_strength_denominator_double4\
    \ = Convert.ToDouble(extension_strength_denominator);\n        double extension_strength_double4\
    \ = extension_strength_numerator_double4 / extension_strength_denominator_double4;\n\
    \        double extension_strength_numerator_double5 = Convert.ToDouble(extension_strength_numerator);\n\
    \        double extension_strength_denominator_double5 = Convert.ToDouble(extension_strength_denominator);\n\
    \        double extension_strength_double5 = extension_strength_numerator_double5\
    \ / extension_strength_denominator_double5;\n        double extension_strength_numerator_double6\
    \ = Convert.ToDouble(extension_strength_numerator);\n        double extension_strength_denominator_double6\
    \ = Convert.ToDouble(extension_strength_denominator);\n        double extension_strength_double6\
    \ = extension_strength_numerator_double6 / extension_strength_denominator_double6;\n\
    \        double extension_strength_numerator_double7 = Convert.ToDouble(extension_",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_cap = extension.Count(x => char.IsUpper(x));\n\
    \            int extension_sm = extension.Count(x => char.IsLower(x));\n     \
    \       extension_strength = extension_strength.Replace(extension, extension_cap\
    \ - extension_sm);\n        }\n        return class_name + \".\" + extension_strength;",
  "        string strongest_extension = \"\";\n        string strongest_extension_strength\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ extension_strength = extension.Count(c => Char.IsUpper(c));\n            if\
    \ (extension_strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string extension = extensions[0];\n        string\
    \ extension_class = class_name + extension;\n        string extension_class_name\
    \ = extension_class.Substring(0, extension_class.Length - extension.Length);\n\
    \        string extension_class_name_with_extension = extension_class_name + extension;\n\
    \        string extension_class_name_with_extension_lowercase = extension_class_name_with_extension.ToLower();\n\
    \        string extension_class_name_with_extension_lowercase2 = extension_class_name_with_extension_lowercase.Replace(\"\
    _\", \"\");\n        string extension_class_name_with_extension_lowercase3 = extension_class_name_with_extension_lowercase2.Replace(\"\
    C\", \"\");\n        string extension_class_name_with_extension_lowercase4 = extension_class_name_with_extension_lowercase3.Replace(\"\
    E\", \"\");\n        string extension_class_name_with_extension_lowercase5 = extension_class_name_with_extension_lowercase4.Replace(\"\
    S\", \"\");\n        string extension_class_name_with_extension_lowercase6 = extension_class_name_with_extension_lowercase5.Replace(\"\
    I\", \"\");\n        string extension_class_name_with_extension_lowercase7 = extension_class_name_with_extension_lowercase6.Replace(\"\
    G\", \"\");\n        string extension_class_name_with_extension_lowercase8 = extension_class_name_with_extension_lowercase7.Replace(\"\
    T\", \"\");\n        string extension_class_name_with_extension_lowercase9 = extension_class_name_with_extension_lowercase8.Replace(\"\
    N\", \"\");\n        string extension_class_name_with_extension_lowercase10 =\
    \ extension_class_name_with_extension_lowercase9.Replace(\"G\", \"\");\n     \
    \   string extension_class_name_with_extension_lowercase11 = extension_class_name_with_extension_lowercase10.Replace(\"\
    E\", \"\");\n        string extension_class_name_with_extension_lowercase12 =\
    \ extension_class_name_with_extension_lowercase11.Replace(\"R\", \"\");\n    \
    \    string extension_class_name_with_extension_lowercase13 = extension_class_name_with_extension_lowercase12.Replace(\"\
    I\", \"\");\n        string extension_class_name_with_extension_lowercase14 =\
    \ extension_class_name_with_extension_lowercase13.Replace(\"N\", \"\");\n    \
    \    string extension_class_name_with_extension_lowercase15 = extension_class_name_with_extension_lowercase14.Replace(\"\
    G\", \"\");\n        string extension_class_name_with_extension_lowercase16 =\
    \ extension_class_name_with_extension_lowercase15.Replace(\"E\", \"\");\n    \
    \    string extension_class_name_with_extension_lowercase17 = extension_class_name_with_extension_lowercase16.Replace(\"\
    R\", \"\");\n        string extension_class_name_with_extension_", "        string\
    \ extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       extension_strength = extension_strength / extensions.Count();\n      \
    \  extension_strength = extension_strength.ToString();\n        string result\
    \ = class_name + \".\" + extension_strength;\n        return result;", "     \
    \   string extension = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1, 1);\n        string extension_class = extension.Substring(0, extension.Length\
    \ - 1);\n        string extension_class_strength = extension_class.Substring(extension_class.Length\
    \ - 1, 1);\n        int extension_class_strength_int = Convert.ToInt32(extension_class_strength);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength);\n \
    \       if (extension_class_strength_int < extension_strength_int) {\n       \
    \     extension = extension_class;\n            extension_strength = extension_class_strength;\n\
    \            extension_class = extension_class_strength;\n            extension_class_strength\
    \ = extension_class_strength_int;\n            extension_class_strength_int =\
    \ extension_strength_int;\n        }\n        string extension_class_name = extension_class.Substring(0,\
    \ extension_class.Length - 1);\n        string extension_class_name_strength =\
    \ extension_class_name.Substring(extension_class_name.Length - 1, 1);\n      \
    \  int extension_class_name_strength_int = Convert.ToInt32(extension_class_name_strength);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength);\n \
    \       if (extension_class_name_strength_int < extension_strength_int) {\n  \
    \          extension = extension_class_name;\n            extension_strength =\
    \ extension_class_name_strength;\n            extension_class = extension_class_name_strength;\n\
    \            extension_class_strength = extension_class_name_strength_int;\n \
    \           extension_class_strength_int = extension_strength_int;\n        }\n\
    \        string extension_class_name_strength_int = extension_class_name_strength.Substring(extension_class_name_strength.Length\
    \ - 1, 1);\n        int extension_strength_int = Convert.ToInt32(extension_strength);\n\
    \        if (extension_class_name_strength_int < extension_strength_int) {\n \
    \           extension = extension_class_name_strength;\n            extension_strength\
    \ = extension_class_name_strength_int;\n            extension_class = extension_class_name_strength_int;\n\
    \            extension_class_strength = extension_class_name_strength_int;\n \
    \           extension_class_strength_int = extension_strength_int;\n        }\n\
    \        string extension_class_name_strength_int = extension_class_name_strength.Substring(extension_class_name_strength.Length\
    \ - 1, 1);\n        int extension_strength_int = Convert.ToInt32(extension_strength);\n\
    \        if (extension_class_name_strength_int < extension_strength_int) {\n",
  "        string extension_strength = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n\
    \        string strongest_extension = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_new = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_new > extension_strength)\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_new;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        string strongest_extension = string.Empty;\n\
    \        string extension_strength = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            double strength = (double)cap\
    \ - (double)sm;\n            if (strength > 0) {\n                if (extension_strength\
    \ == string.Empty) {\n                    extension_strength = extension;\n  \
    \                  strongest_extension = class_name + extension;\n           \
    \     }\n                else if (extension_strength.ToUpper().Count() > extension.ToUpper().Count())\
    \ {\n                    extension_strength = extension;\n                   \
    \ strongest_extension = class_name + extension;\n                }\n         \
    \   }\n        }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extension_strength;\n        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = string.Empty;\n        string extension_class = string.Empty;\n        string\
    \ extension_class_name = string.Empty;\n        string extension_class_name_with_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = string.Empty;\n        string extension_class_name_with_extension_strength_without_extension_without_extension_",
  "        string extension = extensions[0];\n        int cap = extension.Count(x\
    \ => char.IsUpper(x));\n        int sm = extension.Count(x => char.IsLower(x));\n\
    \        int strength = cap - sm;\n        if (extensions.Count(x => x == extension)\
    \ > 1) {\n            extension = extensions.OrderBy(x => x).First();\n      \
    \  }\n        return class_name + \".\" + extension;", "        string extension_strength\
    \ = string.Empty;\n        string extension_class = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            int extension_capital = extension.Count(x\
    \ => char.IsUpper(x));\n            int extension_smaller = extension.Count(x\
    \ => char.IsLower(x));\n            double extension_strength_fraction = (double)extension_capital\
    \ / (double)extension_smaller;\n            if (extension_strength_fraction >\
    \ extension_strength) {\n                extension_strength = extension_strength_fraction;\n\
    \                extension_class = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + extension_class;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(0,\
    \ extension.Length - 1);\n        int extension_strength_int = Convert.ToInt32(extension_strength);\n\
    \        int extension_strength_frac = extension_strength_int - extension_strength_int%2;\
    \ // -1 % 2 = 0\n        string extension_strength_str = extension_strength_int.ToString();\n\
    \        string extension_strength_str_frac = extension_strength_str.Substring(0,\
    \ extension_strength_str.Length - 1);\n        int extension_strength_str_int\
    \ = Convert.ToInt32(extension_strength_str);\n        int extension_strength_str_frac\
    \ = extension_strength_str_int - extension_strength_str_int%2; // -1 % 2 = 0\n\
    \        string extension_strength_str_str = extension_strength_str_int.ToString();\n\
    \        string extension_strength_str_str_frac = extension_strength_str_str.Substring(0,\
    \ extension_strength_str_str.Length - 1);\n        int extension_strength_str_str_int\
    \ = Convert.ToInt32(extension_strength_str_str);\n        int extension_strength_str_str_frac\
    \ = extension_strength_str_str_int - extension_strength_str_str_int%2; // -1 %\
    \ 2 = 0\n        string extension_strength_str_str_str = extension_strength_str_str_int.ToString();\n\
    \        string extension_strength_str_str_str_frac = extension_strength_str_str_str.Substring(0,\
    \ extension_strength_str_str_str.Length - 1);\n        int extension_strength_str_str_str_int\
    \ = Convert.ToInt32(extension_strength_str_str_str);\n        int extension_strength_str_str_str_frac\
    \ = extension_strength_str_str_str_int - extension_strength_str_str_str_int%2;\
    \ // -1 % 2 = 0\n        string extension_strength_str_str_str_str = extension_strength_str_str_str_int.ToString();\n\
    \        string extension_strength_str_str_str_str_frac = extension_strength_str_str_str_str.Substring(0,\
    \ extension_strength_str_str_str_str.Length - 1);\n        int extension_strength_str_str_str_str_int\
    \ = Convert.ToInt32(extension_strength_str_str_str_str);\n        int extension_strength_str_str_str_str_frac\
    \ = extension_strength_str_str_str_str_int - extension_strength_str_str_str_str_int%2;\
    \ // -1 % 2 = 0\n        string extension_strength_str_str_str_str_str = extension_strength_str_str_str_str_int.ToString();\n\
    \        string extension_strength_str_str_", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       double strength = extension_strength / extensions.Count();\n        double\
    \ max_strength = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        if (strength > max_strength) {\n            return class_name + extensions[0];\n\
    \        }\n        return class_name + extensions.OrderBy(x => x.ToUpper().Count()\
    \ - x.ToLower().Count()).First();", "        string strongest_extension = null;\n\
    \        double strongest_extension_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int extension_length = extension.Length;\n   \
    \         int class_length = class_name.Length;\n            int extension_strength\
    \ = extension_length - class_length;\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1,\
    \ 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper2 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower2 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper3 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower3 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper4 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower4 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper5 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower5 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper6 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower6 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper7 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower7 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper8 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower8 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper9 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower9 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper10 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower10 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper11 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower11 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper12 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower12 = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper13 = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower13 = extension_strength_str.ToLower();\n\
    \        string extension_", "        string extension_strength = extensions[0].Length;\n\
    \        foreach (string extension in extensions) {\n            int extension_length\
    \ = extension.Length;\n            int extension_strength_difference = extension_length\
    \ - extension_strength;\n            if (extension_strength_difference > 0) {\n\
    \                extension_strength = extension_strength_difference;\n       \
    \     }\n        }\n        return class_name + \".\" + extensions[0];", "   \
    \     string extension = extensions.OrderByDescending(x => x.Length).First();\n\
    \        string extension_class = class_name + extension;\n        string extension_class_with_extension\
    \ = class_name + extension.Substring(0, extension.Length - 1);\n        string\
    \ extension_class_with_extension_2 = class_name + extension.Substring(0, extension.Length\
    \ - 2);\n        string extension_class_with_extension_3 = class_name + extension.Substring(0,\
    \ extension.Length - 3);\n        string extension_class_with_extension_4 = class_name\
    \ + extension.Substring(0, extension.Length - 4);\n        string extension_class_with_extension_5\
    \ = class_name + extension.Substring(0, extension.Length - 5);\n        string\
    \ extension_class_with_extension_6 = class_name + extension.Substring(0, extension.Length\
    \ - 6);\n        string extension_class_with_extension_7 = class_name + extension.Substring(0,\
    \ extension.Length - 7);\n        string extension_class_with_extension_8 = class_name\
    \ + extension.Substring(0, extension.Length - 8);\n        string extension_class_with_extension_9\
    \ = class_name + extension.Substring(0, extension.Length - 9);\n        string\
    \ extension_class_with_extension_10 = class_name + extension.Substring(0, extension.Length\
    \ - 10);\n        string extension_class_with_extension_11 = class_name + extension.Substring(0,\
    \ extension.Length - 11);\n        string extension_class_with_extension_12 =\
    \ class_name + extension.Substring(0, extension.Length - 12);\n        string\
    \ extension_class_with_extension_13 = class_name + extension.Substring(0, extension.Length\
    \ - 13);\n        string extension_class_with_extension_14 = class_name + extension.Substring(0,\
    \ extension.Length - 14);\n        string extension_class_with_extension_15 =\
    \ class_name + extension.Substring(0, extension.Length - 15);\n        string\
    \ extension_class_with_extension_16 = class_name + extension.Substring(0, extension.Length\
    \ - 16);\n        string extension_class_with_extension_17 = class_name + extension.Substring(0,\
    \ extension.Length - 17);\n        string extension_class_with_extension_18 =\
    \ class_name + extension.Substring(0, extension.Length - 18);\n        string\
    \ extension_class_with_extension_19 = class_name + extension.Substring(0, extension.Length\
    \ - 19);\n        string extension_class_with_extension_20 = class_name + extension.Substring(0,\
    \ extension.Length - 20);\n        string extension_class_with_extension_21 =\
    \ class_name + extension.Substring(0, extension.Length - 21);\n        string\
    \ extension_class_with_extension_22 = class_name + "]
stop_tokens:
- "\n    }\n"
