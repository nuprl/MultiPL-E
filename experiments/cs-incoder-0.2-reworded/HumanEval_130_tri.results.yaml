language: cs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjbkrjz3g.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjbkrjz3g.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplps4xxnm.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplps4xxnm.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplps4xxnm.cs(33,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +\
    \ Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp003y2_cs.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp003y2_cs.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n \
    \           long d = Tri(n - 3);\n            result.Add(d);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqhv21z56.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqhv21z56.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqhv21z56.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqhv21z56.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqhv21z56.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = tri1 + tri2 + tri3;\n            result.AddRange(tri1, tri2,\
    \ tri3, tri4);\n        } else {\n            long tri1 = Tri(n - 1);\n      \
    \      long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n        \
    \    long tri4 = tri1 + tri2 + tri3;\n            result.AddRange(tri1, tri2,\
    \ tri3);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0j4k3id8.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0j4k3id8.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0j4k3id8.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0j4k3id8.cs(34,20): error CS1501: No overload for method ''AddRange''
    takes 4 arguments

    /tmp/tmp0j4k3id8.cs(36,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0j4k3id8.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0j4k3id8.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0j4k3id8.cs(40,20): error CS1501: No overload for method ''AddRange''
    takes 3 arguments

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgyoky4ct.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgyoky4ct.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgifhqwpq.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgifhqwpq.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n       \
    \     long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n         \
    \   long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n           \
    \ long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n         \
    \   long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n       \
    \     long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n     \
    \       long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n   \
    \         long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n \
    \           long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            long tri\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw_c7g9mm.cs(76,21): error CS1002: ; expected

    /tmp/tmpw_c7g9mm.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpw_c7g9mm.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n\
    \ - 7) + Tri(n - 8) + Tri(n - 9);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbw52mu0n.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbw52mu0n.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n            return result;\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n            return result;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo19nbxp_.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo19nbxp_.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo19nbxp_.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo19nbxp_.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpo19nbxp_.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpo19nbxp_.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpo19nbxp_.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo19nbxp_.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo19nbxp_.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo19nbxp_.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpo19nbxp_.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpo19nbxp_.cs(43,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 2;\n        long c = 1;\n        long d\
    \ = 1;\n        long temp;\n        if (n <= 3) {\n            result.Add(n);\n\
    \            return result;\n        }\n        while (n > 0) {\n            temp\
    \ = c;\n            c = a + b;\n            a = b;\n            b = temp;\n  \
    \          temp = d;\n            d = c + d;\n            c = d;\n           \
    \ d = temp;\n            result.Add(c);\n            n -= 2;\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c5df86d47044e43944f32af6ef8f246>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c5df86d47044e43944f32af6ef8f246>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(1L);\n        if (n == 1) result.Add(3L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) {\n            long\
    \ tri1 = Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n            long\
    \ tri3 = Tri(n + 1L);\n            long tri4 = tri1 + tri2 + tri3;\n         \
    \   result.Add(tri4);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0nmig8pz.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0nmig8pz.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0nmig8pz.cs(33,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1) + Tri(n\
    \ + 2) + Tri(n + 3);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbqogprii.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbqogprii.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzr616nz4.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzr616nz4.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzr616nz4.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2qh659s.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpu2qh659s.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n + 2));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpburhb86b.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpburhb86b.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpburhb86b.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpburhb86b.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpburhb86b.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpburhb86b.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpburhb86b.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpburhb86b.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpburhb86b.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        } else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            long d = Tri(n - 3);\n            result.Add(d);\n            return\
    \ result;\n        }\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq52rity4.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpq52rity4.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpq52rity4.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpq52rity4.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpq52rity4.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       result.AddRange(tri1);\n            result.AddRange(tri2);\n         \
    \   result.AddRange(tri3);\n        } else {\n            long tri1 = Tri(n -\
    \ 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n\
    \            result.AddRange(tri1);\n            result.AddRange(tri2);\n    \
    \        result.AddRange(tri3);\n            result.AddRange(tri1);\n        \
    \    result.AddRange(tri2);\n            result.AddRange(tri3);\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppurg797t.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(33,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(34,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(35,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(41,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(42,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(43,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(44,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(45,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) {\n          \
    \  return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long\
    \ tri3 = Tri(n - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n\
    \        result.Add((long)tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfemyouzh.cs(30,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfemyouzh.cs(31,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfemyouzh.cs(32,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5)\
    \ + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzmfll4z6.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzmfll4z6.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) {\n          \
    \  return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long\
    \ tri3 = Tri(n - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n\
    \        result.Add((long)tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfemyouzh.cs(30,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfemyouzh.cs(31,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfemyouzh.cs(32,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        if (n == 1)\n      \
    \      result.Add(1);\n        if (n == 2)\n            result.Add(3);\n     \
    \   if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b =\
    \ Tri(n - 2);\n            long c = Tri(n + 1);\n            long sum = a + b\
    \ + c;\n            result.Add(sum);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz35zd_u4.cs(34,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz35zd_u4.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz35zd_u4.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl24dydcy.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpl24dydcy.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpl24dydcy.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplqohlepi.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplqohlepi.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 2);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9844gha6.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9844gha6.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n    \
    \    } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputn3rj4h.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmputn3rj4h.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmputn3rj4h.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu00qhqdx.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpu00qhqdx.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\
    \ else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1veux7dh.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1veux7dh.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3L) return new List<long>();\n\
    \        var result = new List<long>();\n        var tri = new long[] {1L, 3L,\
    \ 2L};\n        var tri1 = new long[] {1L, 3L, 2L, 4L};\n        var tri2 = new\
    \ long[] {1L, 3L, 2L, 4L, 5L};\n        var tri3 = new long[] {1L, 3L, 2L, 4L,\
    \ 5L, 6L};\n        var tri4 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L};\n    \
    \    var tri5 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L};\n        var tri6\
    \ = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L};\n        var tri7 = new long[]\
    \ {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L};\n        var tri8 = new long[] {1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L};\n        var tri9 = new long[] {1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L};\n        var tri10 = new long[]\
    \ {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L};\n        var tri11\
    \ = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L};\n\
    \        var tri12 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L,\
    \ 12L, 13L, 14L, 15L};\n        var tri13 = new long[] {1L, 3L, 2L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L};\n        var tri14 = new long[]\
    \ {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L};\n\
    \        var tri15 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L,\
    \ 12L, 13L, 14L, 15L, 16L, 17L, 18L};\n        var tri16 = new long[] {1L, 3L,\
    \ 2L, 4L, 5\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9jplops.cs(45,6): error CS1002: ; expected

    /tmp/tmpf9jplops.cs(46,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpf9jplops.cs(59,2): error CS1513: } expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2) +\
    \ Tri(n - 1) + Tri(n - 3);\n            result.AddRange(new List<long>() { a,\
    \ b, Tri(n - 2) });\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajduw0wd.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpajduw0wd.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpajduw0wd.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpajduw0wd.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpajduw0wd.cs(36,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpajduw0wd.cs(37,54): error CS1950: The best overloaded Add method ''List<long>.Add(long)''
    for the collection initializer has some invalid arguments

    /tmp/tmpajduw0wd.cs(37,54): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            long d = Tri(n - 3);\n            foreach (long x in d) result.Add(x);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_wvc714.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(43,22): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i6zncso.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0i6zncso.cs(30,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) {\n         \
    \   return new List<long>();\n        }\n        if (n == 1) {\n            return\
    \ new List<long>() { 1 };\n        }\n        if (n % 2 == 0) {\n            return\
    \ new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n + 1) };\n        }\n    \
    \    else {\n            return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) };\n        }\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp7zb3u1t.cs(33,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpp7zb3u1t.cs(36,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            foreach (var item in a.Concat(b).Concat(c)) {\n         \
    \       result.Add(item);\n            }\n        } else {\n            long a\
    \ = Tri(n - 1);\n            long b = Tri(n - 2) + Tri(n - 1);\n            long\
    \ c = Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            foreach (var item in\
    \ a.Concat(b).Concat(c)) {\n                result.Add(item);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps1p1g77m.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmps1p1g77m.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmps1p1g77m.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmps1p1g77m.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmps1p1g77m.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmps1p1g77m.cs(38,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmps1p1g77m.cs(39,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmps1p1g77m.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n\
    \ + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n\
    \        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n\
    \ - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n\
    \        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n\
    \ + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n\
    \        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n\
    \ - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n\
    \        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n\
    \ + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n\
    \        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n\
    \ - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n\
    \        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 1L));\n        result.\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph667jqm0.cs(91,16): error CS1001: Identifier expected

    /tmp/tmph667jqm0.cs(91,16): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { (long)1 };\n        if (n == 2)\
    \ return new List<long>() { (long)1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpep6cwz_n.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpep6cwz_n.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long\
    \ sum = a + b + c;\n            result.Add(sum);\n        }\n        else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3);\n            long sum = a + b + c;\n            result.Add(sum);\n\
    \            result.Add(sum);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu3trgjx.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        else\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy4doryjl.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpy4doryjl.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        else\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpulfkt569.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpulfkt569.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 3 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n / 2);\n            long b = Tri(n -\
    \ 1);\n            long c = Tri(n - 2);\n            long d = a + b + c;\n   \
    \         result.Add(d);\n        }\n        else {\n            long a = Tri(n\
    \ / 2);\n            long b = Tri(n - 1);\n            long c = Tri(n - 2);\n\
    \            long d = a + b + c;\n            result.Add(d);\n            result.Add(a\
    \ + c);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa1_ew4sh.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1_ew4sh.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1_ew4sh.cs(33,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1_ew4sh.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1_ew4sh.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1_ew4sh.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = 1;\n        long tri3 = 1;\n\
    \        long tri4 = tri1 + tri2 + tri3;\n        long tri5 = tri4;\n        long\
    \ tri6 = tri5;\n        long tri7 = tri6;\n        long tri8 = tri7;\n       \
    \ long tri9 = tri8;\n        long tri10 = tri9;\n        long tri11 = tri10;\n\
    \        long tri12 = tri11;\n        long tri13 = tri12;\n        long tri14\
    \ = tri13;\n        long tri15 = tri14;\n        long tri16 = tri15;\n       \
    \ long tri17 = tri16;\n        long tri18 = tri17;\n        long tri19 = tri18;\n\
    \        long tri20 = tri19;\n        long tri21 = tri20;\n        long tri22\
    \ = tri21;\n        long tri23 = tri22;\n        long tri24 = tri23;\n       \
    \ long tri25 = tri24;\n        long tri26 = tri25;\n        long tri27 = tri26;\n\
    \        long tri28 = tri27;\n        long tri29 = tri28;\n        long tri30\
    \ = tri29;\n        long tri31 = tri30;\n        long tri32 = tri31;\n       \
    \ long tri33 = tri32;\n        long tri34 = tri33;\n        long tri35 = tri34;\n\
    \        long tri36 = tri35;\n        long tri37 = tri36;\n        long tri38\
    \ = tri37;\n        long tri39 = tri38;\n        long tri40 = tri39;\n       \
    \ long tri41 = tri40;\n        long tri42 = tri41;\n        long tri43 = tri42;\n\
    \        long tri44 = tri43;\n        long tri45 = tri44;\n        long tri46\
    \ = tri45;\n        long tri47 = tri46;\n        long tri48 = tri47;\n       \
    \ long tri49 = tri48;\n        long tri50 = tri49;\n        long tri51 = tri50;\n\
    \        long tri52 = tri51;\n        long tri53 = tri52;\n        long tri54\
    \ = tri53;\n        long tri55 = tri54;\n        long tri56 = tri55;\n       \
    \ long tri57 = tri56;\n        long tri58 = tri57;\n        long tri59 = tri58;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdiinjxrr.cs(25,30): error CS0161: ''Problem.Tri(long)'': not all code
    paths return a value

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n       \
    \     long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n         \
    \   long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n           \
    \ long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n         \
    \   long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n       \
    \     long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n     \
    \       long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n   \
    \         long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n \
    \           long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            long tri\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw_c7g9mm.cs(76,21): error CS1002: ; expected

    /tmp/tmpw_c7g9mm.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpw_c7g9mm.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n + 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbm_xgu2e.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbm_xgu2e.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n + 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbm_xgu2e.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbm_xgu2e.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n / 2);\n            long b = Tri(n -\
    \ 1);\n            long c = Tri(n - 2);\n            long d = a + b + c;\n   \
    \         result.Add(d);\n            return result;\n        }\n        else\
    \ {\n            long a = Tri(n / 2);\n            long b = Tri(n - 1);\n    \
    \        long c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(a + c);\n            return result;\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pvze57a.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6pvze57a.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6pvze57a.cs(33,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6pvze57a.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6pvze57a.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6pvze57a.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwlnf0kb.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpzwlnf0kb.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1L);\n   \
    \     long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n - 3L);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkh2k2f63.cs(36,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkh2k2f63.cs(37,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkh2k2f63.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long\
    \ sum = 0;\n            foreach (var item in a) {\n                sum += item;\n\
    \            }\n            foreach (var item in b) {\n                sum +=\
    \ item;\n            }\n            foreach (var item in c) {\n              \
    \  sum += item;\n            }\n            result.Add(sum);\n        } else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3);\n            long sum = 0;\n            foreach (var\
    \ item in a) {\n                sum += item;\n            }\n            foreach\
    \ (var item in b) {\n                sum += item;\n            }\n           \
    \ foreach (var item in c) {\n                sum += item;\n            }\n   \
    \         result.Add(sum);\n            result.Add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfxg5ngw5.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfxg5ngw5.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfxg5ngw5.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfxg5ngw5.cs(34,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfxg5ngw5.cs(37,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfxg5ngw5.cs(40,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfxg5ngw5.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfxg5ngw5.cs(46,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfxg5ngw5.cs(47,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfxg5ngw5.cs(49,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfxg5ngw5.cs(52,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfxg5ngw5.cs(55,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long\
    \ sum = a + b + c;\n            result.Add(sum);\n        }\n        else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3);\n            long sum = a + b + c;\n            result.Add(sum);\n\
    \            result.Add(sum);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu3trgjx.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsu3trgjx.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n     \
    \       return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1\
    \ + tri2 + tri3;\n        result.Add(tri1);\n        result.Add(tri2);\n     \
    \   result.Add(tri3);\n        result.Add(tri4);\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplqbbhe7x.cs(30,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmplqbbhe7x.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplqbbhe7x.cs(31,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmplqbbhe7x.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplqbbhe7x.cs(32,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmplqbbhe7x.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplqbbhe7x.cs(33,18): error CS0136: A local or parameter named ''tri4''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmplqbbhe7x.cs(37,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplqbbhe7x.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplqbbhe7x.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 3)});\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjol8nt7e.cs(28,58): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjol8nt7e.cs(29,47): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) {\n        \
    \    return new List<long>(new long[]{1L});\n        }\n        if (n == 2L) {\n\
    \            return new List<long>(new long[]{3L});\n        }\n        if (n\
    \ % 2L == 0L) {\n            return new List<long>(new long[]{Tri(n - 1L) + Tri(n\
    \ - 2L) + Tri(n + 1L)});\n        }\n        return new List<long>(new long[]{Tri(n\
    \ - 1L) + Tri(n - 2L), Tri(n - 1L) + Tri(n + 1L)});\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppbbt1sta.cs(33,46): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmppbbt1sta.cs(35,42): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmppbbt1sta.cs(35,69): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(3L);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n\
    \ - 1L);\n            long tri2 = Tri(n - 2L);\n            long tri3 = Tri(n\
    \ - 3L);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n            return result;\n        }\n \
    \       long tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6u8v1hdm.cs(36,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6u8v1hdm.cs(36,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6u8v1hdm.cs(37,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6u8v1hdm.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6u8v1hdm.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6u8v1hdm.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp6u8v1hdm.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp6u8v1hdm.cs(41,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp6u8v1hdm.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6u8v1hdm.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6u8v1hdm.cs(46,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp6u8v1hdm.cs(47,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      result.Add(3);\n        else if (n % 2 == 0)\n            result.Add(1\
    \ + n / 2);\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqsmwcj9h.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(3);\n        if (n % 2 == 0) {\n            long tri1\
    \ = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 =\
    \ Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n\
    \        }\n        else {\n            long tri1 = Tri(n - 1);\n            long\
    \ tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4\
    \ = tri1 + tri2 + tri3;\n            result.Add(tri4);\n            result.Add(tri1\
    \ + tri2 + tri3);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3qei38ae.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qei38ae.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qei38ae.cs(33,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qei38ae.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qei38ae.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qei38ae.cs(40,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) {\n        \
    \    return new List<long>(new long[]{1L});\n        }\n        if (n == 2L) {\n\
    \            return new List<long>(new long[]{3L});\n        }\n        if (n\
    \ % 2 == 0) {\n            return new List<long>(new long[]{Tri(n - 1L) + Tri(n\
    \ - 2L) + Tri(n + 1L)});\n        }\n        else {\n            return new List<long>(new\
    \ long[]{Tri(n - 1L) + Tri(n - 2L), Tri(n - 1L) + Tri(n + 1L)});\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2_fnv96o.cs(33,46): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2_fnv96o.cs(36,46): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2_fnv96o.cs(36,73): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            result.AddRange(a.Zip(b, (a, b) => a + b));\n        } else\
    \ {\n            long a = Tri(n - 1);\n            long b = Tri(n - 3);\n    \
    \        result.AddRange(a.Zip(b, (a, b) => a + b));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa1vc05yc.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1vc05yc.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1vc05yc.cs(46,31): error CS1061: ''long'' does not contain a definition
    for ''Zip'' and no accessible extension method ''Zip'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpa1vc05yc.cs(48,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1vc05yc.cs(49,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpa1vc05yc.cs(50,31): error CS1061: ''long'' does not contain a definition
    for ''Zip'' and no accessible extension method ''Zip'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n    \
    \    } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputn3rj4h.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmputn3rj4h.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmputn3rj4h.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n        \
    \    foreach (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n            return result;\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long\
    \ x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n \
    \           foreach (long x in c) result.Add(x);\n            foreach (long x\
    \ in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n   \
    \         foreach (long x in c) result.Add(x);\n            return result;\n \
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgl4hx6jf.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgl4hx6jf.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgl4hx6jf.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgl4hx6jf.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgl4hx6jf.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgl4hx6jf.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgl4hx6jf.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgl4hx6jf.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgl4hx6jf.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgl4hx6jf.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgl4hx6jf.cs(43,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgl4hx6jf.cs(44,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgl4hx6jf.cs(45,32): error CS1579: foreach statement cannot operate on
    v'
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else\n            result.Add(Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n + 1));\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps93f9y77.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            long d = Tri(n - 3);\n            foreach (long x in d) result.Add(x);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_wvc714.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(43,22): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprvtqntbc.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprvtqntbc.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri1(n);\n        long tri2 = Tri2(n);\n        long tri3\
    \ = Tri3(n);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n\
    \        result.Add((long)tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmst5er9h.cs(27,21): error CS0103: The name ''Tri1'' does not exist in
    the current context

    /tmp/tmpmst5er9h.cs(28,21): error CS0103: The name ''Tri2'' does not exist in
    the current context

    /tmp/tmpmst5er9h.cs(29,21): error CS0103: The name ''Tri3'' does not exist in
    the current context

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n + 1) };\n\
    \        } else {\n            return new List<long>() { Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n - 3) };\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6xfcix_9.cs(29,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6xfcix_9.cs(31,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1za2yxu2.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1za2yxu2.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       result.AddRange(tri1);\n            result.AddRange(tri2);\n         \
    \   result.AddRange(tri3);\n            return result;\n        } else {\n   \
    \         long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n     \
    \       long tri3 = Tri(n - 3);\n            result.AddRange(tri1);\n        \
    \    result.AddRange(tri2);\n            result.AddRange(tri3);\n            result.AddRange(tri1\
    \ + tri2 + tri3);\n            return result;\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplzsiipwz.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplzsiipwz.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplzsiipwz.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplzsiipwz.cs(33,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmplzsiipwz.cs(34,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmplzsiipwz.cs(35,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmplzsiipwz.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplzsiipwz.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplzsiipwz.cs(40,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplzsiipwz.cs(41,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmplzsiipwz.cs(42,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmplzsiipwz.cs(43,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmplzsiipwz.cs(44,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            long d = Tri(n - 3);\n            long e = Tri(n -\
    \ 4);\n            long f = Tri(n - 5);\n            foreach (var item in d.Concat(e).Concat(f))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpodugy3rb.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpodugy3rb.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpodugy3rb.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(46,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) return new List<long>(new\
    \ long[]{1L});\n        if (n == 2L) return new List<long>(new long[]{3L});\n\
    \        if (n % 2 == 0) {\n            List<long> result = new List<long>();\n\
    \            long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n\
    \            long tri3 = Tri(n - 3L);\n            long tri4 = Tri(n - 4L);\n\
    \            result.AddRange(tri1);\n            result.AddRange(tri2);\n    \
    \        result.AddRange(tri3);\n            result.AddRange(tri4);\n        \
    \    return result;\n        }\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        long\
    \ tri3 = Tri(n - 3L);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7dkeoloa.cs(29,24): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7dkeoloa.cs(30,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7dkeoloa.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7dkeoloa.cs(31,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7dkeoloa.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7dkeoloa.cs(32,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7dkeoloa.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7dkeoloa.cs(33,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7dkeoloa.cs(34,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp7dkeoloa.cs(35,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp7dkeoloa.cs(36,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp7dkeoloa.cs(37,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp7dkeoloa.cs(41,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp'
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            result.AddRange(a.Concat(b).Concat(c));\n        } else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2) + Tri(n - 1)\
    \ + Tri(n - 3);\n            result.AddRange(a.Concat(b));\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqx85l5so.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqx85l5so.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqx85l5so.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpqx85l5so.cs(33,31): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpqx85l5so.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqx85l5so.cs(36,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpqx85l5so.cs(37,31): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2qh659s.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpu2qh659s.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(2);\n        if (n % 2 == 0) result.Add(Tri(n / 2)\
    \ + Tri(n / 2 + 1) + Tri(n / 2 + 2));\n        else result.Add(Tri(n / 2) + Tri(n\
    \ / 2 + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3dqt_pf4.cs(30,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp3dqt_pf4.cs(31,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            result.Add(2L);\n            result.Add(8L);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1L) + Tri(n - 2L) + Tri(n + 1L));\n        } else {\n            result.Add(Tri(n\
    \ - 1L) + Tri(n - 2L));\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp28vqyd2b.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp28vqyd2b.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 3 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -\
    \ 2);\n            long c = Tri(n + 1);\n            foreach (var item in a) {\n\
    \                result.Add(item);\n            }\n            foreach (var item\
    \ in b) {\n                result.Add(item);\n            }\n            foreach\
    \ (var item in c) {\n                result.Add(item);\n            }\n      \
    \  } else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n + 1);\n            foreach (var item in a) {\n   \
    \             result.Add(item);\n            }\n            foreach (var item\
    \ in b) {\n                result.Add(item);\n            }\n            foreach\
    \ (var item in c) {\n                result.Add(item);\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpljqd_m9e.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpljqd_m9e.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpljqd_m9e.cs(33,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpljqd_m9e.cs(34,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpljqd_m9e.cs(37,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpljqd_m9e.cs(40,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpljqd_m9e.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpljqd_m9e.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpljqd_m9e.cs(46,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpljqd_m9e.cs(47,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpljqd_m9e.cs(50,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpljqd_m9e.cs(53,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) {\n            long\
    \ tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3\
    \ = Tri(n + 1);\n            long tri = tri1 + tri2 + tri3;\n            result.Add(tri);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4fs91ez_.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4fs91ez_.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4fs91ez_.cs(33,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv9xru075.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpv9xru075.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2) +\
    \ Tri(n - 1) + Tri(n - 3);\n            result.AddRange(new List<long>() { a,\
    \ b, Tri(n - 2) });\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajduw0wd.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpajduw0wd.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpajduw0wd.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpajduw0wd.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpajduw0wd.cs(36,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpajduw0wd.cs(37,54): error CS1950: The best overloaded Add method ''List<long>.Add(long)''
    for the collection initializer has some invalid arguments

    /tmp/tmpajduw0wd.cs(37,54): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      result.Add(1);\n        if (n == 2)\n            result.Add(3);\n     \
    \   if (n % 2 == 0)\n            result.Add(1 + n / 2);\n        else\n      \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdj1_6_0o.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7m67iqiy.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp7m67iqiy.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3L) return new List<long>();\n\
    \        var result = new List<long>();\n        var tri1 = Tri(n - 1L);\n   \
    \     var tri2 = Tri(n - 2L);\n        var tri3 = Tri(n - 3L);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        result.AddRange(tri3);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0274278715c4bb38124211b819d0038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0274278715c4bb38124211b819d0038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        result.Add(3);\n     \
    \   if (n % 2 == 0) result.Add(1 + n / 2);\n        else result.Add(Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1));\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsaaylee0.cs(30,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) {\n         \
    \   return new List<long>();\n        }\n        if (n == 1) {\n            return\
    \ new List<long>() { 1 };\n        }\n        if (n % 2 == 0) {\n            return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        }\n        else {\n         \
    \   return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n\
    \ - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n - 10) + Tri(n\
    \ - 11) + Tri(n - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15) + Tri(n - 16)\
    \ + Tri(n - 17) + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n - 21);\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5hub_jh6.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp5hub_jh6.cs(36,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        result.Add(Tri(n - 2) + Tri(n - 3)\
    \ + Tri(n - 4));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjjn7cp11.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjjn7cp11.cs(48,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjjn7cp11.cs(49,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1t77gyq5.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1t77gyq5.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 2L)\
    \ + Tri(n + 1L));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4bgqoyi1.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp4bgqoyi1.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1t77gyq5.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1t77gyq5.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n == 2) return\
    \ new List<long>() { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +\
    \ Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8)\
    \ + Tri(n - 9);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx1j08869.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpx1j08869.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long\
    \ sum = a;\n            foreach (long d in b)\n                sum += d;\n   \
    \         foreach (long e in c)\n                sum += e;\n            result.Add(sum);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n - 3);\n            long sum = a;\n       \
    \     foreach (long d in b)\n                sum += d;\n            foreach (long\
    \ e in c)\n                sum += e;\n            result.Add(sum);\n         \
    \   result.Add(sum);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu33ad8ea.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu33ad8ea.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu33ad8ea.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu33ad8ea.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpu33ad8ea.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpu33ad8ea.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu33ad8ea.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu33ad8ea.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu33ad8ea.cs(44,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpu33ad8ea.cs(46,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwlnf0kb.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpzwlnf0kb.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiszjtvi_.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpiszjtvi_.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        var result = new List<long>();\n        var firstTribonacciNumber = TribonacciNumber(n);\n\
    \        result.Add(firstTribonacciNumber);\n        var secondTribonacciNumber\
    \ = TribonacciNumber(n - firstTribonacciNumber);\n        result.Add(secondTribonacciNumber);\n\
    \        var thirdTribonacciNumber = TribonacciNumber(n - secondTribonacciNumber);\n\
    \        result.Add(thirdTribonacciNumber);\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfyh_0usd.cs(28,37): error CS0103: The name ''TribonacciNumber'' does not
    exist in the current context

    /tmp/tmpfyh_0usd.cs(30,38): error CS0103: The name ''TribonacciNumber'' does not
    exist in the current context

    /tmp/tmpfyh_0usd.cs(32,37): error CS0103: The name ''TribonacciNumber'' does not
    exist in the current context

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) return new List<long>(new\
    \ long[]{1L});\n        if (n == 2L) return new List<long>(new long[]{1L, 3L});\n\
    \        if (n % 2 == 1L) {\n            return new List<long>(new long[]{Tri(n\
    \ - 1L), Tri(n - 2L) + Tri(n - 1L)});\n        } else {\n            return new\
    \ List<long>(new long[]{Tri(n - 1L), Tri(n - 2L), Tri(n - 1L) + Tri(n - 2L) +\
    \ Tri(n - 1L)});\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp12mrm7e8.cs(29,59): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp12mrm7e8.cs(29,46): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp12mrm7e8.cs(31,72): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp12mrm7e8.cs(31,46): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp12mrm7e8.cs(31,59): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(2);\n        if (n % 2 == 0) {\n            long tri1\
    \ = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 =\
    \ Tri(n - 3);\n            long tri4 = Tri(n - 4);\n            long tri5 = Tri(n\
    \ - 5);\n            long tri6 = Tri(n - 6);\n            long tri7 = Tri(n -\
    \ 7);\n            long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n\
    \            long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n\
    \            long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n\
    \            long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n\
    \            long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n\
    \            long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n\
    \            long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplt16wvr7.cs(79,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmplt16wvr7.cs(92,2): error CS1513: } expected

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppm70es0k.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppm70es0k.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppm70es0k.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 3 };\n        long\
    \ a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = Tri(n - 3);\n\
    \        result.AddRange(a);\n        result.AddRange(b);\n        result.AddRange(c);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp64k27408.cs(30,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp64k27408.cs(31,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp64k27408.cs(32,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp64k27408.cs(33,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp64k27408.cs(34,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp64k27408.cs(35,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n\
    \            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n  \
    \          long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n    \
    \        long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n      \
    \      long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n        \
    \    long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n      \
    \      long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n    \
    \        long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n  \
    \          long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n\
    \            long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n\
    \            long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            long \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqfb3mgfg.cs(76,17): error CS1001: Identifier expected

    /tmp/tmpqfb3mgfg.cs(76,17): error CS1002: ; expected

    /tmp/tmpqfb3mgfg.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpqfb3mgfg.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 1L)\
    \ + Tri(n - 2L));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53yy08_6.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp53yy08_6.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)1L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5)\
    \ + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3olfre9t.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp3olfre9t.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0r5m60em.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0r5m60em.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0r5m60em.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n -\
    \ 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n +\
    \ 1L));\n            result.Add(Tri(n - 3L));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ltmaswa.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(41,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(42,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(44,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)4;\n   \
    \     long tri6 = (long)5;\n        long tri7 = (long)6;\n        long tri8 =\
    \ (long)7;\n        long tri9 = (long)8;\n        long tri10 = (long)9;\n    \
    \    long tri11 = (long)10;\n        long tri12 = (long)11;\n        long tri13\
    \ = (long)12;\n        long tri14 = (long)13;\n        long tri15 = (long)14;\n\
    \        long tri16 = (long)15;\n        long tri17 = (long)16;\n        long\
    \ tri18 = (long)17;\n        long tri19 = (long)18;\n        long tri20 = (long)19;\n\
    \        long tri21 = (long)20;\n        long tri22 = (long)21;\n        long\
    \ tri23 = (long)22;\n        long tri24 = (long)23;\n        long tri25 = (long)24;\n\
    \        long tri26 = (long)25;\n        long tri27 = (long)26;\n        long\
    \ tri28 = (long)27;\n        long tri29 = (long)28;\n        long tri30 = (long)29;\n\
    \        long tri31 = (long)30;\n        long tri32 = (long)31;\n        long\
    \ tri33 = (long)32;\n        long tri34 = (long)33;\n        long tri35 = (long)34;\n\
    \        long tri36 = (long)35;\n        long tri37 = (long)36;\n        long\
    \ tri38 = (long)37;\n        long tri39 = (long)38;\n        long tri40 = (long)39;\n\
    \        long tri41 = (long)40;\n        long tri42 = (long)41;\n        long\
    \ tri43 = (long)42;\n        long tri44 = (long)43;\n        long tri45 = (long)44;\n\
    \        long tri46 = (long)45;\n        long tri47 = (long)46;\n        long\
    \ tri48 = (long)47;\n        long tri49 = (long)48;\n        long tri50 = (long)49;\n\
    \        long tri51 = (long)50;\n        long tri52 = (long)51;\n        long\
    \ tri53 = (long)52;\n        long tri54 = (long)53;\n        long tri55 = (long)54;\n\
    \        long tri56 = (long)55;\n        long tri57 = (long)56;\n        long\
    \ tri58 = (long)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd6tk0y9w.cs(84,28): error CS1525: Invalid expression term ''}''

    /tmp/tmpd6tk0y9w.cs(84,28): error CS1002: ; expected

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 3 };\n        if (n %\
    \ 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n            long\
    \ d = Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new\
    \ List<long>() { a, b, c, d });\n        } else {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new\
    \ List<long>() { a, b, a });\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw_suxpxe.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpw_suxpxe.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpw_suxpxe.cs(33,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpw_suxpxe.cs(34,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpw_suxpxe.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpw_suxpxe.cs(38,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwjmswfo2.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpwjmswfo2.cs(39,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L));\n\
    \            result.Add(Tri(n - 2L));\n            result.Add(Tri(n + 1L));\n\
    \        } else {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n\
    \ - 2L));\n            result.Add(Tri(n + 1L));\n            result.Add(Tri(n\
    \ - 3L));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp39rjdbty.cs(32,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39rjdbty.cs(33,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39rjdbty.cs(34,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39rjdbty.cs(36,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39rjdbty.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39rjdbty.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39rjdbty.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprqmvz5c0.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprqmvz5c0.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctfqdbug.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpctfqdbug.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6zlfiyi.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpz6zlfiyi.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n            return result;\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n\
    \            result.Add(Tri(n + 1L));\n            result.Add(Tri(n - 1L));\n\
    \            result.Add(Tri(n - 2L));\n            result.Add(Tri(n + 1L));\n\
    \            return result;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpczvnxhr1.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczvnxhr1.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczvnxhr1.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczvnxhr1.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczvnxhr1.cs(44,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczvnxhr1.cs(45,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczvnxhr1.cs(46,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczvnxhr1.cs(47,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpczvnxhr1.cs(48,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3L) return new List<long>();\n\
    \        var result = new List<long>();\n        var tri = new long[] {1L, 3L,\
    \ 2L};\n        var tri2 = new long[] {1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L,\
    \ 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L,\
    \ 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L,\
    \ 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L,\
    \ 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L,\
    \ 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L,\
    \ 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L,\
    \ 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L,\
    \ 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_f8bkia0.cs(30,6): error CS1002: ; expected

    /tmp/tmp_f8bkia0.cs(31,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_f8bkia0.cs(44,2): error CS1513: } expected

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n -\
    \ 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n +\
    \ 1L));\n            result.Add(Tri(n - 3L));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ltmaswa.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(41,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(42,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ltmaswa.cs(44,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv1xa950x.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpv1xa950x.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwgaofmg_.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpwgaofmg_.cs(40,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwgaofmg_.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = tri1 + tri1;\n        long\
    \ tri3 = tri2 + tri2;\n        long tri4 = tri3 + tri3;\n        long tri5 = tri4\
    \ + tri4;\n        long tri6 = tri5 + tri5;\n        long tri7 = tri6 + tri6;\n\
    \        long tri8 = tri7 + tri7;\n        long tri9 = tri8 + tri8;\n        long\
    \ tri10 = tri9 + tri9;\n        long tri11 = tri10 + tri10;\n        long tri12\
    \ = tri11 + tri11;\n        long tri13 = tri12 + tri12;\n        long tri14 =\
    \ tri13 + tri13;\n        long tri15 = tri14 + tri14;\n        long tri16 = tri15\
    \ + tri15;\n        long tri17 = tri16 + tri16;\n        long tri18 = tri17 +\
    \ tri17;\n        long tri19 = tri18 + tri18;\n        long tri20 = tri19 + tri19;\n\
    \        long tri21 = tri20 + tri20;\n        long tri22 = tri21 + tri21;\n  \
    \      long tri23 = tri22 + tri22;\n        long tri24 = tri23 + tri23;\n    \
    \    long tri25 = tri24 + tri24;\n        long tri26 = tri25 + tri25;\n      \
    \  long tri27 = tri26 + tri26;\n        long tri28 = tri27 + tri27;\n        long\
    \ tri29 = tri28 + tri28;\n        long tri30 = tri29 + tri29;\n        long tri31\
    \ = tri30 + tri30;\n        long tri32 = tri31 + tri31;\n        long tri33 =\
    \ tri32 + tri32;\n        long tri34 = tri33 + tri33;\n        long tri35 = tri34\
    \ + tri34;\n        long tri36 = tri35 + tri35;\n        long tri37 = tri36 +\
    \ tri36;\n        long tri38 = tri37 + tri37;\n        long tri39 = tri38 + tri38;\n\
    \        long tri40 = tri39 + tri39;\n        long tri41 = tri40 + tri40;\n  \
    \      long tri42 = tri41 + tri41;\n        long tri43 = tri42 + tri42;\n    \
    \    long tri44 = tri43 + tri43;\n        long tri45 = tri44 + tri44;\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7okhl97q.cs(25,30): error CS0161: ''Problem.Tri(long)'': not all code
    paths return a value

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0)\n           \
    \ return new List<long>();\n        if (n == 1)\n            return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0)\n            return new List<long>(new\
    \ long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n + 1)});\n        else\n       \
    \     return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3)});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsy54tjt7.cs(31,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsy54tjt7.cs(33,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n\
    \ - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n - 10) + Tri(n - 11) + Tri(n - 12) + Tri(n\
    \ - 13) + Tri(n - 14) + Tri(n - 15) + Tri(n - 16) + Tri(n - 17) + Tri(n - 18)\
    \ + Tri(n - 19) + Tri(n - 20) + Tri(n - 21);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp74q15kgu.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp74q15kgu.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n + 2) + Tri(n\
    \ + 3));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx6j6m0n_.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpx6j6m0n_.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long\
    \ sum = a;\n            foreach (long d in b)\n                sum += d;\n   \
    \         foreach (long e in c)\n                sum += e;\n            result.Add(sum);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long sum = a;\n\
    \            foreach (long d in b)\n                sum += d;\n            foreach\
    \ (long e in c)\n                sum += e;\n            result.Add(sum);\n   \
    \         long d = Tri(n - 4);\n            long e = Tri(n - 5);\n           \
    \ long f = Tri(n - 6);\n            long sum = d; \n            foreach (long\
    \ g in e)\n                sum += g;\n            foreach (long h in f)\n    \
    \            sum += h;\n            result.Add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphdhj3z0i.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphdhj3z0i.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphdhj3z0i.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphdhj3z0i.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmphdhj3z0i.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmphdhj3z0i.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphdhj3z0i.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphdhj3z0i.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphdhj3z0i.cs(45,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmphdhj3z0i.cs(45,27): error CS0136: A local or parameter named ''d'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmphdhj3z0i.cs(47,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmphdhj3z0i.cs(47,27): error CS0136: A local or parameter named ''e'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmphdhj3z0i.cs(50,22): error CS0029: Cannot implicitly conve'
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n  \
    \      result.Add((long)tri3);\n        result.Add((long)tri1 + tri2 + tri3);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3gltjlc3.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3gltjlc3.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3gltjlc3.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4df5_rpv.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp4df5_rpv.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in new long[] { a, b, c }) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in new long[] { a, b, c, d }) {\n\
    \                result.Add(item);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplpf11f0n.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplpf11f0n.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplpf11f0n.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplpf11f0n.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplpf11f0n.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplpf11f0n.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplpf11f0n.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) {\n        \
    \    return new List<long>(new long[]{1L});\n        }\n        if (n == 2L) {\n\
    \            return new List<long>(new long[]{3L});\n        }\n        if (n\
    \ % 2 == 0) {\n            long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n\
    \ - 2L);\n            long tri3 = Tri(n + 1L);\n            return new List<long>(new\
    \ long[]{tri1, tri2, tri3});\n        }\n        long tri1 = Tri(n - 1L);\n  \
    \      long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n + 1L);\n        long\
    \ tri4 = Tri(n - 3L);\n        return new List<long>(new long[]{tri1, tri2, tri3,\
    \ tri4});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzie2bnvo.cs(33,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzie2bnvo.cs(33,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzie2bnvo.cs(34,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzie2bnvo.cs(34,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzie2bnvo.cs(35,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzie2bnvo.cs(35,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzie2bnvo.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzie2bnvo.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzie2bnvo.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzie2bnvo.cs(41,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) {\n            long\
    \ tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            result.Add(tri);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptzx18qcs.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = tri1 + tri2;\n        long tri4 = tri3;\n        long tri5 = tri4;\n     \
    \   long tri6 = tri5;\n        long tri7 = tri6;\n        long tri8 = tri7;\n\
    \        long tri9 = tri8;\n        long tri10 = tri9;\n        long tri11 = tri10;\n\
    \        long tri12 = tri11;\n        long tri13 = tri12;\n        long tri14\
    \ = tri13;\n        long tri15 = tri14;\n        long tri16 = tri15;\n       \
    \ long tri17 = tri16;\n        long tri18 = tri17;\n        long tri19 = tri18;\n\
    \        long tri20 = tri19;\n        long tri21 = tri20;\n        long tri22\
    \ = tri21;\n        long tri23 = tri22;\n        long tri24 = tri23;\n       \
    \ long tri25 = tri24;\n        long tri26 = tri25;\n        long tri27 = tri26;\n\
    \        long tri28 = tri27;\n        long tri29 = tri28;\n        long tri30\
    \ = tri29;\n        long tri31 = tri30;\n        long tri32 = tri31;\n       \
    \ long tri33 = tri32;\n        long tri34 = tri33;\n        long tri35 = tri34;\n\
    \        long tri36 = tri35;\n        long tri37 = tri36;\n        long tri38\
    \ = tri37;\n        long tri39 = tri38;\n        long tri40 = tri39;\n       \
    \ long tri41 = tri40;\n        long tri42 = tri41;\n        long tri43 = tri42;\n\
    \        long tri44 = tri43;\n        long tri45 = tri44;\n        long tri46\
    \ = tri45;\n        long tri47 = tri46;\n        long tri48 = tri47;\n       \
    \ long tri49 = tri48;\n        long tri50 = tri49;\n        long tri51 = tri50;\n\
    \        long tri52 = tri51;\n        long tri53 = tri52;\n        long tri54\
    \ = tri53;\n        long tri55 = tri54;\n        long tri56 = tri55;\n       \
    \ long tri57 = tri56;\n        long tri58 = tri57;\n        long tri59 = tri58;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rt45636.cs(25,30): error CS0161: ''Problem.Tri(long)'': not all code
    paths return a value

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1za2yxu2.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1za2yxu2.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = Tri(n - 3);\n\
    \        result.Add(a[0] + b[1] + c[2]);\n        result.Add(a[1] + b[2] + c[0]);\n\
    \        result.Add(a[2] + b[0] + c[1]);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgxyc8drs.cs(43,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgxyc8drs.cs(44,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgxyc8drs.cs(45,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgxyc8drs.cs(46,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgxyc8drs.cs(46,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgxyc8drs.cs(46,34): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgxyc8drs.cs(47,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgxyc8drs.cs(47,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgxyc8drs.cs(47,34): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgxyc8drs.cs(48,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgxyc8drs.cs(48,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpgxyc8drs.cs(48,34): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n\
    \            long b = Tri(n - 1);\n            long c = Tri(n - 2);\n        \
    \    long d = a + b + c;\n            result.AddRange(a);\n            result.AddRange(b);\n\
    \            result.AddRange(c);\n            result.Add(d);\n        }\n    \
    \    else {\n            long a = Tri(n / 2);\n            long b = Tri(n - 1);\n\
    \            long c = Tri(n - 2);\n            long d = a + b + c;\n         \
    \   result.AddRange(a);\n            result.AddRange(b);\n            result.AddRange(c);\n\
    \            result.Add(d);\n            result.AddRange(Tri(n / 2 + 1));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd2dzx8se.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd2dzx8se.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd2dzx8se.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd2dzx8se.cs(34,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpd2dzx8se.cs(35,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpd2dzx8se.cs(36,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpd2dzx8se.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd2dzx8se.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd2dzx8se.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd2dzx8se.cs(44,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpd2dzx8se.cs(45,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpd2dzx8se.cs(46,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri1(n);\n        long tri2 = Tri2(n);\n        long tri3\
    \ = Tri3(n);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjs29ybsq.cs(27,21): error CS0103: The name ''Tri1'' does not exist in
    the current context

    /tmp/tmpjs29ybsq.cs(28,21): error CS0103: The name ''Tri2'' does not exist in
    the current context

    /tmp/tmpjs29ybsq.cs(29,21): error CS0103: The name ''Tri3'' does not exist in
    the current context

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv1xa950x.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpv1xa950x.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n -\
    \ 1) + Tri(n - 2)});\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcn8_gfqi.cs(28,58): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcn8_gfqi.cs(29,47): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n\
    \ - 6));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf4_mf9hv.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpf4_mf9hv.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) {\n         \
    \   return new List<long>();\n        }\n        if (n == 1) {\n            return\
    \ new List<long>() { 1 };\n        }\n        if (n % 2 == 0) {\n            return\
    \ new List<long>() { Tri(n - 1) + Tri(n - 2) };\n        }\n        else {\n \
    \           return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmxw721w4.cs(33,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpmxw721w4.cs(36,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzr616nz4.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzr616nz4.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzr616nz4.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5)\
    \ + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n - 10) + Tri(n -\
    \ 11) + Tri(n - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15) + Tri(n - 16) +\
    \ Tri(n - 17) + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n - 21);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpymlh1hiu.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpymlh1hiu.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 1L)\
    \ + Tri(n - 2L));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53yy08_6.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp53yy08_6.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        if (n % 2 == 0) return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) };\n        else return new List<long>() { Tri(n - 1) + Tri(n - 2) };\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt7g2dtgx.cs(27,51): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpt7g2dtgx.cs(28,40): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5a99jvvc.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp5a99jvvc.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n \
    \           result.Add(a + b);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp49h_jml2.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp49h_jml2.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp49h_jml2.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp49h_jml2.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(2);\n        if (n % 2 == 0) {\n            long tri1\
    \ = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 =\
    \ Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n\
    \        }\n        else {\n            long tri1 = Tri(n - 1);\n            long\
    \ tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4\
    \ = tri1 + tri2 + tri3;\n            result.Add(tri4);\n            result.Add(tri3);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdhofrzvy.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdhofrzvy.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdhofrzvy.cs(33,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdhofrzvy.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdhofrzvy.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdhofrzvy.cs(40,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6zlfiyi.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpz6zlfiyi.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwlnf0kb.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpzwlnf0kb.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        if (n == 1)\n      \
    \      result.Add(1);\n        if (n == 2)\n            result.Add(3);\n     \
    \   if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2\
    \ = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            result.AddRange(tri1,\
    \ tri2, tri3);\n        } else {\n            long tri1 = Tri(n - 1);\n      \
    \      long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n        \
    \    result.AddRange(tri1, tri2, tri3, tri1 + tri2 + tri3);\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_xttbla.cs(34,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu_xttbla.cs(35,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu_xttbla.cs(36,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu_xttbla.cs(37,20): error CS1501: No overload for method ''AddRange''
    takes 3 arguments

    /tmp/tmpu_xttbla.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu_xttbla.cs(40,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu_xttbla.cs(41,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu_xttbla.cs(42,20): error CS1501: No overload for method ''AddRange''
    takes 4 arguments

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpri1t7uvz.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpri1t7uvz.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpje334z1_.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpje334z1_.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2qh659s.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpu2qh659s.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      result.Add(3);\n        else if (n % 2 == 0)\n            result.Add(1\
    \ + n / 2);\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqsmwcj9h.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long\
    \ tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n\
    \ - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n  \
    \      long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long\
    \ tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14\
    \ = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n\
    \ - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n\
    \        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n      \
    \  long tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long\
    \ tri23 = Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25\
    \ = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n\
    \ - 27);\n        long tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n\
    \        long tri30 = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n      \
    \  long tri32 = Tri(n - 32);\n        long tri33 = Tri(n - 33);\n        long\
    \ tri34 = Tri(n - 34);\n        long tri35 = Tri(n - 35);\n        long tri36\
    \ = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long tri38 = Tri(n\
    \ - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n\
    \        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n      \
    \  long tri43 = Tri(n - 43);\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbb3ibu46.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(46,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(47,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(48,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(49,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(50,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(51,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(52,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(53,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(54,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(55,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(56,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(57,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(58,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbb3ibu46.cs(59,22): error CS0029: Cannot implicitly convert type ''Sy'
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1za2yxu2.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1za2yxu2.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1L);\n   \
    \     long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n - 3L);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkh2k2f63.cs(36,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkh2k2f63.cs(37,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkh2k2f63.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2L == 0L) {\n        \
    \    result.Add(1L);\n            result.Add(Tri(n - 1L) + Tri(n - 2L) + Tri(n\
    \ + 1L));\n        }\n        else {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n            result.Add(Tri(n + 1L));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbjw92nur.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbjw92nur.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbjw92nur.cs(42,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmhqk4hf3.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpmhqk4hf3.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n + 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbm_xgu2e.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbm_xgu2e.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctfqdbug.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpctfqdbug.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) return new List<long>(new\
    \ long[]{1L});\n        if (n == 2L) return new List<long>(new long[]{3L});\n\
    \        if (n % 2 == 0L) return new List<long>(new long[]{(long)Tri(n - 1L) +\
    \ Tri(n - 2L) + Tri(n + 1L)});\n        return new List<long>(new long[]{(long)Tri(n\
    \ - 1L) + Tri(n - 2L), Tri(n - 2L) + Tri(n + 1L)});\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpouju0hi5.cs(28,59): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpouju0hi5.cs(29,42): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpouju0hi5.cs(29,75): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkh021iol.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkh021iol.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkh021iol.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0)\n           \
    \ return new List<long>();\n        if (n == 1)\n            return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0)\n            return new List<long>(new\
    \ long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n + 1)});\n        else\n       \
    \     return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3)});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsy54tjt7.cs(31,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsy54tjt7.cs(33,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppm70es0k.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppm70es0k.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppm70es0k.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n    \
    \    } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmputn3rj4h.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmputn3rj4h.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmputn3rj4h.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpri1t7uvz.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpri1t7uvz.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n == 2) return new List<long>() { (long)3 };\n   \
    \     if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else\
    \ return Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1) + Tri(n + 2) + Tri(n\
    \ + 3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4qhfqxkg.cs(30,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp4qhfqxkg.cs(31,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n    \
    \        long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long\
    \ sum = a + b + c;\n            result.Add(sum);\n            return result;\n\
    \        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n     \
    \   long c = Tri(n + 1);\n        long sum = a + b + c;\n        result.Add(sum);\n\
    \        result.Add(sum);\n        result.Add(sum);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph570d5gd.cs(45,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmph570d5gd.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph570d5gd.cs(46,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmph570d5gd.cs(46,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph570d5gd.cs(47,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmph570d5gd.cs(47,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph570d5gd.cs(48,18): error CS0136: A local or parameter named ''sum'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmph570d5gd.cs(52,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph570d5gd.cs(53,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph570d5gd.cs(54,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppm70es0k.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppm70es0k.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppm70es0k.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjbkrjz3g.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjbkrjz3g.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       result.AddRange(tri1);\n            result.AddRange(tri2);\n         \
    \   result.AddRange(tri3);\n        } else {\n            long tri1 = Tri(n -\
    \ 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n\
    \            result.AddRange(tri1);\n            result.AddRange(tri2);\n    \
    \        result.AddRange(tri3);\n            result.AddRange(tri1);\n        \
    \    result.AddRange(tri2);\n            result.AddRange(tri3);\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppurg797t.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(33,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(34,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(35,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppurg797t.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(41,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(42,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(43,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(44,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmppurg797t.cs(45,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add((tri1 + tri2 + tri3));\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppr4buhe2.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppr4buhe2.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppr4buhe2.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) return new List<long>(new\
    \ long[]{1L});\n        if (n == 2L) return new List<long>(new long[]{1L, 3L});\n\
    \        if (n % 2 == 0L) {\n            return Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n\
    \ + 1L)).ToList();\n        } else {\n            return Tri(n - 1L).Concat(Tri(n\
    \ - 2L)).Concat(Tri(n + 1L)).Concat(Tri(n - 3L)).ToList();\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659794638
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      result.Add(3);\n        else if (n % 2 == 0)\n            result.Add(1\
    \ + n / 2);\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqsmwcj9h.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 2;\n        long c = 1;\n        long d\
    \ = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n      \
    \  long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n\
    \        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o\
    \ = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n\
    \        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z\
    \ = 1;\n        long a = 1;\n        long b = 2;\n        long c = 1;\n      \
    \  long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n\
    \        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k\
    \ = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n      \
    \  long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v\
    \ = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n      \
    \  long z = 1;\n        long a = 1;\n        long b = 2;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long a = 1;\n        long b = 2;\n        long c\
    \ = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n      \
    \  long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvnr_gru2.cs(127,13): error CS1001: Identifier expected

    /tmp/tmpvnr_gru2.cs(127,13): error CS1002: ; expected

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n          \
    \  result.AddRange(tri1);\n            result.AddRange(tri2);\n            result.Add(tri1.Sum()\
    \ + tri2.Sum());\n            return result;\n        }\n        long tri1 = Tri(n\
    \ - 1L);\n        long tri2 = Tri(n - 2L);\n        result.AddRange(tri1);\n \
    \       result.AddRange(tri2);\n        result.Add(tri1.Sum() + tri2.Sum());\n\
    \        result.Add(tri1.Sum() + tri2.Sum() + tri1.Sum());\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvan1m94q.cs(37,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpvan1m94q.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvan1m94q.cs(38,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpvan1m94q.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvan1m94q.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpvan1m94q.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpvan1m94q.cs(41,24): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpvan1m94q.cs(41,37): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpvan1m94q.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvan1m94q.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvan1m94q.cs(46,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpvan1m94q.cs(47,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpvan1m94q.cs(48,20): error CS1929: ''long'' does not contain a defin'
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuhqape4t.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpuhqape4t.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl6eiezcm.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpl6eiezcm.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        } else {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1);\n     \
    \   }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3hhues4u.cs(29,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp3hhues4u.cs(31,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpri1t7uvz.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpri1t7uvz.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        else\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n\
    \ - 6));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf4yuykbn.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpf4yuykbn.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +\
    \ Tri(n - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n + 2) + Tri(n + 3));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygeqfaxz.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpygeqfaxz.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 1L)\
    \ + Tri(n + 1L));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw8q4kbfh.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpw8q4kbfh.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n \
    \           long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n   \
    \         result.AddRange(tri1);\n            result.AddRange(tri2);\n       \
    \     result.AddRange(tri3);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzz1ovsfl.cs(45,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzz1ovsfl.cs(45,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzz1ovsfl.cs(46,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzz1ovsfl.cs(46,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzz1ovsfl.cs(47,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzz1ovsfl.cs(48,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpzz1ovsfl.cs(49,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpzz1ovsfl.cs(50,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpzz1ovsfl.cs(53,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzz1ovsfl.cs(54,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzz1ovsfl.cs(55,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpzz1ovsfl.cs(56,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n  \
    \      long tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long\
    \ tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n\
    \ - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n\
    \        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n      \
    \  long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long\
    \ tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19\
    \ = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n\
    \ - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n\
    \        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n      \
    \  long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long\
    \ tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30\
    \ = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n\
    \ - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n\
    \        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n      \
    \  long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long\
    \ tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41\
    \ = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n\
    \ - 43);\n        long tri44 = \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpos74rb19.cs(86,21): error CS1525: Invalid expression term ''}''

    /tmp/tmpos74rb19.cs(86,21): error CS1002: ; expected

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            result.Add(Tri(n - 2) + Tri(n + 1));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n + 1));\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp80xp0wux.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp80xp0wux.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp80xp0wux.cs(33,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp80xp0wux.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp80xp0wux.cs(35,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) {\n         \
    \   return new List<long>(new long[] { 1L, 3L, 2L, 8L });\n        }\n       \
    \ if (n == 1) {\n            return new List<long>(new long[] { 3L });\n     \
    \   }\n        if (n % 2 == 0) {\n            return new List<long>(new long[]\
    \ { Tri(n - 1) + Tri(n - 2) + Tri(n + 1) });\n        }\n        return new List<long>(new\
    \ long[] { Tri(n - 1) + Tri(n - 2) + Tri(n - 3) });\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0g7ge63n.cs(33,48): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0g7ge63n.cs(35,44): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long tri1 = Tri(n - 1);\n\
    \        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add((long)tri1);\n\
    \        result.Add((long)tri2);\n        result.Add((long)tri3);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqpe2jao2.cs(28,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqpe2jao2.cs(29,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqpe2jao2.cs(30,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            foreach (long x in a) result.Add(x);\n            foreach\
    \ (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2) + Tri(n - 1) + Tri(n - 3);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6hlm2o.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4i6hlm2o.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4i6hlm2o.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp4i6hlm2o.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4i6hlm2o.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4i6hlm2o.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4i6hlm2o.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4i6hlm2o.cs(38,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp4i6hlm2o.cs(39,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4i6hlm2o.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzr616nz4.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzr616nz4.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzr616nz4.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            long d = Tri(n - 3);\n            foreach (long x in d) result.Add(x);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_wvc714.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpd_wvc714.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_wvc714.cs(43,22): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq2cu7ewc.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpq2cu7ewc.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpq2cu7ewc.cs(33,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvfvp6s0d.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvfvp6s0d.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n\
    \ - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n - 10) + Tri(n\
    \ - 11) + Tri(n - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15) + Tri(n - 16)\
    \ + Tri(n - 17) + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n - 21);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgle0d2hx.cs(27,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgle0d2hx.cs(28,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppm70es0k.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppm70es0k.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppm70es0k.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmppm70es0k.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n == 2) return new List<long>() { (long)1, (long)2\
    \ };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n       \
    \     long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n         \
    \   long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n           \
    \ long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n            long\
    \ tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n            long tri10\
    \ = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n            long tri12\
    \ = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n            long tri14\
    \ = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n            long tri16\
    \ = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n            long tri18\
    \ = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n            long tri20\
    \ = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n            long tri22\
    \ = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n            long tri24\
    \ = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n            long tri26\
    \ = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n            long tri28\
    \ = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n            long tri30\
    \ = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n            long tri32\
    \ = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n            long tri34\
    \ = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n            long tri36\
    \ = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n            long tri38\
    \ = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n            long tri40\
    \ = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n            long tri42\
    \ = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n            long tri44\
    \ = Tri(n - 44);\n            long tri45 = Tri(\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3s58zjy7.cs(75,30): error CS1026: ) expected

    /tmp/tmp3s58zjy7.cs(75,30): error CS1002: ; expected

    /tmp/tmp3s58zjy7.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3s58zjy7.cs(90,2): error CS1513: } expected

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else\n            result.Add(Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n - 3));\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwpz9n86a.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n \
    \           result.Add(a + b);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp49h_jml2.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp49h_jml2.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp49h_jml2.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp49h_jml2.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794632
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1) + Tri(n));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n));\n            result.Add(Tri(n + 1) + Tri(n - 2));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo2p1kcov.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpo2p1kcov.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpo2p1kcov.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpo2p1kcov.cs(48,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) {\n          \
    \  return new List<long>();\n        }\n        if (n % 2 == 0) {\n          \
    \  return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };\n       \
    \ } else {\n            return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ - 3) };\n        }\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpda4adrq1.cs(30,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpda4adrq1.cs(32,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in new long[] { a, b, c }) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in new long[] { a, b, c }) {\n                result.Add(item);\n\
    \            }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzmwd40yo.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzmwd40yo.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzmwd40yo.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzmwd40yo.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzmwd40yo.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzmwd40yo.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzmwd40yo.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794633
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        var result = new List<long>();\n        var tri1 = Tri(n - 1);\n    \
    \    var tri2 = Tri(n - 2);\n        var tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        result.AddRange(tri3);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72c805fc3b634e259d1be6001b7bde18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72c805fc3b634e259d1be6001b7bde18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794633
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprvtqntbc.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprvtqntbc.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        else\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n\
    \ - 6));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf4yuykbn.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpf4yuykbn.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794633
