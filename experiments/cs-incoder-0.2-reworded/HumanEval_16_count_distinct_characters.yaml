name: HumanEval_16_count_distinct_characters
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n\
  \    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n   \
  \ public static long CountDistinctCharacters(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
  \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
  \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
  aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY\
  \ JeRRRY\")) == (5L));\n    }\n\n}\n"
completions: ["        long distinctCharacters = 0;\n        foreach (char c in str)\
    \ {\n            distinctCharacters += (c >= 'A' && c <= 'Z') ? 1 : 0;\n     \
    \   }\n        return distinctCharacters;", "        long count = 0;\n       \
    \ foreach (char c in str) {\n            count += 1;\n        }\n        return\
    \ count;", "        long distinctCharacters = 0;\n        foreach (char c in str)\
    \ {\n            distinctCharacters += (long)Char.GetNumericValue(c);\n      \
    \  }\n        return distinctCharacters;", "        long distinctCharacters =\
    \ 0;\n        foreach (char c in str) {\n            distinctCharacters += (c\
    \ >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : 0;\n        }\n   \
    \     return distinctCharacters;", "        long result = 0;\n        foreach\
    \ (char c in str) {\n            result += Math.Pow(26, (str.Length - 1 - c));\n\
    \        }\n        return result;", "        long distinctCharacters = 0;\n \
    \       foreach (char c in str) {\n            distinctCharacters += (c >= 'A'\
    \ && c <= 'Z') ? 1 : 0;\n        }\n        return distinctCharacters;", "   \
    \     long count = 0;\n        foreach (char c in str) {\n            count +=\
    \ (int)Char.GetNumericValue(c);\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (char c in str) {\n            count += 1;\n   \
    \     }\n        return count;", "        long count = 0;\n        foreach (char\
    \ c in str) {\n            count += 1;\n        }\n        return count;", " \
    \       long count = 0;\n        foreach (char c in str) {\n            count\
    \ += 1;\n        }\n        return count;", "        long result = 0;\n      \
    \  foreach (char c in str) {\n            result += (int)c;\n        }\n     \
    \   return result;", "        long count = 0;\n        foreach (char c in str)\
    \ {\n            count += 1;\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (char c in str) {\n            count += str.Count(x\
    \ => x == c);\n        }\n        return count;", "        long distinctCharCount\
    \ = 0;\n        foreach (char c in str) {\n            distinctCharCount += 1;\n\
    \        }\n        return distinctCharCount;", "        long count = 0;\n   \
    \     foreach (char c in str) {\n            count += 1;\n        }\n        return\
    \ count;", "        long distinctCharCount = 0;\n        foreach (char c in str)\
    \ {\n            distinctCharCount += (int)Char.GetNumericValue(c);\n        }\n\
    \        return distinctCharCount;", "        long distinctCharacters = 0;\n \
    \       foreach (char c in str) {\n            distinctCharacters += (c >= 'A'\
    \ && c <= 'Z') ? 1 : 0;\n        }\n        return distinctCharacters;", "   \
    \     long distinctCharacters = 0;\n        foreach (char c in str) {\n      \
    \      distinctCharacters += (c >= 'A' && c <= 'Z') ? 1 : 0;\n        }\n    \
    \    return distinctCharacters;", "        long count = 0;\n        foreach (char\
    \ c in str)\n            count += Char.IsUpper(c) ? 1 : 0;\n        return count;",
  "        long result = 0;\n        foreach (char c in str) {\n            result\
    \ += str.Count(x => x == c);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
