name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n    // >>> LargestPrimeFactor((2048L))\n\
  \    // (2L)\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long maxFactor = n;\n        long factor = 2;\n        while\
    \ (factor < maxFactor) {\n            if (n % factor == 0) {\n               \
    \ maxFactor = factor;\n            }\n            factor++;\n        }\n     \
    \   return maxFactor;", "        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactor = 1;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactor", "        long maxFactor = n;\n     \
    \   long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePri", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long largestPrimeFactor = n;\n \
    \       long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 2;\n        long largestPrimeFactorFactorFactorFactor = 3;\n        long largestPrimeFactorFactorFactorFactorFactor\
    \ = 4;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n \
    \       long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 6;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 7;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 8;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 9;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactor", "        long maxFactor = n;\n    \
    \    long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 1;\n   \
    \     long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n        long\
    \ maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime =\
    \ 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 19;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 20;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 21;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 24;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 25;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 26;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 27;\n        long maxFactorPrime",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long maxFactorPrime = 2;\n        while (n > 1) {\n            long factor\
    \ = 2;\n            while (factor < maxFactorPrime) {\n                if (n %\
    \ factor == 0) {\n                    maxFactor = n;\n                    break;\n\
    \                }\n                factor++;\n            }\n            maxFactorPrime\
    \ = factor;\n            n--;\n        }\n        return maxFactor;", "      \
    \  long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < largestPrimeFactor) {\n            while (n % factor == 0) {\n           \
    \     largestPrimeFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return largestPrimeFactor;", "        long maxFactor = n;\n \
    \       long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long maxFactorPrime = 1;\n\
    \        long currentFactor = 2;\n        long currentFactorPrime = 2;\n     \
    \   while (currentFactorPrime <= n) {\n            if (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            else\
    \ {\n                currentFactorPrime = 2;\n            }\n            currentFactor++;\n\
    \            if (currentFactor > maxFactor) {\n                maxFactor = currentFactor;\n\
    \                maxFactorPrime = currentFactorPrime;\n            }\n       \
    \ }\n        return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 2;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                long primeFactor = factor;\n\
    \                while (n % primeFactor == 0) {\n                    n /= primeFactor;\n\
    \                    maxFactorPrime = primeFactor;\n                }\n      \
    \      }\n            factor++;\n        }\n        return maxFactorPrime;", " \
    \       long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            if (n % factor == 0) {\n \
    \               maxFactor = n / factor;\n            } else {\n              \
    \  factor++;\n            }\n        }\n        return maxFactor;", "        long\
    \ maxFactor = 0;\n        long factor = 2;\n        while (factor <= n / 2) {\n\
    \            if (n % factor == 0) {\n                maxFactor = factor;\n   \
    \             break;\n            }\n            factor++;\n        }\n      \
    \  return maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 2;\n        long factor = 3;\n        while (factor <= maxFactor) {\n    \
    \        long factorPrime = 2;\n            while (factorPrime * factor <= maxFactor)\
    \ {\n                if (n % factor == 0) {\n                    maxFactorPrime\
    \ = factorPrime;\n                    break;\n                }\n            \
    \    factorPrime++;\n            }\n            factor++;\n        }\n       \
    \ return maxFactorPrime;", "        long maxFactor = 1;\n        long maxFactorPrime\
    \ = 2;\n        long factor = 3;\n        while (factor <= n / 2) {\n        \
    \    if (n % factor == 0) {\n                long factorPrime = 2;\n         \
    \       while (factorPrime <= factor / 2) {\n                    if (n % factorPrime\
    \ == 0) {\n                        break;\n                    }\n           \
    \         factorPrime++;\n                }\n                if (factorPrime >\
    \ maxFactorPrime) {\n                    maxFactorPrime = factorPrime;\n     \
    \               maxFactor = factor;\n                }\n            }\n      \
    \      factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            if (n % factor == 0) {\n \
    \               maxFactor = n / factor;\n            } else {\n              \
    \  factor++;\n            }\n        }\n        return maxFactor;", "        long\
    \ largestPrimeFactor = n;\n        long largestPrimeFactorFactor = 1;\n      \
    \  long largestPrimeFactorFactor2 = 1;\n        long largestPrimeFactorFactor3\
    \ = 1;\n        long largestPrimeFactorFactor4 = 1;\n        long largestPrimeFactorFactor5\
    \ = 1;\n        long largestPrimeFactorFactor6 = 1;\n        long largestPrimeFactorFactor7\
    \ = 1;\n        long largestPrimeFactorFactor8 = 1;\n        long largestPrimeFactorFactor9\
    \ = 1;\n        long largestPrimeFactorFactor10 = 1;\n        long largestPrimeFactorFactor11\
    \ = 1;\n        long largestPrimeFactorFactor12 = 1;\n        long largestPrimeFactorFactor13\
    \ = 1;\n        long largestPrimeFactorFactor14 = 1;\n        long largestPrimeFactorFactor15\
    \ = 1;\n        long largestPrimeFactorFactor16 = 1;\n        long largestPrimeFactorFactor17\
    \ = 1;\n        long largestPrimeFactorFactor18 = 1;\n        long largestPrimeFactorFactor19\
    \ = 1;\n        long largestPrimeFactorFactor20 = 1;\n        long largestPrimeFactorFactor21\
    \ = 1;\n        long largestPrimeFactorFactor22 = 1;\n        long largestPrimeFactorFactor23\
    \ = 1;\n        long largestPrimeFactorFactor24 = 1;\n        long largestPrimeFactorFactor25\
    \ = 1;\n        long largestPrimeFactorFactor26 = 1;\n        long largestPrimeFactorFactor27\
    \ = 1;\n        long largestPrimeFactorFactor28 = 1;\n        long largestPrimeFactorFactor29\
    \ = 1;\n        long largestPrimeFactorFactor30 = 1;\n        long largestPrimeFactorFactor31\
    \ = 1;\n        long largestPrimeFactorFactor32 = 1;\n        long largestPrimeFactorFactor33\
    \ = 1;\n        long largestPrimeFactorFactor34 = 1;\n        long largestPrimeFactorFactor35\
    \ = 1;\n        long largestPrimeFactorFactor36 = 1;\n        long largestPrimeFactorFactor37\
    \ = 1;\n        long largestPrimeFactorFactor38 = 1;\n        long largestPrimeFactorFactor39\
    \ = 1;\n        long largestPrimeFactorFactor40 = 1;\n        long largestPrimeFactorFactor41\
    \ = 1;\n        long largestPrimeFactorFactor42 = 1;\n        long largestPrimeFactorFactor43\
    \ = 1;\n        long largestPrimeFactorFactor44 = 1;\n        long largestPrimeFactorFactor45\
    \ = 1;\n        long largestPrimeFactorFactor", "        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor <= n / 2) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long maxPrime\
    \ = 2;\n        long maxFactor = 1;\n        long prime = 2;\n        while (n\
    \ > 1) {\n            if (n % prime == 0) {\n                maxFactor = prime;\n\
    \            }\n            prime++;\n            while (n % prime == 0) {\n \
    \               maxFactor = prime;\n                prime++;\n            }\n\
    \            n/=prime;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactor2\
    \ = 2;\n        long largestPrimeFactorFactor3 = 3;\n        long largestPrimeFactorFactor4\
    \ = 4;\n        long largestPrimeFactorFactor5 = 5;\n        long largestPrimeFactorFactor6\
    \ = 6;\n        long largestPrimeFactorFactor7 = 7;\n        long largestPrimeFactorFactor8\
    \ = 8;\n        long largestPrimeFactorFactor9 = 9;\n        long largestPrimeFactorFactor10\
    \ = 10;\n        long largestPrimeFactorFactor11 = 11;\n        long largestPrimeFactorFactor12\
    \ = 12;\n        long largestPrimeFactorFactor13 = 13;\n        long largestPrimeFactorFactor14\
    \ = 14;\n        long largestPrimeFactorFactor15 = 15;\n        long largestPrimeFactorFactor16\
    \ = 16;\n        long largestPrimeFactorFactor17 = 17;\n        long largestPrimeFactorFactor18\
    \ = 18;\n        long largestPrimeFactorFactor19 = 19;\n        long largestPrimeFactorFactor20\
    \ = 20;\n        long largestPrimeFactorFactor21 = 21;\n        long largestPrimeFactorFactor22\
    \ = 22;\n        long largestPrimeFactorFactor23 = 23;\n        long largestPrimeFactorFactor24\
    \ = 24;\n        long largestPrimeFactorFactor25 = 25;\n        long largestPrimeFactorFactor26\
    \ = 26;\n        long largestPrimeFactorFactor27 = 27;\n        long largestPrimeFactorFactor28\
    \ = 28;\n        long largestPrimeFactorFactor29 = 29;\n        long largestPrimeFactorFactor30\
    \ = 30;\n        long largestPrimeFactorFactor31 = 31;\n        long largestPrimeFactorFactor32\
    \ = 32;\n        long largestPrimeFactorFactor33 = 33;\n        long largestPrimeFactorFactor34\
    \ = 34;\n        long largestPrimeFactorFactor35 = 35;\n        long largestPrimeFactorFactor36\
    \ = 36;\n        long largestPrimeFactorFactor37 = 37;\n        long largestPrimeFactorFactor38\
    \ = 38;\n        long largestPrimeFactorFactor39 = 39;\n        long largestPrimeFactorFactor40\
    \ = 40;\n        long largestPrimeFactorFactor41 = 41;\n        long largestPrimeFactorFactor42\
    \ = 42;\n        long largest", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n / 2) {\n            if (n % factor == 0) {\n\
    \                maxFactor = factor;\n                break;\n            }\n\
    \            factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long maxPrimeFactor = n;\n        long maxPrimeFactorFactor\
    \ = 1;\n        long maxPrimeFactorFactorPrime = 2;\n        long maxPrimeFactorFactorPrimePrime\
    \ = 3;\n        long maxPrimeFactorFactorPrimePrimePrime = 4;\n        long maxPrimeFactorFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxPrimeFactorFactorPrimePrimePrimePrime = 6;\n        long\
    \ maxPrimeFactorFactorPrimePrimePrimePrimePrime = 7;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrime\
    \ = 8;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrime = 9;\n    \
    \    long maxPrimeFactorFactorPrimePrimePrimePrimePrime = 10;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrime\
    \ = 11;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 12;\n\
    \        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 13;\n     \
    \   long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 14;\n        long\
    \ maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 15;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 16;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 17;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 19;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 20;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 22;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 23;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = ", "        long maxFactor = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n            while (n % factor == 0) {\n\
    \                n /= factor;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n \
    \       long largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n\
    \        long largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n\
    \        long largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n\
    \        long largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n\
    \        long largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n\
    \        long largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n\
    \        long largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n\
    \        long largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n\
    \        long largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n\
    \        long largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n\
    \        long largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n\
    \        long largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n\
    \        long largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n\
    \        long largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n\
    \        long largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n\
    \        long largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n\
    \        long largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n\
    \        long largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n\
    \        long largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n\
    \        long largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n\
    \        long largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n\
    \        long largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n\
    \        long largestPrimeFactor47 = n;\n        long largestPrimeFactor", " \
    \       long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor * primeFactor <= n) {\n            if (n % primeFactor == 0) {\n\
    \                largestPrimeFactor = primeFactor;\n            }\n          \
    \  primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long largestPrimeFactor = n;\n \
    \       long primeFactor = 2;\n        while (primeFactor <= largestPrimeFactor)\
    \ {\n            long testPrimeFactor = largestPrimeFactor;\n            while\
    \ (testPrimeFactor % primeFactor == 0) {\n                testPrimeFactor++;\n\
    \            }\n            if (testPrimeFactor > largestPrimeFactor) {\n    \
    \            largestPrimeFactor = testPrimeFactor;\n            }\n          \
    \  primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n        long\
    \ largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n        long\
    \ largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n        long\
    \ largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n        long\
    \ largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n        long\
    \ largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n        long\
    \ largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n        long\
    \ largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n        long\
    \ largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n        long\
    \ largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n        long\
    \ largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n        long\
    \ largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n        long\
    \ largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n        long\
    \ largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n        long\
    \ largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n        long\
    \ largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n        long\
    \ largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n        long\
    \ largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n        long\
    \ largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n        long\
    \ largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n        long\
    \ largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n        long\
    \ largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n        long\
    \ largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n        long\
    \ largestPrimeFactor47 = n;\n        long largestPrimeFactor", "        long maxFactor\
    \ = 0;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n            n\
    \ /= currentFactor;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        while (n % factor == 0) {\n                maxFactor = factor;\n    \
    \        }\n            factor++;\n        }\n        return maxFactor;", "  \
    \      long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime ==\
    \ 0) {\n                largestPrimeFactor = currentPrime;\n            }\n  \
    \          currentPrime++;\n        }\n        return largestPrimeFactor;", " \
    \       long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxPrimeFactor = n;\n        long primeFactor = 1;\n        while\
    \ (n > 1) {\n            long nextPrimeFactor = n % primeFactor;\n           \
    \ if (nextPrimeFactor == 0) {\n                maxPrimeFactor = primeFactor;\n\
    \                break;\n            }\n            primeFactor = nextPrimeFactor;\n\
    \            n = n / primeFactor;\n        }\n        return maxPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < largestPrimeFactor) {\n            if (n % factor == 0) {\n              \
    \  largestPrimeFactor = factor;\n            }\n            factor++;\n      \
    \  }\n        return largestPrimeFactor;", "        long maxFactor = n;\n    \
    \    long maxFactorPrime = 2;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            while (n % factor == 0) {\n                maxFactorPrime\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorPrime;", "        long maxFactor = 0;\n  \
    \      long factor = 2;\n        while (factor <= n / 2) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor < maxFactor) {\n            while\
    \ (n % factor == 0) {\n                n /= factor;\n            }\n         \
    \   maxFactor = factor;\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            long currentPrimeFactor =\
    \ currentPrime;\n            while (currentPrimeFactor < largestPrimeFactor) {\n\
    \                if (n % currentPrimeFactor == 0) {\n                    largestPrimeFactor\
    \ = currentPrimeFactor;\n                    break;\n                }\n     \
    \           currentPrimeFactor++;\n            }\n            currentPrime++;\n\
    \        }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n      \
    \  while (n > 1) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long maxFactor = 0;\n        long factor = 2;\n\
    \        while (factor < n) {\n            if (n % factor == 0) {\n          \
    \      maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                maxFactor = factor;\n   \
    \         }\n            factor++;\n            while (n % factor == 0) {\n  \
    \              n /= factor;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactorPrime = factor;\n                maxFactor = n /\
    \ factor;\n            }\n            factor++;\n        }\n        return maxFactorPrime;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n            n\
    \ /= currentFactor;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n\
    \        while (factor <= n) {\n            if (n % factor == 0) {\n         \
    \       maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxFactor = 0;\n        long maxFactorPrime = 0;\n        long currentFactor\
    \ = 1;\n        long currentFactorPrime = 1;\n        long currentPrime = 2;\n\
    \        bool isPrime = true;\n        long factor = 2;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                isPrime = true;\n\
    \                while (n % currentPrime == 0) {\n                    isPrime\
    \ = false;\n                    currentPrime++;\n                }\n         \
    \       if (isPrime) {\n                    currentFactorPrime++;\n          \
    \      }\n                currentFactor = factor;\n                factor++;\n\
    \            }\n            currentPrime = 2;\n            while (n % currentPrime\
    \ == 0) {\n                currentPrime++;\n            }\n            if (currentFactorPrime\
    \ > maxFactorPrime) {\n                maxFactor = currentFactor;\n          \
    \      maxFactorPrime = currentFactorPrime;\n            }\n            currentFactorPrime\
    \ = 1;\n            currentFactor = factor;\n            factor++;\n         \
    \   n--;\n        }\n        return maxFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 0;\n        long factor = 2;\n        while (factor <= n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                n /= currentFactor;\n            }\n     \
    \       currentFactor++;\n        }\n        return maxFactor;", "        long\
    \ largestPrimeFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ largestPrimeFactor) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 19;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 20;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 21;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 24;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 25;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 26;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 27;\n        long maxFactorPrime",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 0;\n   \
    \     long factor = 2;\n        while (factor < n) {\n            while (n % factor\
    \ == 0) {\n                maxFactor = factor;\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        long currentPrime\
    \ = 2;\n        long currentFactor = 1;\n        long currentMaxFactor = 1;\n\
    \        bool isPrime = true;\n        while (isPrime) {\n            isPrime\
    \ = false;\n            for (int i = 2; i <= Math.Sqrt(n); i++) {\n          \
    \      if (n % i == 0) {\n                    isPrime = true;\n              \
    \      currentPrime = i;\n                    currentFactor = n;\n           \
    \         currentMaxFactor = i;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                if (currentPrime >\
    \ maxPrime) {\n                    maxPrime = currentPrime;\n                \
    \    maxFactor = currentFactor;\n                    currentMaxFactor = currentMaxFactor\
    \ * currentPrime;\n                }\n                else {\n               \
    \     currentMaxFactor = currentMaxFactor * currentPrime;\n                }\n\
    \            }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            while (n % factor == 0) {\n\
    \                maxFactor = factor;\n            }\n            factor++;\n \
    \       }\n        return maxFactor;", "        long maxPrimeFactor = n;\n   \
    \     long maxPrimeFactorFactor = 2;\n        long maxPrimeFactorFactorPrime =\
    \ 2;\n        long maxPrimeFactorFactorPrimePrime = 2;\n        long maxPrimeFactorFactorPrimePrimePrime\
    \ = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrime = 2;\n        long\
    \ maxPrimeFactorFactorPrimePrimePrimePrime = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrime\
    \ = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrime = 2;\n    \
    \    long maxPrimeFactorFactorPrimePrimePrimePrimePrime = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrime\
    \ = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrime = 2;\n    \
    \    long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n      \
    \  long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n      \
    \  long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n\
    \        long maxPrimeFactorFactorPrimePrimePrimePrimePrimePrime = 2;\n      \
    \  long maxPrimeFactorFactorPrimePrime", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor <= largestPrimeFactor) {\n  \
    \          if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (largestPrimeFactor % currentPrime != 0) {\n            currentPrime++;\n  \
    \      }\n        while (currentPrime <= largestPrimeFactor) {\n            largestPrimeFactor\
    \ = largestPrimeFactor / currentPrime;\n            currentPrime++;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = 1;\n        long\
    \ factor = 2;\n        while (factor < n) {\n            while (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n                n /= factor;\n  \
    \          }\n            factor++;\n        }\n        return maxFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        while (n > 1)\
    \ {\n            long testPrime = 2;\n            while (testPrime * testPrime\
    \ <= n) {\n                if (n % testPrime == 0) {\n                    long\
    \ testFactor = testPrime;\n                    while (n % testFactor == 0) {\n\
    \                        n /= testFactor;\n                        maxFactor =\
    \ testFactor;\n                    }\n                    break;\n           \
    \     }\n                testPrime++;\n            }\n            maxPrime = testPrime;\n\
    \            maxFactor = testFactor;\n        }\n        return maxPrime;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long maxFactorPrime = 2;\n        while (n > 1) {\n            long factor\
    \ = 2;\n            while (factor < maxFactorPrime) {\n                if (n %\
    \ factor == 0) {\n                    maxFactor = n;\n                    maxFactorPrime\
    \ = factor;\n                    break;\n                }\n                factor++;\n\
    \            }\n            n--;\n        }\n        return maxFactor;", "   \
    \     long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime ==\
    \ 0) {\n                largestPrimeFactor = currentPrime;\n            }\n  \
    \          currentPrime++;\n        }\n        return largestPrimeFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor <= maxFactor) {\n            if (n % factor == 0) {\n       \
    \         maxFactor = n / factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % 2 == 0) {\n            largestPrimeFactor /= 2;\n            i++;\n      \
    \  }\n        while (largestPrimeFactor % i == 0) {\n            largestPrimeFactor\
    \ /= i;\n            i++;\n        }\n        return largestPrimeFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 1;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                long testPrime = factor;\n                while (testPrime\
    \ <= maxFactorPrime) {\n                    if (n % testPrime == 0) {\n      \
    \                  maxFactorPrime = testPrime;\n                        break;\n\
    \                    }\n                    testPrime++;\n                }\n\
    \            }\n            factor++;\n        }\n        return maxFactorPrime;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                currentFactor++;\n            }\n        \
    \    n/=currentFactor;\n            currentFactor++;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n      \
    \  while (factor <= n / 2) {\n            if (n % factor == 0) {\n           \
    \     maxFactor = factor;\n            }\n            factor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 2;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            while (n % factor == 0) {\n           \
    \     maxFactorPrime = factor;\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return maxFactorPrime;", "        long\
    \ maxFactor = 0;\n        long factor = 2;\n        while (factor < n) {\n   \
    \         if (n % factor == 0) {\n                maxFactor = factor;\n      \
    \      }\n            factor++;\n        }\n        return maxFactor;", "    \
    \    long maxFactor = 0;\n        long factor = 2;\n        while (factor <= n)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \                break;\n            }\n            factor++;\n        }\n   \
    \     return maxFactor;", "        long maxFactor = n;\n        long factor =\
    \ 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long largestPrimeFactor =\
    \ n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            long currentPrimeFactor = currentPrime;\n            while (currentPrimeFactor\
    \ % currentPrime == 0) {\n                currentPrimeFactor++;\n            }\n\
    \            if (currentPrimeFactor > largestPrimeFactor) {\n                largestPrimeFactor\
    \ = currentPrimeFactor;\n            }\n            currentPrime++;\n        }\n\
    \        return largestPrimeFactor;", "        long maxPrime = 2;\n        long\
    \ maxFactor = 1;\n        long prime = 2;\n        while (prime < n) {\n     \
    \       while (n % prime == 0) {\n                maxFactor *= prime;\n      \
    \          n /= prime;\n            }\n            if (n > 1) {\n            \
    \    maxPrime = prime;\n            }\n            prime++;\n        }\n     \
    \   return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            if (n % factor == 0) {\n \
    \               maxFactor = factor;\n            }\n            factor++;\n  \
    \      }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = n / factor;\n            } else {\n   \
    \             factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = 0;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 1;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            long testFactor = factor\
    \ * factor;\n            if (testFactor > maxFactor) {\n                maxFactor\
    \ = testFactor;\n                maxFactorPrime = factor;\n            }\n   \
    \         factor++;\n        }\n        return maxFactorPrime;", "        long\
    \ maxFactor = 1;\n        long currentFactor = 2;\n        while (n > 1) {\n \
    \           if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n            n /= currentFactor;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     }\n            factor++;\n        }\n        return maxFactor;", "     \
    \   long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 0;\n   \
    \     long factor = 2;\n        while (factor <= n / 2) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= largestPrimeFactor) {\n            if (n % primeFactor == 0)\
    \ {\n                largestPrimeFactor = primeFactor;\n            }\n      \
    \      primeFactor++;\n        }\n        return largestPrimeFactor;", "     \
    \   long maxFactor = 1;\n        long factor = 2;\n        while (factor < n)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                long factorPrime = 2;\n                while (factorPrime\
    \ <= factor) {\n                    if (n % factorPrime == 0) {\n            \
    \            maxFactorPrime = factorPrime;\n                        break;\n \
    \                   }\n                    factorPrime++;\n                }\n\
    \            }\n            factor++;\n        }\n        return maxFactorPrime;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            while\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long maxFactor = 1;\n        long maxFactorPrime\
    \ = 1;\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                maxFactor = factor;\n                maxFactorPrime\
    \ = factor;\n                factor++;\n            }\n            n--;\n    \
    \    }\n        return maxFactorPrime;", "        long maxFactor = n;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            bool isPrime = true;\n  \
    \          for (int i = 2; i <= currentPrime; i++) {\n                if (n %\
    \ i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrimeFactor = currentPrime;\n            }\n            currentPrime++;\n\
    \        }\n        return largestPrimeFactor;", "        long maxPrime = 1;\n\
    \        long maxFactor = 2;\n        while (n > 1) {\n            long nextPrime\
    \ = GetNextPrime(n);\n            if (nextPrime > maxPrime) {\n              \
    \  maxPrime = nextPrime;\n                maxFactor = n;\n            }\n    \
    \        n = nextPrime;\n        }\n        return maxFactor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor < maxFactor) {\n            while\
    \ (n % factor == 0) {\n                n /= factor;\n            }\n         \
    \   maxFactor = factor;\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                n /= currentFactor;\n            }\n     \
    \       currentFactor++;\n        }\n        return maxFactor;", "        long\
    \ maxPrime = 1;\n        long maxFactor = 2;\n        long currentFactor = 2;\n\
    \        long currentPrime = 2;\n        while (n > 1) {\n            while (n\
    \ % currentPrime == 0) {\n                currentPrime++;\n            }\n   \
    \         while (n % currentFactor == 0) {\n                currentFactor++;\n\
    \            }\n            if (currentPrime > maxPrime) {\n                maxPrime\
    \ = currentPrime;\n            }\n            if (currentFactor > maxFactor) {\n\
    \                maxFactor = currentFactor;\n            }\n            n /= currentPrime;\n\
    \            n /= currentFactor;\n        }\n        return maxPrime;", "    \
    \    long maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = n / factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ primeFactor = 2;\n        while (primeFactor <= largestPrimeFactor) {\n    \
    \        if (n % primeFactor == 0) {\n                largestPrimeFactor = primeFactor;\n\
    \            }\n            primeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 1;\n   \
    \     long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n      \
    \  long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 19;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 20;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 21;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 24;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 25;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrime", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor <= maxFactor) {\n            if (n % factor == 0) {\n       \
    \         maxFactor = n / factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long largestPrimeFactor = n;\n \
    \       long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 1;\n \
    \       long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 1;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactor", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = n / factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor < n) {\n            if (n % factor == 0) {\n   \
    \             maxFactor = factor;\n            }\n            factor++;\n    \
    \    }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = n / factor;\n            } else {\n   \
    \             factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long maxPrime = 2;\n        long\
    \ currentPrime = 2;\n        while (currentPrime < largestPrimeFactor) {\n   \
    \         while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;", "        long largestPrimeFactor = n;\n   \
    \     long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            bool isPrime = true;\n            for (int i = 2; i <= currentPrime;\
    \ i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                largestPrimeFactor = currentPrime;\n          \
    \  }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            long test = (n * factor);\n          \
    \  if (test > largestPrimeFactor) {\n                largestPrimeFactor = test;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                n /= currentFactor;\n            }\n     \
    \       currentFactor++;\n        }\n        return maxFactor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                maxFactor = factor;\n   \
    \         }\n            factor++;\n            while (n % factor == 0) {\n  \
    \              n /= factor;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long largestPrimeFactorOfTwo = largestPrimeFactor;\n\
    \        long largestPrimeFactorOfThree = largestPrimeFactor;\n        long largestPrimeFactorOfFour\
    \ = largestPrimeFactor;\n        long largestPrimeFactorOfFive = largestPrimeFactor;\n\
    \        long largestPrimeFactorOfSix = largestPrimeFactor;\n        long largestPrimeFactorOfSeven\
    \ = largestPrimeFactor;\n        long largestPrimeFactorOfEight = largestPrimeFactor;\n\
    \        long largestPrimeFactorOfNine = largestPrimeFactor;\n        long largestPrimeFactorOfTen\
    \ = largestPrimeFactor;\n        long largestPrimeFactorOfEleven = largestPrimeFactor;\n\
    \        long largestPrimeFactorOfTwelve = largestPrimeFactor;\n        long largestPrimeFactorOfThirteen\
    \ = largestPrimeFactor;\n        long largestPrimeFactorOfFourteen = largestPrimeFactor;\n\
    \        long largestPrimeFactorOfFifteen = largestPrimeFactor;\n        long\
    \ largestPrimeFactorOfSixteen = largestPrimeFactor;\n        long largestPrimeFactorOfSeventeen\
    \ = largestPrimeFactor;\n        long largestPrimeFactorOfEighteen = largestPrimeFactor;\n\
    \        long largestPrimeFactorOfNineteen = largestPrimeFactor;\n        long\
    \ largestPrimeFactorOfTwenty = largestPrimeFactor;\n        long largestPrimeFactorOfTwentyOne\
    \ = largestPrimeFactor;\n        long largestPrimeFactorOfTwentyTwo = largestPrimeFactor;\n\
    \        long largestPrimeFactorOfTwentyThree = largestPrimeFactor;\n        long\
    \ largestPrimeFactorOfTwentyFour = largestPrimeFactor;\n        long largestPrimeFactorOfTwentyFive\
    \ = largestPrimeFactor;\n        long largestPrimeFactorOfTwentySix = largestPrimeFactor;\n\
    \        long largestPrimeFactorOfTwentySeven = largestPrimeFactor;\n        long\
    \ largestPrimeFactorOfTwentyEight = largestPri", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ if (n % factor == 0) {\n                maxFactor = n / factor;\n          \
    \  } else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n      \
    \  while (factor < n) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n      \
    \  while (factor <= n) {\n            if (n % factor == 0) {\n               \
    \ maxFactor = factor;\n            }\n            factor++;\n        }\n     \
    \   return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            if (n % factor == 0) {\n \
    \               maxFactor = n / factor;\n            } else {\n              \
    \  factor++;\n            }\n        }\n        return maxFactor;", "        long\
    \ maxFactor = 1;\n        long factor = 2;\n        while (factor <= n) {\n  \
    \          if (n % factor == 0) {\n                maxFactor = factor;\n     \
    \       }\n            factor++;\n        }\n        return maxFactor;", "   \
    \     long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (largestPrimeFactor % currentPrime != 0) {\n            currentPrime++;\n  \
    \      }\n        while (currentPrime <= largestPrimeFactor) {\n            largestPrimeFactor\
    \ = largestPrimeFactor * currentPrime;\n            currentPrime++;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = 1;\n        long\
    \ factor = 2;\n        while (factor <= n / 2) {\n            if (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor = 1;\n\
    \        long largestPrimeFactorFactorFactor = 2;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 3;\n        long largestPrimeFactorFactorFactorFactorFactor = 4;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 6;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 7;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 8;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 9;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactor", "        long maxFactor = n;\n    \
    \    long factor = 2;\n        while (factor < maxFactor) {\n            while\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            if (n % factor == 0) {\n \
    \               maxFactor = n / factor;\n            } else {\n              \
    \  factor++;\n            }\n        }\n        return maxFactor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = n / factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long currentPrime = 2;\n        while (currentPrime <= largestPrimeFactor)\
    \ {\n            bool isPrime = true;\n            for (long i = 2; i <= largestPrimeFactor;\
    \ i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                largestPrimeFactor = currentPrime;\n          \
    \  }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long largestPrimeFactor =\
    \ n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            if (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;", "        long maxFactor = 1;\n        long\
    \ factor = 2;\n        while (factor < n) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            } else {\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor++;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n      \
    \  while (factor <= n / 2) {\n            if (n % factor == 0) {\n           \
    \     maxFactor = factor;\n                break;\n            }\n           \
    \ factor++;\n        }\n        return maxFactor;", "        long maxFactor =\
    \ n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n      \
    \      if (n % factor == 0) {\n                maxFactor = n / factor;\n     \
    \       } else {\n                factor++;\n            }\n        }\n      \
    \  return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            while (n % factor == 0) {\n\
    \                maxFactor = factor;\n            }\n            factor++;\n \
    \       }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            long currentPrimeFactor = currentPrime;\n            while (currentPrimeFactor\
    \ % currentPrime == 0) {\n                currentPrime++;\n            }\n   \
    \         if (currentPrimeFactor > largestPrimeFactor) {\n                largestPrimeFactor\
    \ = currentPrimeFactor;\n            }\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 1;\n        while\
    \ (primeFactor < n) {\n            long testPrimeFactor = primeFactor;\n     \
    \       while (testPrimeFactor < n) {\n                if (n % testPrimeFactor\
    \ == 0) {\n                    largestPrimeFactor = testPrimeFactor;\n       \
    \             break;\n                }\n                testPrimeFactor++;\n\
    \            }\n            primeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (n > 1) {\n\
    \            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (currentFactor <= n) {\n            if (n % currentFactor\
    \ == 0) {\n                maxFactor = currentFactor;\n            }\n       \
    \     currentFactor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        ", "        long maxFactor = 1;\n        long maxFactorPrime =\
    \ 1;\n        long factor = 2;\n        while (factor <= n) {\n            if\
    \ (n % factor == 0) {\n                long primeFactor = factor;\n          \
    \      while (n % primeFactor == 0) {\n                    n /= primeFactor;\n\
    \                    maxFactorPrime = primeFactor;\n                }\n      \
    \      }\n            maxFactor = factor;\n            factor++;\n        }\n\
    \        return maxFactorPrime;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = n / factor;\n            } else {\n   \
    \             factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        while (maxFactorPrime\
    \ < maxFactor) {\n            long testFactor = maxFactorPrime + 1;\n        \
    \    while (testFactor < maxFactor) {\n                if (n % testFactor == 0)\
    \ {\n                    maxFactorPrime = testFactor;\n                    break;\n\
    \                }\n                testFactor++;\n            }\n           \
    \ maxFactor = maxFactorPrime;\n        }\n        return maxFactorPrime;", " \
    \       long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;"]
stop_tokens:
- "\n    }\n"
