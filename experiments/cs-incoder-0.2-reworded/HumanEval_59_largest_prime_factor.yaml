name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n    // >>> LargestPrimeFactor((2048L))\n\
  \    // (2L)\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long maxFactor = n;\n        long factor = 2;\n        while\
    \ (factor < maxFactor) {\n            if (n % factor == 0) {\n               \
    \ maxFactor = factor;\n            }\n            factor++;\n        }\n     \
    \   return maxFactor;", "        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactor = 1;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactor", "        long maxFactor = n;\n     \
    \   long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePri", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long largestPrimeFactor = n;\n \
    \       long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 2;\n        long largestPrimeFactorFactorFactorFactor = 3;\n        long largestPrimeFactorFactorFactorFactorFactor\
    \ = 4;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n \
    \       long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 6;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 7;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 8;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 9;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactor", "        long maxFactor = n;\n    \
    \    long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 1;\n   \
    \     long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 3;\n        long\
    \ maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime =\
    \ 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 19;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 20;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 21;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 24;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 25;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 26;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 27;\n        long maxFactorPrime",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long maxFactorPrime = 2;\n        while (n > 1) {\n            long factor\
    \ = 2;\n            while (factor < maxFactorPrime) {\n                if (n %\
    \ factor == 0) {\n                    maxFactor = n;\n                    break;\n\
    \                }\n                factor++;\n            }\n            maxFactorPrime\
    \ = factor;\n            n--;\n        }\n        return maxFactor;", "      \
    \  long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < largestPrimeFactor) {\n            while (n % factor == 0) {\n           \
    \     largestPrimeFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return largestPrimeFactor;", "        long maxFactor = n;\n \
    \       long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long maxFactorPrime = 1;\n\
    \        long currentFactor = 2;\n        long currentFactorPrime = 2;\n     \
    \   while (currentFactorPrime <= n) {\n            if (n % currentFactorPrime\
    \ == 0) {\n                currentFactorPrime++;\n            }\n            else\
    \ {\n                currentFactorPrime = 2;\n            }\n            currentFactor++;\n\
    \            if (currentFactor > maxFactor) {\n                maxFactor = currentFactor;\n\
    \                maxFactorPrime = currentFactorPrime;\n            }\n       \
    \ }\n        return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime\
    \ = 2;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                long primeFactor = factor;\n\
    \                while (n % primeFactor == 0) {\n                    n /= primeFactor;\n\
    \                    maxFactorPrime = primeFactor;\n                }\n      \
    \      }\n            factor++;\n        }\n        return maxFactorPrime;", " \
    \       long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor"]
stop_tokens:
- "\n    }\n"
