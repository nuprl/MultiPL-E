name: HumanEval_91_is_bored
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You'll be given a string of words, and your task is to count\
  \ the number\n    // of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n\
  \    // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The sky\
  \ is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public\
  \ static long IsBored(string S) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"\
  Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n\
  \    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"\
  bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.\
  \ will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for\
  \ a walk\")) == (0L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        foreach (string word in S.Split('.'))\
    \ {\n            if (word.StartsWith(\"I\")) {\n                count++;\n   \
    \         }\n        }\n        return count;", "        long boredoms = 0;\n\
    \        foreach (string word in S.Split('.')) {\n            if (word.StartsWith(\"\
    I\")) {\n                boredoms += 1;\n            }\n        }\n        return\
    \ boredoms;", "        long count = 0;\n        foreach (string word in S.Split('.',\
    \ '?', '!')) {\n            if (word.StartsWith(\"I\")) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long boredoms = 0;\n\
    \        foreach (string word in S.Split('.')) {\n            if (word.StartsWith(\"\
    I\")) {\n                boredoms += 1;\n            }\n        }\n        return\
    \ boredoms;", "        long boredoms = 0;\n        foreach (string sentence in\
    \ S.Split('.')) {\n            boredoms += IsBored(sentence);\n        }\n   \
    \     return boredoms;", "        long count = 0;\n        foreach (string word\
    \ in S.Split('.')) {\n            if (word.StartsWith(\"I\")) {\n            \
    \    count++;\n            }\n        }\n        return count;", "        long\
    \ boredoms = 0;\n        foreach (string word in S.Split('.')) {\n           \
    \ if (word.StartsWith(\"I\")) {\n                boredoms += 1;\n            }\n\
    \        }\n        return boredoms;", "        long boredoms = 0;\n        foreach\
    \ (string word in S.Split('.', '?', '!'))\n            if (word.StartsWith(\"\
    I\"))\n                boredoms++;\n        return boredoms;", "        long boredoms\
    \ = 0;\n        foreach (string word in S.Split('.', '?', '!').ToList()) {\n \
    \           if (word.StartsWith(\"I\")) {\n                boredoms += 1;\n  \
    \          }\n        }\n        return boredoms;", "        long boredoms = 0;\n\
    \        foreach (string word in S.Split('.')) {\n            if (word.StartsWith(\"\
    I\")) {\n                boredoms += 1;\n            }\n        }\n        return\
    \ boredoms;", "        long boredoms = 0;\n        foreach (string word in S.Split('.'))\
    \ {\n            if (word.StartsWith(\"I\")) {\n                boredoms++;\n\
    \            }\n        }\n        return boredoms;", "        long boredoms =\
    \ 0;\n        foreach (string word in S.Split('.')) {\n            if (word.StartsWith(\"\
    I\")) {\n                boredoms += 1;\n            }\n        }\n        return\
    \ boredoms;", "        long boredoms = 0;\n        foreach (string word in S.Split('.'))\
    \ {\n            if (word.StartsWith(\"I\")) {\n                boredoms += 1;\n\
    \            }\n        }\n        return boredoms;", "        long boredoms =\
    \ 0;\n        foreach (string word in S.Split('.')) {\n            if (word.StartsWith(\"\
    I\")) {\n                boredoms += 1;\n            }\n        }\n        return\
    \ boredoms;", "        long boredoms = 0;\n        foreach (string word in S.Split('.'))\
    \ {\n            if (word.StartsWith(\"I\")) {\n                boredoms += 1;\n\
    \            }\n        }\n        return boredoms;", "        long boredoms =\
    \ 0;\n        foreach (string sentence in S.Split('.', '?', '!')) {\n        \
    \    if (sentence.StartsWith(\"I\")) {\n                boredoms += 1;\n     \
    \       }\n        }\n        return boredoms;", "        long count = 0;\n  \
    \      foreach (string word in S.Split('.')) {\n            if (word.StartsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  "        long boredoms = 0;\n        foreach (string word in S.Split('.')) {\n \
    \           if (word.StartsWith(\"I\")) {\n                boredoms += 1;\n  \
    \          }\n        }\n        return boredoms;", "        long count = 0;\n\
    \        foreach (string word in S.Split('.', '?', '!'))\n        {\n        \
    \    if (word.StartsWith(\"I\"))\n            {\n                count++;\n  \
    \          }\n        }\n        return count;", "        long boredoms = 0;\n\
    \        foreach (string sentence in S.Split('.', '?', '!'))\n        {\n    \
    \        if (sentence.StartsWith(\"I\"))\n            {\n                boredoms\
    \ += 1;\n            }\n        }\n        return boredoms;"]
stop_tokens:
- "\n    }\n"
