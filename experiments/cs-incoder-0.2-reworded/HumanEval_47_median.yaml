name: HumanEval_47_median
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n \
  \   // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public static\
  \ float Median(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
  \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
  \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
completions: ["        long median = 0;\n        long count = 0;\n        foreach\
    \ (long i in l) {\n            count += i;\n            if (count > median) {\n\
    \                median = count;\n            }\n        }\n        return (float)median;",
  "        long n = l.Count;\n        if (n < 2) return (float)l.First();\n      \
    \  long mid = n / 2;\n        long left = 0;\n        long right = mid;\n    \
    \    while (left < right) {\n            long mid2 = mid / 2;\n            if\
    \ (l[mid2] < l[mid]) right = mid - 1;\n            else left = mid + 1;\n    \
    \    }\n        return (float)l[mid];", "        long sum = 0;\n        foreach\
    \ (long i in l) {\n            sum += i;\n        }\n        float median = (float)sum\
    \ / l.Count;\n        return median;", "        long median = 0;\n        long\
    \ count = 0;\n        foreach (long i in l) {\n            count++;\n        \
    \    if (count % 2 == 0) {\n                median += i;\n            } else {\n\
    \                median -= i;\n            }\n        }\n        return (float)median;",
  "        long median = l.Count > 0 ? l.OrderBy(x => x).Skip(l.Count / 2).Take(1).First()\
    \ : 0L;\n        return median == 0L ? 0f : median;", "        long sum = 0;\n\
    \        foreach (long x in l) {\n            sum += x;\n        }\n        float\
    \ median = sum / l.Count;\n        return median;", "        long sum = 0;\n \
    \       long count = 0;\n        foreach (long x in l)\n            sum += x;\n\
    \        count = l.Count;\n        if (count == 0)\n            return (float)0;\n\
    \        float median = (float)sum / count;\n        float average = 0;\n    \
    \    foreach (long x in l)\n            average += x;\n        average /= count;\n\
    \        float variance = 0;\n        foreach (long x in l)\n            variance\
    \ += (x - average) * (x - average);\n        variance /= count;\n        float\
    \ stddev = Math.Sqrt(variance);\n        return median;", "        long n = l.Count;\n\
    \        if (n < 2) return (float)l.First();\n        long mid = n / 2;\n    \
    \    long sum = 0;\n        foreach (long x in l) {\n            sum += x;\n \
    \       }\n        float median = (float)sum / mid;\n        return median;",
  "        long n = l.Count;\n        if (n < 2) return (float)0;\n        long mid\
    \ = n / 2;\n        long left = 0, right = mid;\n        while (left < right)\
    \ {\n            long mid2 = left + right / 2;\n            if (l[mid2] < l[mid])\
    \ right = mid - 1;\n            else if (l[mid2] > l[mid]) left = mid + 1;\n \
    \           else return l[mid2];\n        }\n        return l[mid];", "      \
    \  long median = l.Count > 0 ? l.OrderBy(x => x).Skip(l.Count / 2).First() : 0L;\n\
    \        return median == 0L ? 0f : median / 2L;", "        long median = 0;\n\
    \        long total = 0;\n        foreach (long n in l) {\n            total +=\
    \ n;\n        }\n        median = total / l.Count;\n        return (float)median;",
  "        if (l.Count == 0) throw new ArgumentException(\"List is empty\");\n   \
    \     long mid = l.Count / 2;\n        float a = l[mid];\n        float b = l[l.Count\
    \ - 1];\n        float c = l[0];\n        float d = l[1];\n        float e = l[l.Count\
    \ - 2];\n        float f = l[l.Count - 3];\n        float g = l[l.Count - 4];\n\
    \        float h = l[l.Count - 5];\n        float i = l[l.Count - 6];\n      \
    \  float j = l[l.Count - 7];\n        float k = l[l.Count - 8];\n        float\
    \ l = l[l.Count - 9];\n        float m = l[l.Count - 10];\n        float n = l[l.Count\
    \ - 11];\n        float o = l[l.Count - 12];\n        float p = l[l.Count - 13];\n\
    \        float q = l[l.Count - 14];\n        float r = l[l.Count - 15];\n    \
    \    float s = l[l.Count - 16];\n        float t = l[l.Count - 17];\n        float\
    \ u = l[l.Count - 18];\n        float v = l[l.Count - 19];\n        float w =\
    \ l[l.Count - 20];\n        float x = l[l.Count - 21];\n        float y = l[l.Count\
    \ - 22];\n        float z = l[l.Count - 23];\n        float a = l[mid];\n    \
    \    float b = l[l.Count - 1];\n        float c = l[0];\n        float d = l[1];\n\
    \        float e = l[l.Count - 2];\n        float f = l[l.Count - 3];\n      \
    \  float g = l[l.Count - 4];\n        float h = l[l.Count - 5];\n        float\
    \ i = l[l.Count - 6];\n        float j = l[l.Count - 7];\n        float k = l[l.Count\
    \ - 8];\n        float l = l[l.Count - 9];\n        float m = l[l.Count - 10];\n\
    \        float n = l[l.Count - 11];\n        float o = l[l.Count - 12];\n    \
    \    float p = l[l.Count - 13];\n        float q = l[l.Count - 14];\n        float\
    \ r = l[l.Count - 15];\n        float s = l[l.Count - 16];\n        float t =\
    \ l[l.Count - 17];\n        float u = l[l.Count - 18];\n        float v = ", " \
    \       float median;\n        long medianIndex;\n        long medianCount;\n\
    \        long medianCount2;\n        long medianCount3;\n        long medianCount4;\n\
    \        long medianCount5;\n        long medianCount6;\n        long medianCount7;\n\
    \        long medianCount8;\n        long medianCount9;\n        long medianCount10;\n\
    \        long medianCount11;\n        long medianCount12;\n        long medianCount13;\n\
    \        long medianCount14;\n        long medianCount15;\n        long medianCount16;\n\
    \        long medianCount17;\n        long medianCount18;\n        long medianCount19;\n\
    \        long medianCount20;\n        long medianCount21;\n        long medianCount22;\n\
    \        long medianCount23;\n        long medianCount24;\n        long medianCount25;\n\
    \        long medianCount26;\n        long medianCount27;\n        long medianCount28;\n\
    \        long medianCount29;\n        long medianCount30;\n        long medianCount31;\n\
    \        long medianCount32;\n        long medianCount33;\n        long medianCount34;\n\
    \        long medianCount35;\n        long medianCount36;\n        long medianCount37;\n\
    \        long medianCount38;\n        long medianCount39;\n        long medianCount40;\n\
    \        long medianCount41;\n        long medianCount42;\n        long medianCount43;\n\
    \        long medianCount44;\n        long medianCount45;\n        long medianCount46;\n\
    \        long medianCount47;\n        long medianCount48;\n        long medianCount49;\n\
    \        long medianCount50;\n        long medianCount51;\n        long medianCount52;\n\
    \        long medianCount53;\n        long medianCount54;\n        long medianCount55;\n\
    \        long medianCount56;\n        long medianCount57;\n        long medianCount58;\n\
    \        long medianCount59;\n        long medianCount60;\n        long medianCount61;\n\
    \        long medianCount62;\n        long medianCount63;\n        long medianCount64;\n\
    \        long medianCount65;\n        long medianCount66;\n        long medianCount67;\n\
    \        long medianCount68;\n        long medianCount69;\n        long medianCount70;\n\
    \        long medianCount71;\n        long medianCount72;\n        long medianCount73;\n\
    \        long medianCount74;\n        long medianCount", "        long median\
    \ = 0;\n        long largest = l.Max();\n        long smallest = l.Min();\n  \
    \      if (largest < smallest) {\n            throw new ArgumentException(\"List\
    \ is not sorted\");\n        }\n        long mid = largest / 2;\n        median\
    \ = l.FindIndex(x => x == mid).FirstOrDefault();\n        return median;", " \
    \       long sum = 0;\n        long count = 0;\n        foreach (long i in l)\
    \ {\n            sum += i;\n            count++;\n        }\n        if (count\
    \ == 0)\n            return (float)0;\n        float median = (float)sum / count;\n\
    \        return median;", "        long sum = 0;\n        float median;\n    \
    \    foreach (long x in l) {\n            sum += x;\n        }\n        if (sum\
    \ % 2 == 0) {\n            median = (float)sum / 2;\n        } else {\n      \
    \      median = (float)sum / 2 + 0.5f;\n        }\n        return median;", " \
    \       long sum = 0;\n        float median;\n        foreach (long i in l) {\n\
    \            sum += i;\n        }\n        median = (float)sum / l.Count;\n  \
    \      return median;", "        long n = l.Count;\n        if (n < 2) return\
    \ 0f;\n        long mid = n / 2;\n        long sum = 0;\n        foreach (long\
    \ x in l)\n            sum += x;\n        float median = (float)sum / mid;\n \
    \       return median;", "        long median = 0;\n        long total = 0;\n\
    \        foreach (long x in l) {\n            total += x;\n        }\n       \
    \ if (total % 2 == 0) {\n            median = (total / 2L);\n        } else {\n\
    \            median = (total / 2L) + 1;\n        }\n        return (float)median;",
  "        long median = 0;\n        long min = l.Min();\n        long max = l.Max();\n\
    \        long mid;\n        float medianFloat;\n        if (l.Count % 2 == 0)\
    \ {\n            mid = l.Count / 2;\n            median = (long)((l.ElementAt(mid)\
    \ + l.ElementAt(mid + 1)) / 2);\n            medianFloat = (float)median;\n  \
    \      } else {\n            mid = l.Count / 2;\n            median = l.ElementAt(mid);\n\
    \            medianFloat = (float)median;\n        }\n        if (min == max)\
    \ {\n            return medianFloat;\n        }\n        if (min > max) {\n  \
    \          long tmp = min;\n            min = max;\n            max = tmp;\n \
    \       }\n        float leftMedian = Median(l.Where(x => x < min));\n       \
    \ float rightMedian = Median(l.Where(x => x > max));\n        return (leftMedian\
    \ + rightMedian) / 2;"]
stop_tokens:
- "\n    }\n"
