name: HumanEval_132_is_nested
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a string as input which contains\
  \ only square brackets.\n    // The function should return true if and only if there\
  \ is a valid subsequence of brackets \n    // where at least one bracket in the\
  \ subsequence is nested.\n    // >>> IsNested((\"[[]]\"))\n    // (true)\n    //\
  \ >>> IsNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> IsNested((\"[][]\"\
  ))\n    // (false)\n    // >>> IsNested((\"[]\"))\n    // (false)\n    // >>> IsNested((\"\
  [[][]]\"))\n    // (true)\n    // >>> IsNested((\"[[]][[\"))\n    // (true)\n  \
  \  public static bool IsNested(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"\
  [[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n\
  \    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"\
  []\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n   \
  \ Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n  \
  \  Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n  \
  \  Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\"\
  )) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\
  \n}\n"
completions: ["        bool result = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(top);\n                 \
    \   } else if (top == ']') {\n                        result = true;\n       \
    \                 break;\n                    }\n                }\n         \
    \   }\n        }\n        return result;", "        bool result = false;\n   \
    \     Stack<char> stack = new Stack<char>();\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                stack.Push(c);\n           \
    \ } else if (c == ']') {\n                if (stack.Count > 0) {\n           \
    \         char top = stack.Pop();\n                    if (top == '[') {\n   \
    \                     stack.Push(c);\n                    } else if (top == ']')\
    \ {\n                        result = true;\n                    }\n         \
    \       }\n            }\n        }\n        return result;", "        Stack<char>\
    \ stack = new Stack<char>();\n        foreach (char c in str) {\n            if\
    \ (c == '[') {\n                stack.Push(c);\n            } else if (c == ']')\
    \ {\n                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top == '[') {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;", "        bool result = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(c);\n                   \
    \ } else {\n                        result = true;\n                    }\n  \
    \              } else {\n                    result = true;\n                }\n\
    \            } else if (stack.Count > 0) {\n                char top = stack.Pop();\n\
    \                if (top == '[') {\n                    stack.Push(c);\n     \
    \           } else {\n                    result = true;\n                }\n\
    \            } else {\n                result = true;\n            }\n       \
    \ }\n        return result;", "        bool result = false;\n        Stack<char>\
    \ stack = new Stack<char>();\n        foreach (char c in str) {\n            if\
    \ (c == '[') {\n                stack.Push(c);\n            } else if (c == ']')\
    \ {\n                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top == '[') {\n                        stack.Push(c);\n\
    \                    } else if (top == ']') {\n                        result\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        bool result\
    \ = false;\n        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == '[' && stack.Count > 0) {\n                char top\
    \ = stack.Pop();\n                if (c == '[') {\n                    stack.Push(top);\n\
    \                } else if (c == ']') {\n                    stack.Push(top);\n\
    \                } else if (c == ']' && stack.Count > 0) {\n                 \
    \   char top = stack.Pop();\n                    if (c == '[') {\n           \
    \             stack.Push(top);\n                    } else if (c == ']') {\n \
    \                       stack.Push(top);\n                    } else if (c ==\
    \ ']' && stack.Count > 0) {\n                        char top = stack.Pop();\n\
    \                        if (c == '[') {\n                            stack.Push(top);\n\
    \                        } else if (c == ']') {\n                            stack.Push(top);\n\
    \                        } else if (c == ']' && stack.Count > 0) {\n         \
    \                   char top = stack.Pop();\n                            if (c\
    \ == '[') {\n                                stack.Push(top);\n              \
    \              } else if (c == ']') {\n                                stack.Push(top);\n\
    \                            } else if (c == ']' && stack.Count > 0) {\n     \
    \                           char top = stack.Pop();\n                        \
    \        if (c == '[') {\n                                    stack.Push(top);\n\
    \                                } else if (c == ']') {\n                    \
    \                stack.Push(top);\n                                } else if (c\
    \ == ']' && stack.Count > 0) {\n                                    char top =\
    \ stack.Pop();\n                                    if (c == '[') {\n        \
    \                                stack.Push(top);\n                          \
    \          } else if (c == ']') {\n                                        stack.Push(top);\n\
    \                                    } else if (c == ']' && stack.Count > 0) {\n\
    \                                        char top = stack.Pop();\n           \
    \                             if (c == '[') {\n                              \
    \              stack.Push(top);\n                                        } else\
    \ if (c == ']') {\n                                            stack.Push(top);\n\
    \                                        } else if (c == ']' && stack.Count >\
    \ 0) {\n                                            char top = stack.Pop();\n\
    \                                            if (c == '[') {\n               \
    \                                 stack.Push(top);\n                         \
    \                   } else if (c == ']') {\n                                 \
    \               stack.Push(top);\n                                           \
    \ } else if (c == ']' && stack.Count > 0) {\n                                \
    \                char top = stack.Pop();\n                                   \
    \             if (c == '[') {\n                                              \
    \      stack.Push(top);\n                                                } else\
    \ if (c == ']') {\n                                                    stack.Push(top);\n\
    \                                                } else if (c == ']' && stack.Count\
    \ > 0) {\n                                                    char top = stack.Pop();\n\
    \                                                    if (c == '[') {\n       \
    \                                                 stack.Push(top);\n         \
    \                                           } else if (c == ']') {\n         \
    \                                               stack.Push(top);\n           \
    \                                         } else if (c == ']' && stack.Count >\
    \ 0) {\n                                                        char top = stack.Pop();\n\
    \                                                        if (c == '[') {\n", " \
    \       bool isNested = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        isNested = true;\n                 \
    \   }\n                }\n            }\n        }\n        return isNested;",
  "        Stack<char> stack = new Stack<char>();\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                stack.Push(c);\n           \
    \ } else if (c == ']') {\n                if (stack.Count > 0) {\n           \
    \         char top = stack.Pop();\n                    if (top == '[') {\n   \
    \                     return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;", "        Stack<char> stack\
    \ = new Stack<char>();\n        bool isNested = false;\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count > 0) {\n \
    \                   char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        isNested = true;\n                    } else if (top\
    \ == ']') {\n                        isNested = false;\n                    }\n\
    \                }\n            }\n        }\n        return isNested;", "   \
    \     bool result = false;\n        Stack<char> stack = new Stack<char>();\n \
    \       foreach (char c in str) {\n            if (c == '[') {\n             \
    \   stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(c);\n                   \
    \ } else {\n                        result = true;\n                    }\n  \
    \              } else {\n                    result = false;\n               \
    \ }\n            }\n        }\n        return result;", "        bool result =\
    \ false;\n        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count > 0) {\n \
    \                   char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else if (top\
    \ == ']') {\n                        result = true;\n                    }\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  bool isNested = true;\n        Stack<char> stack = new Stack<char>();\n   \
    \     foreach (char c in str) {\n            if (c == '[') {\n               \
    \ stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ == 0) {\n                    isNested = false;\n                    break;\n\
    \                }\n                char top = stack.Pop();\n                if\
    \ (top != '[') {\n                    isNested = false;\n                    break;\n\
    \                }\n                stack.Remove(top);\n            }\n      \
    \  }\n        return isNested;", "        bool result = false;\n        Stack<char>\
    \ stack = new Stack<char>();\n        foreach (char c in str) {\n            if\
    \ (c == '[') {\n                stack.Push(c);\n            } else if (c == ']')\
    \ {\n                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top == '[') {\n                        stack.Push(c);\n\
    \                    } else if (top == ']') {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \        return result;", "        bool result = false;\n        Stack<char> stack\
    \ = new Stack<char>();\n        foreach (char c in str) {\n            if (c ==\
    \ '[') {\n                stack.Push(c);\n            } else if (c == ']') {\n\
    \                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top == '[') {\n                        stack.Push(top);\n\
    \                    } else if (top == ']') {\n                        result\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        bool result\
    \ = false;\n        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count > 0) {\n \
    \                   char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else if (top\
    \ == ']') {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        bool isNested = true;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top != '[') {\n                        isNested = false;\n                \
    \    }\n                }\n            }\n        }\n        return isNested;",
  "        bool isNested = true;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top != '[') {\n                        isNested = false;\n                \
    \    }\n                }\n            }\n        }\n        return isNested;",
  "        if (str == null || str.Length == 0) return false;\n        Stack<char>\
    \ stack = new Stack<char>();\n        bool isNested = true;\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count == 0) return\
    \ false;\n                if (stack.Pop() != '[') return false;\n            }\
    \ else {\n                if (stack.Count != 0) return false;\n              \
    \  isNested = true;\n            }\n        }\n        return isNested;", "  \
    \      bool result = false;\n        Stack<string> stack = new Stack<string>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Add(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    string top = stack.Pop();\n                    if\
    \ (top.Length > 0) {\n                        result = true;\n               \
    \     }\n                }\n            }\n        }\n        return result;",
  "        bool isNested = true;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top != '[') {\n                        isNested = false;\n                \
    \    }\n                }\n            }\n        }\n        return isNested;"]
stop_tokens:
- "\n    }\n"
