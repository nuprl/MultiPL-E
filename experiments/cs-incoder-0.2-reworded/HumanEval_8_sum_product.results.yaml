language: cs
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ number in numbers)\n            sum += number;\n        foreach (long number\
    \ in numbers)\n            product *= number;\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long product = 1L;\n        long sum = 0L;\n       \
    \ foreach (long n in numbers)\n            sum += n;\n        foreach (long n\
    \ in numbers)\n            product *= n;\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var product = 1L;\n        var sum = 0L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ number in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long product = 1L;\n        long\
    \ sum = 0L;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers)\n            sum += number;\n        foreach (long\
    \ number in numbers)\n            product *= number;\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n\n        var product = 1L;\n        var sum = 0L;\n       \
    \ foreach (var number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0;\n        long product = 1;\n        foreach (long\
    \ number in numbers)\n            sum += number;\n        foreach (long number\
    \ in numbers)\n            product *= number;\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers)\n            sum += number;\n        foreach (long\
    \ number in numbers)\n            product *= number;\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long n in numbers)\n            sum += n;\n        foreach (long n\
    \ in numbers)\n            product *= n;\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ number in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers) {\n            sum += number;\n           \
    \ product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = 0L;\n        var product = 1L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((a,\
    \ b) => a * b); // this line is equivalent to the following line\n        return\
    \ new Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = 0L;\n        var product = 1L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return Tuple.Create(0L,\
    \ 1L);\n        var sum = 0L;\n        var product = 1L;\n        foreach (var\
    \ number in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long n in numbers)\n            sum += n;\n        foreach (long n\
    \ in numbers)\n            product *= n;\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var product = 1L;\n        var sum = 0L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long product = 1;\n        long sum = 0;\n        foreach (long\
    \ number in numbers)\n            sum += number;\n        foreach (long number\
    \ in numbers)\n            product *= number;\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((a,\
    \ b) => a * b);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return Tuple.Create(0L,\
    \ 1L);\n        long sum = 0;\n        long product = 1;\n        foreach (long\
    \ number in numbers)\n            sum += number;\n        foreach (long number\
    \ in numbers)\n            product *= number;\n        return Tuple.Create(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = 0L;\n        var product = 1L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers) {\n            sum += number;\n           \
    \ product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((a,\
    \ b) => a * b);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long product = 1L;\n        long\
    \ sum = 0L;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long n in numbers) {\n            sum += n;\n            product *=\
    \ n;\n        }\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count < 2) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7041912b0fa4f479d4d358ad62c4cd9>:0 \n"
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = 0L;\n        var product = 1L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        var sum = 0L;\n        var product\
    \ = 1L;\n        foreach (var number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var result = new List<long>();\n        var product\
    \ = 1;\n        foreach (var number in numbers) {\n            product *= number;\n\
    \            result.Add(number);\n        }\n        var sum = result.Sum();\n\
    \        if (sum == 0) {\n            return new Tuple<long, long>(0L, 1L);\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppf37l25o.cs(22,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return Tuple.Create(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ number in numbers)\n            sum += number;\n        foreach (long number\
    \ in numbers)\n            product *= number;\n        return Tuple.Create(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return Tuple.Create(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ number in numbers)\n            sum += number;\n        foreach (long number\
    \ in numbers)\n            product *= number;\n        return Tuple.Create(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = 0L;\n        var product = 1L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long n in numbers) {\n            sum += n;\n       \
    \     product *= n;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return Tuple.Create(0L,\
    \ 1L);\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((a,\
    \ b) => a * b).ToLong();\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx26num1i.cs(19,58): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        var sum = 0;\n        var product\
    \ = 1;\n        foreach (var number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmposutzmx3.cs(22,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmposutzmx3.cs(23,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers) {\n            sum += number;\n           \
    \ product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long product = 1L;\n        long sum = 0L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long n in numbers) {\n            sum += n;\n       \
    \     product *= n;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long n in numbers) {\n            sum += n;\n            product *=\
    \ n;\n        }\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((a,\
    \ b) => a * b); // Slower than Sum()\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var result = new List<long>();\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (var number in numbers) {\n   \
    \         sum += number;\n            product *= number;\n            result.Add(number);\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long n in numbers) {\n            sum += n;\n            product *=\
    \ n;\n        }\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0;\n        long product = 1;\n        foreach (long\
    \ number in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long n in numbers) {\n            sum += n;\n       \
    \     product *= n;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long product = 1L;\n        long\
    \ sum = 0L;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long n in numbers)\n            sum += n;\n        foreach (long n\
    \ in numbers)\n            product *= n;\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var sum = 0;\n        var product = 1;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg8rbsb4o.cs(21,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg8rbsb4o.cs(22,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        var sum = 0L;\n        var product\
    \ = 1L;\n        foreach (var number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var sum = 0L;\n        var product = 1L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers) {\n            sum += number;\n           \
    \ product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ number in numbers)\n            sum += number;\n        foreach (long number\
    \ in numbers)\n            product *= number;\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long n in numbers)\n            sum += n;\n        foreach (long n\
    \ in numbers)\n            product *= n;\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count < 2)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4717d6fafa5b4547bf0deace6929c203>:0 \n"
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var product = 1L;\n        var sum = 0L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in numbers) {\n            sum += n;\n            product *= n;\n  \
    \      }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        var sum = numbers.Sum();\n  \
    \      var product = numbers.Aggregate((x, y) => x * y);\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804056
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers) {\n            sum += number;\n           \
    \ product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((a,\
    \ b) => a * b);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long n in numbers) {\n            sum += n;\n            product *=\
    \ n;\n        }\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((a,\
    \ b) => a * b);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n\n        long sum = 0L;\n        long product = 1L;\n\n   \
    \     foreach (long number in numbers) {\n            sum += number;\n       \
    \     product *= number;\n        }\n\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804056
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x,\
    \ y) => x * y);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n        long sum = 0L;\n        long product = 1L;\n       \
    \ foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        var sum = 0L;\n        var product = 1L;\n        foreach\
    \ (var number in numbers) {\n            sum += number;\n            product *=\
    \ number;\n        }\n        return new Tuple<long, long>(sum, product);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        var sum = 0L;\n        var product\
    \ = 1L;\n        foreach (var number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long product = 1L;\n        long sum = 0L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804055
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0L;\n        long product = 1L;\n        foreach (long\
    \ n in numbers) {\n            sum += n;\n            product *= n;\n        }\n\
    \        return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804056
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        var sum = numbers.Sum();\n  \
    \      var product = numbers.Aggregate((x, y) => x * y);\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804056
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0L;\n        long product = 1L;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  product *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long product = 1L;\n        long\
    \ sum = 0L;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0) {\n            return new\
    \ Tuple<long, long>(0L, 1L);\n        }\n        long sum = 0L;\n        long\
    \ product = 1L;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers == null || numbers.Count == 0)\n            return new Tuple<long,\
    \ long>(0L, 1L);\n\n        long sum = 0L;\n        long product = 1L;\n     \
    \   foreach (long number in numbers)\n            sum += number;\n        foreach\
    \ (long number in numbers)\n            product *= number;\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804056
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        long sum = 0;\n        long product = 1;\n        foreach (long\
    \ number in numbers)\n            sum += number;\n        foreach (long number\
    \ in numbers)\n            product *= number;\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0L,\
    \ 1L);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804054
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
