name: HumanEval_102_choose_num
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // This function takes two positive numbers x and y and returns\
  \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
  \ If \n    // there's no such number, then the function should return -1.\n    //\
  \ For example:\n    // >>> ChooseNum((12L), (15L))\n    // (14L)\n    // >>> ChooseNum((13L),\
  \ (12L))\n    // (-1L)\n    public static long ChooseNum(long x, long y) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChooseNum((12L),\
  \ (15L)) == (14L));\n    Debug.Assert(ChooseNum((13L), (12L)) == (-1L));\n    Debug.Assert(ChooseNum((33L),\
  \ (12354L)) == (12354L));\n    Debug.Assert(ChooseNum((5234L), (5233L)) == (-1L));\n\
  \    Debug.Assert(ChooseNum((6L), (29L)) == (28L));\n    Debug.Assert(ChooseNum((27L),\
  \ (10L)) == (-1L));\n    Debug.Assert(ChooseNum((7L), (7L)) == (-1L));\n    Debug.Assert(ChooseNum((546L),\
  \ (546L)) == (546L));\n    }\n\n}\n"
completions: ["        long xx = x;\n        long yy = y;\n        long xy = x * y;\n\
    \        long xx = xx * x;\n        long yy = yy * y;\n        long xy = xy *\
    \ x;\n        long xx = xx * x;\n        long yy = yy * y;\n        long xy =\
    \ xy * x;\n        long xx = xx * x;\n        long yy = yy * y;\n        long\
    \ xy = xy * x;\n        long xx = xx * x;\n        long yy = yy * y;\n       \
    \ long xy = xy * x;\n        long xx = xx * x;\n        long yy = yy * y;\n  \
    \      long xy = xy * x;\n        long xx = xx * x;\n        long yy = yy * y;\n\
    \        long xy = xy * x;\n        long xx = xx * x;\n        long yy = yy *\
    \ y;\n        long xy = xy * x;\n        long xx = xx * x;\n        long yy =\
    \ yy * y;\n        long xy = xy * x;\n        long xx = xx * x;\n        long\
    \ yy = yy * y;\n        long xy = xy * x;\n        long xx = xx * x;\n       \
    \ long yy = yy * y;\n        long xy = xy * x;\n        long xx = xx * x;\n  \
    \      long yy = yy * y;\n        long xy = xy * x;\n        long xx = xx * x;\n\
    \        long yy = yy * y;\n        long xy = xy * x;\n        long xx = xx *\
    \ x;\n        long yy = yy * y;\n        long xy = xy * x;\n        long xx =\
    \ xx * x;\n        long yy = yy * y;\n        long xy = xy * x;\n        long\
    \ xx = xx * x;\n        long yy = yy * y;\n        long xy = xy * x;\n       \
    \ long xx = xx * x;\n        long yy = yy * y;\n        long xy = xy * x;\n  \
    \      long xx = xx * x;\n        long yy = yy * y;\n        long xy = xy * x;\n\
    \        long xx = xx * x;\n        long yy = yy * y;\n        long xy = xy *\
    \ x;\n        long xx = xx * x;\n        long yy = yy * y;\n        long xy =\
    \ xy * x;\n        long xx = xx * x;\n        long yy = yy * y;\n        long\
    \ xy = xy * x;\n        long xx = xx * x;\n        long yy = y", "        long\
    \ even = x % 2 == 0 ? x : x - 1;\n        long odd = y % 2 == 0 ? y : y - 1;\n\
    \        long maxEven = even;\n        long maxOdd = odd;\n        long maxEvenEven\
    \ = even * even;\n        long maxOddOdd = odd * odd;\n        long maxEvenOddEven\
    \ = even * odd;\n        long maxOddEvenOdd = odd * even;\n        long maxEvenOddOddEven\
    \ = even * odd;\n        long maxOddEvenOddOdd = odd * even;\n        long maxEvenOddEvenOddEven\
    \ = even * odd;\n        long maxOddEvenOddOddEven = odd * even;\n        long\
    \ maxEvenOddEvenOddOddEven = even * odd;\n        long maxOddEvenOddOddOddEven\
    \ = odd * even;\n        long maxEvenOddEvenOddOddOddEven = even * odd;\n    \
    \    long maxOddEvenOddOddOddOddEven = odd * even;\n        long maxEvenOddEvenOddOddOddOddEven\
    \ = even * odd;\n        long maxOddEvenOddOddOddOddOddEven = odd * even;\n  \
    \      long maxEvenOddEvenOddOddOddOddOddEven = even * odd;\n        long maxOddEvenOddOddOddOddOddOddEven\
    \ = odd * even;\n        long maxEvenOddEvenOddOddOddOddOddOddEven = even * odd;\n\
    \        long maxOddEvenOddOddOddOddOddOddOddEven = odd * even;\n        long\
    \ maxEvenOddEvenOddOddOddOddOddOddOddEven = even * odd;\n        long maxOddEvenOddOddOddOddOddOddOddOddEven\
    \ = odd * even;\n        long maxEvenOddEvenOddOddOddOddOddOddOddOddEven = even\
    \ * odd;\n        long maxOddEvenOddOddOddOddOddOddOddOddOddEven = odd * even;\n\
    \        long maxEvenOddEvenOddOddOdd", "        long even = x;\n        long\
    \ odd = y;\n        long biggest = -1;\n        while (even < odd) {\n       \
    \     biggest = even;\n            even = even + even;\n            odd = odd\
    \ + odd;\n        }\n        if (biggest == -1) {\n            return -1;\n  \
    \      }\n        return biggest;", "        long even = x;\n        long odd\
    \ = y;\n        long biggest = -1;\n        bool evenInRange = false;\n      \
    \  bool oddInRange = false;\n        while (even < odd) {\n            evenInRange\
    \ = even <= y;\n            oddInRange = odd >= x;\n            if (evenInRange\
    \ && oddInRange) {\n                biggest = even;\n                break;\n\
    \            }\n            even = even + 1;\n            odd = odd - 1;\n   \
    \     }\n        return biggest;", "        long even = x;\n        long odd =\
    \ y;\n        long biggest = x;\n        long smallest = y;\n        while (even\
    \ < odd) {\n            biggest = even;\n            even = even + 1;\n      \
    \      odd = odd + 1;\n            if (even > odd) {\n                biggest\
    \ = odd;\n                even = even - 1;\n                odd = odd - 1;\n \
    \           }\n        }\n        if (even > odd) {\n            biggest = even;\n\
    \            even = even - 1;\n            odd = odd - 1;\n        }\n       \
    \ if (biggest < smallest) {\n            biggest = smallest;\n            smallest\
    \ = biggest + 1;\n        }\n        return biggest;", "        long xMinusY =\
    \ x - y;\n        long yMinusX = y - x;\n        long xMinusXMinusY = xMinusX\
    \ - yMinusY;\n        long xMinusXMinusYMinusX = xMinusXMinusY - xMinusY;\n  \
    \      long xMinusXMinusYMinusXMinusY = xMinusXMinusYMinusX - xMinusY;\n     \
    \   long xMinusXMinusYMinusXMinusYMinusX = xMinusXMinusYMinusXMinusY - xMinusY\
    \ - x;\n        long xMinusXMinusYMinusXMinusYMinusXMinusY = xMinusXMinusYMinusXMinusYMinusX\
    \ - xMinusY - x - y;\n        long xMinusXMinusYMinusXMinusYMinusXMinusYMinusX\
    \ = xMinusXMinusYMinusXMinusYMinusXMinusY - xMinusY - x - y - x;\n        long\
    \ xMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusY = xMinusXMinusYMinusXMinusYMinusXMinusYMinusX\
    \ - xMinusY - x - y - x - y;\n        long xMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusYMinusX\
    \ = xMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusY - xMinusY - x - y - x -\
    \ y - x;\n        long xMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusY\
    \ = xMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusYMinusX - xMinusY - x - y\
    \ - x - y - x - y;\n        long xMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusYMinusX\
    \ = xMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusYMinusXMinusY - xMinusY -\
    \ x - y - x - y - ", "        long even = x % 2 == 0 ? x : x + 1;\n        long\
    \ odd = y % 2 == 0 ? y : y + 1;\n        long biggest = even;\n        long smallest\
    \ = odd;\n        long range = (long)Math.Max(Math.Abs(x), Math.Abs(y));\n   \
    \     long range2 = range / 2;\n        long range3 = range2 / 2;\n        long\
    \ range4 = range3 / 2;\n        long range5 = range4 / 2;\n        long range6\
    \ = range5 / 2;\n        long range7 = range6 / 2;\n        long range8 = range7\
    \ / 2;\n        long range9 = range8 / 2;\n        long range10 = range9 / 2;\n\
    \        long range11 = range10 / 2;\n        long range12 = range11 / 2;\n  \
    \      long range13 = range12 / 2;\n        long range14 = range13 / 2;\n    \
    \    long range15 = range14 / 2;\n        long range16 = range15 / 2;\n      \
    \  long range17 = range16 / 2;\n        long range18 = range17 / 2;\n        long\
    \ range19 = range18 / 2;\n        long range20 = range19 / 2;\n        long range21\
    \ = range20 / 2;\n        long range22 = range21 / 2;\n        long range23 =\
    \ range22 / 2;\n        long range24 = range23 / 2;\n        long range25 = range24\
    \ / 2;\n        long range26 = range25 / 2;\n        long range27 = range26 /\
    \ 2;\n        long range28 = range27 / 2;\n        long range29 = range28 / 2;\n\
    \        long range30 = range29 / 2;\n        long range31 = range30 / 2;\n  \
    \      long range32 = range31 / 2;\n        long range33 = range32 / 2;\n    \
    \    long range34 = range33 / 2;\n        long range35 = range34 / 2;\n      \
    \  long range36 = range35 / 2;\n        long range37 = range36 / 2;\n        long\
    \ range38 = range37 / 2;\n        long range39 = range38 / 2;\n        long range40\
    \ = range39 / 2;\n        long range41 = range40 / 2;\n        long range42 =\
    \ range41 / 2;\n        long range43 = range42 / 2;\n        long range44 = range43\
    \ / 2;\n        long range45 = range44 / 2;\n        long range46 = range45 /\
    \ 2;\n        long range47 = range46 / 2;\n        long range48 = range47", " \
    \       long even = x % 2 == 0 ? x : -1;\n        long odd = y % 2 == 0 ? y :\
    \ -1;\n        long biggest = even;\n        if (even > odd) {\n            biggest\
    \ = odd;\n        }\n        return biggest;", "        long even = x | y;\n \
    \       long odd = x ^ y;\n        if (even > odd) {\n            return even;\n\
    \        }\n        return odd;", "        long maxEven = -1;\n        long xEven\
    \ = x % 2 == 0 ? x : x - 2;\n        long yEven = y % 2 == 0 ? y : y - 2;\n  \
    \      long xOdd = xEven % 2 == 0 ? xEven : xEven - 2;\n        long yOdd = yEven\
    \ % 2 == 0 ? yEven : yEven - 2;\n        if (xOdd > yEven) {\n            long\
    \ tempEven = xEven;\n            xEven = yEven;\n            yEven = tempEven;\n\
    \        }\n        if (xOdd < yEven) {\n            long tempOdd = xOdd;\n  \
    \          xOdd = yOdd;\n            yOdd = tempOdd;\n        }\n        if (xEven\
    \ == yEven) {\n            long tempEven = xEven;\n            xEven = yEven;\n\
    \            yEven = tempEven;\n        }\n        if (xOdd == yOdd) {\n     \
    \       long tempOdd = xOdd;\n            xOdd = yOdd;\n            yOdd = tempOdd;\n\
    \        }\n        if (xEven > yEven) {\n            long tempEven = xEven;\n\
    \            xEven = yEven;\n            yEven = tempEven;\n        }\n      \
    \  if (xEven < yEven) {\n            long tempOdd = xOdd;\n            xOdd =\
    \ yOdd;\n            yOdd = tempOdd;\n        }\n        if (xOdd > yOdd) {\n\
    \            long tempOdd = xOdd;\n            xOdd = yOdd;\n            yOdd\
    \ = tempOdd;\n        }\n        if (xOdd < yOdd) {\n            long tempEven\
    \ = xEven;\n            xEven = yEven;\n            yEven = tempEven;\n      \
    \  }\n        if (xEven == yEven) {\n            long tempEven = xEven;\n    \
    \        xEven = yEven;\n            yEven = tempEven;\n        }\n        if\
    \ (xOdd == yOdd) {\n            long tempOdd = xOdd;\n            xOdd = yOdd;\n\
    \            yOdd = tempOdd;\n        }\n        if (xEven > yEven) {\n      \
    \      long tempEven = xEven;\n            xEven = yEven;\n            yEven =\
    \ tempEven;\n        }\n        if (xEven < yEven) {\n            long tempOdd\
    \ = xOdd;\n            xOdd = yOdd;\n            yOdd = tempOdd;\n        }\n\
    \        if (xOdd > ", "        long even = x & 1;\n        long odd = x >> 1;\n\
    \        long evenodd = even + odd;\n        long result = evenodd * (y >> 1)\
    \ + even;\n        if (result > y)\n            return -1;\n        return result;",
  "        long even = x & 1;\n        long odd = x >> 1;\n        long evenodd =\
    \ even | odd;\n        long biggest = evenodd;\n        if (evenodd > y) {\n \
    \           biggest = -1;\n        }\n        return biggest;", "        long\
    \ even = x & 1;\n        long odd = x >> 1;\n        long evenodd = even + odd;\n\
    \        long biggest = evenodd;\n        if (evenodd > y) {\n            biggest\
    \ = -1;\n        }\n        return biggest;", "        long even = x;\n      \
    \  long odd = y;\n        long biggest = even;\n        long smaller = odd;\n\
    \        bool evenBigger = false;\n        bool oddBigger = false;\n        while\
    \ (even < odd) {\n            if (even % 2 == 0) {\n                even = even\
    \ + 1;\n                evenBigger = true;\n            } else {\n           \
    \     even = even - 1;\n                evenBigger = false;\n            }\n \
    \           if (odd % 2 == 0) {\n                odd = odd + 1;\n            \
    \    oddBigger = true;\n            } else {\n                odd = odd - 1;\n\
    \                oddBigger = false;\n            }\n            if (evenBigger\
    \ && oddBigger) {\n                biggest = even;\n                smaller =\
    \ odd;\n            } else if (evenBigger && !oddBigger) {\n                biggest\
    \ = even;\n                smaller = even;\n            } else if (!evenBigger\
    \ && oddBigger) {\n                biggest = odd;\n                smaller = even;\n\
    \            }\n        }\n        return biggest;", "        long even = x |\
    \ y;\n        long odd = x ^ y;\n        long biggest = even;\n        if (odd\
    \ > biggest) {\n            biggest = odd;\n        }\n        return biggest;",
  "        long xx = x;\n        long yy = y;\n        long xy = x * y;\n        long\
    \ xx = xx * xx;\n        long yy = yy * yy;\n        long xy = xy * xy;\n    \
    \    long xx = xx * xx;\n        long yy = yy * yy;\n        long xy = xy * xy;\n\
    \        long xx = xx * xx;\n        long yy = yy * yy;\n        long xy = xy\
    \ * xy;\n        long xx = xx * xx;\n        long yy = yy * yy;\n        long\
    \ xy = xy * xy;\n        long xx = xx * xx;\n        long yy = yy * yy;\n    \
    \    long xy = xy * xy;\n        long xx = xx * xx;\n        long yy = yy * yy;\n\
    \        long xy = xy * xy;\n        long xx = xx * xx;\n        long yy = yy\
    \ * yy;\n        long xy = xy * xy;\n        long xx = xx * xx;\n        long\
    \ yy = yy * yy;\n        long xy = xy * xy;\n        long xx = xx * xx;\n    \
    \    long yy = yy * yy;\n        long xy = xy * xy;\n        long xx = xx * xx;\n\
    \        long yy = yy * yy;\n        long xy = xy * xy;\n        long xx = xx\
    \ * xx;\n        long yy = yy * yy;\n        long xy = xy * xy;\n        long\
    \ xx = xx * xx;\n        long yy = yy * yy;\n        long xy = xy * xy;\n    \
    \    long xx = xx * xx;\n        long yy = yy * yy;\n        long xy = xy * xy;\n\
    \        long xx = xx * xx;\n        long yy = yy * yy;\n        long xy = xy\
    \ * xy;\n        long xx = xx * xx;\n        long yy = yy * yy;\n        long\
    \ xy = xy * xy;\n        long xx = xx * xx;\n        long yy = yy * yy;\n    \
    \    long xy = xy * xy;\n        long xx = xx * xx;\n        long yy = yy * yy;\n\
    \        long xy = xy * xy;\n        long xx = xx * xx;\n        long yy = yy\
    \ * yy;\n        long xy = xy * xy;\n        long xx = xx * xx", "        long\
    \ even = x % 2 == 0 ? x : x - 1;\n        long odd = y % 2 == 0 ? y : y - 1;\n\
    \        long result = even;\n        if (odd > even) {\n            while (odd\
    \ > even) {\n                result += even;\n                even += 2;\n   \
    \         }\n        } else {\n            while (even > odd) {\n            \
    \    result += odd;\n                odd += 2;\n            }\n        }\n   \
    \     return result;", "        long z = (long)Math.Max(x, y);\n        long a\
    \ = z / 2;\n        long b = z % 2;\n        while (b < a) {\n            z =\
    \ z / 2;\n            b = z % 2;\n        }\n        return z;", "        long\
    \ even = x;\n        long odd = y;\n        long biggest = -1;\n        while\
    \ (even < odd) {\n            long mid = (even + odd) / 2;\n            if (mid\
    \ % 2 == 0) {\n                even = mid;\n            } else {\n           \
    \     odd = mid;\n            }\n            if (even > biggest) {\n         \
    \       biggest = even;\n            }\n            if (odd > biggest) {\n   \
    \             biggest = odd;\n            }\n        }\n        return biggest;",
  "        long maxEven = -1;\n        long xEven = x;\n        long yEven = y;\n\
    \        long xOdd = x;\n        long yOdd = y;\n        long xEvenMinus1 = x;\n\
    \        long yEvenMinus1 = y;\n        long xOddMinus1 = x;\n        long yOddMinus1\
    \ = y;\n        long xEvenMinus2 = x;\n        long yEvenMinus2 = y;\n       \
    \ long xOddMinus2 = x;\n        long yOddMinus2 = y;\n        long xEvenMinus3\
    \ = x;\n        long yEvenMinus3 = y;\n        long xOddMinus3 = x;\n        long\
    \ yOddMinus3 = y;\n        long xEvenMinus4 = x;\n        long yEvenMinus4 = y;\n\
    \        long xOddMinus4 = x;\n        long yOddMinus4 = y;\n        long xEvenMinus5\
    \ = x;\n        long yEvenMinus5 = y;\n        long xOddMinus5 = x;\n        long\
    \ yOddMinus5 = y;\n        long xEvenMinus6 = x;\n        long yEvenMinus6 = y;\n\
    \        long xOddMinus6 = x;\n        long yOddMinus6 = y;\n        long xEvenMinus7\
    \ = x;\n        long yEvenMinus7 = y;\n        long xOddMinus7 = x;\n        long\
    \ yOddMinus7 = y;\n        long xEvenMinus8 = x;\n        long yEvenMinus8 = y;\n\
    \        long xOddMinus8 = x;\n        long yOddMinus8 = y;\n        long xEvenMinus9\
    \ = x;\n        long yEvenMinus9 = y;\n        long xOddMinus9 = x;\n        long\
    \ yOddMinus9 = y;\n        long xEvenMinus10 = x;\n        long yEvenMinus10 =\
    \ y;\n        long xOddMinus10 = x;\n        long yOddMinus10 = y;\n        long\
    \ xEvenMinus11 = x;\n        long yEvenMinus11 = y;\n        long xOddMinus11\
    \ = x;\n        long yOddMinus11 = y;\n        long xEvenMinus12 = x;\n      \
    \  long yEvenMinus12 = y;\n        long xOddMinus12 = x;\n        long yOddMinus12\
    \ = y;\n        long xEvenMinus13 = x;\n        long yEvenMinus13 = y;"]
stop_tokens:
- "\n    }\n"
