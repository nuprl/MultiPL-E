language: cs
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit >= 2 && digit <= 6)
    {\n                result += (long)Math.Pow(digit, 2);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0cec7313854850a46dcbe5da15d7e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0cec7313854850a46dcbe5da15d7e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int val = (int)c;\n            if (val > 9) {\n                val
    -= 10;\n            }\n            long tmp = val * val;\n            if (tmp
    > ret) {\n                ret = tmp;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b63eebd6a9dc4320aba3a2438ade3d1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b63eebd6a9dc4320aba3a2438ade3d1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                result
    += (long)Math.Pow(16, (int)c - '0');\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a1da7dfc9d4b76920e5e10623241f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a1da7dfc9d4b76920e5e10623241f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       char[] hexChars = hex.ToCharArray();\n        foreach (char hexChar in
    hexChars) {\n            int decimal = Convert.ToInt32(hexChar, 16);\n            if
    (decimal >= 2 && decimal <= 9) {\n                result += decimal;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8d520jw1.cs(35,17): error CS1001: Identifier expected

    /tmp/tmp8d520jw1.cs(35,17): error CS1002: ; expected

    /tmp/tmp8d520jw1.cs(35,25): error CS1001: Identifier expected

    /tmp/tmp8d520jw1.cs(36,17): error CS1525: Invalid expression term ''decimal''

    /tmp/tmp8d520jw1.cs(36,33): error CS1525: Invalid expression term ''decimal''

    /tmp/tmp8d520jw1.cs(37,27): error CS1525: Invalid expression term ''decimal''

    '
  timestamp: 1659799311
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long num2 = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                num2
    += d;\n            }\n        }\n        return num2;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a74c0afcd044ad6bd9199b1a189d7b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a74c0afcd044ad6bd9199b1a189d7b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digits = 0;\n        long
    primes = 0;\n        long hexDigits = 0;\n        string hex = num.ToUpper();\n
    \       char[] hexChars = hex.ToCharArray();\n        foreach (char hexChar in
    hexChars) {\n            hexDigits += hexChar.ToString().Length;\n        }\n
    \       foreach (char hexChar in hexChars) {\n            digits += hexChar.ToString().Length;\n
    \       }\n        long hexDigit = hexDigits;\n        long hexDigitPrimes = hexDigit
    / 2;\n        long hexDigitPrime = hexDigitPrimes;\n        long hexDigitPrimePrimes
    = hexDigitPrime / 2;\n        long hexDigitPrimePrime = hexDigitPrimePrimes;\n
    \       long hexDigitPrimePrimePrimes = hexDigitPrimePrime / 2;\n        long
    hexDigitPrimePrimePrime = hexDigitPrimePrimePrimes;\n        long hexDigitPrimePrimePrimePrimes
    = hexDigitPrimePrimePrime / 2;\n        long hexDigitPrimePrimePrimePrime = hexDigitPrimePrimePrimePrimes;\n
    \       long hexDigitPrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrime
    / 2;\n        long hexDigitPrimePrimePrimePrimePrime = hexDigitPrimePrimePrimePrimePrimes;\n
    \       long hexDigitPrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrime
    / 2;\n        long hexDigitPrimePrimePrimePrimePrime = hexDigitPrimePrimePrimePrimePrimePrimes;\n
    \       long hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrime
    / 2;\n        long hexDigitPrimePrimePrimePrimePrimePrime = hexDigitPrimePrimePrimePrimePrimePrimePrimes;\n
    \       long hexDigitPrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrime
    / 2;\n        long hexDigitPrimePrimePrimePrimePrimePrimePrime = hexDigitPrimePrimePrimePrimePrimePrimePrimePrime\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpce4qeuhs.cs(59,108): error CS1002: ; expected

    '
  timestamp: 1659799311
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           int power = (int)Math.Pow(16, digit);\n            result += power;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <0f388b3cebe344a691b9029f918a64d7>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <0f388b3cebe344a691b9029f918a64d7>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <0f388b3cebe344a691b9029f918a64d7>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <0f388b3cebe344a691b9029f918a64d7>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = 0;\n        long numPrimes = 0;\n
    \       long numPrimes2 = 0;\n        long numPrimes3 = 0;\n        long numPrimes4
    = 0;\n        long numPrimes5 = 0;\n        long numPrimes6 = 0;\n        long
    numPrimes7 = 0;\n        long numPrimes8 = 0;\n        long numPrimes9 = 0;\n
    \       long numPrimes10 = 0;\n        long numPrimes11 = 0;\n        long numPrimes12
    = 0;\n        long numPrimes13 = 0;\n        long numPrimes14 = 0;\n        long
    numPrimes15 = 0;\n        long numPrimes16 = 0;\n        long numPrimes17 = 0;\n
    \       long numPrimes18 = 0;\n        long numPrimes19 = 0;\n        long numPrimes20
    = 0;\n        long numPrimes21 = 0;\n        long numPrimes22 = 0;\n        long
    numPrimes23 = 0;\n        long numPrimes24 = 0;\n        long numPrimes25 = 0;\n
    \       long numPrimes26 = 0;\n        long numPrimes27 = 0;\n        long numPrimes28
    = 0;\n        long numPrimes29 = 0;\n        long numPrimes30 = 0;\n        long
    numPrimes31 = 0;\n        long numPrimes32 = 0;\n        long numPrimes33 = 0;\n
    \       long numPrimes34 = 0;\n        long numPrimes35 = 0;\n        long numPrimes36
    = 0;\n        long numPrimes37 = 0;\n        long numPrimes38 = 0;\n        long
    numPrimes39 = 0;\n        long numPrimes40 = 0;\n        long numPrimes41 = 0;\n
    \       long numPrimes42 = 0;\n        long numPrimes43 = 0;\n        long numPrimes44
    = 0;\n        long numPrimes45 = 0;\n        long numPrimes46 = 0;\n        long
    numPrimes47 = 0;\n        long numPrimes48 = 0;\n        long numPrimes49 = 0;\n
    \       long numPrimes50 = 0;\n        long numPrimes51 = 0;\n        long numPrimes52
    = 0;\n        long numPrimes53 = 0;\n        long numPrimes54 = 0;\n        long
    numPrimes55 = 0;\n        long numPrimes56 = 0;\n        long numPrimes57 = 0;\n
    \       long numPrimes58 = 0;\n        long numPrimes59 = 0;\n        long numPrimes60
    = 0;\n        long numPrimes61 = 0;\n        long numPrimes62 = 0;\n        long
    numPrimes63 = 0;\n        long numPrimes64\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5jbloza.cs(95,25): error CS1002: ; expected

    '
  timestamp: 1659799311
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int digit = Convert.ToInt32(c);\n            if (digit > 9) {\n                throw
    new ArgumentOutOfRangeException(\"HexKey\", \"The input string contains invalid
    characters.\");\n            }\n            int digit2 = digit - 10;\n            if
    (digit2 == 0) {\n                ret += digit * digit2;\n            }\n            else
    {\n                ret += digit * digit2;\n                ret += digit2;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: The input string
    contains invalid characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String
    num) [0x00029] in <3357524a82104bc2a2d4615333c2c232>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3357524a82104bc2a2d4615333c2c232>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: The input string contains invalid
    characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x00029]
    in <3357524a82104bc2a2d4615333c2c232>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3357524a82104bc2a2d4615333c2c232>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hexadecimal digit must be between
    0 and 9\");\n            }\n            result += (long)Math.Pow(16, digit);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <bd4a4e8a67124826b91eeddf09ffe846>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <bd4a4e8a67124826b91eeddf09ffe846>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <bd4a4e8a67124826b91eeddf09ffe846>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bd4a4e8a67124826b91eeddf09ffe846>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        long numDigits = num.Length;\n
    \       long numPrimes = 0;\n        long numPrimes2 = numPrimes;\n        long
    numPrimes3 = numPrimes;\n        long numPrimes4 = numPrimes;\n        long numPrimes5
    = numPrimes;\n        long numPrimes6 = numPrimes;\n        long numPrimes7 =
    numPrimes;\n        long numPrimes8 = numPrimes;\n        long numPrimes9 = numPrimes;\n
    \       long numPrimes10 = numPrimes;\n        long numPrimes11 = numPrimes;\n
    \       long numPrimes12 = numPrimes;\n        long numPrimes13 = numPrimes;\n
    \       long numPrimes14 = numPrimes;\n        long numPrimes15 = numPrimes;\n
    \       long numPrimes16 = numPrimes;\n        long numPrimes17 = numPrimes;\n
    \       long numPrimes18 = numPrimes;\n        long numPrimes19 = numPrimes;\n
    \       long numPrimes20 = numPrimes;\n        long numPrimes21 = numPrimes;\n
    \       long numPrimes22 = numPrimes;\n        long numPrimes23 = numPrimes;\n
    \       long numPrimes24 = numPrimes;\n        long numPrimes25 = numPrimes;\n
    \       long numPrimes26 = numPrimes;\n        long numPrimes27 = numPrimes;\n
    \       long numPrimes28 = numPrimes;\n        long numPrimes29 = numPrimes;\n
    \       long numPrimes30 = numPrimes;\n        long numPrimes31 = numPrimes;\n
    \       long numPrimes32 = numPrimes;\n        long numPrimes33 = numPrimes;\n
    \       long numPrimes34 = numPrimes;\n        long numPrimes35 = numPrimes;\n
    \       long numPrimes36 = numPrimes;\n        long numPrimes37 = numPrimes;\n
    \       long numPrimes38 = numPrimes;\n        long numPrimes39 = numPrimes;\n
    \       long numPrimes40 = numPrimes;\n        long numPrimes41 = numPrimes;\n
    \       long numPrimes42 = numPrimes;\n        long numPrimes43 = numPri\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxlx8w3uu.cs(75,34): error CS1002: ; expected

    '
  timestamp: 1659799311
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long num2 = 0;\n        bool isPrime = true;\n        string
    hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n        foreach
    (char c in hexChars) {\n            int num = Convert.ToInt32(c);\n            int
    num2 = num * num;\n            if (num2 > num) {\n                isPrime = false;\n
    \           }\n        }\n        if (isPrime) {\n            num2 = Convert.ToInt64(hexChars[0])
    * Convert.ToInt64(hexChars[0]);\n        }\n        return num2;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92r4gc9n.cs(36,17): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp92r4gc9n.cs(37,17): error CS0136: A local or parameter named ''num2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        long
    prime = 0;\n        bool isPrime = true;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            digit = Convert.ToInt64(c);\n            if
    (isPrime) {\n                prime = digit * digit;\n                if (prime
    > result) {\n                    result = prime;\n                }\n            }\n
    \           else {\n                prime = digit * digit;\n                if
    (prime < result) {\n                    result = prime;\n                }\n            }\n
    \           isPrime = !isPrime;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7517c746589407ab6c2cbabacbbad05>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7517c746589407ab6c2cbabacbbad05>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        long
    prime = 0;\n        long primeCount = 0;\n        string hex = num.ToUpper();\n
    \       char[] hexChars = hex.ToCharArray();\n        foreach (char hexChar in
    hexChars) {\n            digit = Convert.ToInt64(hexChar, 16);\n            prime
    = digit % 10;\n            if (prime == 0) {\n                primeCount++;\n
    \           }\n        }\n        if (primeCount >= 2) {\n            primeCount--;\n
    \       }\n        prime = prime * 2;\n        primeCount--;\n        foreach
    (char hexChar in hexChars) {\n            digit = Convert.ToInt64(hexChar, 16);\n
    \           prime = prime % 10;\n            if (prime == 0) {\n                primeCount--;\n
    \           }\n        }\n        result = prime * primeCount;\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq6ixh7bc.cs(38,46): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    /tmp/tmpq6ixh7bc.cs(50,46): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        bool
    isPrime = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                digit = digit - 10;\n            }\n
    \           if (digit == 0) {\n                isPrime = false;\n            }\n
    \           if (isPrime) {\n                if (digit % 2 == 0) {\n                    isPrime
    = false;\n                }\n            }\n            if (isPrime) {\n                result
    += digit;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0cf41376a4f49fb8f47a56d78134950>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0cf41376a4f49fb8f47a56d78134950>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit >= 2 && digit <= 9)
    {\n                result += digit * digit;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f92af341aef64d88ac4380af4280d6cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f92af341aef64d88ac4380af4280d6cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentException(\"Hexadecimal digit
    must be between 'A' and 'F'.\");\n            }\n            result += (digit
    - 'A') * Math.Pow(16, num.Length - 1 - c.ToString().Length);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqp205sq3.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numOfDigits = 0;\n        long numOfPrimes
    = 0;\n        long numOfPrimeDigits = 0;\n        long numOfPrimeDigits2 = 0;\n
    \       long numOfPrimeDigits3 = 0;\n        long numOfPrimeDigits4 = 0;\n        long
    numOfPrimeDigits5 = 0;\n        long numOfPrimeDigits6 = 0;\n        long numOfPrimeDigits7
    = 0;\n        long numOfPrimeDigits8 = 0;\n        long numOfPrimeDigits9 = 0;\n
    \       long numOfPrimeDigits10 = 0;\n        long numOfPrimeDigits11 = 0;\n        long
    numOfPrimeDigits12 = 0;\n        long numOfPrimeDigits13 = 0;\n        long numOfPrimeDigits14
    = 0;\n        long numOfPrimeDigits15 = 0;\n        long numOfPrimeDigits16 =
    0;\n        long numOfPrimeDigits17 = 0;\n        long numOfPrimeDigits18 = 0;\n
    \       long numOfPrimeDigits19 = 0;\n        long numOfPrimeDigits20 = 0;\n        long
    numOfPrimeDigits21 = 0;\n        long numOfPrimeDigits22 = 0;\n        long numOfPrimeDigits23
    = 0;\n        long numOfPrimeDigits24 = 0;\n        long numOfPrimeDigits25 =
    0;\n        long numOfPrimeDigits26 = 0;\n        long numOfPrimeDigits27 = 0;\n
    \       long numOfPrimeDigits28 = 0;\n        long numOfPrimeDigits29 = 0;\n        long
    numOfPrimeDigits30 = 0;\n        long numOfPrimeDigits31 = 0;\n        long numOfPrimeDigits32
    = 0;\n        long numOfPrimeDigits33 = 0;\n        long numOfPrimeDigits34 =
    0;\n        long numOfPrimeDigits35 = 0;\n        long numOfPrimeDigits36 = 0;\n
    \       long numOfPrimeDigits37 = 0;\n        long numOfPrimeDigits38 = 0;\n        long
    numOfPrimeDigits39 = 0;\n        long numOfPrimeDigits40 = 0;\n        long numOfPrimeDigits41
    = 0;\n        long numOfPrimeDigits42 = 0;\n        long numOfPrimeDigits43 =
    0;\n        long numOfPrimeDigits44 = 0;\n        long numOfPrimeDigits45 = 0;\n
    \       long numOfPrimeDigits\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphzy00sjw.cs(78,30): error CS1002: ; expected

    '
  timestamp: 1659799311
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            if (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||
    c == 'F') {\n                result += Convert.ToInt64(Math.Pow(16, (int)c));\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.OverflowException: Arithmetic operation
    resulted in an overflow.\n  at (wrapper managed-to-native) System.Object.__icall_wrapper___emul_fconv_to_ovf_i8(double)\n
    \ at System.Convert.ToInt64 (System.Double value) [0x00006] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HexKey (System.String num) [0x00052] in <d6d1c6735e3c4d17bcc476e921240dfb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d6d1c6735e3c4d17bcc476e921240dfb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.OverflowException: Arithmetic operation
    resulted in an overflow.\n  at (wrapper managed-to-native) System.Object.__icall_wrapper___emul_fconv_to_ovf_i8(double)\n
    \ at System.Convert.ToInt64 (System.Double value) [0x00006] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HexKey (System.String num) [0x00052] in <d6d1c6735e3c4d17bcc476e921240dfb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d6d1c6735e3c4d17bcc476e921240dfb>:0
    \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit >= 2 && digit <= 9)
    {\n                result += (long)Math.Pow(digit, 2);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1db40ee593004ebe8249032e926864c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1db40ee593004ebe8249032e926864c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit >= '0' &&
    digit <= '9') {\n                result += (digit - '0');\n            }\n            else
    if (digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit == 'E'
    || digit == 'F') {\n                result += (digit - 'A' + 10);\n            }\n
    \           else {\n                throw new ArgumentException(\"Hex digit must
    be between 0 and 9 or A, B, C, D, E, F\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f36d78d82e174e9b8105efa22a852ae9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f36d78d82e174e9b8105efa22a852ae9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int digit = Convert.ToInt32(c);\n            if (digit < '0' || digit
    > '9') {\n                throw new ArgumentException(\"Hex digit must be between
    0 and 9\");\n            }\n            int digitValue = (int)digit;\n            if
    (digitValue == 0) {\n                throw new ArgumentException(\"Hex digit must
    be positive\");\n            }\n            int digitCount = 1;\n            while
    (digitValue > 1) {\n                digitValue /= 10;\n                digitCount++;\n
    \           }\n            if (digitCount % 2 == 1) {\n                throw new
    ArgumentException(\"Hex digit must be even\");\n            }\n            long
    digitSum = digitValue * digitValue;\n            long digitProduct = digitValue
    * digitValue;\n            long digitSumProduct = digitSum * digitProduct;\n            long
    digitSumProduct2 = digitSum * digitProduct;\n            long digitSumProduct3
    = digitSum * digitProduct;\n            long digitSumProduct4 = digitSum * digitProduct;\n
    \           long digitSumProduct5 = digitSum * digitProduct;\n            long
    digitSumProduct6 = digitSum * digitProduct;\n            long digitSumProduct7
    = digitSum * digitProduct;\n            long digitSumProduct8 = digitSum * digitProduct;\n
    \           long digitSumProduct9 = digitSum * digitProduct;\n            long
    digitSumProduct10 = digitSum * digitProduct;\n            long digitSumProduct11
    = digitSum * digitProduct;\n            long digitSumProduct12 = digitSum * digitProduct;\n
    \           long digitSumProduct13 = digitSum * digitProduct;\n            long
    digitSumProduct14 = digitSum * digitProduct;\n            long digitSumProduct15
    = digitSum * digitProduct;\n            long digitSumProduct16 = digitSum * digitProduct;\n
    \           long digitSumProduct17 = digitSum * digitProduct;\n            long
    digitSumProduct18 = digitSum * digitProduct;\n            long digitSumProduct19
    = digitSum * digitProduct;\n            long digitSumProduct20 = digitSum * digitProduct;\n
    \           long digitSumProduct21 = digitSum * digitProduct;\n            long
    digitSumProduct22 = digitSum * digitProduct;\n            long digitSumProduct23
    = digitSum * digitProduct;\n            long digitSumProduct24 = digitSum * digitProduct;\n
    \           long digitSumProduct25 = digitSum * digitProduct;\n            long
    digitSumProduct26 = digitSum * digitProduct;\n            long digitSumProduct27
    = digitSum * digitProduct;\n            long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvc82qyan.cs(78,17): error CS1001: Identifier expected

    /tmp/tmpvc82qyan.cs(78,17): error CS1002: ; expected

    /tmp/tmpvc82qyan.cs(80,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvc82qyan.cs(89,2): error CS1513: } expected

    '
  timestamp: 1659799311
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit >= '0' &&
    digit <= '9') {\n                result += (digit - '0');\n            }\n            else
    if (digit == 'A') {\n                result += (10L);\n            }\n            else
    if (digit == 'B') {\n                result += (11L);\n            }\n            else
    if (digit == 'C') {\n                result += (12L);\n            }\n            else
    if (digit == 'D') {\n                result += (13L);\n            }\n            else
    if (digit == 'E') {\n                result += (14L);\n            }\n            else
    if (digit == 'F') {\n                result += (15L);\n            }\n            else
    {\n                throw new ArgumentException(\"Invalid hexadecimal digit: \"
    + c);\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5ad39fc08fe49c1a4b56aef48c1e877>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5ad39fc08fe49c1a4b56aef48c1e877>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit >= 2 && digit <= 6)
    {\n                result += digit * digit;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5853f30fd1849fab90621a5d30e212b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5853f30fd1849fab90621a5d30e212b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       foreach (char c in num) {\n            int digit = c - '0';\n            if
    (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"HexKey\",
    \"The input string contains invalid characters.\");\n            }\n            int
    prime = digit % 10;\n            if (prime == 0) {\n                throw new
    ArgumentOutOfRangeException(\"HexKey\", \"The input string contains invalid characters.\");\n
    \           }\n            isPrime = isPrime && prime == 2;\n            if (isPrime)
    {\n                result += digit * prime;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: The input string
    contains invalid characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String
    num) [0x00033] in <1d3c143447d94360b953eb072e02a559>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <1d3c143447d94360b953eb072e02a559>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: The input string contains invalid
    characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x00033]
    in <1d3c143447d94360b953eb072e02a559>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <1d3c143447d94360b953eb072e02a559>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int d = Convert.ToInt32(c);\n            if
    (d >= '0' && d <= '9') {\n                result += Math.Pow(16, hex.Length -
    1 - hex.IndexOf(c));\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplls_78f2.cs(36,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit >= '0' && digit <= '9') {\n                result += digit
    - '0';\n            }\n            else if (digit >= 'A' && digit <= 'F') {\n
    \               result += digit - 'A' + 10;\n            }\n            else {\n
    \               throw new Exception(\"Invalid hexadecimal digit.\");\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5a73dd5c6d846b0bfde8a99bfc1654c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5a73dd5c6d846b0bfde8a99bfc1654c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"Invalid hexadecimal digit:
    \" + c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74ca68de6dd741b5b09eef1171819b44>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <74ca68de6dd741b5b09eef1171819b44>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <74ca68de6dd741b5b09eef1171819b44>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <74ca68de6dd741b5b09eef1171819b44>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <74ca68de6dd741b5b09eef1171819b44>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2 = 0;\n        long
    numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits5
    = 0;\n        long numPrimeDigits6 = 0;\n        long numPrimeDigits7 = 0;\n        long
    numPrimeDigits8 = 0;\n        long numPrimeDigits9 = 0;\n        long numPrimeDigits10
    = 0;\n        long numPrimeDigits11 = 0;\n        long numPrimeDigits12 = 0;\n
    \       long numPrimeDigits13 = 0;\n        long numPrimeDigits14 = 0;\n        long
    numPrimeDigits15 = 0;\n        long numPrimeDigits16 = 0;\n        long numPrimeDigits17
    = 0;\n        long numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n
    \       long numPrimeDigits20 = 0;\n        long numPrimeDigits21 = 0;\n        long
    numPrimeDigits22 = 0;\n        long numPrimeDigits23 = 0;\n        long numPrimeDigits24
    = 0;\n        long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n
    \       long numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long
    numPrimeDigits29 = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31
    = 0;\n        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n
    \       long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long
    numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38
    = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n
    \       long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n        long
    numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long numPrimeDigits45
    = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47 = 0;\n
    \       long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n        long
    numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa130im9k.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpa130im9k.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(34,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(35,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(36,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(37,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(38,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(39,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(40,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(41,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(42,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(43,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(44,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(45,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(46,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(47,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(48,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimes2 = 0;\n        long numPrimes3 = 0;\n        long
    numPrimes4 = 0;\n        long numPrimes5 = 0;\n        long numPrimes6 = 0;\n
    \       long numPrimes7 = 0;\n        long numPrimes8 = 0;\n        long numPrimes9
    = 0;\n        long numPrimes10 = 0;\n        long numPrimes11 = 0;\n        long
    numPrimes12 = 0;\n        long numPrimes13 = 0;\n        long numPrimes14 = 0;\n
    \       long numPrimes15 = 0;\n        long numPrimes16 = 0;\n        long numPrimes17
    = 0;\n        long numPrimes18 = 0;\n        long numPrimes19 = 0;\n        long
    numPrimes20 = 0;\n        long numPrimes21 = 0;\n        long numPrimes22 = 0;\n
    \       long numPrimes23 = 0;\n        long numPrimes24 = 0;\n        long numPrimes25
    = 0;\n        long numPrimes26 = 0;\n        long numPrimes27 = 0;\n        long
    numPrimes28 = 0;\n        long numPrimes29 = 0;\n        long numPrimes30 = 0;\n
    \       long numPrimes31 = 0;\n        long numPrimes32 = 0;\n        long numPrimes33
    = 0;\n        long numPrimes34 = 0;\n        long numPrimes35 = 0;\n        long
    numPrimes36 = 0;\n        long numPrimes37 = 0;\n        long numPrimes38 = 0;\n
    \       long numPrimes39 = 0;\n        long numPrimes40 = 0;\n        long numPrimes41
    = 0;\n        long numPrimes42 = 0;\n        long numPrimes43 = 0;\n        long
    numPrimes44 = 0;\n        long numPrimes45 = 0;\n        long numPrimes46 = 0;\n
    \       long numPrimes47 = 0;\n        long numPrimes48 = 0;\n        long numPrimes49
    = 0;\n        long numPrimes50 = 0;\n        long numPrimes51 = 0;\n        long
    numPrimes52 = 0;\n        long numPrimes53 = 0;\n        long numPrimes54 = 0;\n
    \       long numPrimes55 = 0;\n        long numPrimes56 = 0;\n        long numPrimes57
    = 0;\n        long numPrimes58 = 0;\n        long numPrimes59 = 0;\n        long
    numPrimes60 = 0;\n        long numPrimes61 = 0;\n        long numPrimes62 = 0;\n
    \       long numPrimes63 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfxq54r3.cs(95,13): error CS1001: Identifier expected

    /tmp/tmpdfxq54r3.cs(95,13): error CS1002: ; expected

    '
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        bool
    isPrime = true;\n        string hex = num.ToUpper();\n        foreach (char c
    in hex) {\n            digit = Convert.ToInt64(c);\n            if (isPrime) {\n
    \               isPrime = IsPrime(digit);\n            }\n            if (isPrime)
    {\n                result += digit;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp629hdy4l.cs(38,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigit = 0;\n        long numPrimeDigit2 = 0;\n        long
    numPrimeDigit3 = 0;\n        long numPrimeDigit4 = 0;\n        long numPrimeDigit5
    = 0;\n        long numPrimeDigit6 = 0;\n        long numPrimeDigit7 = 0;\n        long
    numPrimeDigit8 = 0;\n        long numPrimeDigit9 = 0;\n        long numPrimeDigit10
    = 0;\n        long numPrimeDigit11 = 0;\n        long numPrimeDigit12 = 0;\n        long
    numPrimeDigit13 = 0;\n        long numPrimeDigit14 = 0;\n        long numPrimeDigit15
    = 0;\n        long numPrimeDigit16 = 0;\n        long numPrimeDigit17 = 0;\n        long
    numPrimeDigit18 = 0;\n        long numPrimeDigit19 = 0;\n        long numPrimeDigit20
    = 0;\n        long numPrimeDigit21 = 0;\n        long numPrimeDigit22 = 0;\n        long
    numPrimeDigit23 = 0;\n        long numPrimeDigit24 = 0;\n        long numPrimeDigit25
    = 0;\n        long numPrimeDigit26 = 0;\n        long numPrimeDigit27 = 0;\n        long
    numPrimeDigit28 = 0;\n        long numPrimeDigit29 = 0;\n        long numPrimeDigit30
    = 0;\n        long numPrimeDigit31 = 0;\n        long numPrimeDigit32 = 0;\n        long
    numPrimeDigit33 = 0;\n        long numPrimeDigit34 = 0;\n        long numPrimeDigit35
    = 0;\n        long numPrimeDigit36 = 0;\n        long numPrimeDigit37 = 0;\n        long
    numPrimeDigit38 = 0;\n        long numPrimeDigit39 = 0;\n        long numPrimeDigit40
    = 0;\n        long numPrimeDigit41 = 0;\n        long numPrimeDigit42 = 0;\n        long
    numPrimeDigit43 = 0;\n        long numPrimeDigit44 = 0;\n        long numPrimeDigit45
    = 0;\n        long numPrimeDigit46 = 0;\n        long numPrimeDigit47 = 0;\n        long
    numPrimeDigit48 = 0;\n        long numPrimeDigit49 = 0;\n        long numPrimeDigit50
    = 0;\n        long numPrimeDigit51 = 0;\n        long numPrimeDigit52 = 0;\n        long
    numPrimeDigit53 = 0;\n        long numPrimeDigit54 = 0;\n        long numPrimeDigit55
    = 0;\n        long numPrimeDigit56\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuj6sx0ho.cs(88,29): error CS1002: ; expected

    '
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal digits
    must be between 0 and 9\");\n            }\n            int digitValue = digit
    * 16;\n            if (digitValue < 0 || digitValue > 9) {\n                throw
    new ArgumentOutOfRangeException(\"num\", \"Hexadecimal digits must be between
    0 and 9\");\n            }\n            result += digitValue;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digits must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <7b93a1414836474e8aeb3d4e159527e4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7b93a1414836474e8aeb3d4e159527e4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digits must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <7b93a1414836474e8aeb3d4e159527e4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7b93a1414836474e8aeb3d4e159527e4>:0 \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '0';\n            }\n            else if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            else {\n                throw new Exception(\"Invalid
    input\");\n            }\n            ret = ret * 16 + d;\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <401bdaa9b08748e2a7b4c5e47b96ba33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <401bdaa9b08748e2a7b4c5e47b96ba33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            if (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||
    c == 'F') {\n                result += Convert.ToInt64(Math.Pow(16, (int)c - 'A'));\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a016a995dc124cacab77867987d9fd82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a016a995dc124cacab77867987d9fd82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit > 9) {\n
    \               throw new ArgumentException(\"Hex digits must be between 0 and
    9\");\n            }\n            result += (digit * 16L);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x00029] in <87154860517343a9b8802adf4428ec14>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <87154860517343a9b8802adf4428ec14>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00029] in <87154860517343a9b8802adf4428ec14>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <87154860517343a9b8802adf4428ec14>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal digit
    must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digit must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <71e8f521d0c145049011b4dd142d27af>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <71e8f521d0c145049011b4dd142d27af>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <71e8f521d0c145049011b4dd142d27af>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <71e8f521d0c145049011b4dd142d27af>:0 \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2 = 0;\n        long
    numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits5
    = 0;\n        long numPrimeDigits6 = 0;\n        long numPrimeDigits7 = 0;\n        long
    numPrimeDigits8 = 0;\n        long numPrimeDigits9 = 0;\n        long numPrimeDigits10
    = 0;\n        long numPrimeDigits11 = 0;\n        long numPrimeDigits12 = 0;\n
    \       long numPrimeDigits13 = 0;\n        long numPrimeDigits14 = 0;\n        long
    numPrimeDigits15 = 0;\n        long numPrimeDigits16 = 0;\n        long numPrimeDigits17
    = 0;\n        long numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n
    \       long numPrimeDigits20 = 0;\n        long numPrimeDigits21 = 0;\n        long
    numPrimeDigits22 = 0;\n        long numPrimeDigits23 = 0;\n        long numPrimeDigits24
    = 0;\n        long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n
    \       long numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long
    numPrimeDigits29 = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31
    = 0;\n        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n
    \       long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long
    numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38
    = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n
    \       long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n        long
    numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long numPrimeDigits45
    = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47 = 0;\n
    \       long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n        long
    numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa130im9k.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpa130im9k.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(34,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(35,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(36,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(37,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(38,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(39,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(40,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(41,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(42,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(43,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(44,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(45,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(46,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(47,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(48,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                ret
    += d * 0x10;\n            } else if (d >= 'A' && d <= 'F') {\n                ret
    += 0x10 + d - 'A';\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e42253e9b0c43e099788b18cc22219c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e42253e9b0c43e099788b18cc22219c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = 0;\n        long numPrimes = 0;\n
    \       long numPrimes2 = 0;\n        long numPrimes4 = 0;\n        long numPrimes6
    = 0;\n        long numPrimes8 = 0;\n        long numPrimes10 = 0;\n        long
    numPrimes12 = 0;\n        long numPrimes14 = 0;\n        long numPrimes16 = 0;\n
    \       long numPrimes18 = 0;\n        long numPrimes20 = 0;\n        long numPrimes22
    = 0;\n        long numPrimes24 = 0;\n        long numPrimes26 = 0;\n        long
    numPrimes28 = 0;\n        long numPrimes30 = 0;\n        long numPrimes32 = 0;\n
    \       long numPrimes34 = 0;\n        long numPrimes36 = 0;\n        long numPrimes38
    = 0;\n        long numPrimes40 = 0;\n        long numPrimes42 = 0;\n        long
    numPrimes44 = 0;\n        long numPrimes46 = 0;\n        long numPrimes48 = 0;\n
    \       long numPrimes50 = 0;\n        long numPrimes52 = 0;\n        long numPrimes54
    = 0;\n        long numPrimes56 = 0;\n        long numPrimes58 = 0;\n        long
    numPrimes60 = 0;\n        long numPrimes62 = 0;\n        long numPrimes64 = 0;\n
    \       long numPrimes66 = 0;\n        long numPrimes68 = 0;\n        long numPrimes70
    = 0;\n        long numPrimes72 = 0;\n        long numPrimes74 = 0;\n        long
    numPrimes76 = 0;\n        long numPrimes78 = 0;\n        long numPrimes80 = 0;\n
    \       long numPrimes82 = 0;\n        long numPrimes84 = 0;\n        long numPrimes86
    = 0;\n        long numPrimes88 = 0;\n        long numPrimes90 = 0;\n        long
    numPrimes92 = 0;\n        long numPrimes94 = 0;\n        long numPrimes96 = 0;\n
    \       long numPrimes98 = 0;\n        long numPrimes100 = 0;\n        long numPrimes102
    = 0;\n        long numPrimes104 = 0;\n        long numPrimes106 = 0;\n        long
    numPrimes108 = 0;\n        long numPrimes110 = 0;\n        long numPrimes112 =
    0;\n        long numPrimes114 = 0;\n        long numPrimes116 = 0;\n        long
    numPrimes118 = 0;\n        long numPrimes120 = 0;\n        long numPrimes122 =
    0;\n        long numPrimes124 = 0;\n        long numPri\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpod9f7qng.cs(95,20): error CS1002: ; expected

    '
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= 'A' && d <= 'F') {\n                d
    += 10;\n            }\n            if (d >= '0' && d <= '9') {\n                ret
    += d * d;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08f71127f880433c906245f5b4444820>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08f71127f880433c906245f5b4444820>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hex digit must be between 0 and
    9\");\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digit must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <e551a2fda03d4c5a84f6a652c6307bae>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <e551a2fda03d4c5a84f6a652c6307bae>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <e551a2fda03d4c5a84f6a652c6307bae>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <e551a2fda03d4c5a84f6a652c6307bae>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2 = 0;\n        long
    numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits5
    = 0;\n        long numPrimeDigits6 = 0;\n        long numPrimeDigits7 = 0;\n        long
    numPrimeDigits8 = 0;\n        long numPrimeDigits9 = 0;\n        long numPrimeDigits10
    = 0;\n        long numPrimeDigits11 = 0;\n        long numPrimeDigits12 = 0;\n
    \       long numPrimeDigits13 = 0;\n        long numPrimeDigits14 = 0;\n        long
    numPrimeDigits15 = 0;\n        long numPrimeDigits16 = 0;\n        long numPrimeDigits17
    = 0;\n        long numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n
    \       long numPrimeDigits20 = 0;\n        long numPrimeDigits21 = 0;\n        long
    numPrimeDigits22 = 0;\n        long numPrimeDigits23 = 0;\n        long numPrimeDigits24
    = 0;\n        long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n
    \       long numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long
    numPrimeDigits29 = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31
    = 0;\n        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n
    \       long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long
    numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38
    = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n
    \       long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n        long
    numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long numPrimeDigits45
    = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47 = 0;\n
    \       long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n        long
    numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa130im9k.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpa130im9k.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(34,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(35,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(36,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(37,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(38,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(39,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(40,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(41,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(42,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(43,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(44,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(45,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(46,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(47,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(48,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit.\");\n
    \           }\n            long digitalValue = Convert.ToInt64(Math.Pow(16, digit));\n
    \           if (digitalValue == 1) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit.\");\n            }\n            result += digitalValue;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x0002f] in <659b1686528444cea32453c9a6b19ac7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <659b1686528444cea32453c9a6b19ac7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x0002f] in <659b1686528444cea32453c9a6b19ac7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <659b1686528444cea32453c9a6b19ac7>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int val = (int)c;\n            if (val >= '0' && val <= '9') {\n
    \               ret += val - '0';\n            } else if (val >= 'A' && val <=
    'F') {\n                ret += val - 'A' + 10;\n            } else {\n                throw
    new Exception(\"Invalid input\");\n            }\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f10083e35f8b4e118a40afcf9a95aa93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f10083e35f8b4e118a40afcf9a95aa93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                result
    += (long)Math.Pow(16, (int)c - '0');\n            } else if (d == 'A' || d ==
    'B' || d == 'C' || d == 'D' || d == 'E' || d == 'F') {\n                result
    += (long)Math.Pow(16, (int)c - 'A' + 10);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d5969b02fa448bbbd801aa7cbf06c75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d5969b02fa448bbbd801aa7cbf06c75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Invalid hexadecimal
    digit: \" + c);\n            }\n            result += (long)Math.Pow(16, digit);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e934325fc1bf41c48fd506ce07a0e7be>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Invalid hexadecimal
    digit: 1\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0004a]
    in <e934325fc1bf41c48fd506ce07a0e7be>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <e934325fc1bf41c48fd506ce07a0e7be>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Invalid hexadecimal digit: 1\nParameter name:
    num\n  at Problem.HexKey (System.String num) [0x0004a] in <e934325fc1bf41c48fd506ce07a0e7be>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e934325fc1bf41c48fd506ce07a0e7be>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        long
    pow = 0;\n        bool isPrime = true;\n        bool isDigit = false;\n        bool
    isUpper = false;\n        bool isUpper2 = false;\n        bool isUpper3 = false;\n
    \       bool isUpper4 = false;\n        bool isUpper5 = false;\n        bool isUpper6
    = false;\n        bool isUpper7 = false;\n        bool isUpper8 = false;\n        bool
    isUpper9 = false;\n        bool isUpper10 = false;\n        bool isUpper11 = false;\n
    \       bool isUpper12 = false;\n        bool isUpper13 = false;\n        bool
    isUpper14 = false;\n        bool isUpper15 = false;\n        bool isUpper16 =
    false;\n        bool isUpper17 = false;\n        bool isUpper18 = false;\n        bool
    isUpper19 = false;\n        bool isUpper20 = false;\n        bool isUpper21 =
    false;\n        bool isUpper22 = false;\n        bool isUpper23 = false;\n        bool
    isUpper24 = false;\n        bool isUpper25 = false;\n        bool isUpper26 =
    false;\n        bool isUpper27 = false;\n        bool isUpper28 = false;\n        bool
    isUpper29 = false;\n        bool isUpper30 = false;\n        bool isUpper31 =
    false;\n        bool isUpper32 = false;\n        bool isUpper33 = false;\n        bool
    isUpper34 = false;\n        bool isUpper35 = false;\n        bool isUpper36 =
    false;\n        bool isUpper37 = false;\n        bool isUpper38 = false;\n        bool
    isUpper39 = false;\n        bool isUpper40 = false;\n        bool isUpper41 =
    false;\n        bool isUpper42 = false;\n        bool isUpper43 = false;\n        bool
    isUpper44 = false;\n        bool isUpper45 = false;\n        bool isUpper46 =
    false;\n        bool isUpper47 = false;\n        bool isUpper48 = false;\n        bool
    isUpper49 = false;\n        bool isUpper50 = false;\n        bool isUpper51 =
    false;\n        bool isUpper52 = false;\n        bool isUpper53 = false;\n        bool
    isUpper54 = false;\n        bool isUpper55 = false;\n        bool isUpper56 =
    false;\n        bool isUpper57 = false;\n        bool isUpper58 = false;\n        bool
    isUpper59 = false;\n        bool isUpper60 = false;\n        bool isUpper61 =
    false;\n        bool isUpper62 = false;\n        bool isUpper63 = false;\n        bool
    isUpper64 = false;\n        bool isUpper65 = false;\n        bool isUpper66 =
    false;\n        bool isUpper67 = false;\n        bool is\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6saox12q.cs(103,14): error CS1001: Identifier expected

    /tmp/tmp6saox12q.cs(103,14): error CS1002: ; expected

    /tmp/tmp6saox12q.cs(103,14): error CS1525: Invalid expression term ''is''

    /tmp/tmp6saox12q.cs(103,16): error CS1031: Type expected

    /tmp/tmp6saox12q.cs(103,16): error CS1002: ; expected

    '
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < '0' ||
    digit > '9') {\n                throw new ArgumentOutOfRangeException(\"num\",
    \"Hexadecimal number must be composed of hexadecimal digits (0-9)\");\n            }\n
    \           int digitValue = (int)digit;\n            if (digitValue < 10) {\n
    \               digitValue = 10 + digitValue;\n            }\n            int
    digit2 = digitValue / 10;\n            int digit3 = digitValue % 10;\n            int
    digit4 = digit2 % 10;\n            int digit5 = digit3 % 10;\n            int
    digit6 = digit4 % 10;\n            int digit7 = digit5 % 10;\n            int
    digit8 = digit6 % 10;\n            int digit9 = digit7 % 10;\n            int
    digit10 = digit8 % 10;\n            int digit11 = digit9 % 10;\n            int
    digit12 = digit10 % 10;\n            int digit13 = digit11 % 10;\n            int
    digit14 = digit12 % 10;\n            int digit15 = digit13 % 10;\n            int
    digit16 = digit14 % 10;\n            int digit17 = digit15 % 10;\n            int
    digit18 = digit16 % 10;\n            int digit19 = digit17 % 10;\n            int
    digit20 = digit18 % 10;\n            int digit21 = digit19 % 10;\n            int
    digit22 = digit20 % 10;\n            int digit23 = digit21 % 10;\n            int
    digit24 = digit22 % 10;\n            int digit25 = digit23 % 10;\n            int
    digit26 = digit24 % 10;\n            int digit27 = digit25 % 10;\n            int
    digit28 = digit26 % 10;\n            int digit29 = digit27 % 10;\n            int
    digit30 = digit28 % 10;\n            int digit31 = digit29 % 10;\n            int
    digit32 = digit30 % 10;\n            int digit33 = digit31 % 10;\n            int
    digit34 = digit32 % 10;\n            int digit35 = digit33 % 10;\n            int
    digit36 = digit34 % 10;\n            int digit37 = digit35 % 10;\n            int
    digit38 = digit36 % 10;\n            int digit39 = digit37 % 10;\n            int
    digit40 = digit38 % 10;\n            int digit41 = digit39 % 10;\n            int
    digit42 = digit40 % 10;\n            int digit43 = digit41 % 10;\n            int
    digit44 = digit42 % 10;\n            int digit45 = \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6hfs4qd7.cs(84,26): error CS1525: Invalid expression term ''}''

    /tmp/tmp6hfs4qd7.cs(84,26): error CS1002: ; expected

    /tmp/tmp6hfs4qd7.cs(86,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp6hfs4qd7.cs(95,2): error CS1513: } expected

    '
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit.\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00034] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00034] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"HexKey\", \"Invalid hexadecimal
    digit: \" + c);\n            }\n            long power = (long)(Math.Pow(16, digit));\n
    \           if (num.Length > 1) {\n                power = power * HexKey(num.Substring(1));\n
    \           }\n            result += power;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Invalid hexadecimal
    digit: A\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x00048]
    in <31a46a18087548abad37816f429f823c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <31a46a18087548abad37816f429f823c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Invalid hexadecimal digit: A\nParameter name:
    HexKey\n  at Problem.HexKey (System.String num) [0x00048] in <31a46a18087548abad37816f429f823c>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <31a46a18087548abad37816f429f823c>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        long numDigits = num.Length;\n
    \       long numDigitsInHex = numDigits / 2;\n        long numHexDigits = numDigits
    - numDigitsInHex;\n        long numHexDigitsInHex = numHexDigits / 2;\n        long
    numHexDigitsInHexUpper = numHexDigits - numHexDigitsInHex;\n        long numHexDigitsInHexLower
    = numHexDigitsInHexUpper / 2;\n        long numHexDigitsInHexLowerUpper = numHexDigitsInHexLower
    / 2;\n        long numHexDigitsInHexLowerUpperUpper = numHexDigitsInHexLowerUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpper = numHexDigitsInHexLowerUpperUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpper = numHexDigitsInHexLowerUpperUpperUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpperUpper = numHexDigitsInHexLowerUpperUpperUpperUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpper = numHexDigitsInHexLowerUpperUpperUpperUpperUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpper =
    numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpper / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpper
    = numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpper / 2;\n        long
    numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpper = numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpperUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper
    = numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper
    = numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper
    = numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper
    / 2;\n        long numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpperUpper
    = numHexDigitsInHexLowerUpperUpperUpperUpperUpperUpper\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwj817463.cs(50,161): error CS1002: ; expected

    '
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hexadecimal number contains invalid
    character: \" + c);\n            }\n            result += (long)Math.Pow(16, digit);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal number contains
    invalid character: A\n  at Problem.HexKey (System.String num) [0x00040] in <04f79fce07524a14aaa73678b0240a72>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <04f79fce07524a14aaa73678b0240a72>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal number
    contains invalid character: A\n  at Problem.HexKey (System.String num) [0x00040]
    in <04f79fce07524a14aaa73678b0240a72>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <04f79fce07524a14aaa73678b0240a72>:0 \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       foreach (char c in num) {\n            int digit = c - '0';\n            if
    (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hex
    digits must be between 0 and 9\");\n            }\n            if (isPrime) {\n
    \               if (digit == 2 || digit == 3) {\n                    isPrime =
    true;\n                }\n                else {\n                    isPrime
    = false;\n                }\n            }\n            else {\n                if
    (digit == 11 || digit == 13) {\n                    isPrime = true;\n                }\n
    \               else {\n                    isPrime = false;\n                }\n
    \           }\n            result += (long)Math.Pow(digit, 2);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x00036] in <a204138e3e6e4765a0989feb347eacbc>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <a204138e3e6e4765a0989feb347eacbc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00036] in <a204138e3e6e4765a0989feb347eacbc>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <a204138e3e6e4765a0989feb347eacbc>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit;\n        bool
    isPrime;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            digit = Convert.ToInt64(c);\n            isPrime = true;\n            for
    (int i = 2; i <= Math.Sqrt(digit); i++) {\n                if (digit % i == 0)
    {\n                    isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                result++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83aebb7fa93841b3ba800e9c2ab2c0a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83aebb7fa93841b3ba800e9c2ab2c0a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long count = 0;\n        string hex = num.ToUpper();\n
    \       string hexDigits = \"0123456789ABCDEF\";\n        string hexDigit = \"0\";\n
    \       string hexDigit2 = \"1\";\n        string hexDigit3 = \"2\";\n        string
    hexDigit4 = \"3\";\n        string hexDigit5 = \"4\";\n        string hexDigit6
    = \"5\";\n        string hexDigit7 = \"6\";\n        string hexDigit8 = \"7\";\n
    \       string hexDigit9 = \"8\";\n        string hexDigit10 = \"9\";\n        string
    hexDigit11 = \"A\";\n        string hexDigit12 = \"B\";\n        string hexDigit13
    = \"C\";\n        string hexDigit14 = \"D\";\n        string hexDigit15 = \"E\";\n
    \       string hexDigit16 = \"F\";\n        string hexDigit17 = \"10\";\n        string
    hexDigit18 = \"11\";\n        string hexDigit19 = \"12\";\n        string hexDigit20
    = \"13\";\n        string hexDigit21 = \"14\";\n        string hexDigit22 = \"15\";\n
    \       string hexDigit23 = \"16\";\n        string hexDigit24 = \"17\";\n        string
    hexDigit25 = \"18\";\n        string hexDigit26 = \"19\";\n        string hexDigit27
    = \"20\";\n        string hexDigit28 = \"21\";\n        string hexDigit29 = \"22\";\n
    \       string hexDigit30 = \"23\";\n        string hexDigit31 = \"24\";\n        string
    hexDigit32 = \"25\";\n        string hexDigit33 = \"26\";\n        string hexDigit34
    = \"27\";\n        string hexDigit35 = \"28\";\n        string hexDigit36 = \"29\";\n
    \       string hexDigit37 = \"30\";\n        string hexDigit38 = \"31\";\n        string
    hexDigit39 = \"32\";\n        string hexDigit40 = \"33\";\n        string hexDigit41
    = \"34\";\n        string hexDigit42 = \"35\";\n        string hexDigit43 = \"36\";\n
    \       string hexDigit44 = \"37\";\n        string hexDigit45 = \"38\";\n        string
    hexDigit46 = \"39\";\n        string hexDigit47 = \"40\";\n        string hexDigit48
    = \"41\";\n        string hexDigit49 = \"42\";\n        string hexDigit50 = \"43\";\n
    \       string hexDigit51 = \"44\";\n        string hexDigit52 = \"45\";\n        string
    hexDigit53 = \"46\";\n        string hexDigit54 = \"47\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp69c6l1z6.cs(31,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(33,16): warning CS0219: The variable ''hexDigits'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(34,16): warning CS0219: The variable ''hexDigit'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(35,16): warning CS0219: The variable ''hexDigit2'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(36,16): warning CS0219: The variable ''hexDigit3'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(37,16): warning CS0219: The variable ''hexDigit4'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(38,16): warning CS0219: The variable ''hexDigit5'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(39,16): warning CS0219: The variable ''hexDigit6'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(40,16): warning CS0219: The variable ''hexDigit7'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(41,16): warning CS0219: The variable ''hexDigit8'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(42,16): warning CS0219: The variable ''hexDigit9'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(43,16): warning CS0219: The variable ''hexDigit10'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(44,16): warning CS0219: The variable ''hexDigit11'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(45,16): warning CS0219: The variable ''hexDigit12'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(46,16): warning CS0219: The variable ''hexDigit13'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(47,16): warning CS0219: The variable ''hexDigit14'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(48,16): warning CS0219: The variable ''hexDigit15'' is assigned
    but its value is never used

    /tmp/tmp69c6l1z6.cs(49,16): warning CS0219: The variable ''hexDigit1'
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long temp = 0;\n        foreach
    (char c in num) {\n            int digit = c - '0';\n            if (digit < 0
    || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    number must be between 0 and 9\");\n            }\n            temp = temp * 16
    + digit;\n        }\n        long num2 = temp;\n        long num3 = num2;\n        long
    num4 = num3;\n        long num5 = num4;\n        long num6 = num5;\n        long
    num7 = num6;\n        long num8 = num7;\n        long num9 = num8;\n        long
    num10 = num9;\n        long num11 = num10;\n        long num12 = num11;\n        long
    num13 = num12;\n        long num14 = num13;\n        long num15 = num14;\n        long
    num16 = num15;\n        long num17 = num16;\n        long num18 = num17;\n        long
    num19 = num18;\n        long num20 = num19;\n        long num21 = num20;\n        long
    num22 = num21;\n        long num23 = num22;\n        long num24 = num23;\n        long
    num25 = num24;\n        long num26 = num25;\n        long num27 = num26;\n        long
    num28 = num27;\n        long num29 = num28;\n        long num30 = num29;\n        long
    num31 = num30;\n        long num32 = num31;\n        long num33 = num32;\n        long
    num34 = num33;\n        long num35 = num34;\n        long num36 = num35;\n        long
    num37 = num36;\n        long num38 = num37;\n        long num39 = num38;\n        long
    num40 = num39;\n        long num41 = num40;\n        long num42 = num41;\n        long
    num43 = num42;\n        long num44 = num43;\n        long num45 = num44;\n        long
    num46 = num45;\n        long num47 = num46;\n        long num48 = num47;\n        long
    num49 = num48;\n        long num50 = num49;\n        long num51 = num50;\n        long
    num52 = num51;\n        long num53 = num52;\n        long num54 = num53;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpldezlugl.cs(31,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpldezlugl.cs(30,24): error CS0161: ''Problem.HexKey(string)'': not all
    code paths return a value

    '
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (digit * Math.Pow(16, digit));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpch0qi2_u.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                ret
    += d * Math.Pow(16, num.Length - 1);\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo6v8jwbd.cs(35,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            result += (digit - 'A') * Math.Pow(16,
    num.Length - 1);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8c9dj5ef.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimeDigits = 0;\n        long numPrimePrimes = 0;\n        long
    numPrimePrimeDigits = 0;\n        long numPrimePrimePrimes = 0;\n        long
    numPrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptzbtj98s.cs(57,77): error CS1002: ; expected

    '
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n
    \       foreach (char c in hexChars) {\n            int digit = c - '0';\n            if
    (digit < 0 || digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            int primeDigit =
    2;\n            int primeDigitCount = 0;\n            int primeDigitCount2 = 0;\n
    \           int primeDigitCount3 = 0;\n            int primeDigitCount4 = 0;\n
    \           int primeDigitCount5 = 0;\n            int primeDigitCount6 = 0;\n
    \           int primeDigitCount7 = 0;\n            int primeDigitCount8 = 0;\n
    \           int primeDigitCount9 = 0;\n            int primeDigitCount10 = 0;\n
    \           int primeDigitCount11 = 0;\n            int primeDigitCount12 = 0;\n
    \           int primeDigitCount13 = 0;\n            int primeDigitCount14 = 0;\n
    \           int primeDigitCount15 = 0;\n            int primeDigitCount16 = 0;\n
    \           int primeDigitCount17 = 0;\n            int primeDigitCount18 = 0;\n
    \           int primeDigitCount19 = 0;\n            int primeDigitCount20 = 0;\n
    \           int primeDigitCount21 = 0;\n            int primeDigitCount22 = 0;\n
    \           int primeDigitCount23 = 0;\n            int primeDigitCount24 = 0;\n
    \           int primeDigitCount25 = 0;\n            int primeDigitCount26 = 0;\n
    \           int primeDigitCount27 = 0;\n            int primeDigitCount28 = 0;\n
    \           int primeDigitCount29 = 0;\n            int primeDigitCount30 = 0;\n
    \           int primeDigitCount31 = 0;\n            int primeDigitCount32 = 0;\n
    \           int primeDigitCount33 = 0;\n            int primeDigitCount34 = 0;\n
    \           int primeDigitCount35 = 0;\n            int primeDigitCount36 = 0;\n
    \           int primeDigitCount37 = 0;\n            int primeDigitCount38 = 0;\n
    \           int primeDigitCount39 = 0;\n            int primeDigitCount40 = 0;\n
    \           int primeDigitCount41 = 0;\n            int primeDigitCount42 = 0;\n
    \           int primeDigitCount43 = 0;\n            int primeDigitCount44 = 0;\n
    \           int primeDigitCount45 = 0;\n            int primeDigitCount46 = 0;\n
    \           int primeDigitCount47 = 0;\n            int primeDigitCount48 = 0;\n
    \           int primeDigitCount49 = 0;\n            int primeDigitCount50 = 0;\n
    \           int primeDigitCount51 = 0;\n            int primeDigitCount52 = 0;\n
    \           int primeDigitCount53 = 0;\n            int primeDigitCount54 = 0;\n
    \           \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqxrxiiym.cs(100,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpqxrxiiym.cs(109,2): error CS1513: } expected

    '
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hex digits must be between 0 and
    9\");\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93778bc3217f4538af4c2781fc3558c3>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <93778bc3217f4538af4c2781fc3558c3>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <93778bc3217f4538af4c2781fc3558c3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <93778bc3217f4538af4c2781fc3558c3>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <93778bc3217f4538af4c2781fc3558c3>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long count = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            int digit2 = digit - 'A';\n
    \           if (digit2 >= 2 && digit2 <= 6) {\n                count += 2;\n            }
    else if (digit2 >= 7 && digit2 <= 10) {\n                count += 3;\n            }
    else if (digit2 >= 11 && digit2 <= 13) {\n                count += 5;\n            }
    else if (digit2 >= 14 && digit2 <= 16) {\n                count += 7;\n            }
    else if (digit2 >= 17 && digit2 <= 20) {\n                count += 11;\n            }
    else if (digit2 >= 21 && digit2 <= 24) {\n                count += 13;\n            }
    else if (digit2 >= 25 && digit2 <= 28) {\n                count += 17;\n            }
    else if (digit2 >= 29 && digit2 <= 32) {\n                count += 19;\n            }
    else if (digit2 >= 33 && digit2 <= 36) {\n                count += 23;\n            }
    else if (digit2 >= 37 && digit2 <= 40) {\n                count += 27;\n            }
    else if (digit2 >= 41 && digit2 <= 44) {\n                count += 31;\n            }
    else if (digit2 >= 45 && digit2 <= 48) {\n                count += 35;\n            }
    else if (digit2 >= 49 && digit2 <= 52) {\n                count += 39;\n            }
    else if (digit2 >= 53 && digit2 <= 56) {\n                count += 43;\n            }
    else if (digit2 >= 57 && digit2 <= 60) {\n                count += 47;\n            }
    else if (digit2 >= 61 && digit2 <= 64) {\n                count += 51;\n            }
    else if (digit2 >= 65 && digit2 <= 68) {\n                count += 55;\n            }
    else if (digit2 >= 69 && digit2 <= 72) {\n                count += 59;\n            }
    else if (digit2 >= 73 && digit2 <= 76) {\n                count += 63;\n            }
    else if (digit2 >= 77 && digit2 <= 80) {\n                count += 67;\n            }
    else if (digit2 >= 81 && digit2 <= 84) {\n                count += 71;\n            }
    else if (digit2 >= 85 && digit2 <= 88) {\n                count += 75;\n            }
    else if (digit2 >= 89 && digit2 <= 92) {\n                count += 79;\n            }
    else if (digit2 >= 93 && digit2 <= 96) {\n                count += 83;\n            }
    else if (digit2 >= 97 && digit2 <= 100) {\n                count += 87;\n            }
    else if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy_8gyb6n.cs(89,24): error CS1525: Invalid expression term ''}''

    /tmp/tmpy_8gyb6n.cs(89,24): error CS1026: ) expected

    /tmp/tmpy_8gyb6n.cs(89,24): error CS1002: ; expected

    /tmp/tmpy_8gyb6n.cs(91,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpy_8gyb6n.cs(100,2): error CS1513: } expected

    '
  timestamp: 1659799313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < '0' || digit > '9') {\n                throw new ArgumentException(\"Hex
    digit must be between 0 and 9\");\n            }\n            result += (digit
    - '0') * (long)Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digit must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0003b] in <4d839b359060484ab0d1becfc5fd06fc>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d839b359060484ab0d1becfc5fd06fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0003b] in <4d839b359060484ab0d1becfc5fd06fc>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d839b359060484ab0d1becfc5fd06fc>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                ret
    += d * 10;\n            } else if (d >= 'A' && d <= 'F') {\n                ret
    += d - 'A' + 10;\n            } else {\n                throw new Exception(\"Invalid
    input\");\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91c5ccb751e948a494daf21f14129cb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91c5ccb751e948a494daf21f14129cb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal digits
    must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digits must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <26531d93f8fe4329a3893230f0f4db87>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <26531d93f8fe4329a3893230f0f4db87>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digits must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <26531d93f8fe4329a3893230f0f4db87>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <26531d93f8fe4329a3893230f0f4db87>:0 \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit >= '0' && digit <= '9') {\n                result += (digit
    - '0');\n            }\n            if (digit >= 'A' && digit <= 'F') {\n                result
    += (digit - 'A' + 10);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eabce12d30b2441fa1a303a4f10e3d1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eabce12d30b2441fa1a303a4f10e3d1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Hex digits must
    be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hex digits
    must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <de63e7f0e16742e6bcd23b3795e0b041>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <de63e7f0e16742e6bcd23b3795e0b041>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hex digits must be between 0 and
    9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f] in <de63e7f0e16742e6bcd23b3795e0b041>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <de63e7f0e16742e6bcd23b3795e0b041>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                ret
    += d * 0x10;\n            } else if (d >= 'A' && d <= 'F') {\n                ret
    += 0x10 + 0xA + (d - 'A');\n            } else {\n                throw new Exception(\"Invalid
    input\");\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7043fa6f0539425bbcc14adfbedfe276>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7043fa6f0539425bbcc14adfbedfe276>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = c - '0';\n            if
    (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"HexKey\",
    \"Invalid hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Invalid hexadecimal
    digit: A\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x0004e]
    in <2950aa51db254f81aba3b17dbbb69885>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <2950aa51db254f81aba3b17dbbb69885>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Invalid hexadecimal digit: A\nParameter name:
    HexKey\n  at Problem.HexKey (System.String num) [0x0004e] in <2950aa51db254f81aba3b17dbbb69885>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <2950aa51db254f81aba3b17dbbb69885>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Invalid hexadecimal
    digit: \" + c);\n            }\n            result += (digit * 16L);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Invalid hexadecimal
    digit: A\nParameter name: num\n  at Problem.HexKey (System.String num) [0x00045]
    in <70810638519d4a99929231e10bef1267>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <70810638519d4a99929231e10bef1267>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Invalid hexadecimal digit: A\nParameter name:
    num\n  at Problem.HexKey (System.String num) [0x00045] in <70810638519d4a99929231e10bef1267>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <70810638519d4a99929231e10bef1267>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= 'A' && d <= 'F') {\n                d
    += 10;\n            }\n            if (d >= '0' && d <= '9') {\n                ret
    += d;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da75547e9f7a4bfbba4431b1565f1789>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da75547e9f7a4bfbba4431b1565f1789>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long count = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                count
    += 1;\n            }\n        }\n        return count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ba64e06dcbf44b2a19dccc2656c6102>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ba64e06dcbf44b2a19dccc2656c6102>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long count = 0;\n        string hex = num.ToUpper();\n
    \       char[] hexChars = hex.ToCharArray();\n        foreach (char c in hexChars)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hex digits must be between 0 and
    9\");\n            }\n            int power = digit * 16;\n            if (power
    > hex.Length) {\n                throw new ArgumentException(\"Hex digits must
    be between 0 and 9\");\n            }\n            int nextDigit = hexChars[power
    + 1];\n            if (nextDigit == 'A' || nextDigit == 'B' || nextDigit == 'C'
    || nextDigit == 'D' || nextDigit == 'E' || nextDigit == 'F') {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x00040] in <830474e1daf24b04b316a242363321f8>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <830474e1daf24b04b316a242363321f8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00040] in <830474e1daf24b04b316a242363321f8>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <830474e1daf24b04b316a242363321f8>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                ret
    += d * 10;\n            } else if (d >= 'A' && d <= 'F') {\n                ret
    += d - 'A' + 10;\n            } else {\n                throw new ArgumentException(\"Invalid
    hex digit: \" + d);\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52a6bca44b6c437f9245e34bcee5b0f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52a6bca44b6c437f9245e34bcee5b0f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"Hexadecimal
    number contains invalid character: \" + c);\n            }\n            result
    += (digit - 'A') * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx4yky88w.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < '0' ||
    digit > '9') {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            result += (digit - '0') * (long)Math.Pow(16,
    num.Length - 1);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00043] in <41bc50615c114052bbd0dec09261872c>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <41bc50615c114052bbd0dec09261872c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00043] in <41bc50615c114052bbd0dec09261872c>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <41bc50615c114052bbd0dec09261872c>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long num2 = 0;\n        bool isPrime = true;\n        long
    num3 = 1;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 =
    0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long
    num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13
    = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n
    \       long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long
    num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23
    = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n
    \       long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long
    num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33
    = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n
    \       long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long
    num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43
    = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n
    \       long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long
    num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53
    = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n
    \       long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long
    num60 = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63
    = 0;\n        long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n
    \       long num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long
    num70 = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73
    = 0;\n        long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n
    \       long num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long
    num80 = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83
    = 0;\n        long num84 = 0;\n        long num85 = 0;\n        long num86\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgcw0v3ye.cs(116,19): error CS1002: ; expected

    '
  timestamp: 1659799314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '0';\n            }\n            result += d * d;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52a8ecb8a21a468fbcf57b2a7ef974c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52a8ecb8a21a468fbcf57b2a7ef974c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numPrimes = 0;\n        long numPrimes2 = 2;\n
    \       long numPrimes3 = 2;\n        long numPrimes4 = 2;\n        long numPrimes5
    = 2;\n        long numPrimes6 = 2;\n        long numPrimes7 = 2;\n        long
    numPrimes8 = 2;\n        long numPrimes9 = 2;\n        long numPrimes10 = 2;\n
    \       long numPrimes11 = 2;\n        long numPrimes12 = 2;\n        long numPrimes13
    = 2;\n        long numPrimes14 = 2;\n        long numPrimes15 = 2;\n        long
    numPrimes16 = 2;\n        long numPrimes17 = 2;\n        long numPrimes18 = 2;\n
    \       long numPrimes19 = 2;\n        long numPrimes20 = 2;\n        long numPrimes21
    = 3;\n        long numPrimes22 = 3;\n        long numPrimes23 = 3;\n        long
    numPrimes24 = 3;\n        long numPrimes25 = 3;\n        long numPrimes26 = 3;\n
    \       long numPrimes27 = 3;\n        long numPrimes28 = 3;\n        long numPrimes29
    = 3;\n        long numPrimes30 = 3;\n        long numPrimes31 = 3;\n        long
    numPrimes32 = 3;\n        long numPrimes33 = 3;\n        long numPrimes34 = 3;\n
    \       long numPrimes35 = 3;\n        long numPrimes36 = 3;\n        long numPrimes37
    = 3;\n        long numPrimes38 = 3;\n        long numPrimes39 = 3;\n        long
    numPrimes40 = 3;\n        long numPrimes41 = 1;\n        long numPrimes42 = 1;\n
    \       long numPrimes43 = 1;\n        long numPrimes44 = 1;\n        long numPrimes45
    = 1;\n        long numPrimes46 = 1;\n        long numPrimes47 = 1;\n        long
    numPrimes48 = 1;\n        long numPrimes49 = 1;\n        long numPrimes50 = 1;\n
    \       long numPrimes51 = 1;\n        long numPrimes52 = 1;\n        long numPrimes53
    = 1;\n        long numPrimes54 = 1;\n        long numPrimes55 = 1;\n        long
    numPrimes56 = 1;\n        long numPrimes57 = 1;\n        long numPrimes58 = 1;\n
    \       long numPrimes59 = 1;\n        long numPrimes60 = 1;\n        long numPrimes61
    = 1;\n        long numPrimes62 = 1;\n        long numPrimes63 = 1;\n        long
    numPri\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxfhjiq5u.cs(94,20): error CS1002: ; expected

    '
  timestamp: 1659799314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int n = Convert.ToInt32(c);\n            if
    (n % 2 == 0) {\n                ret += n;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fba9483fe63a4a089abe7472a7f12afe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fba9483fe63a4a089abe7472a7f12afe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long count = 0;\n        long n = Convert.ToInt64(num);\n
    \       long a = Convert.ToInt64(num.Substring(0, 2));\n        long b = Convert.ToInt64(num.Substring(2,
    2));\n        long c = Convert.ToInt64(num.Substring(4, 2));\n        long d =
    Convert.ToInt64(num.Substring(6, 2));\n        long e = Convert.ToInt64(num.Substring(8,
    2));\n        long f = Convert.ToInt64(num.Substring(10, 2));\n        long g
    = Convert.ToInt64(num.Substring(12, 2));\n        long h = Convert.ToInt64(num.Substring(14,
    2));\n        long i = Convert.ToInt64(num.Substring(16, 2));\n        long j
    = Convert.ToInt64(num.Substring(18, 2));\n        long k = Convert.ToInt64(num.Substring(20,
    2));\n        long l = Convert.ToInt64(num.Substring(22, 2));\n        long m
    = Convert.ToInt64(num.Substring(24, 2));\n        long n = Convert.ToInt64(num.Substring(26,
    2));\n        long o = Convert.ToInt64(num.Substring(28, 2));\n        long p
    = Convert.ToInt64(num.Substring(30, 2));\n        long q = Convert.ToInt64(num.Substring(32,
    2));\n        long r = Convert.ToInt64(num.Substring(34, 2));\n        long s
    = Convert.ToInt64(num.Substring(36, 2));\n        long t = Convert.ToInt64(num.Substring(38,
    2));\n        long u = Convert.ToInt64(num.Substring(40, 2));\n        long v
    = Convert.ToInt64(num.Substring(42, 2));\n        long w = Convert.ToInt64(num.Substring(44,
    2));\n        long x = Convert.ToInt64(num.Substring(46, 2));\n        long y
    = Convert.ToInt64(num.Substring(48, 2));\n        long z = Convert.ToInt64(num.Substring(50,
    2));\n        long A = Convert.ToInt64(num.Substring(52, 2));\n        long B
    = Convert.ToInt64(num.Substring(54, 2));\n        long C = Convert.ToInt64(num.Substring(56,
    2));\n        long D = Convert.ToInt64(num.Substring(58, 2));\n        long E
    = Convert.ToInt64(num.Substring(60, 2));\n        long F = Convert.ToInt64(num.Substring(62,
    2));\n        long G = Convert.ToInt64(num.Substring(\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg85dgb4w.cs(65,48): error CS1026: ) expected

    /tmp/tmpg85dgb4w.cs(65,48): error CS1002: ; expected

    '
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       char[] hexChars = hex.ToCharArray();\n        Array.Sort(hexChars);\n
    \       foreach (char c in hexChars) {\n            int digit = c - '0';\n            if
    (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hex
    digits must be between 0 and 9\");\n            }\n            int power = digit
    * 16;\n            if (power < 0 || power > 9) {\n                throw new ArgumentException(\"Hex
    digits must be between 0 and 9\");\n            }\n            result += Math.Pow(16,
    power);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyzgfqh2b.cs(44,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d < '0' || d > '9') {\n                continue;\n
    \           }\n            long power = 1;\n            while (power < d) {\n
    \               power *= 10;\n            }\n            long num = Convert.ToInt64(Math.Pow(power,
    d));\n            ret += num;\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6sg7bnw.cs(41,18): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long num2 = 0;\n        long num3 = 0;\n        long
    num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 =
    0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n
    \       long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long
    num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17
    = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n
    \       long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long
    num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27
    = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n
    \       long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long
    num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37
    = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n
    \       long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long
    num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47
    = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n
    \       long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long
    num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57
    = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n
    \       long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n        long
    num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long num67
    = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70 = 0;\n
    \       long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n        long
    num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long num77
    = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80 = 0;\n
    \       long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n        long
    num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long num87
    = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplgfrc4m4.cs(31,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(32,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(33,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(34,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(35,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(36,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(37,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(38,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(39,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(40,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(41,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(42,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(43,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(44,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(45,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(46,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(47,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(48,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(49,14): warning CS0'
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       string hex = num.ToUpper();\n        foreach (char c in hex) {\n            int
    digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F') {\n                isPrime
    = false;\n                break;\n            }\n        }\n        if (isPrime)
    {\n            int digit = Convert.ToInt32(hex.Substring(0, 1));\n            if
    (digit < '2' || digit > '7') {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            int digit = Convert.ToInt32(hex.Substring(1,
    1));\n            if (digit < '2' || digit > '7') {\n                isPrime =
    false;\n            }\n        }\n        if (isPrime) {\n            int digit
    = Convert.ToInt32(hex.Substring(2, 1));\n            if (digit < '2' || digit
    > '7') {\n                isPrime = false;\n            }\n        }\n        if
    (isPrime) {\n            int digit = Convert.ToInt32(hex.Substring(3, 1));\n            if
    (digit < '2' || digit > '7') {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            int digit = Convert.ToInt32(hex.Substring(4,
    1));\n            if (digit < '2' || digit > '7') {\n                isPrime =
    false;\n            }\n        }\n        if (isPrime) {\n            int digit
    = Convert.ToInt32(hex.Substring(5, 1));\n            if (digit < '2' || digit
    > '7') {\n                isPrime = false;\n            }\n        }\n        if
    (isPrime) {\n            int digit = Convert.ToInt32(hex.Substring(6, 1));\n            if
    (digit < '2' || digit > '7') {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            int digit = Convert.ToInt32(hex.Substring(7,
    1));\n            if (digit < '2' || digit > '7') {\n                isPrime =
    false;\n            }\n        }\n        if (isPrime) {\n            int digit
    = Convert.ToInt32(hex.Substring(8, 1));\n            if (digit < '2' || digit
    > '7') {\n                isPrime = false;\n            }\n        }\n        if
    (isPrime) {\n            int digit = Convert.ToInt32(hex.Substring(9, 1));\n            if
    (digit < '2' || digit > '7') {\n                isPrime = false;\n            }\n
    \       }\n        if (isPrime) {\n            int digit = Convert.ToInt32(hex.Substring(10,
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1u26qpll.cs(102,58): error CS1525: Invalid expression term ''}''

    /tmp/tmp1u26qpll.cs(102,58): error CS1026: ) expected

    /tmp/tmp1u26qpll.cs(102,58): error CS1002: ; expected

    /tmp/tmp1u26qpll.cs(104,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp1u26qpll.cs(113,2): error CS1513: } expected

    '
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int digit = Convert.ToInt32(c);\n            if (digit < '0' || digit
    > '9') {\n                throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           int digit2 = Convert.ToInt32(num.Substring(0, num.Length - 1));\n
    \           int digit3 = Convert.ToInt32(num.Substring(1, num.Length - 1));\n
    \           int digit4 = Convert.ToInt32(num.Substring(2, num.Length - 1));\n
    \           int digit5 = Convert.ToInt32(num.Substring(3, num.Length - 1));\n
    \           int digit6 = Convert.ToInt32(num.Substring(4, num.Length - 1));\n
    \           int digit7 = Convert.ToInt32(num.Substring(5, num.Length - 1));\n
    \           int digit8 = Convert.ToInt32(num.Substring(6, num.Length - 1));\n
    \           int digit9 = Convert.ToInt32(num.Substring(7, num.Length - 1));\n
    \           int digit10 = Convert.ToInt32(num.Substring(8, num.Length - 1));\n
    \           int digit11 = Convert.ToInt32(num.Substring(9, num.Length - 1));\n
    \           int digit12 = Convert.ToInt32(num.Substring(10, num.Length - 1));\n
    \           int digit13 = Convert.ToInt32(num.Substring(11, num.Length - 1));\n
    \           int digit14 = Convert.ToInt32(num.Substring(12, num.Length - 1));\n
    \           int digit15 = Convert.ToInt32(num.Substring(13, num.Length - 1));\n
    \           int digit16 = Convert.ToInt32(num.Substring(14, num.Length - 1));\n
    \           int digit17 = Convert.ToInt32(num.Substring(15, num.Length - 1));\n
    \           int digit18 = Convert.ToInt32(num.Substring(16, num.Length - 1));\n
    \           int digit19 = Convert.ToInt32(num.Substring(17, num.Length - 1));\n
    \           int digit20 = Convert.ToInt32(num.Substring(18, num.Length - 1));\n
    \           int digit21 = Convert.ToInt32(num.Substring(19, num.Length - 1));\n
    \           int digit22 = Convert.ToInt32(num.Substring(20, num.Length - 1));\n
    \           int digit23 = Convert.ToInt32(num.Substring(21, num.Length - 1));\n
    \           int digit24 = Convert.ToInt32(num.Substring(22, \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9can6rrz.cs(59,60): error CS1525: Invalid expression term ''}''

    /tmp/tmp9can6rrz.cs(59,60): error CS1026: ) expected

    /tmp/tmp9can6rrz.cs(59,60): error CS1002: ; expected

    /tmp/tmp9can6rrz.cs(61,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp9can6rrz.cs(70,2): error CS1513: } expected

    '
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hex digits must be between 0 and
    9\");\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <5efacbaed2e2446c967520cf9149a6fe>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5efacbaed2e2446c967520cf9149a6fe>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <5efacbaed2e2446c967520cf9149a6fe>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5efacbaed2e2446c967520cf9149a6fe>:0
    \n"
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= 'A' && d <= 'F') {\n                d
    += 10;\n            }\n            if (d >= '0' && d <= '9') {\n                ret
    += d;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da75547e9f7a4bfbba4431b1565f1789>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da75547e9f7a4bfbba4431b1565f1789>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result *= 16;\n            result += digit;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <bce37b07efd7454abc8c9a0313cb94b0>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <bce37b07efd7454abc8c9a0313cb94b0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <bce37b07efd7454abc8c9a0313cb94b0>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <bce37b07efd7454abc8c9a0313cb94b0>:0
    \n"
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        bool
    isPrime = true;\n        string hex = num.ToUpper();\n        foreach (char c
    in hex) {\n            digit = Convert.ToInt64(c);\n            if (isPrime) {\n
    \               if (digit % 2 == 0) {\n                    isPrime = false;\n
    \               }\n            }\n            else {\n                if (digit
    % 3 == 0) {\n                    isPrime = false;\n                }\n            }\n
    \           if (isPrime) {\n                result += digit;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <245ad6680d7b4f96a057c394bcbb3265>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <245ad6680d7b4f96a057c394bcbb3265>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        long
    prime = 0;\n        bool isPrime = true;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            digit = Convert.ToInt64(c);\n            if
    (digit > 9) {\n                digit = digit - 10;\n            }\n            prime
    = prime * 10 + digit;\n            if (prime > 9) {\n                isPrime =
    false;\n            }\n        }\n        if (isPrime) {\n            result =
    prime + 1;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c265571b6b484ccf8a4eae06b3e2e9f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c265571b6b484ccf8a4eae06b3e2e9f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit.\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x0002f] in <31958c17d1d84f888067bb00d624ac20>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <31958c17d1d84f888067bb00d624ac20>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x0002f] in <31958c17d1d84f888067bb00d624ac20>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <31958c17d1d84f888067bb00d624ac20>:0
    \n"
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       long digit = 0;\n        long prime = 0;\n        long primeCount = 0;\n
    \       long digitCount = 0;\n        bool isPrimeDigit = false;\n        bool
    isPrimePrime = false;\n        bool isPrimePrimeDigit = false;\n        bool isPrimePrimePrime
    = false;\n        bool isPrimePrimePrimeDigit = false;\n        bool isPrimePrimePrimePrime
    = false;\n        bool isPrimePrimePrimePrimeDigit = false;\n        bool isPrimePrimePrimePrimePrime
    = false;\n        bool isPrimePrimePrimePrimePrimeDigit = false;\n        bool
    isPrimePrimePrimePrimePrimePrime = false;\n        bool isPrimePrimePrimePrimePrimePrimeDigit
    = false;\n        bool isPrimePrimePrimePrimePrimePrimePrime = false;\n        bool
    isPrimePrimePrimePrimePrimePrimePrimeDigit = false;\n        bool isPrimePrimePrimePrimePrimePrimePrimePrime
    = false;\n        bool isPrimePrimePrimePrimePrimePrimePrimePrimeDigit = false;\n
    \       bool isPrimePrimePrimePrimePrimePrimePrimePrimePrime = false;\n        bool
    isPrimePrimePrimePrimePrimePrimePrimePrimePrime = false;\n        bool isPrimePrimePrimePrimePrimePrimePrimePrimePrime
    = false;\n        bool isPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigit =
    false;\n        bool isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = false;\n
    \       bool isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = false;\n        bool
    isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigit = false;\n        bool
    isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = false;\n        bool
    isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = false;\n        bool
    isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigit = false;\n        bool
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpps6ris25.cs(62,13): error CS1001: Identifier expected

    /tmp/tmpps6ris25.cs(62,13): error CS1002: ; expected

    '
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = c - '0';\n            if
    (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in <7dfa4757ac54454995bd5ac1c365c9b2>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <7dfa4757ac54454995bd5ac1c365c9b2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in
    <7dfa4757ac54454995bd5ac1c365c9b2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7dfa4757ac54454995bd5ac1c365c9b2>:0 \n"
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                ret
    += d;\n            } else if (d == 'A' || d == 'B' || d == 'C' || d == 'D' ||
    d == 'E' || d == 'F') {\n                ret += 10;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c06a1e485a62479295b9bb4be091a5c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c06a1e485a62479295b9bb4be091a5c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit >= 2 && digit <= 9)
    {\n                result += (digit * digit);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit >= 2 && digit <= 6)
    {\n                result += (digit * digit);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cb5145a47144552ac879a8e6e152bfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cb5145a47144552ac879a8e6e152bfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int num = Convert.ToInt32(c);\n            if (num > 9) {\n                throw
    new Exception(\"Invalid input\");\n            }\n            long power = 1;\n
    \           while (power < num) {\n                power *= num;\n            }\n
    \           int digit = num % 10;\n            long digitPower = power;\n            while
    (digit != 0) {\n                long digitPower *= digit;\n                digit
    /= 10;\n            }\n            long digitPower2 = digitPower;\n            while
    (digitPower2 != 0) {\n                long digitPower2 *= digitPower2;\n            }\n
    \           long digitPower3 = digitPower2;\n            while (digitPower3 !=
    0) {\n                long digitPower3 *= digitPower3;\n            }\n            long
    digitPower4 = digitPower3;\n            while (digitPower4 != 0) {\n                long
    digitPower4 *= digitPower4;\n            }\n            long digitPower5 = digitPower4;\n
    \           while (digitPower5 != 0) {\n                long digitPower5 *= digitPower5;\n
    \           }\n            long digitPower6 = digitPower5;\n            while
    (digitPower6 != 0) {\n                long digitPower6 *= digitPower6;\n            }\n
    \           long digitPower7 = digitPower6;\n            while (digitPower7 !=
    0) {\n                long digitPower7 *= digitPower7;\n            }\n            long
    digitPower8 = digitPower7;\n            while (digitPower8 != 0) {\n                long
    digitPower8 *= digitPower8;\n            }\n            long digitPower9 = digitPower8;\n
    \           while (digitPower9 != 0) {\n                long digitPower9 *= digitPower9;\n
    \           }\n            long digitPower10 = digitPower9;\n            while
    (digitPower10 != 0) {\n                long digitPower10 *= digitPower10;\n            }\n
    \           long digitPower11 = digitPower10;\n            while (digitPower11
    != 0) {\n                long digitPower11 *= digitPower11;\n            }\n            long
    digitPower12 = digitPower11;\n            while (digitPower12 != 0) {\n                long
    digitPower12 *= digitPower12;\n            }\n            long digitPower13 =
    digitPower12;\n            while (digitPower13 != 0) {\n                long digitPower13
    *= digitPower13;\n            }\n            long digitPower14 = digitPower13;\n
    \           while (digitPower14 != 0) {\n                long digitPower14 *=
    digitPower14;\n            }\n            long digitPower15 = digitPower14;\n
    \           while (digitPower15 != 0) {\n                long digitPower15 *=
    digitPower15;\n            }\n            long digitPower16 = \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe7uwqr_f.cs(44,33): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(44,33): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(49,34): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(49,34): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(53,34): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(53,34): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(57,34): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(57,34): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(61,34): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(61,34): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(65,34): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(65,34): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(69,34): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(69,34): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(73,34): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(73,34): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(77,34): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(77,34): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(81,35): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(81,35): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(85,35): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(85,35): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(89,35): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(89,35): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(93,35): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(93,35): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(97,35): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(97,35): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(101,35): error CS1002: ; expected

    /tmp/tmpe7uwqr_f.cs(101,35): error CS1525: Invalid expression term ''*=''

    /tmp/tmpe7uwqr_f.cs(103,32): error CS1525: Invalid expressi'
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"HexKey\", \"The input
    string contains invalid characters.\");\n            }\n            long power
    = 1;\n            for (int i = 1; i < digit; i++) {\n                power *=
    (long)Math.Pow(16, i);\n            }\n            ret += power;\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bc07d392c5e40daadb9e5985eeec3fb>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: The input string
    contains invalid characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String
    num) [0x00034] in <0bc07d392c5e40daadb9e5985eeec3fb>:0 \n  at Problem.Main (System.String[]
    args) [0x00015] in <0bc07d392c5e40daadb9e5985eeec3fb>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: The input string contains invalid
    characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x00034]
    in <0bc07d392c5e40daadb9e5985eeec3fb>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <0bc07d392c5e40daadb9e5985eeec3fb>:0 \n"
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimes2 = numPrimes;\n        long numPrimes3 = numPrimes;\n
    \       long numPrimes4 = numPrimes;\n        long numPrimes5 = numPrimes;\n        long
    numPrimes6 = numPrimes;\n        long numPrimes7 = numPrimes;\n        long numPrimes8
    = numPrimes;\n        long numPrimes9 = numPrimes;\n        long numPrimes10 =
    numPrimes;\n        long numPrimes11 = numPrimes;\n        long numPrimes12 =
    numPrimes;\n        long numPrimes13 = numPrimes;\n        long numPrimes14 =
    numPrimes;\n        long numPrimes15 = numPrimes;\n        long numPrimes16 =
    numPrimes;\n        long numPrimes17 = numPrimes;\n        long numPrimes18 =
    numPrimes;\n        long numPrimes19 = numPrimes;\n        long numPrimes20 =
    numPrimes;\n        long numPrimes21 = numPrimes;\n        long numPrimes22 =
    numPrimes;\n        long numPrimes23 = numPrimes;\n        long numPrimes24 =
    numPrimes;\n        long numPrimes25 = numPrimes;\n        long numPrimes26 =
    numPrimes;\n        long numPrimes27 = numPrimes;\n        long numPrimes28 =
    numPrimes;\n        long numPrimes29 = numPrimes;\n        long numPrimes30 =
    numPrimes;\n        long numPrimes31 = numPrimes;\n        long numPrimes32 =
    numPrimes;\n        long numPrimes33 = numPrimes;\n        long numPrimes34 =
    numPrimes;\n        long numPrimes35 = numPrimes;\n        long numPrimes36 =
    numPrimes;\n        long numPrimes37 = numPrimes;\n        long numPrimes38 =
    numPrimes;\n        long numPrimes39 = numPrimes;\n        long numPrimes40 =
    numPrimes;\n        long numPrimes41 = numPrimes;\n        long numPrimes42 =
    numPrimes;\n        long numPrimes43 = numPrimes;\n        long \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1zx_5hx_.cs(75,13): error CS1001: Identifier expected

    /tmp/tmp1zx_5hx_.cs(75,13): error CS1002: ; expected

    '
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int d = (int)c;\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0';\n            }\n            if (d >= 'A' && d <= 'F') {\n                d
    -= 'A' - '9';\n            }\n            if (d >= '0' && d <= '9') {\n                d
    -= '0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5slayx3p.cs(98,22): error CS1010: Newline in constant

    /tmp/tmp5slayx3p.cs(98,24): error CS1002: ; expected

    /tmp/tmp5slayx3p.cs(100,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp5slayx3p.cs(109,2): error CS1513: } expected

    '
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"Hex
    digits must be between A and F\");\n            }\n            int digit2 = Convert.ToInt32(num.Substring(0,
    num.Length - 1));\n            if (digit == digit2) {\n                result
    += (digit * digit);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HexKey
    (System.String num) [0x00055] in <6673a6f28a134ddcb9ea4e2f5b460176>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <6673a6f28a134ddcb9ea4e2f5b460176>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HexKey
    (System.String num) [0x00055] in <6673a6f28a134ddcb9ea4e2f5b460176>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <6673a6f28a134ddcb9ea4e2f5b460176>:0 \n"
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = Convert.ToInt32(c);\n            if (digit >= '0' &&
    digit <= '9') {\n                result += (digit - '0');\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80f9b908b4fd42af8689e934f68b96b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80f9b908b4fd42af8689e934f68b96b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digits = 0;\n        long
    primes = 0;\n        long prime = 0;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            digits = digits * 16 + c - '0';\n        }\n        primes
    = (int)Math.Sqrt(digits);\n        prime = (int)Math.Sqrt(digits);\n        primes
    = primes % 2;\n        prime = prime % 2;\n        primes = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n        prime
    = prime + primes;\n        prime = prime + primes;\n        prime = prime + primes;\n
    \       prime = prime + primes;\n        prime = prime + primes;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuet1nuhe.cs(31,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpuet1nuhe.cs(30,24): error CS0161: ''Problem.HexKey(string)'': not all
    code paths return a value

    '
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       string hex = num.ToUpper();\n        foreach (char c in hex) {\n            int
    digit = c - '0';\n            if (digit < 0 || digit > 9) {\n                isPrime
    = false;\n                break;\n            }\n        }\n        if (isPrime)
    {\n            int prime = 2;\n            int primeCount = 0;\n            while
    (prime * prime <= hex.Length) {\n                if (hex.Substring(prime * prime,
    prime).ToUpper() == hex) {\n                    primeCount++;\n                }\n
    \               prime++;\n            }\n            result = primeCount;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <932b992840034603a4498264e7e148ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <932b992840034603a4498264e7e148ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal digits
    must be from 0 to 9\");\n            }\n            long power = 1;\n            while
    (digit > 0) {\n                power *= digit;\n                digit--;\n            }\n
    \           result += power;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4a1affba6674d49a5a643d846af84b7>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal digits
    must be from 0 to 9\nParameter name: num\n  at Problem.HexKey (System.String num)
    [0x00034] in <c4a1affba6674d49a5a643d846af84b7>:0 \n  at Problem.Main (System.String[]
    args) [0x00015] in <c4a1affba6674d49a5a643d846af84b7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digits must be from
    0 to 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x00034]
    in <c4a1affba6674d49a5a643d846af84b7>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <c4a1affba6674d49a5a643d846af84b7>:0 \n"
  stdout: ''
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"num\",
    \"Hex digit must be between A and F\");\n            }\n            result +=
    (digit - 'A') * Math.Pow(16, num.Length - 1);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp31x8ynxw.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       long digit = 0;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            digit = Convert.ToInt64(c);\n            if (isPrime)
    {\n                isPrime = IsPrime(digit);\n            }\n            if (isPrime)
    {\n                result += digit;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm5rf1t3m.cs(38,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long num2 = 0;\n        long num3 = 0;\n        long
    num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 =
    0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n
    \       long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long
    num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17
    = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n
    \       long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long
    num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27
    = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n
    \       long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long
    num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37
    = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n
    \       long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long
    num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47
    = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n
    \       long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long
    num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57
    = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n
    \       long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n        long
    num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long num67
    = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70 = 0;\n
    \       long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n        long
    num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long num77
    = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80 = 0;\n
    \       long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n        long
    num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long num87
    = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplgfrc4m4.cs(31,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(32,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(33,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(34,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(35,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(36,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(37,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(38,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(39,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(40,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(41,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(42,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(43,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(44,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(45,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(46,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(47,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(48,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(49,14): warning CS0'
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimesDivisors = 0;\n        long numPrimesDivisorsPrimes
    = 0;\n        long numPrimesDivisorsPrimesDivisors = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimes
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisors = 0;\n        long
    numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimes = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisors
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimes
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisors
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimes
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisors
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimes
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisors
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimes
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisors
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimes
    = 0;\n        long numPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisorsPrimesDivisor\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr44ym95e.cs(49,142): error CS1002: ; expected

    '
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        long sum = 0;\n        long
    count = 0;\n        foreach (char c in num) {\n            int d = (int)c;\n            sum
    += d * d;\n            count++;\n        }\n        long d = sum / count;\n        long
    e = (long)Math.Sqrt(d);\n        long f = (long)Math.Pow(e, 2);\n        long
    g = (long)Math.Pow(e, 3);\n        long h = (long)Math.Pow(e, 4);\n        long
    i = (long)Math.Pow(e, 5);\n        long j = (long)Math.Pow(e, 6);\n        long
    k = (long)Math.Pow(e, 7);\n        long l = (long)Math.Pow(e, 8);\n        long
    m = (long)Math.Pow(e, 9);\n        long n = (long)Math.Pow(e, 10);\n        long
    o = (long)Math.Pow(e, 11);\n        long p = (long)Math.Pow(e, 12);\n        long
    q = (long)Math.Pow(e, 13);\n        long r = (long)Math.Pow(e, 14);\n        long
    s = (long)Math.Pow(e, 15);\n        long t = (long)Math.Pow(e, 16);\n        long
    u = (long)Math.Pow(e, 17);\n        long v = (long)Math.Pow(e, 18);\n        long
    w = (long)Math.Pow(e, 19);\n        long x = (long)Math.Pow(e, 20);\n        long
    y = (long)Math.Pow(e, 21);\n        long z = (long)Math.Pow(e, 22);\n        long
    A = (long)Math.Pow(e, 23);\n        long B = (long)Math.Pow(e, 24);\n        long
    C = (long)Math.Pow(e, 25);\n        long D = (long)Math.Pow(e, 26);\n        long
    E = (long)Math.Pow(e, 27);\n        long F = (long)Math.Pow(e, 28);\n        long
    G = (long)Math.Pow(e, 29);\n        long H = (long)Math.Pow(e, 30);\n        long
    I = (long)Math.Pow(e, 31);\n        long J = (long)Math.Pow(e, 32);\n        long
    K = (long)Math.Pow(e, 33);\n        long L = (long)Math.Pow(e, 34);\n        long
    M = (long)Math.Pow(e, 35);\n        long N = (long)Math.Pow(e, 36);\n        long
    O = (long)Math.Pow(e, 37);\n        long P = (long)Math.Pow(e, 38);\n        long
    Q = (long)Math.Pow(e, 39);\n        long R = (long)Math.Pow(e, 40);\n        long
    S = (long)Math.Pow(e, 4\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyr0bn9w_.cs(80,37): error CS1026: ) expected

    /tmp/tmpyr0bn9w_.cs(80,37): error CS1002: ; expected

    '
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                ret
    += d * 10L;\n            } else if (d >= 'A' && d <= 'F') {\n                ret
    += 10L + d - 'A';\n            } else {\n                throw new Exception(\"Invalid
    input\");\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73d96b9d4c244253979b6bd148ccdd8a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73d96b9d4c244253979b6bd148ccdd8a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int n = Convert.ToInt32(c);\n            if (n < '0' || n > '9') {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            long nn = Convert.ToInt64(num);\n            long
    nn = nn * 16 + n;\n            if (nn == 1) {\n                ret += 1;\n            }\n
    \           else {\n                ret += 2;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0blrvxdt.cs(38,18): error CS0128: A local variable or function named ''nn''
    is already defined in this scope

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit > 9) {\n
    \               throw new ArgumentException(\"Hexadecimal digits must be from
    0 to 9\");\n            }\n            result += (digit * 16L);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digits must
    be from 0 to 9\n  at Problem.HexKey (System.String num) [0x00029] in <43f23606926f4743b8d4c86a4fe50ae4>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <43f23606926f4743b8d4c86a4fe50ae4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digits
    must be from 0 to 9\n  at Problem.HexKey (System.String num) [0x00029] in <43f23606926f4743b8d4c86a4fe50ae4>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <43f23606926f4743b8d4c86a4fe50ae4>:0
    \n"
  stdout: ''
  timestamp: 1659799316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        long
    pow = 0;\n        bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            pow = Convert.ToInt64(Math.Pow(digit, 2));\n
    \           if (isPrime) {\n                if (pow == digit) {\n                    isPrime
    = false;\n                }\n            } else {\n                if (pow !=
    digit) {\n                    isPrime = true;\n                }\n            }\n
    \       }\n        if (isPrime) {\n            result++;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6507cb4ccfa47828619f65ebe0f57ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6507cb4ccfa47828619f65ebe0f57ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       string hex = num.ToUpper();\n        foreach (char c in hex) {\n            int
    digit = c - '0';\n            if (digit < 0 || digit > 9) {\n                isPrime
    = false;\n                break;\n            }\n            long digitValue =
    Convert.ToInt64(Math.Pow(16, digit));\n            if (isPrime) {\n                if
    (digit == 2) {\n                    result += digitValue;\n                } else
    if (digit == 3) {\n                    result += digitValue * 2;\n                }
    else if (digit == 5) {\n                    result += digitValue * 3;\n                }
    else if (digit == 7) {\n                    result += digitValue * 5;\n                }
    else if (digit == 11) {\n                    result += digitValue * 7;\n                }
    else if (digit == 13) {\n                    result += digitValue * 11;\n                }
    else if (digit == 17) {\n                    result += digitValue * 13;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <442161fef6bc4162a74eea0a99cf5351>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <442161fef6bc4162a74eea0a99cf5351>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        long
    power = 1;\n        bool isPrime = true;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            digit = Convert.ToInt64(c);\n            power
    = power * digit;\n        }\n        long limit = Convert.ToInt64(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Convert.ToDouble(Math.Pow(Conver\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvqa4381_.cs(40,1483): error CS1026: ) expected

    /tmp/tmpvqa4381_.cs(40,1483): error CS1002: ; expected

    '
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            result += (digit % 2 == 0) ?
    digit : digit + 1;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25d9af7cb8dc43208d20ca48dcbfa4a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25d9af7cb8dc43208d20ca48dcbfa4a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       long digit = 0;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            digit = Convert.ToInt64(c);\n            if (isPrime)
    {\n                if (digit % 2 == 0) {\n                    isPrime = false;\n
    \               }\n            }\n            else {\n                if (digit
    % 3 == 0) {\n                    isPrime = true;\n                }\n            }\n
    \           if (isPrime) {\n                result += digit;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0e98c678a0e44f8a21eafca35cd96af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0e98c678a0e44f8a21eafca35cd96af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                ret
    += d;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfcd27d456fc4fa280670d1359fb8938>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfcd27d456fc4fa280670d1359fb8938>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hex digit: \" + c);\n            }\n
    \           int power = (int)Math.Pow(16, digit);\n            if (num.Length
    > 1) {\n                for (int i = 1; i < num.Length; i++) {\n                    int
    nextDigit = num[i] - '0';\n                    if (nextDigit < 0 || nextDigit
    > 9) {\n                        throw new ArgumentException(\"Invalid hex digit:
    \" + num[i]);\n                    }\n                    int nextPower = (int)Math.Pow(16,
    nextDigit);\n                    ret += power * nextPower;\n                }\n
    \           } else {\n                ret += power;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hex digit: A\n
    \ at Problem.HexKey (System.String num) [0x00043] in <a80c15ef13794ec2813c3e9d5bfe18c4>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <a80c15ef13794ec2813c3e9d5bfe18c4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hex digit:
    A\n  at Problem.HexKey (System.String num) [0x00043] in <a80c15ef13794ec2813c3e9d5bfe18c4>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <a80c15ef13794ec2813c3e9d5bfe18c4>:0
    \n"
  stdout: ''
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hexadecimal digits must be between
    0 and 9\");\n            }\n            int power = (int)Math.Pow(16, digit);\n
    \           result += digit * power;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1bc69336b7e481e9d52aad1ccceb7ee>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digits must be
    between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <d1bc69336b7e481e9d52aad1ccceb7ee>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <d1bc69336b7e481e9d52aad1ccceb7ee>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digits
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <d1bc69336b7e481e9d52aad1ccceb7ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <d1bc69336b7e481e9d52aad1ccceb7ee>:0 \n"
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numOfPrimes = 0;\n        long numOfPrimeDigits
    = 0;\n        long numOfPrimeDigitsInHex = 0;\n        long numOfPrimeDigitsInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimal = 0;\n        long numOfPrimeDigitsInDecimalInHex
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexInDecimal
    = 0;\n        long numOfPrimeDigitsInHexInDecimalInHex = 0;\n        long numOfPrimeDigitsInDecimalInHexIn\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsd9a9ln2.cs(66,46): error CS1002: ; expected

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Hex digits must
    be between 0 and 9\");\n            }\n            long power = 1;\n            for
    (int i = 1; i < digit; i++) {\n                power *= (long)Math.Pow(16, i);\n
    \           }\n            long result = power;\n            for (int i = digit
    + 1; i < 16; i++) {\n                if (result % i == 0) {\n                    result
    /= i;\n                    ret += 1;\n                    break;\n                }\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hex digits
    must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x00032] in <d11cf100568d4351a4f5ebdee67c6183>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <d11cf100568d4351a4f5ebdee67c6183>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hex digits must be between 0 and
    9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x00032] in <d11cf100568d4351a4f5ebdee67c6183>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d11cf100568d4351a4f5ebdee67c6183>:0
    \n"
  stdout: ''
  timestamp: 1659799316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int d = Convert.ToInt32(c);\n            if
    (d >= 'A' && d <= 'F') {\n                d += 10;\n            }\n            if
    (d >= '0' && d <= '9') {\n                ret += d * d;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7bcd4e96546445695172b986dee6383>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7bcd4e96546445695172b986dee6383>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        long num2 = 0;\n        long
    num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 =
    0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long
    num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13
    = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n
    \       long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long
    num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23
    = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n
    \       long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long
    num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33
    = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n
    \       long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long
    num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43
    = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n
    \       long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long
    num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53
    = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n
    \       long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long
    num60 = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63
    = 0;\n        long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n
    \       long num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long
    num70 = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73
    = 0;\n        long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n
    \       long num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long
    num80 = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83
    = 0;\n        long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n
    \       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5eionq3.cs(31,14): warning CS0219: The variable ''ret'' is assigned but
    its value is never used

    /tmp/tmpo5eionq3.cs(32,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(33,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(34,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(35,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(36,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(37,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(38,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(39,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(40,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(41,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(42,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(43,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(44,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(45,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(46,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(47,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(48,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(49,14): warning CS021'
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       char[] hexChars = hex.ToCharArray();\n        foreach (char hexChar in
    hexChars) {\n            int decimal = Convert.ToInt32(hexChar, 16);\n            result
    += decimal;\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9rv5wopz.cs(35,17): error CS1001: Identifier expected

    /tmp/tmp9rv5wopz.cs(35,17): error CS1002: ; expected

    /tmp/tmp9rv5wopz.cs(35,25): error CS1001: Identifier expected

    /tmp/tmp9rv5wopz.cs(36,23): error CS1525: Invalid expression term ''decimal''

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       char[] hexChars = hex.ToCharArray();\n        Array.Sort(hexChars);\n
    \       foreach (char hexChar in hexChars) {\n            int decimal = hexChar
    - 'A' + 10;\n            if (decimal < 2) {\n                decimal = 2;\n            }\n
    \           if (decimal > 9) {\n                decimal = 9;\n            }\n
    \           int prime = decimal;\n            int counter = 1;\n            while
    (prime > 1) {\n                if (hexChars[counter] == 'A') {\n                    prime
    = 2;\n                } else if (hexChars[counter] == 'B') {\n                    prime
    = 3;\n                } else if (hexChars[counter] == 'C') {\n                    prime
    = 5;\n                } else if (hexChars[counter] == 'D') {\n                    prime
    = 7;\n                } else if (hexChars[counter] == 'E') {\n                    prime
    = 11;\n                } else if (hexChars[counter] == 'F') {\n                    prime
    = 13;\n                }\n                counter++;\n            }\n            result
    += prime * counter;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2v46zwyf.cs(36,17): error CS1001: Identifier expected

    /tmp/tmp2v46zwyf.cs(36,17): error CS1002: ; expected

    /tmp/tmp2v46zwyf.cs(36,25): error CS1001: Identifier expected

    /tmp/tmp2v46zwyf.cs(37,17): error CS1525: Invalid expression term ''decimal''

    /tmp/tmp2v46zwyf.cs(38,25): error CS1001: Identifier expected

    /tmp/tmp2v46zwyf.cs(40,17): error CS1525: Invalid expression term ''decimal''

    /tmp/tmp2v46zwyf.cs(41,25): error CS1001: Identifier expected

    /tmp/tmp2v46zwyf.cs(43,25): error CS1525: Invalid expression term ''decimal''

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = 0;\n        long numPrimes = 0;\n
    \       long numPrimeDigits = 0;\n        long numPrimePrimes = 0;\n        long
    numPrimePrimeDigits = 0;\n        long numPrimePrimePrimes = 0;\n        long
    numPrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4_nvbyxa.cs(31,14): warning CS0219: The variable ''numDigits'' is assigned
    but its value is never used

    /tmp/tmp4_nvbyxa.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmp4_nvbyxa.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(34,14): warning CS0219: The variable ''numPrimePrimes'' is
    assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(35,14): warning CS0219: The variable ''numPrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(36,14): warning CS0219: The variable ''numPrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(37,14): warning CS0219: The variable ''numPrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(38,14): warning CS0219: The variable ''numPrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(39,14): warning CS0219: The variable ''numPrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(40,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(41,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(42,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(43,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(44,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(45,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(46,14): warning CS021'
  timestamp: 1659799316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit >= 2 && digit <= 9)
    {\n                result += digit * digit;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f60e9ea49a44305b6ddf75be6417a4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f60e9ea49a44305b6ddf75be6417a4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = 0;\n        long numPrimes = 0;\n
    \       long numPrimeDigits = 0;\n        long numPrimePrimes = 0;\n        long
    numPrimePrimeDigits = 0;\n        long numPrimePrimePrimes = 0;\n        long
    numPrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgbdtyr2s.cs(57,70): error CS1002: ; expected

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long count = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hex digit must be between 0 and
    9\");\n            }\n            int digit2 = digit % 10;\n            int digit3
    = digit / 10;\n            int digit4 = digit3 % 10;\n            int digit5 =
    digit3 / 10;\n            int digit6 = digit5 % 10;\n            int digit7 =
    digit5 / 10;\n            int digit8 = digit7 % 10;\n            int digit9 =
    digit7 / 10;\n            int digit10 = digit9 % 10;\n            int digit11
    = digit9 / 10;\n            int digit12 = digit11 % 10;\n            int digit13
    = digit11 / 10;\n            int digit14 = digit13 % 10;\n            int digit15
    = digit13 / 10;\n            int digit16 = digit15 % 10;\n            int digit17
    = digit15 / 10;\n            int digit18 = digit17 % 10;\n            int digit19
    = digit17 / 10;\n            int digit20 = digit19 % 10;\n            int digit21
    = digit19 / 10;\n            int digit22 = digit21 % 10;\n            int digit23
    = digit21 / 10;\n            int digit24 = digit23 % 10;\n            int digit25
    = digit23 / 10;\n            int digit26 = digit25 % 10;\n            int digit27
    = digit25 / 10;\n            int digit28 = digit27 % 10;\n            int digit29
    = digit27 / 10;\n            int digit30 = digit29 % 10;\n            int digit31
    = digit29 / 10;\n            int digit32 = digit31 % 10;\n            int digit33
    = digit31 / 10;\n            int digit34 = digit33 % 10;\n            int digit35
    = digit33 / 10;\n            int digit36 = digit35 % 10;\n            int digit37
    = digit35 / 10;\n            int digit38 = digit37 % 10;\n            int digit39
    = digit37 / 10;\n            int digit40 = digit39 % 10;\n            int digit41
    = digit39 / 10;\n            int digit42 = digit41 % 10;\n            int digit43
    = digit41 / 10;\n            int digit44 = digit43 % 10;\n            int digit45
    = digit43 / 10;\n            int digit46 = digit45 % 10;\n            int digit47
    = digit45 / 10;\n            int digit48 = digit47 % 10;\n            int digit49
    = digit47 / 10;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo81mzho7.cs(87,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpo81mzho7.cs(96,2): error CS1513: } expected

    '
  timestamp: 1659799316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            result += (long)Math.Pow(16, (int)c);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f8b31d3bca34d09b48484adcca18f3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f8b31d3bca34d09b48484adcca18f3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit == 0 || digit == 1) {\n                continue;\n            }\n
    \           long power = 1;\n            for (int i = 1; i < digit; i++) {\n                power
    *= digit;\n            }\n            if (power == digit) {\n                result
    += power;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0770be9ad144d2586857d6f2bc239b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0770be9ad144d2586857d6f2bc239b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int n = Convert.ToInt32(c);\n            if (n < '0' || n > '9') {\n
    \               throw new ArgumentException(\"Invalid hex digit: \" + c);\n            }\n
    \           int d = n - '0';\n            if (d > 9) {\n                throw
    new ArgumentException(\"Invalid hex digit: \" + c);\n            }\n            int
    a = Convert.ToInt32(num.Substring(0, 2));\n            int b = Convert.ToInt32(num.Substring(2,
    2));\n            int c = Convert.ToInt32(num.Substring(4, 2));\n            int
    d = Convert.ToInt32(num.Substring(6, 2));\n            int e = Convert.ToInt32(num.Substring(8,
    2));\n            int f = Convert.ToInt32(num.Substring(10, 2));\n            int
    g = Convert.ToInt32(num.Substring(12, 2));\n            int h = Convert.ToInt32(num.Substring(14,
    2));\n            int i = Convert.ToInt32(num.Substring(16, 2));\n            int
    j = Convert.ToInt32(num.Substring(18, 2));\n            int k = Convert.ToInt32(num.Substring(20,
    2));\n            int l = Convert.ToInt32(num.Substring(22, 2));\n            int
    m = Convert.ToInt32(num.Substring(24, 2));\n            int n = Convert.ToInt32(num.Substring(26,
    2));\n            int o = Convert.ToInt32(num.Substring(28, 2));\n            int
    p = Convert.ToInt32(num.Substring(30, 2));\n            int q = Convert.ToInt32(num.Substring(32,
    2));\n            int r = Convert.ToInt32(num.Substring(34, 2));\n            int
    s = Convert.ToInt32(num.Substring(36, 2));\n            int t = Convert.ToInt32(num.Substring(38,
    2));\n            int u = Convert.ToInt32(num.Substring(40, 2));\n            int
    v = Convert.ToInt32(num.Substring(42, 2));\n            int w = Convert.ToInt32(num.Substring(44,
    2));\n            int x = Convert.ToInt32(num.Substring(46, 2));\n            int
    y = Convert.ToInt32(num.Substring(48, 2));\n            int z = Convert.ToInt32(num.Substring(50,
    2));\n            int A = Convert.ToInt32(num.Substring(52, 2));\n            int
    B = Convert.ToInt32(num.Substring(54, 2));\n            int C = Convert.ToInt32(num.Substring(56,
    2));\n            int D = Convert.To\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxutuh39o.cs(70,31): error CS1002: ; expected

    /tmp/tmpxutuh39o.cs(72,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxutuh39o.cs(81,2): error CS1513: } expected

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       long temp = 0;\n        foreach (char c in num.ToUpper()) {\n            int
    digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw
    new ArgumentOutOfRangeException(\"Invalid hexadecimal digit.\");\n            }\n
    \           temp = temp * 16 + digit;\n        }\n        temp = temp / 10;\n
    \       if (temp % 2 == 0) {\n            isPrime = false;\n        }\n        if
    (isPrime) {\n            while (temp > 0) {\n                if (temp % 2 == 0)
    {\n                    result = result + 2;\n                }\n                temp
    = temp / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8c771982bdf488eb13b60610ace36e5>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x0003d] in <e8c771982bdf488eb13b60610ace36e5>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e8c771982bdf488eb13b60610ace36e5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x0003d] in <e8c771982bdf488eb13b60610ace36e5>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e8c771982bdf488eb13b60610ace36e5>:0
    \n"
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <050feee69c394e5085a89b7660197be4>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <050feee69c394e5085a89b7660197be4>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <050feee69c394e5085a89b7660197be4>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <050feee69c394e5085a89b7660197be4>:0 \n"
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimes2 = numDigits / 2;\n        long numPrimes3 = numDigits
    / 3;\n        long numPrimes4 = numDigits / 4;\n        long numPrimes5 = numDigits
    / 5;\n        long numPrimes6 = numDigits / 6;\n        long numPrimes7 = numDigits
    / 7;\n        long numPrimes8 = numDigits / 8;\n        long numPrimes9 = numDigits
    / 9;\n        long numPrimes10 = numDigits / 10;\n        long numPrimes11 = numDigits
    / 11;\n        long numPrimes12 = numDigits / 12;\n        long numPrimes13 =
    numDigits / 13;\n        long numPrimes14 = numDigits / 14;\n        long numPrimes15
    = numDigits / 15;\n        long numPrimes16 = numDigits / 16;\n        long numPrimes17
    = numDigits / 17;\n        long numPrimes18 = numDigits / 18;\n        long numPrimes19
    = numDigits / 19;\n        long numPrimes20 = numDigits / 20;\n        long numPrimes21
    = numDigits / 21;\n        long numPrimes22 = numDigits / 22;\n        long numPrimes23
    = numDigits / 23;\n        long numPrimes24 = numDigits / 24;\n        long numPrimes25
    = numDigits / 25;\n        long numPrimes26 = numDigits / 26;\n        long numPrimes27
    = numDigits / 27;\n        long numPrimes28 = numDigits / 28;\n        long numPrimes29
    = numDigits / 29;\n        long numPrimes30 = numDigits / 30;\n        long numPrimes31
    = numDigits / 31;\n        long numPrimes32 = numDigits / 32;\n        long numPrimes33
    = numDigits / 33;\n        long numPrimes34 = numDigits / 34;\n        long numPrimes35
    = numDigits / 35;\n        long numPrimes36 = numDigits / 36;\n        long numPrimes37
    = numDigits / 37;\n        long numPrimes38 = numDigits / 38;\n        long numPrimes\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7f1ezl7_.cs(70,23): error CS1002: ; expected

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       string hex = num.ToUpper();\n        foreach (char c in hex) {\n            int
    digit = Convert.ToInt32(c);\n            if (digit < '0' || digit > '9') {\n                isPrime
    = false;\n                break;\n            }\n        }\n        if (isPrime)
    {\n            int prime = 2;\n            while (prime < hex.Length) {\n                if
    (hex.Substring(prime, 1).ToUpper() == \"0\") {\n                    prime++;\n
    \                   continue;\n                }\n                for (int i =
    2; i <= hex.Length / prime; i++) {\n                    if (hex.Substring(prime
    * i, 1).ToUpper() == \"0\") {\n                        prime++;\n                        continue;\n
    \                   }\n                    for (int j = prime * i; j < hex.Length;
    j += prime) {\n                        if (hex.Substring(j, 1).ToUpper() == \"0\")
    {\n                            prime++;\n                            continue;\n
    \                       }\n                        for (int k = j; k < hex.Length;
    k += prime) {\n                            if (hex.Substring(k, 1).ToUpper() ==
    \"0\") {\n                                prime++;\n                                continue;\n
    \                           }\n                            for (int l = k; l <
    hex.Length; l += prime) {\n                                if (hex.Substring(l,
    1).ToUpper() == \"0\") {\n                                    prime++;\n                                    continue;\n
    \                               }\n                                for (int m
    = l; m < hex.Length; m += prime) {\n                                    if (hex.Substring(m,
    1).ToUpper() == \"0\") {\n                                        prime++;\n                                        continue;\n
    \                                   }\n                                    for
    (int n = m; n < hex.Length; n += prime) {\n                                        if
    (hex.Substring(n, 1).ToUpper() == \"0\") {\n                                            prime++;\n
    \                                           continue;\n                                        }\n
    \                                       for (int o = n; o < hex.Length; o += prime)
    {\n                                            if (hex.Substring(o, 1).ToUpper()
    == \"0\") {\n                                                prime++;\n                                                continue;\n
    \                                           }\n                                            for
    (int p = o; p < hex.Length; p += prime) {\n                                                if
    (hex.Substring(p, 1).ToUpper() == \"0\") {\n                                                    prime++;\n
    \                                                   continue;\n                                                }\n
    \                                               for (int q = p; q < hex.Length;
    q += prime) {\n                                                    if (hex.Substring(q,
    1).ToUpper() == \"0\") {\n                                                        prime++;\n
    \                                                       continue;\n                                                    }\n
    \                                                   for (int r = q; r < hex.Length;
    r += prime) {\n                                                        if (hex.Substring(r,
    1).ToUpper() == \"0\") {\n                                                            prime++;\n
    \                                                           continue;\n                                                        }\n
    \                                                       for (int s = r; s < hex.Length;
    s += prime) {\n                                                            if
    (hex\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsw8v8t2s.cs(99,68): error CS1026: ) expected

    /tmp/tmpsw8v8t2s.cs(99,68): error CS1525: Invalid expression term ''}''

    /tmp/tmpsw8v8t2s.cs(99,68): error CS1002: ; expected

    /tmp/tmpsw8v8t2s.cs(101,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpsw8v8t2s.cs(110,2): error CS1513: } expected

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int num = Convert.ToInt32(c);\n            int num2 = num % 10;\n
    \           int num3 = num / 10;\n            if (num2 == 2) {\n                if
    (num3 == 2) {\n                    ret++;\n                }\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpta65w1ft.cs(33,17): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2 = 0;\n        long
    numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits5
    = 0;\n        long numPrimeDigits6 = 0;\n        long numPrimeDigits7 = 0;\n        long
    numPrimeDigits8 = 0;\n        long numPrimeDigits9 = 0;\n        long numPrimeDigits10
    = 0;\n        long numPrimeDigits11 = 0;\n        long numPrimeDigits12 = 0;\n
    \       long numPrimeDigits13 = 0;\n        long numPrimeDigits14 = 0;\n        long
    numPrimeDigits15 = 0;\n        long numPrimeDigits16 = 0;\n        long numPrimeDigits17
    = 0;\n        long numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n
    \       long numPrimeDigits20 = 0;\n        long numPrimeDigits21 = 0;\n        long
    numPrimeDigits22 = 0;\n        long numPrimeDigits23 = 0;\n        long numPrimeDigits24
    = 0;\n        long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n
    \       long numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long
    numPrimeDigits29 = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31
    = 0;\n        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n
    \       long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long
    numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38
    = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n
    \       long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n        long
    numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long numPrimeDigits45
    = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47 = 0;\n
    \       long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n        long
    numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa130im9k.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpa130im9k.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(34,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(35,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(36,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(37,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(38,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(39,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(40,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(41,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(42,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(43,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(44,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(45,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(46,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(47,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(48,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numOfPrimes = 0;\n        long numOfPrimeDigits
    = 0;\n        long numOfPrimeDigitDigits = 0;\n        long numOfPrimeDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrimeDigitDigitDigitDigits
    = 0;\n        long numOfPrimeDigitDigitDigitDigits = 0;\n        long numOfPrime\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm8lirgvq.cs(74,24): error CS1002: ; expected

    '
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        long num2 = 0;\n        long
    num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 =
    0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long
    num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13
    = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n
    \       long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long
    num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23
    = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n
    \       long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long
    num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33
    = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n
    \       long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long
    num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43
    = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n
    \       long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long
    num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53
    = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n
    \       long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long
    num60 = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63
    = 0;\n        long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n
    \       long num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long
    num70 = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73
    = 0;\n        long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n
    \       long num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long
    num80 = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83
    = 0;\n        long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n
    \       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5eionq3.cs(31,14): warning CS0219: The variable ''ret'' is assigned but
    its value is never used

    /tmp/tmpo5eionq3.cs(32,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(33,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(34,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(35,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(36,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(37,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(38,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(39,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(40,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(41,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(42,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(43,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(44,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(45,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(46,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(47,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(48,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpo5eionq3.cs(49,14): warning CS021'
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee58d5fcb4fa44b7a25892dcca2070ec>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <ee58d5fcb4fa44b7a25892dcca2070ec>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <ee58d5fcb4fa44b7a25892dcca2070ec>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <ee58d5fcb4fa44b7a25892dcca2070ec>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <ee58d5fcb4fa44b7a25892dcca2070ec>:0 \n"
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result *= 16;\n            result += digit;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <bce37b07efd7454abc8c9a0313cb94b0>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <bce37b07efd7454abc8c9a0313cb94b0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <bce37b07efd7454abc8c9a0313cb94b0>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <bce37b07efd7454abc8c9a0313cb94b0>:0
    \n"
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            if (c >= '0' && c <= '9') {\n                ret += c - '0';\n
    \           } else if (c >= 'A' && c <= 'F') {\n                ret += c - 'A'
    + 10;\n            } else if (c >= 'a' && c <= 'f') {\n                ret +=
    c - 'a' + 10;\n            } else {\n                throw new Exception(\"Invalid
    input\");\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89e3323554fb4dc49bc222612a5c4e95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89e3323554fb4dc49bc222612a5c4e95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = Convert.ToInt32(c);\n            int prime = digit
    % 10;\n            if (prime == 0) {\n                ret += digit / 10;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d2911ccc35540af8012b0d24f25717a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d2911ccc35540af8012b0d24f25717a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit == 0 || digit == 1) {\n                continue;\n            }\n
    \           long digital = (long)digit;\n            long digital2 = digital *
    digital;\n            long digital3 = digital2 * digital;\n            long digital4
    = digital3 * digital;\n            long digital5 = digital4 * digital;\n            long
    digital6 = digital5 * digital;\n            long digital7 = digital6 * digital;\n
    \           long digital8 = digital7 * digital;\n            long digital9 = digital8
    * digital;\n            long digital10 = digital9 * digital;\n            long
    digital11 = digital10 * digital;\n            long digital12 = digital11 * digital;\n
    \           long digital13 = digital12 * digital;\n            long digital14
    = digital13 * digital;\n            long digital15 = digital14 * digital;\n            long
    digital16 = digital15 * digital;\n            long digital17 = digital16 * digital;\n
    \           long digital18 = digital17 * digital;\n            long digital19
    = digital18 * digital;\n            long digital20 = digital19 * digital;\n            long
    digital21 = digital20 * digital;\n            long digital22 = digital21 * digital;\n
    \           long digital23 = digital22 * digital;\n            long digital24
    = digital23 * digital;\n            long digital25 = digital24 * digital;\n            long
    digital26 = digital25 * digital;\n            long digital27 = digital26 * digital;\n
    \           long digital28 = digital27 * digital;\n            long digital29
    = digital28 * digital;\n            long digital30 = digital29 * digital;\n            long
    digital31 = digital30 * digital;\n            long digital32 = digital31 * digital;\n
    \           long digital33 = digital32 * digital;\n            long digital34
    = digital33 * digital;\n            long digital35 = digital34 * digital;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvx__usf.cs(75,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmppvx__usf.cs(84,2): error CS1513: } expected

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        bool
    isPrime = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           isPrime = isPrime(digit);\n            if (isPrime) {\n                result
    += digit;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbhogp6o.cs(36,23): error CS0149: Method name expected

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digits = 0;\n        bool
    isPrime = true;\n        foreach (char c in num) {\n            digits = digits
    * 16 + c - '0';\n        }\n        long maxDigits = digits / 16;\n        long
    maxPrime = maxDigits + 1;\n        long maxDivisor = maxPrime / 2;\n        long
    maxRemainder = maxDigits % 2;\n        long maxDivisor2 = maxPrime / 4;\n        long
    maxRemainder2 = maxDigits % 4;\n        long maxDivisor3 = maxPrime / 8;\n        long
    maxRemainder3 = maxDigits % 8;\n        long maxDivisor4 = maxPrime / 16;\n        long
    maxRemainder4 = maxDigits % 16;\n        long maxDivisor5 = maxPrime / 32;\n        long
    maxRemainder5 = maxDigits % 32;\n        long maxDivisor6 = maxPrime / 64;\n        long
    maxRemainder6 = maxDigits % 64;\n        long maxDivisor7 = maxPrime / 128;\n
    \       long maxRemainder7 = maxDigits % 128;\n        long maxDivisor8 = maxPrime
    / 256;\n        long maxRemainder8 = maxDigits % 256;\n        long maxDivisor9
    = maxPrime / 512;\n        long maxRemainder9 = maxDigits % 512;\n        long
    maxDivisor10 = maxPrime / 1024;\n        long maxRemainder10 = maxDigits % 1024;\n
    \       long maxDivisor11 = maxPrime / 2048;\n        long maxRemainder11 = maxDigits
    % 2048;\n        long maxDivisor12 = maxPrime / 4096;\n        long maxRemainder12
    = maxDigits % 4096;\n        long maxDivisor13 = maxPrime / 8192;\n        long
    maxRemainder13 = maxDigits % 8192;\n        long maxDivisor14 = maxPrime / 16384;\n
    \       long maxRemainder14 = maxDigits % 16384;\n        long maxDivisor15 =
    maxPrime / 32768;\n        long maxRemainder15 = maxDigits % 32768;\n        long
    maxDivisor16 = maxPrime / 65536;\n        long maxRemainder16 = maxDigits % 65536;\n
    \       long maxDivisor17 = maxPrime / 131072;\n        long maxRemainder17 =
    maxDigits % 131072;\n        long maxDi\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1_ksotgo.cs(73,19): error CS1002: ; expected

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long num2 = 0;\n        long num3 = 0;\n        long
    num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 =
    0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n
    \       long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long
    num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17
    = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n
    \       long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long
    num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27
    = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n
    \       long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long
    num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37
    = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n
    \       long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long
    num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47
    = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n
    \       long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long
    num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57
    = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n
    \       long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n        long
    num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long num67
    = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70 = 0;\n
    \       long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n        long
    num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long num77
    = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80 = 0;\n
    \       long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n        long
    num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long num87
    = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplgfrc4m4.cs(31,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(32,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(33,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(34,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(35,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(36,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(37,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(38,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(39,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(40,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(41,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(42,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(43,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(44,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(45,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(46,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(47,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(48,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmplgfrc4m4.cs(49,14): warning CS0'
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numOfDigits = 0;\n        long numOfPrimes
    = 0;\n        long numOfPrimes2 = 0;\n        long numOfPrimes4 = 0;\n        long
    numOfPrimes6 = 0;\n        long numOfPrimes8 = 0;\n        long numOfPrimes10
    = 0;\n        long numOfPrimes12 = 0;\n        long numOfPrimes14 = 0;\n        long
    numOfPrimes16 = 0;\n        long numOfPrimes18 = 0;\n        long numOfPrimes20
    = 0;\n        long numOfPrimes22 = 0;\n        long numOfPrimes24 = 0;\n        long
    numOfPrimes26 = 0;\n        long numOfPrimes28 = 0;\n        long numOfPrimes30
    = 0;\n        long numOfPrimes32 = 0;\n        long numOfPrimes34 = 0;\n        long
    numOfPrimes36 = 0;\n        long numOfPrimes38 = 0;\n        long numOfPrimes40
    = 0;\n        long numOfPrimes42 = 0;\n        long numOfPrimes44 = 0;\n        long
    numOfPrimes46 = 0;\n        long numOfPrimes48 = 0;\n        long numOfPrimes50
    = 0;\n        long numOfPrimes52 = 0;\n        long numOfPrimes54 = 0;\n        long
    numOfPrimes56 = 0;\n        long numOfPrimes58 = 0;\n        long numOfPrimes60
    = 0;\n        long numOfPrimes62 = 0;\n        long numOfPrimes64 = 0;\n        long
    numOfPrimes66 = 0;\n        long numOfPrimes68 = 0;\n        long numOfPrimes70
    = 0;\n        long numOfPrimes72 = 0;\n        long numOfPrimes74 = 0;\n        long
    numOfPrimes76 = 0;\n        long numOfPrimes78 = 0;\n        long numOfPrimes80
    = 0;\n        long numOfPrimes82 = 0;\n        long numOfPrimes84 = 0;\n        long
    numOfPrimes86 = 0;\n        long numOfPrimes88 = 0;\n        long numOfPrimes90
    = 0;\n        long numOfPrimes92 = 0;\n        long numOfPrimes94 = 0;\n        long
    numOfPrimes96 = 0;\n        long numOfPrimes98 = 0;\n        long numOfPrimes100
    = 0;\n        long numOfPrimes102 = 0;\n        long numOfPrimes104 = 0;\n        long
    numOfPrimes106 = 0;\n        long numOfPrimes108 = 0;\n        long numOfPrimes110
    = 0;\n        long num\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_vc4n_q.cs(88,17): error CS1002: ; expected

    '
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long num2 = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int n = (int)c;\n            if
    (n % 2 == 0) {\n                num2 += n;\n            }\n        }\n        return
    num2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e1397239e7c4ceba22cea3a1e138b7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e1397239e7c4ceba22cea3a1e138b7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentException(\"Hexadecimal digit
    must be between A and F\");\n            }\n            result += (digit - 'A')
    * Math.Pow(16, num.Length - 1);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpga2nrf7r.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        string
    hex = num.ToUpper();\n        foreach (char c in hex) {\n            digit = (long)(c
    - '0');\n            if (digit > 9) {\n                digit = (long)(digit -
    10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - 10);\n            }\n            if (digit > 9) {\n                digit = (long)(digit
    - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8lx5f0t.cs(124,39): error CS1525: Invalid expression term ''}''

    /tmp/tmpo8lx5f0t.cs(124,39): error CS1026: ) expected

    /tmp/tmpo8lx5f0t.cs(124,39): error CS1002: ; expected

    /tmp/tmpo8lx5f0t.cs(126,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpo8lx5f0t.cs(135,2): error CS1513: } expected

    '
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                result
    += (long)Math.Pow(16, (int)c - '0');\n            } else if (d >= 'A' && d <=
    'F') {\n                result += (long)Math.Pow(16, (int)c - 'A' + 10);\n            }
    else if (d == 'A' || d == 'B' || d == 'C' || d == 'D' || d == 'E' || d == 'F')
    {\n                result += (long)Math.Pow(16, (int)c - 'A' + 10);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69e8579943d2483d8c763bc515b76c66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69e8579943d2483d8c763bc515b76c66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal digits
    must be between 0 and 9\");\n            }\n            result *= 16;\n            result
    += digit;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digits must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <fdd2642245e84794a762f7278535cbbd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <fdd2642245e84794a762f7278535cbbd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digits must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <fdd2642245e84794a762f7278535cbbd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <fdd2642245e84794a762f7278535cbbd>:0 \n"
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        bool
    isPrime = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 2);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 3);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 5);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 7);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 11);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 13);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 17);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 19);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 23);\n        }\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            result += (digit
    * 29);\n        }\n        foreach (\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphh06inoi.cs(134,18): error CS1525: Invalid expression term ''}''

    /tmp/tmphh06inoi.cs(134,18): error CS1515: ''in'' expected

    /tmp/tmphh06inoi.cs(134,18): error CS0230: Type and identifier are both required
    in a foreach statement

    /tmp/tmphh06inoi.cs(134,18): error CS1026: ) expected

    /tmp/tmphh06inoi.cs(134,18): error CS1002: ; expected

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = 0;\n        long numPrimes = 0;\n
    \       long numPrimeDigits = 0;\n        long numPrimePrimes = 0;\n        long
    numPrimePrimeDigits = 0;\n        long numPrimePrimePrimes = 0;\n        long
    numPrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4_nvbyxa.cs(31,14): warning CS0219: The variable ''numDigits'' is assigned
    but its value is never used

    /tmp/tmp4_nvbyxa.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmp4_nvbyxa.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(34,14): warning CS0219: The variable ''numPrimePrimes'' is
    assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(35,14): warning CS0219: The variable ''numPrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(36,14): warning CS0219: The variable ''numPrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(37,14): warning CS0219: The variable ''numPrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(38,14): warning CS0219: The variable ''numPrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(39,14): warning CS0219: The variable ''numPrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(40,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(41,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(42,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(43,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(44,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(45,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(46,14): warning CS021'
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"Hex
    number must be uppercase letters A - F\");\n            }\n            result
    += (digit - 'A') * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_2lp20_6.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long digit = 0;\n        string
    hex = num.ToUpper();\n        foreach (char c in hex) {\n            digit = (long)Convert.ToInt32(c);\n
    \           if (digit == 0) {\n                return result;\n            }\n
    \           if (digit % 2 == 0) {\n                result += digit / 2;\n            }\n
    \           else if (digit % 3 == 0) {\n                result += digit / 3;\n
    \           }\n            else if (digit % 5 == 0) {\n                result
    += digit / 5;\n            }\n            else if (digit % 7 == 0) {\n                result
    += digit / 7;\n            }\n            else {\n                result += digit
    / 11;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14304324f4dd40ddbf64dfa90d60e267>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14304324f4dd40ddbf64dfa90d60e267>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"HexKey\",
    \"Hexadecimal digit must be between A and F\");\n            }\n            result
    += (digit - 'A') * Math.Pow(16, num.Length - 1);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplnl74gzd.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <52b9d2c4d95f421eabaf85ead4a3f278>:0
    \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            long digitValue = Convert.ToInt64(Math.Pow(16,
    digit));\n            if (IsPrime(digitValue)) {\n                result += digitValue;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp54aun0op.cs(38,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            result += (long)Math.Pow(16, (int)c);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f8b31d3bca34d09b48484adcca18f3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f8b31d3bca34d09b48484adcca18f3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <050feee69c394e5085a89b7660197be4>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <050feee69c394e5085a89b7660197be4>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <050feee69c394e5085a89b7660197be4>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <050feee69c394e5085a89b7660197be4>:0 \n"
  stdout: ''
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = 0;\n        long numPrimes = 0;\n
    \       long numPrimeDigits = 0;\n        long numPrimePrimes = 0;\n        long
    numPrimePrimeDigits = 0;\n        long numPrimePrimePrimes = 0;\n        long
    numPrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4_nvbyxa.cs(31,14): warning CS0219: The variable ''numDigits'' is assigned
    but its value is never used

    /tmp/tmp4_nvbyxa.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmp4_nvbyxa.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(34,14): warning CS0219: The variable ''numPrimePrimes'' is
    assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(35,14): warning CS0219: The variable ''numPrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(36,14): warning CS0219: The variable ''numPrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(37,14): warning CS0219: The variable ''numPrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(38,14): warning CS0219: The variable ''numPrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(39,14): warning CS0219: The variable ''numPrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(40,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(41,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(42,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(43,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(44,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(45,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp4_nvbyxa.cs(46,14): warning CS021'
  timestamp: 1659799316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal digit
    must be between 0 and 9\");\n            }\n            result *= 16;\n            result
    += digit;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digit must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <a6a5c682fef04b29b62c419accf0de81>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a6a5c682fef04b29b62c419accf0de81>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <a6a5c682fef04b29b62c419accf0de81>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a6a5c682fef04b29b62c419accf0de81>:0 \n"
  stdout: ''
  timestamp: 1659799318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long count = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"Hex
    digit must be between A and F\");\n            }\n            int digit2 = digit
    - 'A';\n            if (digit2 == 0) {\n                count++;\n            }\n
    \           else if (digit2 == 1) {\n                count += 2;\n            }\n
    \           else if (digit2 == 2) {\n                count += 3;\n            }\n
    \           else if (digit2 == 3) {\n                count += 5;\n            }\n
    \           else if (digit2 == 4) {\n                count += 7;\n            }\n
    \           else if (digit2 == 5) {\n                count += 11;\n            }\n
    \           else if (digit2 == 6) {\n                count += 13;\n            }\n
    \           else if (digit2 == 7) {\n                count += 17;\n            }\n
    \           else if (digit2 == 8) {\n                count += 19;\n            }\n
    \           else if (digit2 == 9) {\n                count += 23;\n            }\n
    \           else if (digit2 == 10) {\n                count += 29;\n            }\n
    \           else if (digit2 == 11) {\n                count += 31;\n            }\n
    \           else if (digit2 == 12) {\n                count += 37;\n            }\n
    \           else if (digit2 == 13) {\n                count += 41;\n            }\n
    \           else if (digit2 == 14) {\n                count += 47;\n            }\n
    \           else if (digit2 == 15) {\n                count += 51;\n            }\n
    \           else if (digit2 == 16) {\n                count += 57;\n            }\n
    \           else if (digit2 == 17) {\n                count += 61;\n            }\n
    \           else if (digit2 == 18) {\n                count += 67;\n            }\n
    \           else if (digit2 == 19) {\n                count += 71;\n            }\n
    \           else if (digit2 == 20) {\n                count += 77;\n            }\n
    \           else if (digit2 == 21) {\n                count += 81;\n            }\n
    \           else if (digit2 == 22) {\n                count += 87;\n            }\n
    \           else if (digit2 == 23) {\n                count += 91;\n            }\n
    \           else if (digit2 == 24) {\n                count += 97;\n            }\n
    \           else if (digit2 == 25) {\n                count += 103;\n            }\n
    \           else if (digit2 == 26) {\n                count += 109;\n            }\n
    \           else if (digit2 == 27) {\n                count += 113;\n            }\n
    \           else if (digit2 == 28) {\n                count += 119;\n            }\n
    \           else if (digit2 == 29) {\n                count += 123;\n            }\n
    \           else if (digit2 == 30) {\n                count \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppl7hob7d.cs(130,22): error CS1002: ; expected

    /tmp/tmppl7hob7d.cs(132,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmppl7hob7d.cs(141,2): error CS1513: } expected

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit.\");\n            }\n            result += (digit - 'A') * Math.Pow(16,
    num.Length - 1);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ee8j3c3.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       string hex = num.ToUpper();\n        foreach (char c in hex) {\n            int
    digit = Convert.ToInt32(c);\n            if (digit > 9) {\n                isPrime
    = false;\n                break;\n            }\n            int prime = Convert.ToInt32(Math.Pow(digit,
    2));\n            if (prime > 1) {\n                isPrime = false;\n                break;\n
    \           }\n        }\n        if (isPrime) {\n            int prime = Convert.ToInt32(Math.Pow(hex,
    2));\n            if (prime > 1) {\n                result += prime;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmxmo3xd7.cs(47,50): error CS1503: Argument 1: cannot convert from ''string''
    to ''double''

    '
  timestamp: 1659799318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            long power = 1;\n            for (int i = 0; i
    < digit; i++) {\n                power *= (long)Math.Pow(16, i);\n            }\n
    \           result += power;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a84579c3574475e9112d953c1eda9df>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <0a84579c3574475e9112d953c1eda9df>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <0a84579c3574475e9112d953c1eda9df>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <0a84579c3574475e9112d953c1eda9df>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <0a84579c3574475e9112d953c1eda9df>:0
    \n"
  stdout: ''
  timestamp: 1659799318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < '0' || digit > '9') {\n                isPrime = false;\n
    \               break;\n            }\n        }\n        if (isPrime) {\n            int
    primeDigit = 2;\n            int primeFactor = 1;\n            while (primeDigit
    < num.Length) {\n                if (num[primeDigit] == 'A') {\n                    primeFactor
    = primeFactor * 2;\n                } else if (num[primeDigit] == 'B') {\n                    primeFactor
    = primeFactor * 3;\n                } else if (num[primeDigit] == 'C') {\n                    primeFactor
    = primeFactor * 5;\n                } else if (num[primeDigit] == 'D') {\n                    primeFactor
    = primeFactor * 7;\n                } else if (num[primeDigit] == 'E') {\n                    primeFactor
    = primeFactor * 11;\n                } else if (num[primeDigit] == 'F') {\n                    primeFactor
    = primeFactor * 13;\n                }\n                primeDigit++;\n            }\n
    \           result = primeFactor;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e8576b75ff1432dbb96b78f2ed77d60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e8576b75ff1432dbb96b78f2ed77d60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numOfPrimes = 0;\n        long numOfDigits
    = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex) {\n
    \           long digit = Convert.ToInt64(c);\n            if (digit == 0) continue;\n
    \           numOfDigits++;\n            if (digit % 2 == 0) continue;\n            long
    n = (long) Math.Pow(digit, 2);\n            if (n % 2 == 0) continue;\n            numOfPrimes++;\n
    \       }\n        return numOfPrimes;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170df764c696465abe2aed3c3640b8a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170df764c696465abe2aed3c3640b8a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"HexKey\",
    \"The input string contains invalid hexadecimal digit.\");\n            }\n            result
    += (digit - 'A') * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfcu7i0k.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numDigits = num.Length;\n        long numPrimes
    = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2 = 0;\n        long
    numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits5
    = 0;\n        long numPrimeDigits6 = 0;\n        long numPrimeDigits7 = 0;\n        long
    numPrimeDigits8 = 0;\n        long numPrimeDigits9 = 0;\n        long numPrimeDigits10
    = 0;\n        long numPrimeDigits11 = 0;\n        long numPrimeDigits12 = 0;\n
    \       long numPrimeDigits13 = 0;\n        long numPrimeDigits14 = 0;\n        long
    numPrimeDigits15 = 0;\n        long numPrimeDigits16 = 0;\n        long numPrimeDigits17
    = 0;\n        long numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n
    \       long numPrimeDigits20 = 0;\n        long numPrimeDigits21 = 0;\n        long
    numPrimeDigits22 = 0;\n        long numPrimeDigits23 = 0;\n        long numPrimeDigits24
    = 0;\n        long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n
    \       long numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long
    numPrimeDigits29 = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31
    = 0;\n        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n
    \       long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long
    numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38
    = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n
    \       long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n        long
    numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long numPrimeDigits45
    = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47 = 0;\n
    \       long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n        long
    numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa130im9k.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpa130im9k.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(34,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(35,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(36,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(37,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(38,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(39,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(40,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(41,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpa130im9k.cs(42,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(43,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(44,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(45,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(46,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(47,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpa130im9k.cs(48,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long count = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"Invalid hexadecimal digit:
    \" + c);\n            }\n            count += digit * Math.Pow(16, num.Length
    - 1 - c);\n        }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb5j2rx2v.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        bool isPrime = true;\n
    \       foreach (char c in num.ToUpper()) {\n            if (c == 'A' || c ==
    'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F') {\n                isPrime
    = false;\n            }\n        }\n        if (isPrime) {\n            int length
    = num.Length;\n            int prime = 2;\n            while (prime < length)
    {\n                if (num[prime - 1] == '0' && num[prime - 2] == '0') {\n                    prime++;\n
    \               }\n                else {\n                    result = prime
    * 10 + num.IndexOf('0', prime - 1);\n                    break;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99111473e46d43e89ac678e0a1ecfcd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99111473e46d43e89ac678e0a1ecfcd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                result
    += (long)Math.Pow(16, (int)c - '0');\n            }\n            else if (d >=
    'A' && d <= 'F') {\n                result += (long)Math.Pow(16, (int)c - 'A'
    + 10);\n            }\n            else if (d == 'A' || d == 'B' || d == 'C' ||
    d == 'D' || d == 'E' || d == 'F') {\n                result += (long)Math.Pow(16,
    (int)c - 'A' + 10);\n            }\n            else {\n                throw
    new Exception(\"Invalid hexadecimal digit: \" + d);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbff2bc6ddd64c7695b32fae811b1f78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbff2bc6ddd64c7695b32fae811b1f78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit >= 2 && digit <= 6)
    {\n                result += (digit * digit);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cb5145a47144552ac879a8e6e152bfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cb5145a47144552ac879a8e6e152bfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long numOfPrimes = 0;\n        long numOfDigits
    = 0;\n        long numOfHexDigits = 0;\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       string hexDigit = \"0\";\n        string hex\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdbzxhj9b.cs(88,19): error CS1002: ; expected

    '
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        long temp = 0;\n        string
    hex = num.ToUpper();\n        foreach (char c in hex) {\n            int digit
    = Convert.ToInt32(c);\n            if (digit >= 'A' && digit <= 'F') {\n                temp
    = temp * 16 + digit - 'A' + 10;\n            } else {\n                temp =
    temp * 16 + digit - '0';\n            }\n        }\n        result = temp;\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46ec5b21e1114e0b9cbd4fc1c602f236>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46ec5b21e1114e0b9cbd4fc1c602f236>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hex digits must be between 0 and
    9\");\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <5efacbaed2e2446c967520cf9149a6fe>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5efacbaed2e2446c967520cf9149a6fe>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <5efacbaed2e2446c967520cf9149a6fe>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5efacbaed2e2446c967520cf9149a6fe>:0
    \n"
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit.\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00034] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00034] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <2cdd02b8b7834a13b08931a4174e5540>:0
    \n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long ret = 0;\n        foreach (char c in num) {\n
    \           int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                ret
    += n;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b209ea07c286463481939f6c35e04da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b209ea07c286463481939f6c35e04da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <9d15372a596f44c8b6c9ba3405a0b896>:0 \n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n
    \   // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n
    \   // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long
    HexKey(string num) {\n        long result = 0;\n        foreach (char c in num)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit: \" +
    c);\n            }\n            result += (long)Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <209c666ef3ed40aba4730b2c87cbb9e1>:0
    \n"
  stdout: ''
  timestamp: 1659799314
