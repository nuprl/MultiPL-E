name: HumanEval_114_minSubArraySum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of integers nums, find the minimum sum of any non-empty\
  \ sub-list\n    // of nums.\n    // Example\n    // >>> Minsubarraysum((new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\n    //\
  \ (1L)\n    // >>> Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,\
  \ (long)-3L})))\n    // (-6L)\n    public static long Minsubarraysum(List<long>\
  \ nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\
  \ == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new\
  \ long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n\
  \    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))\
  \ == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new\
  \ long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))\
  \ == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,\
  \ (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))\
  \ == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,\
  \ (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
completions: ["        long minSum = nums.Min();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            if (sum < minSum) {\n\
    \                minSum = sum;\n            }\n        }\n        return minSum;",
  "        long sum = 0;\n        long minSum = nums.Min();\n        long maxSum =\
    \ nums.Max();\n        long minSumIndex = -1;\n        long maxSumIndex = -1;\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum < minSum) {\n                minSum = sum;\n                minSumIndex\
    \ = num;\n            }\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxSumIndex = num;\n            }\n        }\n     \
    \   if (minSumIndex == -1) {\n            return maxSum;\n        }\n        long\
    \ minSumSubArray = nums.GetRange(minSumIndex, nums.Count - minSumIndex + 1);\n\
    \        long maxSumSubArray = nums.GetRange(maxSumIndex, nums.Count - maxSumIndex\
    \ + 1);\n        long minSumSubArraySum = minSumSubArray.Sum();\n        long\
    \ maxSumSubArraySum = maxSumSubArray.Sum();\n        if (minSumSubArraySum > maxSumSubArraySum)\
    \ {\n            return minSum;\n        }\n        return maxSum;", "       \
    \ long minSum = nums.Min();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            if (sum < minSum) {\n          \
    \      minSum = sum;\n            }\n        }\n        return minSum;", "   \
    \     long sum = 0;\n        long minSum = nums.Min();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum < minSum) {\n     \
    \           minSum = sum;\n            }\n        }\n        return minSum;",
  "        long sum = 0;\n        long minSum = nums.Min();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum < minSum) {\n     \
    \           minSum = sum;\n            }\n        }\n        return minSum;",
  "        long sum = 0;\n        long min = long.MaxValue;\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum < min) {\n        \
    \        min = sum;\n            }\n        }\n        return min;", "       \
    \ long sum = 0;\n        long minSum = nums.Min();\n        long maxSum = nums.Max();\n\
    \        long minSumIndex = 0;\n        long maxSumIndex = 0;\n        long minSumIndex2\
    \ = 0;\n        long maxSumIndex2 = 0;\n        long minSumIndex3 = 0;\n     \
    \   long maxSumIndex3 = 0;\n        foreach (long i in nums) {\n            sum\
    \ += i;\n            if (sum < minSum) {\n                minSum = sum;\n    \
    \            minSumIndex = i;\n            }\n            if (sum > maxSum) {\n\
    \                maxSum = sum;\n                maxSumIndex = i;\n           \
    \ }\n            if (sum < minSum2) {\n                minSum2 = sum;\n      \
    \          minSumIndex2 = i;\n            }\n            if (sum > maxSum2) {\n\
    \                maxSum2 = sum;\n                maxSumIndex2 = i;\n         \
    \   }\n            if (sum < minSum3) {\n                minSum3 = sum;\n    \
    \            minSumIndex3 = i;\n            }\n            if (sum > maxSum3)\
    \ {\n                maxSum3 = sum;\n                maxSumIndex3 = i;\n     \
    \       }\n        }\n        Console.WriteLine(\"minSum = {0}, minSumIndex =\
    \ {1}, maxSum = {2}, maxSumIndex = {3}, minSum2 = {4}, minSumIndex2 = {5}, maxSum2\
    \ = {6}, minSum3 = {7}, minSumIndex3 = {8}, maxSum3 = {9}, sum = {10}\", minSum,\
    \ minSumIndex, maxSum, maxSumIndex, minSum2, minSumIndex2, maxSum2, minSum3, minSumIndex3,\
    \ maxSum3, sum);\n        return sum;", "        long sum = 0;\n        long minSum\
    \ = long.MaxValue;\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        return minSum;", "        long sum = 0;\n        long min\
    \ = long.MaxValue;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;", "        long sum = 0;\n        long min = nums.Min();\n\
    \        long max = nums.Max();\n        long mid = nums.Count / 2;\n        long\
    \ mid2 = mid + 1;\n        long mid3 = mid + 2;\n        long mid4 = mid + 3;\n\
    \        long mid5 = mid + 4;\n        long mid6 = mid + 5;\n        long mid7\
    \ = mid + 6;\n        long mid8 = mid + 7;\n        long mid9 = mid + 8;\n   \
    \     long mid10 = mid + 9;\n        long mid11 = mid + 10;\n        long mid12\
    \ = mid + 11;\n        long mid13 = mid + 12;\n        long mid14 = mid + 13;\n\
    \        long mid15 = mid + 14;\n        long mid16 = mid + 15;\n        long\
    \ mid17 = mid + 16;\n        long mid18 = mid + 17;\n        long mid19 = mid\
    \ + 18;\n        long mid20 = mid + 19;\n        long mid21 = mid + 20;\n    \
    \    long mid22 = mid + 21;\n        long mid23 = mid + 22;\n        long mid24\
    \ = mid + 23;\n        long mid25 = mid + 24;\n        long mid26 = mid + 25;\n\
    \        long mid27 = mid + 26;\n        long mid28 = mid + 27;\n        long\
    \ mid29 = mid + 28;\n        long mid30 = mid + 29;\n        long mid31 = mid\
    \ + 30;\n        long mid32 = mid + 31;\n        long mid33 = mid + 32;\n    \
    \    long mid34 = mid + 33;\n        long mid35 = mid + 34;\n        long mid36\
    \ = mid + 35;\n        long mid37 = mid + 36;\n        long mid38 = mid + 37;\n\
    \        long mid39 = mid + 38;\n        long mid40 = mid + 39;\n        long\
    \ mid41 = mid + 40;\n        long mid42 = mid + 41;\n        long mid43 = mid\
    \ + 42;\n        long mid44 = mid + 43;\n        long mid45 = mid + 44;\n    \
    \    long mid46 = mid + 45;\n        long mid47 = mid + 46;\n        long mid48\
    \ = mid + 47;\n        long mid49 = mid + 48;\n        long mid50 = mid + 49;\n\
    \        long mid51 = mid + 50;\n        long mid52 = mid + 51;\n        long\
    \ mid53 = mid + 52;\n        long mid54 = mid + 53;\n        long mid55 = mid\
    \ + 54;\n        long mid56 = ", "        long min = nums.Min();\n        long\
    \ max = nums.Max();\n        long sum = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > max) {\n                max = sum;\n   \
    \         }\n        }\n        return min + max;", "        long sum = 0;\n \
    \       long min = long.MaxValue;\n        foreach (var n in nums) {\n       \
    \     sum += n;\n            if (sum < min) {\n                min = sum;\n  \
    \          }\n        }\n        return min;", "        long sum = 0;\n      \
    \  long min = long.MaxValue;\n        long max = 0;\n        foreach (var num\
    \ in nums) {\n            sum += num;\n            if (sum < min) {\n        \
    \        min = sum;\n            }\n            if (sum > max) {\n           \
    \     max = sum;\n            }\n        }\n        if (min == long.MaxValue)\
    \ {\n            return max;\n        }\n        return min - max;", "       \
    \ long minSum = nums.Sum();\n        foreach (var num in nums.SkipWhile(n => n\
    \ < 0L).TakeWhile(n => n > 0L)) {\n            minSum -= num;\n        }\n   \
    \     return minSum;", "        long minSum = nums.Min();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    if (sum < minSum) {\n                minSum = sum;\n            }\n     \
    \   }\n        return minSum;", "        long minSum = nums.Sum();\n        foreach\
    \ (var num in nums.Skip(1))\n            minSum -= num;\n        return minSum;",
  "        long sum = 0;\n        long minSum = nums.Min();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum < minSum) {\n     \
    \           minSum = sum;\n            }\n        }\n        return minSum;",
  "        long minSum = nums.Min();\n        long sum = 0;\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum < minSum) {\n     \
    \           minSum = sum;\n            }\n        }\n        return minSum;",
  "        long sum = 0;\n        long minSum = nums.Min();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum < minSum) {\n     \
    \           minSum = sum;\n            }\n        }\n        return minSum;",
  "        long min = long.MaxValue;\n        long sum = 0;\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum < min) {\n        \
    \        min = sum;\n            }\n        }\n        return min;"]
stop_tokens:
- "\n    }\n"
