name: HumanEval_130_tri
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by\
  \ mathematicians in \n    // the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n\
  \    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
  \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
  \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
  \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
  \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
  \ sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>\
  \ Tri(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
  \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
  \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
  \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
  \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
  \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
  \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
  \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
  \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n +\
    \ 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n  \
    \          result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            result.Add(1);\n          \
    \  result.Add(1);\n            return result;\n        }\n        if (n % 2 ==\
    \ 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n      \
    \  } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n\
    \ - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = a + b;\n            result.Add(c);\n        }\n        else {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = a + b;\n            result.Add(c);\n            long d = Tri(n - 3);\n   \
    \         result.Add(d);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long\
    \ tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n          \
    \  result.AddRange(tri1, tri2, tri3, tri4);\n        } else {\n            long\
    \ tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3\
    \ = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.AddRange(tri1,\
    \ tri2, tri3);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { (long)1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long\
    \ tri3 = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n            long tri5\
    \ = Tri(n - 5);\n            long tri6 = Tri(n - 6);\n            long tri7 =\
    \ Tri(n - 7);\n            long tri8 = Tri(n - 8);\n            long tri9 = Tri(n\
    \ - 9);\n            long tri10 = Tri(n - 10);\n            long tri11 = Tri(n\
    \ - 11);\n            long tri12 = Tri(n - 12);\n            long tri13 = Tri(n\
    \ - 13);\n            long tri14 = Tri(n - 14);\n            long tri15 = Tri(n\
    \ - 15);\n            long tri16 = Tri(n - 16);\n            long tri17 = Tri(n\
    \ - 17);\n            long tri18 = Tri(n - 18);\n            long tri19 = Tri(n\
    \ - 19);\n            long tri20 = Tri(n - 20);\n            long tri21 = Tri(n\
    \ - 21);\n            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n\
    \ - 23);\n            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n\
    \ - 25);\n            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n\
    \ - 27);\n            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n\
    \ - 29);\n            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n\
    \ - 31);\n            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n\
    \ - 33);\n            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n\
    \ - 35);\n            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n\
    \ - 37);\n            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n\
    \ - 39);\n            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n\
    \ - 41);\n            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n\
    \ - 43);\n            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n\
    \ - 45);\n            long tri46 = Tri(n - 46);\n            long tri", "    \
    \    List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n\
    \        else if (n == 1)\n            result.Add(1);\n        else if (n % 2\
    \ == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        else\n    \
    \        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        if (n == 0) return new List<long>();\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9);", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n            return result;\n        } else {\n       \
    \     long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 2;\n        long c = 1;\n        long d\
    \ = 1;\n        long temp;\n        if (n <= 3) {\n            result.Add(n);\n\
    \            return result;\n        }\n        while (n > 0) {\n            temp\
    \ = c;\n            c = a + b;\n            a = b;\n            b = temp;\n  \
    \          temp = d;\n            d = c + d;\n            c = d;\n           \
    \ d = temp;\n            result.Add(c);\n            n -= 2;\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) result.Add(1L);\n        if (n == 1) result.Add(3L);\n        if\
    \ (n == 2) result.Add(2L);\n        if (n % 2 == 0) {\n            long tri1 =\
    \ Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n            long tri3 =\
    \ Tri(n + 1L);\n            long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1) + Tri(n\
    \ + 2) + Tri(n + 3);", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n + 2));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = a + b;\n            result.Add(c);\n           \
    \ return result;\n        } else {\n            long a = Tri(n - 1);\n       \
    \     long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            long d = Tri(n - 3);\n            result.Add(d);\n            return\
    \ result;\n        }", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n       \
    \     long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n         \
    \   result.AddRange(tri1);\n            result.AddRange(tri2);\n            result.AddRange(tri3);\n\
    \        } else {\n            long tri1 = Tri(n - 1);\n            long tri2\
    \ = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            result.AddRange(tri1);\n\
    \            result.AddRange(tri2);\n            result.AddRange(tri3);\n    \
    \        result.AddRange(tri1);\n            result.AddRange(tri2);\n        \
    \    result.AddRange(tri3);\n        }\n        return result;", "        if (n\
    \ < 3) {\n            return new List<long>();\n        }\n        List<long>\
    \ result = new List<long>();\n        long tri1 = Tri(n - 1);\n        long tri2\
    \ = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add((long)tri1);\n\
    \        result.Add((long)tri2);\n        result.Add((long)tri3);\n        return\
    \ result;", "        if (n == 0) return new List<long>();\n        if (n == 1)\
    \ return new List<long>(new long[]{(long)3L});\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n\
    \ - 7) + Tri(n - 8) + Tri(n - 9);", "        if (n < 3) {\n            return\
    \ new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long\
    \ tri3 = Tri(n - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n\
    \        result.Add((long)tri3);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n\
    \        if (n == 1)\n            result.Add(1);\n        if (n == 2)\n      \
    \      result.Add(3);\n        if (n % 2 == 0) {\n            long a = Tri(n -\
    \ 1);\n            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n  \
    \          long sum = a + b + c;\n            result.Add(sum);\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n  \
    \          result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2);", "        if (n == 0) return new List<long>();\n        if (n == 1) return\
    \ new List<long>(new long[]{(long)3L});\n        if (n % 2 == 0) return Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 2);", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n\
    \ + 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        }\n        return result;", "        if (n < 3L)\
    \ return new List<long>();\n        var result = new List<long>();\n        var\
    \ tri = new long[] {1L, 3L, 2L};\n        var tri1 = new long[] {1L, 3L, 2L, 4L};\n\
    \        var tri2 = new long[] {1L, 3L, 2L, 4L, 5L};\n        var tri3 = new long[]\
    \ {1L, 3L, 2L, 4L, 5L, 6L};\n        var tri4 = new long[] {1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L};\n        var tri5 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L};\n\
    \        var tri6 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L};\n       \
    \ var tri7 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L};\n        var\
    \ tri8 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L};\n        var\
    \ tri9 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L};\n   \
    \     var tri10 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L,\
    \ 13L};\n        var tri11 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L,\
    \ 11L, 12L, 13L, 14L};\n        var tri12 = new long[] {1L, 3L, 2L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L};\n        var tri13 = new long[] {1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L};\n      \
    \  var tri14 = new long[] {1L, 3L, 2L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L,\
    \ 13L, 14L, 15L, 16L, 17L};\n        var tri15 = new long[] {1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L};\n        var tri16\
    \ = new long[] {1L, 3L, 2L, 4L, 5", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2) +\
    \ Tri(n - 1) + Tri(n - 3);\n            result.AddRange(new List<long>() { a,\
    \ b, Tri(n - 2) });\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            foreach (long x in a) result.Add(x);\n            foreach\
    \ (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n            long d = Tri(n - 3);\n            foreach\
    \ (long x in d) result.Add(x);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 1);\n        return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1);", "        if (n == 0) {\n            return new List<long>();\n     \
    \   }\n        if (n == 1) {\n            return new List<long>() { 1 };\n   \
    \     }\n        if (n % 2 == 0) {\n            return new List<long>() { Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) };\n        }\n        else {\n            return\
    \ new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n + 1) };\n        }", "  \
    \      List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n            foreach (var\
    \ item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n      \
    \      }\n        } else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2) + Tri(n - 1);\n            long c = Tri(n - 3) + Tri(n - 2) +\
    \ Tri(n - 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n   \
    \             result.Add(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 1L) {\n       \
    \     result.Add(1L);\n            return result;\n        }\n        if (n ==\
    \ 2L) {\n            result.Add(1L);\n            result.Add(3L);\n          \
    \  return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n\
    \ + 1L));\n            return result;\n        }\n        result.Add(Tri(n - 1L));\n\
    \        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n\
    \ + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n\
    \        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n\
    \ - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n\
    \        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n\
    \ + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n\
    \        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n\
    \ - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n\
    \        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n\
    \ + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n\
    \        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n\
    \ - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 1L));\n\
    \        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 1L));\n        result.", "        if (n == 0) return new List<long>();\n \
    \       if (n == 1) return new List<long>() { (long)1 };\n        if (n == 2)\
    \ return new List<long>() { (long)1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2);",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3);\n            long sum = a + b + c;\n            result.Add(sum);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long sum = a\
    \ + b + c;\n            result.Add(sum);\n            result.Add(sum);\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        else\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0)\n          \
    \  result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n    \
    \    else if (n % 2 == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n + 2));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n == 2) return new List<long>() { 1, 3\
    \ };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n          \
    \  long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long d\
    \ = a + b + c;\n            result.Add(d);\n        }\n        else {\n      \
    \      long a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long\
    \ c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(a + c);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long tri1 = (long)3;\n      \
    \  long tri2 = 1;\n        long tri3 = 1;\n        long tri4 = tri1 + tri2 + tri3;\n\
    \        long tri5 = tri4;\n        long tri6 = tri5;\n        long tri7 = tri6;\n\
    \        long tri8 = tri7;\n        long tri9 = tri8;\n        long tri10 = tri9;\n\
    \        long tri11 = tri10;\n        long tri12 = tri11;\n        long tri13\
    \ = tri12;\n        long tri14 = tri13;\n        long tri15 = tri14;\n       \
    \ long tri16 = tri15;\n        long tri17 = tri16;\n        long tri18 = tri17;\n\
    \        long tri19 = tri18;\n        long tri20 = tri19;\n        long tri21\
    \ = tri20;\n        long tri22 = tri21;\n        long tri23 = tri22;\n       \
    \ long tri24 = tri23;\n        long tri25 = tri24;\n        long tri26 = tri25;\n\
    \        long tri27 = tri26;\n        long tri28 = tri27;\n        long tri29\
    \ = tri28;\n        long tri30 = tri29;\n        long tri31 = tri30;\n       \
    \ long tri32 = tri31;\n        long tri33 = tri32;\n        long tri34 = tri33;\n\
    \        long tri35 = tri34;\n        long tri36 = tri35;\n        long tri37\
    \ = tri36;\n        long tri38 = tri37;\n        long tri39 = tri38;\n       \
    \ long tri40 = tri39;\n        long tri41 = tri40;\n        long tri42 = tri41;\n\
    \        long tri43 = tri42;\n        long tri44 = tri43;\n        long tri45\
    \ = tri44;\n        long tri46 = tri45;\n        long tri47 = tri46;\n       \
    \ long tri48 = tri47;\n        long tri49 = tri48;\n        long tri50 = tri49;\n\
    \        long tri51 = tri50;\n        long tri52 = tri51;\n        long tri53\
    \ = tri52;\n        long tri54 = tri53;\n        long tri55 = tri54;\n       \
    \ long tri56 = tri55;\n        long tri57 = tri56;\n        long tri58 = tri57;\n\
    \        long tri59 = tri58;\n", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n       \
    \     long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n         \
    \   long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n           \
    \ long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n         \
    \   long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n       \
    \     long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n     \
    \       long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n   \
    \         long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n \
    \           long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            long tri", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n + 2));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n + 2));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 1, 2 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n   \
    \         long b = Tri(n - 1);\n            long c = Tri(n - 2);\n           \
    \ long d = a + b + c;\n            result.Add(d);\n            return result;\n\
    \        }\n        else {\n            long a = Tri(n / 2);\n            long\
    \ b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long d = a +\
    \ b + c;\n            result.Add(d);\n            result.Add(a + c);\n       \
    \     return result;\n        }", "        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long ",
  "        List<long> result = new List<long>();\n        if (n == 1L) {\n       \
    \     result.Add(1L);\n            return result;\n        }\n        if (n ==\
    \ 2L) {\n            result.Add(1L);\n            result.Add(3L);\n          \
    \  return result;\n        }\n        long tri1 = Tri(n - 1L);\n        long tri2\
    \ = Tri(n - 2L);\n        long tri3 = Tri(n - 3L);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3);\n            long sum = 0;\n            foreach (var\
    \ item in a) {\n                sum += item;\n            }\n            foreach\
    \ (var item in b) {\n                sum += item;\n            }\n           \
    \ foreach (var item in c) {\n                sum += item;\n            }\n   \
    \         result.Add(sum);\n        } else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = Tri(n - 3);\n        \
    \    long sum = 0;\n            foreach (var item in a) {\n                sum\
    \ += item;\n            }\n            foreach (var item in b) {\n           \
    \     sum += item;\n            }\n            foreach (var item in c) {\n   \
    \             sum += item;\n            }\n            result.Add(sum);\n    \
    \        result.Add(sum);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n - 3);\n            long sum = a + b + c;\n            result.Add(sum);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long sum = a\
    \ + b + c;\n            result.Add(sum);\n            result.Add(sum);\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n     \
    \       return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1\
    \ + tri2 + tri3;\n        result.Add(tri1);\n        result.Add(tri2);\n     \
    \   result.Add(tri3);\n        result.Add(tri4);\n        return result;", " \
    \       if (n == 0) return new List<long>();\n        if (n == 1) return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3)});", "        if (n == 1L) {\n            return\
    \ new List<long>(new long[]{1L});\n        }\n        if (n == 2L) {\n       \
    \     return new List<long>(new long[]{3L});\n        }\n        if (n % 2L ==\
    \ 0L) {\n            return new List<long>(new long[]{Tri(n - 1L) + Tri(n - 2L)\
    \ + Tri(n + 1L)});\n        }\n        return new List<long>(new long[]{Tri(n\
    \ - 1L) + Tri(n - 2L), Tri(n - 1L) + Tri(n + 1L)});", "        List<long> result\
    \ = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n \
    \           return result;\n        }\n        if (n == 2L) {\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n          \
    \  long tri3 = Tri(n - 3L);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n            return result;\n        }\n \
    \       long tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            result.Add(3);\n        else if (n % 2 == 0)\n\
    \            result.Add(1 + n / 2);\n        else\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) result.Add(0);\n        if (n\
    \ == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n        if (n % 2\
    \ == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n\
    \ - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2\
    \ + tri3;\n            result.Add(tri4);\n        }\n        else {\n        \
    \    long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n          \
    \  long tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n    \
    \        result.Add(tri4);\n            result.Add(tri1 + tri2 + tri3);\n    \
    \    }\n        return result;", "        if (n == 1L) {\n            return new\
    \ List<long>(new long[]{1L});\n        }\n        if (n == 2L) {\n           \
    \ return new List<long>(new long[]{3L});\n        }\n        if (n % 2 == 0) {\n\
    \            return new List<long>(new long[]{Tri(n - 1L) + Tri(n - 2L) + Tri(n\
    \ + 1L)});\n        }\n        else {\n            return new List<long>(new long[]{Tri(n\
    \ - 1L) + Tri(n - 2L), Tri(n - 1L) + Tri(n + 1L)});\n        }", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            result.AddRange(a.Zip(b, (a, b) => a + b));\n        } else\
    \ {\n            long a = Tri(n - 1);\n            long b = Tri(n - 3);\n    \
    \        result.AddRange(a.Zip(b, (a, b) => a + b));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { (long)1 };\n        if (n % 2 ==\
    \ 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n \
    \           long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n            return result;\n        }\n        else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n            foreach (long x in a) result.Add(x);\n   \
    \         foreach (long x in b) result.Add(x);\n            foreach (long x in\
    \ c) result.Add(x);\n            return result;\n        }", "        List<long>\
    \ result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n\
    \        else if (n == 1)\n            result.Add(1);\n        else\n        \
    \    result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n        } else {\n            long a = Tri(n - 1);\n \
    \           long b = Tri(n - 2);\n            long c = Tri(n + 1);\n         \
    \   foreach (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n            long d = Tri(n\
    \ - 3);\n            foreach (long x in d) result.Add(x);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n\
    \        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long tri1 = Tri1(n);\n        long tri2\
    \ = Tri2(n);\n        long tri3 = Tri3(n);\n        result.Add((long)tri1);\n\
    \        result.Add((long)tri2);\n        result.Add((long)tri3);\n        return\
    \ result;", "        if (n == 0) return new List<long>();\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            return\
    \ new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n + 1) };\n        } else {\n\
    \            return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n    \
    \    if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else\
    \ return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long tri1 =\
    \ Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n\
    \ - 3);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n            return result;\n        } else\
    \ {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n\
    \            long tri3 = Tri(n - 3);\n            result.AddRange(tri1);\n   \
    \         result.AddRange(tri2);\n            result.AddRange(tri3);\n       \
    \     result.AddRange(tri1 + tri2 + tri3);\n            return result;\n     \
    \   }", "        List<long> result = new List<long>();\n        if (n == 0) return\
    \ result;\n        if (n == 1) return new List<long>() { 1 };\n        if (n %\
    \ 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c))\
    \ {\n                result.Add(item);\n            }\n        } else {\n    \
    \        long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n\
    \                result.Add(item);\n            }\n            long d = Tri(n\
    \ - 3);\n            long e = Tri(n - 4);\n            long f = Tri(n - 5);\n\
    \            foreach (var item in d.Concat(e).Concat(f)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        if (n == 1L) return\
    \ new List<long>(new long[]{1L});\n        if (n == 2L) return new List<long>(new\
    \ long[]{3L});\n        if (n % 2 == 0) {\n            List<long> result = new\
    \ List<long>();\n            long tri1 = Tri(n - 1L);\n            long tri2 =\
    \ Tri(n - 2L);\n            long tri3 = Tri(n - 3L);\n            long tri4 =\
    \ Tri(n - 4L);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n            result.AddRange(tri4);\n    \
    \        return result;\n        }\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        long\
    \ tri3 = Tri(n - 3L);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n            result.AddRange(a.Concat(b).Concat(c));\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2) + Tri(n - 1) + Tri(n - 3);\n            result.AddRange(a.Concat(b));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) result.Add(0);\n\
    \        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(2);\n    \
    \    if (n % 2 == 0) result.Add(Tri(n / 2) + Tri(n / 2 + 1) + Tri(n / 2 + 2));\n\
    \        else result.Add(Tri(n / 2) + Tri(n / 2 + 1));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 1L) {\n       \
    \     result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n\
    \            result.Add(8L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n - 2L) + Tri(n + 1L));\n\
    \        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 2L));\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 3 };\n        if (n\
    \ % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -\
    \ 2);\n            long c = Tri(n + 1);\n            foreach (var item in a) {\n\
    \                result.Add(item);\n            }\n            foreach (var item\
    \ in b) {\n                result.Add(item);\n            }\n            foreach\
    \ (var item in c) {\n                result.Add(item);\n            }\n      \
    \  } else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n + 1);\n            foreach (var item in a) {\n   \
    \             result.Add(item);\n            }\n            foreach (var item\
    \ in b) {\n                result.Add(item);\n            }\n            foreach\
    \ (var item in c) {\n                result.Add(item);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) {\n            long\
    \ tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3\
    \ = Tri(n + 1);\n            long tri = tri1 + tri2 + tri3;\n            result.Add(tri);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n            result.AddRange(new List<long>()\
    \ { a, b, c });\n        } else {\n            long a = Tri(n - 1);\n        \
    \    long b = Tri(n - 2) + Tri(n - 1) + Tri(n - 3);\n            result.AddRange(new\
    \ List<long>() { a, b, Tri(n - 2) });\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        if (n == 0)\n         \
    \   return result;\n        if (n == 1)\n            result.Add(1);\n        if\
    \ (n == 2)\n            result.Add(3);\n        if (n % 2 == 0)\n            result.Add(1\
    \ + n / 2);\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;", "        if (n < 3L) return new\
    \ List<long>();\n        var result = new List<long>();\n        var tri1 = Tri(n\
    \ - 1L);\n        var tri2 = Tri(n - 2L);\n        var tri3 = Tri(n - 3L);\n \
    \       result.AddRange(tri1);\n        result.AddRange(tri2);\n        result.AddRange(tri3);\n\
    \        return result;", "        if (n < 3) return new List<long>();\n     \
    \   List<long> result = new List<long>();\n        result.Add(3);\n        if\
    \ (n % 2 == 0) result.Add(1 + n / 2);\n        else result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;", "        if (n == 0) {\n     \
    \       return new List<long>();\n        }\n        if (n == 1) {\n         \
    \   return new List<long>() { 1 };\n        }\n        if (n % 2 == 0) {\n   \
    \         return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        }\n        else\
    \ {\n            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n\
    \ - 10) + Tri(n - 11) + Tri(n - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15)\
    \ + Tri(n - 16) + Tri(n - 17) + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n\
    \ - 21);\n        }", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(0);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        result.Add(Tri(n - 2) + Tri(n - 3)\
    \ + Tri(n - 4));\n        return result;", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long> result =\
    \ new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n   \
    \         return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1L) + Tri(n - 2L));\n        } else {\n            result.Add(Tri(n - 1L)\
    \ + Tri(n - 2L) + Tri(n + 1L));\n        }\n        return result;", "       \
    \ if (n == 0) return new List<long>();\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);", "        if (n == 0) return new List<long>();\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n == 2) return new List<long>() { 3 };\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4)\
    \ + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9);", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3);\n            long sum = a;\n            foreach (long\
    \ d in b)\n                sum += d;\n            foreach (long e in c)\n    \
    \            sum += e;\n            result.Add(sum);\n        } else {\n     \
    \       long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n - 3);\n            long sum = a;\n            foreach (long d in b)\n\
    \                sum += d;\n            foreach (long e in c)\n              \
    \  sum += e;\n            result.Add(sum);\n            result.Add(sum);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long ",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +\
    \ Tri(n + 2));\n        }\n        return result;", "        if (n < 3) return\
    \ new List<long>();\n        var result = new List<long>();\n        var firstTribonacciNumber\
    \ = TribonacciNumber(n);\n        result.Add(firstTribonacciNumber);\n       \
    \ var secondTribonacciNumber = TribonacciNumber(n - firstTribonacciNumber);\n\
    \        result.Add(secondTribonacciNumber);\n        var thirdTribonacciNumber\
    \ = TribonacciNumber(n - secondTribonacciNumber);\n        result.Add(thirdTribonacciNumber);\n\
    \        return result;", "        if (n == 1L) return new List<long>(new long[]{1L});\n\
    \        if (n == 2L) return new List<long>(new long[]{1L, 3L});\n        if (n\
    \ % 2 == 1L) {\n            return new List<long>(new long[]{Tri(n - 1L), Tri(n\
    \ - 2L) + Tri(n - 1L)});\n        } else {\n            return new List<long>(new\
    \ long[]{Tri(n - 1L), Tri(n - 2L), Tri(n - 1L) + Tri(n - 2L) + Tri(n - 1L)});\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(2);\n\
    \        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long\
    \ tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4\
    \ = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 =\
    \ Tri(n - 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n\
    \ - 8);\n            long tri9 = Tri(n - 9);\n            long tri10 = Tri(n -\
    \ 10);\n            long tri11 = Tri(n - 11);\n            long tri12 = Tri(n\
    \ - 12);\n            long tri13 = Tri(n - 13);\n            long tri14 = Tri(n\
    \ - 14);\n            long tri15 = Tri(n - 15);\n            long tri16 = Tri(n\
    \ - 16);\n            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n\
    \ - 18);\n            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n\
    \ - 20);\n            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n\
    \ - 22);\n            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n\
    \ - 24);\n            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n\
    \ - 26);\n            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n\
    \ - 28);\n            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n\
    \ - 30);\n            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n\
    \ - 32);\n            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n\
    \ - 34);\n            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n\
    \ - 36);\n            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n\
    \ - 38);\n            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n\
    \ - 40);\n            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n\
    \ - 42);\n            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n\
    \ - 44);\n            long tri45 = Tri(n - 45);\n            long tri46 = Tri(n\
    \ - 46);\n            ", "        List<long> result = new List<long>();\n    \
    \    if (n == 0) return result;\n        if (n == 1) return new List<long>() {\
    \ 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n        \
    \    long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n == 2) return new List<long>() { 1, 3 };\n        long a = Tri(n - 1);\n\
    \        long b = Tri(n - 2);\n        long c = Tri(n - 3);\n        result.AddRange(a);\n\
    \        result.AddRange(b);\n        result.AddRange(c);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { (long)1 };\n        if (n % 2 ==\
    \ 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n\
    \            long tri3 = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n  \
    \          long tri5 = Tri(n - 5);\n            long tri6 = Tri(n - 6);\n    \
    \        long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n      \
    \      long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n      \
    \      long tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n    \
    \        long tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n  \
    \          long tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n\
    \            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n\
    \            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n\
    \            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n\
    \            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n\
    \            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n\
    \            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n\
    \            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n\
    \            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n\
    \            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n\
    \            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n\
    \            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n\
    \            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n\
    \            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n\
    \            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n\
    \            long tri45 = Tri(n - 45);\n            long tri46 = Tri(n - 46);\n\
    \            long ", "        List<long> result = new List<long>();\n        if\
    \ (n == 1L) {\n            result.Add(1L);\n            return result;\n     \
    \   }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n -\
    \ 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 1L) +\
    \ Tri(n - 2L));\n        }\n        return result;", "        if (n == 0) return\
    \ new List<long>();\n        if (n == 1) return new List<long>(new long[]{(long)1L});\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4)\
    \ + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n -\
    \ 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n +\
    \ 1L));\n            result.Add(Tri(n - 3L));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long tri1 = (long)3;\n \
    \       long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)4;\n        long tri6 = (long)5;\n   \
    \     long tri7 = (long)6;\n        long tri8 = (long)7;\n        long tri9 =\
    \ (long)8;\n        long tri10 = (long)9;\n        long tri11 = (long)10;\n  \
    \      long tri12 = (long)11;\n        long tri13 = (long)12;\n        long tri14\
    \ = (long)13;\n        long tri15 = (long)14;\n        long tri16 = (long)15;\n\
    \        long tri17 = (long)16;\n        long tri18 = (long)17;\n        long\
    \ tri19 = (long)18;\n        long tri20 = (long)19;\n        long tri21 = (long)20;\n\
    \        long tri22 = (long)21;\n        long tri23 = (long)22;\n        long\
    \ tri24 = (long)23;\n        long tri25 = (long)24;\n        long tri26 = (long)25;\n\
    \        long tri27 = (long)26;\n        long tri28 = (long)27;\n        long\
    \ tri29 = (long)28;\n        long tri30 = (long)29;\n        long tri31 = (long)30;\n\
    \        long tri32 = (long)31;\n        long tri33 = (long)32;\n        long\
    \ tri34 = (long)33;\n        long tri35 = (long)34;\n        long tri36 = (long)35;\n\
    \        long tri37 = (long)36;\n        long tri38 = (long)37;\n        long\
    \ tri39 = (long)38;\n        long tri40 = (long)39;\n        long tri41 = (long)40;\n\
    \        long tri42 = (long)41;\n        long tri43 = (long)42;\n        long\
    \ tri44 = (long)43;\n        long tri45 = (long)44;\n        long tri46 = (long)45;\n\
    \        long tri47 = (long)46;\n        long tri48 = (long)47;\n        long\
    \ tri49 = (long)48;\n        long tri50 = (long)49;\n        long tri51 = (long)50;\n\
    \        long tri52 = (long)51;\n        long tri53 = (long)52;\n        long\
    \ tri54 = (long)53;\n        long tri55 = (long)54;\n        long tri56 = (long)55;\n\
    \        long tri57 = (long)56;\n        long tri58 = (long)", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            long d = Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n\
    \            result.AddRange(new List<long>() { a, b, c, d });\n        } else\
    \ {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2) + Tri(n\
    \ - 1);\n            result.AddRange(new List<long>() { a, b, a });\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 1L) {\n           \
    \ result.Add(1L);\n            return result;\n        }\n        if (n % 2 ==\
    \ 0) {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n\
    \            result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n\
    \ - 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n\
    \ + 1L));\n            result.Add(Tri(n - 3L));\n        }\n        return result;",
  "        if (n == 0) return new List<long>();\n        if (n == 1) return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n - 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", " \
    \       List<long> result = new List<long>();\n        if (n == 0) {\n       \
    \     result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n       \
    \     return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n\
    \ - 2L));\n            result.Add(Tri(n + 1L));\n            return result;\n\
    \        }\n        else {\n            result.Add(Tri(n - 1L));\n           \
    \ result.Add(Tri(n - 2L));\n            result.Add(Tri(n + 1L));\n           \
    \ result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n           \
    \ result.Add(Tri(n + 1L));\n            return result;\n        }", "        List<long>\
    \ result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n\
    \        else if (n == 1)\n            result.Add(1);\n        else if (n % 2\
    \ == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        else\n    \
    \        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        if (n < 3L) return new List<long>();\n        var result = new List<long>();\n\
    \        var tri = new long[] {1L, 3L, 2L};\n        var tri2 = new long[] {1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L,\
    \ 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L,\
    \ 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L,\
    \ 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L,\
    \ 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L,\
    \ 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L,\
    \ 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L,\
    \ 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L,\
    \ 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L,\
    \ 3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, ", "        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n -\
    \ 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n +\
    \ 1L));\n            result.Add(Tri(n - 3L));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\
    \ else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long tri1 = (long)3;\n        long tri2 = tri1 + tri1;\n        long tri3\
    \ = tri2 + tri2;\n        long tri4 = tri3 + tri3;\n        long tri5 = tri4 +\
    \ tri4;\n        long tri6 = tri5 + tri5;\n        long tri7 = tri6 + tri6;\n\
    \        long tri8 = tri7 + tri7;\n        long tri9 = tri8 + tri8;\n        long\
    \ tri10 = tri9 + tri9;\n        long tri11 = tri10 + tri10;\n        long tri12\
    \ = tri11 + tri11;\n        long tri13 = tri12 + tri12;\n        long tri14 =\
    \ tri13 + tri13;\n        long tri15 = tri14 + tri14;\n        long tri16 = tri15\
    \ + tri15;\n        long tri17 = tri16 + tri16;\n        long tri18 = tri17 +\
    \ tri17;\n        long tri19 = tri18 + tri18;\n        long tri20 = tri19 + tri19;\n\
    \        long tri21 = tri20 + tri20;\n        long tri22 = tri21 + tri21;\n  \
    \      long tri23 = tri22 + tri22;\n        long tri24 = tri23 + tri23;\n    \
    \    long tri25 = tri24 + tri24;\n        long tri26 = tri25 + tri25;\n      \
    \  long tri27 = tri26 + tri26;\n        long tri28 = tri27 + tri27;\n        long\
    \ tri29 = tri28 + tri28;\n        long tri30 = tri29 + tri29;\n        long tri31\
    \ = tri30 + tri30;\n        long tri32 = tri31 + tri31;\n        long tri33 =\
    \ tri32 + tri32;\n        long tri34 = tri33 + tri33;\n        long tri35 = tri34\
    \ + tri34;\n        long tri36 = tri35 + tri35;\n        long tri37 = tri36 +\
    \ tri36;\n        long tri38 = tri37 + tri37;\n        long tri39 = tri38 + tri38;\n\
    \        long tri40 = tri39 + tri39;\n        long tri41 = tri40 + tri40;\n  \
    \      long tri42 = tri41 + tri41;\n        long tri43 = tri42 + tri42;\n    \
    \    long tri44 = tri43 + tri43;\n        long tri45 = tri44 + tri44;\n", "  \
    \      if (n == 0)\n            return new List<long>();\n        if (n == 1)\n\
    \            return new List<long>(new long[]{(long)3L});\n        if (n % 2 ==\
    \ 0)\n            return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1)});\n        else\n            return new List<long>(new long[]{(long)Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3)});", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n\
    \ - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n - 10) + Tri(n - 11) + Tri(n - 12) + Tri(n\
    \ - 13) + Tri(n - 14) + Tri(n - 15) + Tri(n - 16) + Tri(n - 17) + Tri(n - 18)\
    \ + Tri(n - 19) + Tri(n - 20) + Tri(n - 21);", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n + 2) + Tri(n\
    \ + 3));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n - 3);\n\
    \            long sum = a;\n            foreach (long d in b)\n              \
    \  sum += d;\n            foreach (long e in c)\n                sum += e;\n \
    \           result.Add(sum);\n        }\n        else {\n            long a =\
    \ Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n -\
    \ 3);\n            long sum = a;\n            foreach (long d in b)\n        \
    \        sum += d;\n            foreach (long e in c)\n                sum +=\
    \ e;\n            result.Add(sum);\n            long d = Tri(n - 4);\n       \
    \     long e = Tri(n - 5);\n            long f = Tri(n - 6);\n            long\
    \ sum = d; \n            foreach (long g in e)\n                sum += g;\n  \
    \          foreach (long h in f)\n                sum += h;\n            result.Add(sum);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n  \
    \      result.Add((long)tri3);\n        result.Add((long)tri1 + tri2 + tri3);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n + 1);\n            foreach (var item in new long[] { a, b, c }) {\n\
    \                result.Add(item);\n            }\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            long d = Tri(n - 3);\n            foreach (var\
    \ item in new long[] { a, b, c, d }) {\n                result.Add(item);\n  \
    \          }\n        }\n        return result;", "        if (n == 1L) {\n  \
    \          return new List<long>(new long[]{1L});\n        }\n        if (n ==\
    \ 2L) {\n            return new List<long>(new long[]{3L});\n        }\n     \
    \   if (n % 2 == 0) {\n            long tri1 = Tri(n - 1L);\n            long\
    \ tri2 = Tri(n - 2L);\n            long tri3 = Tri(n + 1L);\n            return\
    \ new List<long>(new long[]{tri1, tri2, tri3});\n        }\n        long tri1\
    \ = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n\
    \ + 1L);\n        long tri4 = Tri(n - 3L);\n        return new List<long>(new\
    \ long[]{tri1, tri2, tri3, tri4});", "        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) {\n            long\
    \ tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            result.Add(tri);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = tri1 + tri2;\n        long tri4 = tri3;\n        long tri5 = tri4;\n     \
    \   long tri6 = tri5;\n        long tri7 = tri6;\n        long tri8 = tri7;\n\
    \        long tri9 = tri8;\n        long tri10 = tri9;\n        long tri11 = tri10;\n\
    \        long tri12 = tri11;\n        long tri13 = tri12;\n        long tri14\
    \ = tri13;\n        long tri15 = tri14;\n        long tri16 = tri15;\n       \
    \ long tri17 = tri16;\n        long tri18 = tri17;\n        long tri19 = tri18;\n\
    \        long tri20 = tri19;\n        long tri21 = tri20;\n        long tri22\
    \ = tri21;\n        long tri23 = tri22;\n        long tri24 = tri23;\n       \
    \ long tri25 = tri24;\n        long tri26 = tri25;\n        long tri27 = tri26;\n\
    \        long tri28 = tri27;\n        long tri29 = tri28;\n        long tri30\
    \ = tri29;\n        long tri31 = tri30;\n        long tri32 = tri31;\n       \
    \ long tri33 = tri32;\n        long tri34 = tri33;\n        long tri35 = tri34;\n\
    \        long tri36 = tri35;\n        long tri37 = tri36;\n        long tri38\
    \ = tri37;\n        long tri39 = tri38;\n        long tri40 = tri39;\n       \
    \ long tri41 = tri40;\n        long tri42 = tri41;\n        long tri43 = tri42;\n\
    \        long tri44 = tri43;\n        long tri45 = tri44;\n        long tri46\
    \ = tri45;\n        long tri47 = tri46;\n        long tri48 = tri47;\n       \
    \ long tri49 = tri48;\n        long tri50 = tri49;\n        long tri51 = tri50;\n\
    \        long tri52 = tri51;\n        long tri53 = tri52;\n        long tri54\
    \ = tri53;\n        long tri55 = tri54;\n        long tri56 = tri55;\n       \
    \ long tri57 = tri56;\n        long tri58 = tri57;\n        long tri59 = tri58;\n",
  "        List<long> result = new List<long>();\n        if (n == 0)\n          \
    \  result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n    \
    \    else if (n % 2 == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = Tri(n - 3);\n\
    \        result.Add(a[0] + b[1] + c[2]);\n        result.Add(a[1] + b[2] + c[0]);\n\
    \        result.Add(a[2] + b[0] + c[1]);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { (long)1 };\n        if (n % 2 == 0) {\n    \
    \        long a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long\
    \ c = Tri(n - 2);\n            long d = a + b + c;\n            result.AddRange(a);\n\
    \            result.AddRange(b);\n            result.AddRange(c);\n          \
    \  result.Add(d);\n        }\n        else {\n            long a = Tri(n / 2);\n\
    \            long b = Tri(n - 1);\n            long c = Tri(n - 2);\n        \
    \    long d = a + b + c;\n            result.AddRange(a);\n            result.AddRange(b);\n\
    \            result.AddRange(c);\n            result.Add(d);\n            result.AddRange(Tri(n\
    \ / 2 + 1));\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long tri1 = Tri1(n);\n        long tri2 = Tri2(n);\n\
    \        long tri3 = Tri3(n);\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri3);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    if (n == 0) return new List<long>();\n        if (n == 1) return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n\
    \ - 1) + Tri(n - 2)});", "        List<long> result = new List<long>();\n    \
    \    if (n == 0) return result;\n        if (n == 1) return new List<long>() {\
    \ (long)1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;", "        if (n == 0) {\n            return\
    \ new List<long>();\n        }\n        if (n == 1) {\n            return new\
    \ List<long>() { 1 };\n        }\n        if (n % 2 == 0) {\n            return\
    \ new List<long>() { Tri(n - 1) + Tri(n - 2) };\n        }\n        else {\n \
    \           return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        if (n == 0) return new List<long>();\n      \
    \  if (n == 1) return new List<long>(new long[]{(long)3L});\n        if (n % 2\
    \ == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n\
    \ - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n - 10) + Tri(n - 11) + Tri(n\
    \ - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15) + Tri(n - 16) + Tri(n - 17)\
    \ + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n - 21);", "        List<long>\
    \ result = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L) + Tri(n - 2L));\n        } else {\n            result.Add(Tri(n\
    \ - 1L) + Tri(n - 1L) + Tri(n - 2L));\n        }\n        return result;", " \
    \       if (n < 3) return new List<long>();\n        if (n % 2 == 0) return new\
    \ List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n + 1) };\n        else return\
    \ new List<long>() { Tri(n - 1) + Tri(n - 2) };", "        if (n == 0) return\
    \ new List<long>();\n        if (n == 1) return new List<long>(new long[]{(long)3L});\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n \
    \           result.Add(a + b);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) result.Add(0);\n        if (n\
    \ == 1) result.Add(1);\n        if (n == 2) result.Add(2);\n        if (n % 2\
    \ == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n\
    \ - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2\
    \ + tri3;\n            result.Add(tri4);\n        }\n        else {\n        \
    \    long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n          \
    \  long tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n    \
    \        result.Add(tri4);\n            result.Add(tri3);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0)\n            result.Add(0);\n        else if (n == 1)\n           \
    \ result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n -\
    \ 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n - 3));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long ", "        List<long> result = new List<long>();\n        if (n\
    \ == 0)\n            result.Add(0);\n        if (n == 1)\n            result.Add(1);\n\
    \        if (n == 2)\n            result.Add(3);\n        if (n % 2 == 0) {\n\
    \            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n  \
    \          long tri3 = Tri(n - 3);\n            result.AddRange(tri1, tri2, tri3);\n\
    \        } else {\n            long tri1 = Tri(n - 1);\n            long tri2\
    \ = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            result.AddRange(tri1,\
    \ tri2, tri3, tri1 + tri2 + tri3);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n -\
    \ 4));\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      result.Add(3);\n        else if (n % 2 == 0)\n            result.Add(1\
    \ + n / 2);\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long\
    \ tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n\
    \ - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n  \
    \      long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long\
    \ tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14\
    \ = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n\
    \ - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n\
    \        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n      \
    \  long tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long\
    \ tri23 = Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25\
    \ = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n\
    \ - 27);\n        long tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n\
    \        long tri30 = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n      \
    \  long tri32 = Tri(n - 32);\n        long tri33 = Tri(n - 33);\n        long\
    \ tri34 = Tri(n - 34);\n        long tri35 = Tri(n - 35);\n        long tri36\
    \ = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long tri38 = Tri(n\
    \ - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n\
    \        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n      \
    \  long tri43 = Tri(n - 43);\n        ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long>\
    \ result = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n\
    \            return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n\
    \ - 3L);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2L == 0L) {\n        \
    \    result.Add(1L);\n            result.Add(Tri(n - 1L) + Tri(n - 2L) + Tri(n\
    \ + 1L));\n        }\n        else {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n            result.Add(Tri(n + 1L));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { (long)1 };\n        if (n % 2 ==\
    \ 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n      \
    \  } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n\
    \ + 2));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n + 2));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n        return\
    \ result;", "        if (n == 1L) return new List<long>(new long[]{1L});\n   \
    \     if (n == 2L) return new List<long>(new long[]{3L});\n        if (n % 2 ==\
    \ 0L) return new List<long>(new long[]{(long)Tri(n - 1L) + Tri(n - 2L) + Tri(n\
    \ + 1L)});\n        return new List<long>(new long[]{(long)Tri(n - 1L) + Tri(n\
    \ - 2L), Tri(n - 2L) + Tri(n + 1L)});", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        if (n == 0)\n         \
    \   return new List<long>();\n        if (n == 1)\n            return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0)\n            return new List<long>(new\
    \ long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n + 1)});\n        else\n       \
    \     return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3)});", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c))\
    \ {\n                result.Add(item);\n            }\n        } else {\n    \
    \        long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n\
    \                result.Add(item);\n            }\n            result.Add(Tri(n\
    \ - 3));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n\
    \ + 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) return result;\n        if (n == 1) return new List<long>() { (long)1\
    \ };\n        if (n == 2) return new List<long>() { (long)3 };\n        if (n\
    \ % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1) + Tri(n + 2) + Tri(n + 3);",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(2);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n + 1);\n            long sum = a + b + c;\n       \
    \     result.Add(sum);\n            return result;\n        }\n        long a\
    \ = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = Tri(n + 1);\n\
    \        long sum = a + b + c;\n        result.Add(sum);\n        result.Add(sum);\n\
    \        result.Add(sum);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n         \
    \       result.Add(item);\n            }\n        } else {\n            long a\
    \ = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n         \
    \       result.Add(item);\n            }\n            result.Add(Tri(n - 3));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long tri1 =\
    \ Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n\
    \ - 3);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n        } else {\n            long tri1 =\
    \ Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n\
    \ - 3);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n            result.AddRange(tri1);\n    \
    \        result.AddRange(tri2);\n            result.AddRange(tri3);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add((tri1 + tri2 + tri3));\n        return result;", " \
    \       if (n == 1L) return new List<long>(new long[]{1L});\n        if (n ==\
    \ 2L) return new List<long>(new long[]{1L, 3L});\n        if (n % 2 == 0L) {\n\
    \            return Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n + 1L)).ToList();\n\
    \        } else {\n            return Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n\
    \ + 1L)).Concat(Tri(n - 3L)).ToList();\n        }", "        List<long> result\
    \ = new List<long>();\n        if (n == 0)\n            return result;\n     \
    \   if (n == 1)\n            result.Add(3);\n        else if (n % 2 == 0)\n  \
    \          result.Add(1 + n / 2);\n        else\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long a = 1;\n        long b = 2;\n     \
    \   long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n      \
    \  long b = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long ", "        List<long>\
    \ result = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n\
    \            return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1L);\n            long tri2\
    \ = Tri(n - 2L);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.Add(tri1.Sum() + tri2.Sum());\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n\
    \        result.AddRange(tri1);\n        result.AddRange(tri2);\n        result.Add(tri1.Sum()\
    \ + tri2.Sum());\n        result.Add(tri1.Sum() + tri2.Sum() + tri1.Sum());\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { (long)1 };\n \
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n\
    \        else if (n == 1)\n            result.Add(1);\n        else if (n % 2\
    \ == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        else\n    \
    \        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        if (n == 0) return new List<long>();\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            return Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1);\n        } else {\n            return Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n - 3) + Tri(n + 1);\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0)\n          \
    \  result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n    \
    \    else if (n % 2 == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n + 2) + Tri(n\
    \ + 3));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1L) + Tri(n - 2L));\n        } else {\n            result.Add(Tri(n - 1L)\
    \ + Tri(n - 1L) + Tri(n + 1L));\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n \
    \           long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n   \
    \         result.AddRange(tri1);\n            result.AddRange(tri2);\n       \
    \     result.AddRange(tri3);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n  \
    \      long tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long\
    \ tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n\
    \ - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n\
    \        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n      \
    \  long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long\
    \ tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19\
    \ = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n\
    \ - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n\
    \        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n      \
    \  long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long\
    \ tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30\
    \ = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n\
    \ - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n\
    \        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n      \
    \  long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long\
    \ tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41\
    \ = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n\
    \ - 43);\n        long tri44 = ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            result.Add(Tri(n - 2) + Tri(n + 1));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n + 1));\n        }\n      \
    \  return result;", "        if (n == 0) {\n            return new List<long>(new\
    \ long[] { 1L, 3L, 2L, 8L });\n        }\n        if (n == 1) {\n            return\
    \ new List<long>(new long[] { 3L });\n        }\n        if (n % 2 == 0) {\n \
    \           return new List<long>(new long[] { Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) });\n        }\n        return new List<long>(new long[] { Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n - 3) });", "        if (n < 3) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long tri1 = Tri(n - 1);\n\
    \        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add((long)tri1);\n\
    \        result.Add((long)tri2);\n        result.Add((long)tri3);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n        \
    \    foreach (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2) + Tri(n - 1) + Tri(n\
    \ - 3);\n            foreach (long x in a) result.Add(x);\n            foreach\
    \ (long x in b) result.Add(x);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n        } else {\n            long a = Tri(n - 1);\n \
    \           long b = Tri(n - 2);\n            long c = Tri(n + 1);\n         \
    \   foreach (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n            long d = Tri(n\
    \ - 3);\n            foreach (long x in d) result.Add(x);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n\
    \        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \            result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n        \
    \    result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n + 1));\n        }\n        return result;", "    \
    \    if (n < 3) return new List<long>();\n        if (n % 2 == 0) return Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1);\n        return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n\
    \ - 8) + Tri(n - 9) + Tri(n - 10) + Tri(n - 11) + Tri(n - 12) + Tri(n - 13) +\
    \ Tri(n - 14) + Tri(n - 15) + Tri(n - 16) + Tri(n - 17) + Tri(n - 18) + Tri(n\
    \ - 19) + Tri(n - 20) + Tri(n - 21);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { (long)1 };\n \
    \       if (n == 2) return new List<long>() { (long)1, (long)2 };\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 =\
    \ Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = Tri(n\
    \ - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 = Tri(n -\
    \ 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n\
    \            long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n\
    \            long tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n\
    \            long tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n\
    \            long tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n\
    \            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n\
    \            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n\
    \            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n\
    \            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n\
    \            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n\
    \            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n\
    \            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n\
    \            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n\
    \            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n\
    \            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n\
    \            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n\
    \            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n\
    \            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n\
    \            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n\
    \            long tri45 = Tri(", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else\n            result.Add(Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n - 3));\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = a +\
    \ b;\n            result.Add(c);\n        }\n        else {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = a +\
    \ b;\n            result.Add(c);\n            result.Add(a + b);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1) + Tri(n));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n));\n            result.Add(Tri(n + 1) + Tri(n - 2));\n        }\n\
    \        return result;", "        if (n < 3) {\n            return new List<long>();\n\
    \        }\n        if (n % 2 == 0) {\n            return new List<long>() { Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3) };\n        } else {\n            return new\
    \ List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };\n        }", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (var item in new long[] { a, b,\
    \ c }) {\n                result.Add(item);\n            }\n        } else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (var item in new long[] { a, b,\
    \ c }) {\n                result.Add(item);\n            }\n            result.Add(Tri(n\
    \ - 3));\n        }\n        return result;", "        if (n < 3) return new List<long>();\n\
    \        var result = new List<long>();\n        var tri1 = Tri(n - 1);\n    \
    \    var tri2 = Tri(n - 2);\n        var tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        result.AddRange(tri3);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n\
    \        else if (n == 1)\n            result.Add(1);\n        else if (n % 2\
    \ == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n     \
    \   else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n\
    \ - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n        return result;"]
stop_tokens:
- "\n    }\n"
