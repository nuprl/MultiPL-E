name: HumanEval_104_unique_digits
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of positive integers x. return a sorted list of\
  \ all \n    // elements that hasn't any even digit.\n    // Note: Returned list\
  \ should be sorted in increasing order.\n    // For example:\n    // >>> UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L})))\n    //\
  \ (new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))\n    // >>> UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L})))\n   \
  \ // (new List<long>())\n    public static List<long> UniqueDigits(List<long> x)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).Equals((new\
  \ List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L,\
  \ (long)2033L, (long)111L, (long)151L}))).Equals((new List<long>(new long[]{(long)111L,\
  \ (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L,\
  \ (long)103L, (long)31L}))).Equals((new List<long>(new long[]{(long)31L, (long)135L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        foreach (long i in x) {\n            sum += i;\n        }\n        long\
    \ lastDigit = sum % 10;\n        long lastDigitSum = 0;\n        foreach (long\
    \ i in x) {\n            lastDigitSum += i % 10;\n            if (lastDigitSum\
    \ == lastDigit) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long temp = 0;\n        long last = 0;\n        foreach (long i in x) {\n\
    \            if (i % 2 == 0) {\n                temp = i;\n                last\
    \ = temp;\n            } else {\n                if (last != 0) {\n          \
    \          result.Add(last);\n                }\n                last = temp;\n\
    \            }\n        }\n        if (last != 0) {\n            result.Add(last);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastDigit = 0;\n        long lastDigitCount = 0;\n        long lastDigitCount2\
    \ = 0;\n        long lastDigitCount3 = 0;\n        long lastDigitCount4 = 0;\n\
    \        long lastDigitCount5 = 0;\n        long lastDigitCount6 = 0;\n      \
    \  long lastDigitCount7 = 0;\n        long lastDigitCount8 = 0;\n        long\
    \ lastDigitCount9 = 0;\n        long lastDigitCount10 = 0;\n        long lastDigitCount11\
    \ = 0;\n        long lastDigitCount12 = 0;\n        long lastDigitCount13 = 0;\n\
    \        long lastDigitCount14 = 0;\n        long lastDigitCount15 = 0;\n    \
    \    long lastDigitCount16 = 0;\n        long lastDigitCount17 = 0;\n        long\
    \ lastDigitCount18 = 0;\n        long lastDigitCount19 = 0;\n        long lastDigitCount20\
    \ = 0;\n        long lastDigitCount21 = 0;\n        long lastDigitCount22 = 0;\n\
    \        long lastDigitCount23 = 0;\n        long lastDigitCount24 = 0;\n    \
    \    long lastDigitCount25 = 0;\n        long lastDigitCount26 = 0;\n        long\
    \ lastDigitCount27 = 0;\n        long lastDigitCount28 = 0;\n        long lastDigitCount29\
    \ = 0;\n        long lastDigitCount30 = 0;\n        long lastDigitCount31 = 0;\n\
    \        long lastDigitCount32 = 0;\n        long lastDigitCount33 = 0;\n    \
    \    long lastDigitCount34 = 0;\n        long lastDigitCount35 = 0;\n        long\
    \ lastDigitCount36 = 0;\n        long lastDigitCount37 = 0;\n        long lastDigitCount38\
    \ = 0;\n        long lastDigitCount39 = 0;\n        long lastDigitCount40 = 0;\n\
    \        long lastDigitCount41 = 0;\n        long lastDigitCount42 = 0;\n    \
    \    long lastDigitCount43 = 0;\n        long lastDigitCount44 = 0;\n        long\
    \ lastDigitCount45 = 0;\n        long lastDigitCount46 = 0;\n        long lastDigitCount47\
    \ = 0;\n        long lastDigitCount48 = 0;\n        long lastDigitCount49 = 0;\n\
    \        long lastDigitCount50 = 0;\n        long lastDigitCount51 = 0;\n    \
    \    long lastDigitCount52 = 0;\n        long lastDigitCount53 = 0;\n        long\
    \ lastDigitCount54 = 0;\n        long lastDigitCount55 = 0;\n        long lastDigitCount56\
    \ = 0;\n        long lastDigitCount57 = 0;\n        long lastDigitCount58 = 0;\n\
    \        long lastDigitCount59 = 0;\n        long lastDigitCount60 = 0;\n    \
    \    long lastDigitCount61 = 0;\n        long lastDigitCount62 = 0;\n        long\
    \ lastDigitCount", "        List<long> result = new List<long>();\n        long\
    \ temp = 0;\n        long sum = 0;\n        bool flag = false;\n        foreach\
    \ (long i in x) {\n            temp = i;\n            while (temp > 0) {\n   \
    \             sum = sum + temp % 10;\n                temp = temp / 10;\n    \
    \        }\n            if (sum % 2 == 0) {\n                flag = true;\n  \
    \          }\n            if (flag) {\n                result.Add(i);\n      \
    \      }\n            sum = 0;\n            flag = false;\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        long\
    \ lastDigit = 0;\n        long lastDigitCount = 0;\n        foreach (long i in\
    \ x) {\n            if (i % 2 == 0) {\n                lastDigit = i;\n      \
    \          lastDigitCount = 1;\n            } else {\n                if (lastDigitCount\
    \ > 1) {\n                    result.Add(lastDigit);\n                    lastDigitCount\
    \ = 0;\n                }\n            }\n        }\n        if (lastDigitCount\
    \ > 1) {\n            result.Add(lastDigit);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long temp;\n        long\
    \ sum = 0;\n        foreach (long i in x) {\n            temp = i;\n         \
    \   while (temp != 0) {\n                sum += temp % 10;\n                temp\
    \ /= 10;\n            }\n            if (sum % 2 != 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long temp = 0;\n        foreach (long i in x) {\n\
    \            temp = i;\n            while (temp > 0) {\n                temp =\
    \ temp / 10;\n                if (temp % 2 == 0) {\n                    result.Add(i);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long sum = 0;\n        long temp = 0;\n        foreach (long i in x) {\n  \
    \          temp = i;\n            while (temp > 0) {\n                sum += temp\
    \ % 10;\n                temp /= 10;\n            }\n            if (sum % 2 ==\
    \ 0) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long temp;\n\
    \        bool isEven = false;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in x) {\n            temp = i;\n            isEven =\
    \ false;\n            while (temp > 0) {\n                if (temp % 2 == 0) {\n\
    \                    isEven = true;\n                    break;\n            \
    \    }\n                temp = temp / 2;\n            }\n            if (isEven)\
    \ {\n                max = Math.Max(max, i);\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        long count = 0;\n        long tempCount\
    \ = 0;\n        foreach (long i in x) {\n            temp = i;\n            isEven\
    \ = false;\n            while (temp > 0) {\n                if (temp % 2 == 0)\
    \ {\n                    isEven = true;\n                    break;\n        \
    \        }\n                temp = temp / 2;\n            }\n            if (isEven)\
    \ {\n                tempCount++;\n            }\n        }\n        if (tempCount\
    \ != 0) {\n            count = tempCount;\n        }\n        long tempCount2\
    \ = 0;\n        foreach (long i in x) {\n            temp = i;\n            isEven\
    \ = false;\n            while (temp > 0) {\n                if (temp % 2 == 0)\
    \ {\n                    isEven = true;\n                    break;\n        \
    \        }\n                temp = temp / 2;\n            }\n            if (isEven)\
    \ {\n                tempCount2++;\n            }\n        }\n        if (tempCount2\
    \ != 0) {\n            count = tempCount2;\n        }\n        long tempCount3\
    \ = 0;\n        foreach (long i in x) {\n            temp = i;\n            isEven\
    \ = false;\n            while (temp > 0) {\n                if (temp % 2 == 0)\
    \ {\n                    isEven = true;\n                    break;\n        \
    \        }\n                temp = temp / 2;\n            }\n            if (isEven)\
    \ {\n                tempCount3++;\n            }\n        }\n        if (tempCount3\
    \ != 0) {\n            count = tempCount3;\n        }\n        long tempCount4\
    \ = 0;\n        foreach (long i in x) {\n            temp = i;\n            isEven\
    \ = false;\n            while (temp > 0) {\n                if (temp % 2 == 0)\
    \ {\n                    isEven = true;\n                    break;\n        \
    \        }\n                temp = temp / 2;\n            }\n            if (isEven)\
    \ {\n                tempCount4++;\n            }\n        }\n        if (tempCount4\
    \ != 0) {\n            count = tempCount4;\n        }\n        long tempCount5\
    \ = 0;\n        foreach (long i in x) {\n            temp = i;\n            isEven\
    \ = false;\n            while (temp > 0) {\n                if (temp % 2 == 0)\
    \ {\n                    isEven = true;\n                    break;\n        \
    \        }\n                temp = temp / 2;\n            }\n            if (isEven)\
    \ {\n                tempCount5++;\n            }\n        }\n        if (tempCount5\
    \ != 0) {\n            count = tempCount5;\n        }\n        long tempCount6\
    \ = 0;\n        foreach (long ", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long i in x) {\n            sum += i;\n\
    \        }\n        long lastDigit = sum % 10;\n        long lastDigitSum = 0;\n\
    \        foreach (long i in x) {\n            lastDigitSum += i % 10;\n      \
    \      if (lastDigitSum == lastDigit) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long temp;\n        long digit;\n        long sum = 0;\n\
    \        long count = 0;\n        foreach (long i in x) {\n            temp =\
    \ i;\n            digit = temp / 10;\n            while (temp > 0) {\n       \
    \         sum += digit;\n                count++;\n                temp = temp\
    \ / 10;\n            }\n            if (sum % 2 != 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastDigit = 0;\n        long lastDigitCount\
    \ = 0;\n        foreach (long i in x) {\n            if (i % 2 == 0) {\n     \
    \           lastDigit = i;\n                lastDigitCount = 1;\n            }\
    \ else {\n                if (lastDigitCount > 1) {\n                    result.Add(lastDigit);\n\
    \                    lastDigitCount = 0;\n                }\n            }\n \
    \       }\n        if (lastDigitCount > 1) {\n            result.Add(lastDigit);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long temp = 0;\n        long sum = 0;\n        foreach (long i in x)\
    \ {\n            temp = i;\n            while (temp > 0) {\n                sum\
    \ = sum + temp % 10;\n                temp = temp / 10;\n            }\n     \
    \       if (sum % 2 == 0) {\n                result.Add(i);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastDigit = 0;\n        long lastDigitCount = 0;\n        long lastDigitCount2\
    \ = 0;\n        long lastDigitCount3 = 0;\n        long lastDigitCount4 = 0;\n\
    \        long lastDigitCount5 = 0;\n        long lastDigitCount6 = 0;\n      \
    \  long lastDigitCount7 = 0;\n        long lastDigitCount8 = 0;\n        long\
    \ lastDigitCount9 = 0;\n        long lastDigitCount10 = 0;\n        long lastDigitCount11\
    \ = 0;\n        long lastDigitCount12 = 0;\n        long lastDigitCount13 = 0;\n\
    \        long lastDigitCount14 = 0;\n        long lastDigitCount15 = 0;\n    \
    \    long lastDigitCount16 = 0;\n        long lastDigitCount17 = 0;\n        long\
    \ lastDigitCount18 = 0;\n        long lastDigitCount19 = 0;\n        long lastDigitCount20\
    \ = 0;\n        long lastDigitCount21 = 0;\n        long lastDigitCount22 = 0;\n\
    \        long lastDigitCount23 = 0;\n        long lastDigitCount24 = 0;\n    \
    \    long lastDigitCount25 = 0;\n        long lastDigitCount26 = 0;\n        long\
    \ lastDigitCount27 = 0;\n        long lastDigitCount28 = 0;\n        long lastDigitCount29\
    \ = 0;\n        long lastDigitCount30 = 0;\n        long lastDigitCount31 = 0;\n\
    \        long lastDigitCount32 = 0;\n        long lastDigitCount33 = 0;\n    \
    \    long lastDigitCount34 = 0;\n        long lastDigitCount35 = 0;\n        long\
    \ lastDigitCount36 = 0;\n        long lastDigitCount37 = 0;\n        long lastDigitCount38\
    \ = 0;\n        long lastDigitCount39 = 0;\n        long lastDigitCount40 = 0;\n\
    \        long lastDigitCount41 = 0;\n        long lastDigitCount42 = 0;\n    \
    \    long lastDigitCount43 = 0;\n        long lastDigitCount44 = 0;\n        long\
    \ lastDigitCount45 = 0;\n        long lastDigitCount46 = 0;\n        long lastDigitCount47\
    \ = 0;\n        long lastDigitCount48 = 0;\n        long lastDigitCount49 = 0;\n\
    \        long lastDigitCount50 = 0;\n        long lastDigitCount51 = 0;\n    \
    \    long lastDigitCount52 = 0;\n        long lastDigitCount53 = 0;\n        long\
    \ lastDigitCount54 = 0;\n        long lastDigitCount55 = 0;\n        long lastDigitCount56\
    \ = 0;\n        long lastDigitCount57 = 0;\n        long lastDigitCount58 = 0;\n\
    \        long lastDigitCount59 = 0;\n        long lastDigitCount60 = 0;\n    \
    \    long lastDigitCount61 = 0;\n        long lastDigitCount62 = 0;\n        long\
    \ lastDigitCount", "        List<long> result = new List<long>();\n        long\
    \ temp = 0;\n        foreach (long i in x) {\n            temp = i;\n        \
    \    while (temp > 0) {\n                temp = temp / 10;\n                if\
    \ (temp % 2 == 0) {\n                    result.Add(i);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long temp;\n        long temp2;\n\
    \        long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n        long temp85;\n        long temp86;\n        long temp87;\n",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long i in x) {\n            sum += i;\n        }\n        long lastDigit =\
    \ sum % 10;\n        long lastSum = sum / 10;\n        bool isEven = true;\n \
    \       foreach (long i in x) {\n            if (i % 10 != lastDigit) {\n    \
    \            isEven = false;\n                break;\n            }\n        }\n\
    \        if (isEven) {\n            result.Add(lastSum);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long temp\
    \ = 0;\n        foreach (long i in x) {\n            temp = i;\n            while\
    \ (temp > 0) {\n                temp = temp / 10;\n                if (temp %\
    \ 2 == 0) {\n                    result.Add(i);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long temp = 0;\n        long\
    \ temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5\
    \ = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 =\
    \ 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 =\
    \ 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14\
    \ = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17\
    \ = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20\
    \ = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23\
    \ = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26\
    \ = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29\
    \ = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32\
    \ = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35\
    \ = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38\
    \ = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41\
    \ = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44\
    \ = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47\
    \ = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50\
    \ = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53\
    \ = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56\
    \ = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59\
    \ = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n        long temp62\
    \ = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n        long temp65\
    \ = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n        long temp68\
    \ = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n        long temp71\
    \ = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n        long temp74\
    \ = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n        long temp77\
    \ = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n        long temp80\
    \ = 0;\n        long temp81 = 0;\n        long temp82 = 0;\n        long temp83\
    \ = 0;\n        long temp84 = 0;\n        long temp", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long i in x) {\n\
    \            sum += i;\n        }\n        long maxSum = sum;\n        long maxSumIndex\
    \ = 0;\n        long maxSumDigit = 0;\n        long maxSumDigitIndex = 0;\n  \
    \      foreach (long i in x) {\n            long digit = i % 10;\n           \
    \ if (digit == 0) {\n                continue;\n            }\n            long\
    \ sumDigit = sum % 10;\n            if (sumDigit == 0) {\n                continue;\n\
    \            }\n            if (sumDigit == digit) {\n                maxSumDigit\
    \ = digit;\n                maxSumDigitIndex = i;\n            }\n           \
    \ sum += digit;\n        }\n        if (maxSumDigit == 0) {\n            return\
    \ result;\n        }\n        long maxSumDigitDigit = maxSumDigit % 10;\n    \
    \    long maxSumDigitIndex = maxSumIndex % 10;\n        long maxSumDigitDigitIndex\
    \ = maxSumDigitIndex % 10;\n        long maxSumDigitDigitIndexDigit = maxSumDigitDigitIndex\
    \ % 10;\n        if (maxSumDigitDigit == 0) {\n            while (maxSumDigitIndex\
    \ != maxSumDigitIndexDigit) {\n                result.Add(x[maxSumDigitIndex]);\n\
    \                maxSumDigitIndex++;\n            }\n            return result;\n\
    \        }\n        long maxSumDigitDigitDigit = maxSumDigitDigit % 10;\n    \
    \    long maxSumDigitDigitIndex = maxSumDigitIndex % 10;\n        long maxSumDigitDigitIndexDigit\
    \ = maxSumDigitDigitIndex % 10;\n        long maxSumDigitDigitIndexDigitDigit\
    \ = maxSumDigitDigitIndexDigit % 10;\n        if (maxSumDigitDigitDigit == 0)\
    \ {\n            while (maxSumDigitIndex != maxSumDigitIndexDigit) {\n       \
    \         result.Add(x[maxSumDigitIndex]);\n                maxSumDigitIndex++;\n\
    \            }\n            while (maxSumDigitDigitIndex != maxSumDigitDigitIndexDigit)\
    \ {\n                result.Add(x[maxSumDigitDigitIndex]);\n                maxSumDigitDigitIndex++;\n\
    \            }\n            return result;\n        }\n        long maxSumDigitDigitDigitDigit\
    \ = maxSumDigitDigitDigit % 10;\n        long maxSumDigitDigitIndexDigit = maxSumDigitDigitIndex\
    \ % 10;\n        long maxSumDigitDigitIndexDigitDigit = maxSumDigitDigitIndexDigit\
    \ % 10;\n        long maxSumDigitDigitIndexDigitDigitDigit = maxSumDigitDigitIndexDigitDigit\
    \ % 10;\n        if (maxSumDigitDigitDigitDigit == 0) {\n            while (maxSumDigitIndex\
    \ != maxSumDigitIndexDigit) {\n                result.Add(x[maxSumDigitIndex"]
stop_tokens:
- "\n    }\n"
