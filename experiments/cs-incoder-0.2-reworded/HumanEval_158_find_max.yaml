name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  })))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  })))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        string maxWord = string.Empty;\n        int maxCount = 0;\n\
    \        foreach (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        string maxCount = string.Empty;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (char.IsLetter(c)) {\n \
    \                   count++;\n                }\n            }\n            if\
    \ (count > int.Parse(maxCount)) {\n                maxWord = word;\n         \
    \       maxCount = count.ToString();\n            }\n        }\n        return\
    \ maxWord;", "        string maxWord = string.Empty;\n        int maxCount = 0;\n\
    \        foreach (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        int max = 0;\n        string maxWord = \"\";\n        foreach (string word\
    \ in words) {\n            int uniqueChars = word.Distinct().Count();\n      \
    \      if (uniqueChars > max) {\n                max = uniqueChars;\n        \
    \        maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                count++;\n            }\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string maxWord = \"\"\
    ;\n        string maxCount = \"\";\n        foreach (string word in words) {\n\
    \            int count = 0;\n            foreach (char c in word) {\n        \
    \        count++;\n            }\n            if (count > maxCount.Length) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;", "        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        // Write your code here\n\
    \        string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                count++;\n            }\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string maxWord = string.Empty;\n\
    \        int maxCount = -1;\n        foreach (string word in words) {\n      \
    \      int count = GetUniqueCharacterCount(word);\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ count++;\n            }\n            if (count > maxCount) {\n             \
    \   maxCount = count;\n                maxWord = word;\n            }\n      \
    \  }\n        return maxWord;", "        char[] chars = new char[words.Max(w =>\
    \ w.Length)];\n        int maxCount = 0;\n        string maxWord = null;\n   \
    \     foreach (string word in words) {\n            int count = 0;\n         \
    \   foreach (char c in word) {\n                if (chars[c] == 0) {\n       \
    \             chars[c] = 1;\n                    count++;\n                }\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  if (maxCount == 0) {\n            return null;\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        string maxChars = string.Empty;\n\
    \        foreach (string word in words) {\n            int charCount = 0;\n  \
    \          foreach (char c in word) {\n                charCount++;\n        \
    \    }\n            if (charCount > maxChars.Length) {\n                maxChars\
    \ = charCount.ToString();\n                maxWord = word;\n            }\n  \
    \      }\n        return maxWord;", "        string maxWord = \"\";\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                count++;\n   \
    \         }\n            if (count > maxCount) {\n                maxCount = count;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = null;\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = word.Distinct().Count();\n       \
    \     if (count > maxCount) {\n                maxCount = count;\n           \
    \     maxWord = word;\n            }\n        }\n        return maxWord;", " \
    \       string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;"]
stop_tokens:
- "\n    }\n"
