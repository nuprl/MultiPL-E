name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return null if there\
  \ is no such element.\n    // >>> NextSmallest((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L})))\n    // 2L\n    // >>> NextSmallest((new\
  \ List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L})))\n \
  \   // 2L\n    // >>> NextSmallest((new List<long>()))\n    // null\n    // >>>\
  \ NextSmallest((new List<long>(new long[]{(long)1L, (long)1L})))\n    // null\n\
  \    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).FirstOrDefault();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long second = smallest;\n        foreach (long x in lst) {\n           \
    \ if (x < smallest) {\n                second = smallest;\n                smallest\
    \ = x;\n            }\n            if (x > second) {\n                second =\
    \ x;\n            }\n        }\n        return second == smallest ? null : second;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            if (i\
    \ < secondSmallest) {\n                secondSmallest = i;\n            }\n  \
    \      }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ found = false;\n        for (int i = 2; i < lst.Count; i++) {\n            if\
    \ (lst[i] < smallest) {\n                secondSmallest = smallest;\n        \
    \        smallest = lst[i];\n                found = true;\n            } else\
    \ if (lst[i] == smallest) {\n                secondSmallest = lst[i];\n      \
    \      }\n        }\n        return found ? secondSmallest : null;", "       \
    \ long smallest = lst.Min();\n        long largest = lst.Max();\n        if (smallest\
    \ == largest) return null;\n        long mid = (smallest + largest) / 2;\n   \
    \     if (mid == smallest) return mid;\n        if (mid == largest) return mid;\n\
    \        if (lst.Contains(mid)) return mid;\n        if (lst.Contains(smallest\
    \ - 1)) return smallest - 1;\n        if (lst.Contains(smallest + 1)) return smallest\
    \ + 1;\n        if (lst.Contains(largest - 1)) return largest - 1;\n        if\
    \ (lst.Contains(largest + 1)) return largest + 1;\n        return null;", "  \
    \      if (lst.Count == 0) return null;\n        var smallest = lst[0];\n    \
    \    var smallestIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < smallest) {\n                smallest = lst[i];\n   \
    \             smallestIndex = i;\n            }\n        }\n        if (smallestIndex\
    \ == lst.Count - 1) {\n            return null;\n        }\n        return lst[smallestIndex\
    \ + 1];", "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var min = lst[0];\n        var minIndex = 0;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == lst.Count - 1) return null;\n        return lst[minIndex\
    \ + 1];", "        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long min = lst[0];\n\
    \        long min2 = lst[0];\n        foreach (long i in lst) {\n            if\
    \ (i < min) {\n                min2 = min;\n                min = i;\n       \
    \     } else if (i < min2) {\n                min2 = i;\n            }\n     \
    \   }\n        return min2;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[0];\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long min = lst[0];\n        long\
    \ min2 = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n                min2 = lst[i];\n\
    \            }\n        }\n        return min2;", "        if (lst.Count == 0)\
    \ {\n            return null;\n        }\n        long smallest = lst[0];\n  \
    \      long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    var smallest = lst[0];\n        var secondSmallest = lst[1];\n        foreach\
    \ (var item in lst.Skip(2))\n        {\n            if (item < smallest)\n   \
    \         {\n                secondSmallest = smallest;\n                smallest\
    \ = item;\n            }\n            else if (item < secondSmallest)\n      \
    \      {\n                secondSmallest = item;\n            }\n        }\n \
    \       return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[0];\n        bool found = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n                min2 = lst[i];\n             \
    \   found = true;\n            }\n            else if (lst[i] == min2) {\n   \
    \             found = true;\n            }\n        }\n        if (found) {\n\
    \            return min2;\n        }\n        return null;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.Where(x =>\
    \ x < smallest).Min();\n        if (secondSmallest == smallest)\n            return\
    \ null;\n        else\n            return secondSmallest;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long min = lst[0];\n \
    \       long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n            }\n\
    \            if (lst[i] > max) {\n                max = lst[i];\n            }\n\
    \        }\n        if (min == max) {\n            return null;\n        }\n \
    \       return max;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        bool foundSmallest = false;\n     \
    \   bool foundSecondSmallest = false;\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                foundSmallest\
    \ = true;\n            } else if (lst[i] == smallest) {\n                foundSmallest\
    \ = true;\n            }\n            if (lst[i] < secondSmallest) {\n       \
    \         secondSmallest = lst[i];\n                foundSecondSmallest = true;\n\
    \            } else if (lst[i] == secondSmallest) {\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        } else if (foundSecondSmallest) {\n       \
    \     return secondSmallest;\n        } else {\n            return null;\n   \
    \     }", "        long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool\
    \ found = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < smallest) {\n                secondSmallest = smallest;\n        \
    \        smallest = lst[i];\n            } else if (lst[i] < secondSmallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        if\
    \ (secondSmallest == smallest) return null;\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = 0;\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            }\n            else if (lst[i] ==\
    \ smallest) {\n                secondSmallest = lst[i];\n            }\n     \
    \   }\n        if (!found) {\n            return null;\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var min = lst[0];\n\
    \        var minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n              \
    \  minIndex = i;\n            }\n        }\n        if (minIndex == lst.Count\
    \ - 1)\n            return null;\n        return lst[minIndex + 1];", "      \
    \  if (lst.Count == 0) {\n            return null;\n        }\n        long min\
    \ = lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         }\n            if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) {\n            return null;\n\
    \        }\n        return max;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        foreach (long i in lst) {\n            if (i < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = i;\n         \
    \   }\n            if (i == smallest)\n                return secondSmallest;\n\
    \        }\n        return null;", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[0];\n        foreach (long i in lst)\
    \ {\n            if (i < min) {\n                min2 = min;\n               \
    \ min = i;\n            } else if (i < min2) {\n                min2 = i;\n  \
    \          }\n        }\n        return min2;", "        if (lst.Count == 0)\n\
    \            return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        var\
    \ smallest = lst[0];\n        var secondSmallest = lst[1];\n        for (var i\
    \ = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = lst[i];\n     \
    \       } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        var minValue = lst[0];\n        var minIndex\
    \ = 0;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < minValue) {\n                minValue = lst[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == 0)\n            return\
    \ null;\n        return lst[minIndex - 1];", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var smallestIndex = lst.IndexOf(smallest);\n\
    \        if (smallestIndex == 0) return null;\n        var secondSmallest = lst[smallestIndex\
    \ - 1];\n        if (secondSmallest < smallest) {\n            return secondSmallest;\n\
    \        }\n        var secondSmallestIndex = lst.IndexOf(secondSmallest);\n \
    \       if (secondSmallestIndex == lst.Count - 1) return null;\n        var thirdSmallest\
    \ = lst[secondSmallestIndex + 1];\n        if (thirdSmallest < secondSmallest)\
    \ {\n            return thirdSmallest;\n        }\n        var thirdSmallestIndex\
    \ = lst.IndexOf(thirdSmallest);\n        if (thirdSmallestIndex == lst.Count -\
    \ 2) return null;\n        var fourthSmallest = lst[thirdSmallestIndex + 2];\n\
    \        if (fourthSmallest < thirdSmallest) {\n            return fourthSmallest;\n\
    \        }\n        var fourthSmallestIndex = lst.IndexOf(fourthSmallest);\n \
    \       if (fourthSmallestIndex == lst.Count - 3) return null;\n        var fifthSmallest\
    \ = lst[fourthSmallestIndex + 3];\n        if (fifthSmallest < fourthSmallest)\
    \ {\n            return fifthSmallest;\n        }\n        var fifthSmallestIndex\
    \ = lst.IndexOf(fifthSmallest);\n        if (fifthSmallestIndex == lst.Count -\
    \ 4) return null;\n        var sixthSmallest = lst[fifthSmallestIndex + 4];\n\
    \        if (sixthSmallest < fifthSmallest) {\n            return sixthSmallest;\n\
    \        }\n        var sixthSmallestIndex = lst.IndexOf(sixthSmallest);\n   \
    \     if (sixthSmallestIndex == lst.Count - 5) return null;\n        var seventhSmallest\
    \ = lst[sixthSmallestIndex + 5];\n        if (seventhSmallest < sixthSmallest)\
    \ {\n            return seventhSmallest;\n        }\n        var seventhSmallestIndex\
    \ = lst.IndexOf(seventhSmallest);\n        if (seventhSmallestIndex == lst.Count\
    \ - 6) return null;\n        var eighthSmallest = lst[seventhSmallestIndex + 6];\n\
    \        if (eighthSmallest < seventh", "        if (lst.Count == 0)\n       \
    \     return null;\n        long min = lst[0];\n        long max = lst[0];\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\n\
    \                min = lst[i];\n            if (lst[i] > max)\n              \
    \  max = lst[i];\n        }\n        if (max < min)\n            return null;\n\
    \        return max;", "        if (lst.Count == 0)\n            return null;\n\
    \        long min = lst[0];\n        long max = lst[0];\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < min)\n                min\
    \ = lst[i];\n            if (lst[i] > max)\n                max = lst[i];\n  \
    \      }\n        if (min == max)\n            return null;\n        return max;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n            }\n           \
    \ if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n\
    \        if (min == max) return null;\n        return max;", "        long smallest\
    \ = lst.Min();\n        long largest = lst.Max();\n        long mid = lst.Count\
    \ / 2;\n        if (mid > 0)\n            return lst.ElementAt(mid);\n       \
    \ if (smallest < largest)\n            return smallest;\n        return null;",
  "        long smallest = lst.Min();\n        long largest = lst.Max();\n       \
    \ if (smallest == largest) {\n            return null;\n        }\n        long\
    \ mid = smallest + (largest - smallest) / 2;\n        if (mid == smallest) {\n\
    \            return smallest;\n        }\n        if (mid == largest) {\n    \
    \        return largest;\n        }\n        if (mid < smallest) {\n         \
    \   return NextSmallest(lst.Where(x => x < mid).ToList());\n        }\n      \
    \  if (mid > largest) {\n            return NextSmallest(lst.Where(x => x > mid).ToList());\n\
    \        }\n        return mid;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        bool found = false;\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n                found = true;\n         \
    \   } else if (lst[i] == smallest) {\n                secondSmallest = lst[i];\n\
    \            }\n        }\n        if (!found)\n            return null;\n   \
    \     return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n            }\n            if (lst[i] > max) {\n\
    \                max = lst[i];\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        return max;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var min = lst.Min();\n        var max = lst.Max();\n        if\
    \ (min == max) return min;\n        if (min > max) return null;\n        var mid\
    \ = min + (max - min) / 2;\n        if (mid == max) return mid;\n        if (mid\
    \ > max) return NextSmallest(lst.Skip(1).Take(1).Concat(new[] { max }));\n   \
    \     if (mid < min) return NextSmallest(lst.Skip(1).Take(1).Concat(new[] { min\
    \ }));\n        return NextSmallest(lst.Skip(1).Take(2).Concat(new[] { min, mid\
    \ }));", "        if (lst.Count == 0)\n            return null;\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long second = smallest;\n        foreach (long i in lst) {\n            if\
    \ (i < smallest) {\n                second = smallest;\n                smallest\
    \ = i;\n            } else if (i == smallest) {\n                second = i;\n\
    \            }\n        }\n        return second == smallest ? null : second;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        bool found = false;\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \             found = true;\n            } else if (lst[i] == smallest) {\n  \
    \              secondSmallest = lst[i];\n            }\n        }\n        return\
    \ found ? secondSmallest : null;", "        if (lst.Count == 0) return null;\n\
    \        var smallest = lst[0];\n        var smallestIndex = 0;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         smallest = lst[i];\n                smallestIndex = i;\n           \
    \ }\n        }\n        if (smallestIndex == lst.Count - 1) return null;\n   \
    \     return lst[smallestIndex + 1];", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        foreach (long i in lst) {\n            if (i < min) {\n\
    \                min = i;\n            }\n            if (i > max) {\n       \
    \         max = i;\n            }\n        }\n        if (min == max) return null;\n\
    \        if (min == lst[1]) return lst[1];\n        if (max == lst[lst.Count -\
    \ 1]) return lst[lst.Count - 1];\n        if (min == lst[lst.Count - 1]) return\
    \ lst[lst.Count - 1];\n        if (min == lst[1]) return lst[1];\n        if (max\
    \ == lst[lst.Count - 1]) return lst[lst.Count - 1];\n        return max;", " \
    \       if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        var smallest = lst[0];\n        var smallest_index\
    \ = lst.IndexOf(smallest);\n        if (smallest_index == 0)\n            return\
    \ null;\n        var second_smallest = lst[smallest_index - 1];\n        var second_smallest_index\
    \ = lst.IndexOf(second_smallest);\n        if (second_smallest_index == 0)\n \
    \           return null;\n        if (second_smallest_index > smallest_index)\n\
    \            return second_smallest;\n        var third_smallest = lst[smallest_index\
    \ - 2];\n        var third_smallest_index = lst.IndexOf(third_smallest);\n   \
    \     if (third_smallest_index == 0)\n            return null;\n        if (third_smallest_index\
    \ > smallest_index)\n            return third_smallest;\n        var fourth_smallest\
    \ = lst[smallest_index - 3];\n        var fourth_smallest_index = lst.IndexOf(fourth_smallest);\n\
    \        if (fourth_smallest_index == 0)\n            return null;\n        if\
    \ (fourth_smallest_index > smallest_index)\n            return fourth_smallest;\n\
    \        var fifth_smallest = lst[smallest_index - 4];\n        var fifth_smallest_index\
    \ = lst.IndexOf(fifth_smallest);\n        if (fifth_smallest_index == 0)\n   \
    \         return null;\n        if (fifth_smallest_index > smallest_index)\n \
    \           return fifth_smallest;\n        var sixth_smallest = lst[smallest_index\
    \ - 5];\n        var sixth_smallest_index = lst.IndexOf(sixth_smallest);\n   \
    \     if (sixth_smallest_index == 0)\n            return null;\n        if (sixth_smallest_index\
    \ > smallest_index)\n            return sixth_smallest;\n        var seventh_smallest\
    \ = lst[smallest_index - 6];\n        var seventh_smallest_index = lst.IndexOf(seventh_smallest);\n\
    \        if (seventh_smallest_index == 0)\n            return null;\n        if\
    \ (seventh_smallest_index > smallest_index)\n            return seventh_smallest;\n\
    \        var eighth_smallest = lst[smallest_index - 7];\n        var eighth_smallest_index\
    \ = lst.IndexOf(eighth_smallest);\n        if (eighth_smallest_index == 0)\n \
    \           return null;\n        if (eighth_smallest_index > smallest_index)\n\
    \            return eighth_smallest;\n        var ninth_smallest = lst[smallest_index\
    \ - 8];\n        var ninth_smallest_index = lst.", "        if (lst.Count == 0)\n\
    \            return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst[0];\n        long secondSmallest = lst[0];\n      \
    \  foreach (long i in lst) {\n            if (i < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = i;\n            } else\
    \ if (i < secondSmallest) {\n                secondSmallest = i;\n           \
    \ }\n        }\n        if (secondSmallest == lst[0]) {\n            return null;\n\
    \        } else {\n            return secondSmallest;\n        }", "        long\
    \ smallest = lst.Min();\n        long largest = lst.Max();\n        long middle\
    \ = (smallest + largest) / 2;\n        if (middle == smallest) {\n           \
    \ return smallest;\n        }\n        if (middle == largest) {\n            return\
    \ largest;\n        }\n        if (middle < smallest) {\n            return NextSmallest(lst.Where(x\
    \ => x < middle).ToList());\n        }\n        if (middle > largest) {\n    \
    \        return NextSmallest(lst.Where(x => x > middle).ToList());\n        }\n\
    \        return null;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.SkipWhile(x => x < smallest).Skip(1).FirstOrDefault();\n        if (secondSmallest\
    \ == smallest)\n            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        foreach (long i in lst) {\n     \
    \       if (i < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = i;\n            }\n            else if (i == smallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.SkipWhile(x => x < smallest).Skip(1).First();\n        if (secondSmallest\
    \ == smallest)\n            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var smallest = lst[0];\n        var smallestIndex = lst.IndexOf(smallest);\n\
    \        if (smallestIndex == 0)\n            return null;\n        var secondSmallest\
    \ = lst[smallestIndex - 1];\n        if (secondSmallest < smallest)\n        \
    \    return secondSmallest;\n        return smallest;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ > secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var min = lst.Min();\n        var max = lst.Max();\n        if\
    \ (min == max) return min;\n        var mid = min + (max - min) / 2;\n       \
    \ if (mid == min) return mid;\n        if (mid == max) return mid;\n        if\
    \ (mid < min) return min;\n        if (mid > max) return max;\n        if (mid\
    \ == lst[mid]) return mid;\n        if (mid < lst[mid]) return min;\n        if\
    \ (mid > lst[mid]) return max;\n        return null;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > smallest) {\n                secondSmallest =\
    \ lst[i];\n            }\n        }\n        return secondSmallest;", "      \
    \  long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x =>\
    \ x < smallest).Skip(1).FirstOrDefault();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = lst[i];\n          \
    \      foundSmallest = true;\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return smallest;\n        } else if (foundSecondSmallest) {\n            return\
    \ secondSmallest;\n        } else {\n            return null;\n        }", " \
    \       if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n                foundSmallest = true;\n            } else if (lst[i]\
    \ == smallest) {\n                secondSmallest = lst[i];\n            }\n  \
    \      }\n        if (!foundSmallest)\n            return null;\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        long min\
    \ = lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         }\n            if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) return null;\n        return\
    \ max;", "        long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).FirstOrDefault();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i > secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        var smallest\
    \ = lst[0];\n        var secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst.Min();\n\
    \        long secondSmallest = lst.SkipWhile(x => x < smallest).Skip(1).First();\n\
    \        if (secondSmallest == smallest)\n            return null;\n        else\n\
    \            return secondSmallest;", "        if (lst.Count == 0) return null;\n\
    \        long min = lst[0];\n        long min2 = lst[0];\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n                min\
    \ = lst[i];\n                min2 = lst[i];\n            } else if (lst[i] < min2)\
    \ {\n                min2 = lst[i];\n            }\n        }\n        return\
    \ min2;", "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            }\n            else if (i == smallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long min = lst.Min();\n        long max = lst.Max();\n\
    \        if (min == max) {\n            return null;\n        }\n        long\
    \ mid = (min + max) / 2;\n        if (mid == min) {\n            return max;\n\
    \        }\n        if (mid == max) {\n            return min;\n        }\n  \
    \      if (mid < min) {\n            return NextSmallest(new List<long>(lst.SkipWhile(x\
    \ => x < mid).TakeWhile(x => x > min)));\n        }\n        if (mid > max) {\n\
    \            return NextSmallest(new List<long>(lst.SkipWhile(x => x < mid).TakeWhile(x\
    \ => x < max)));\n        }\n        return mid;", "        long smallest = lst.Min();\n\
    \        long largest = lst.Max();\n        if (smallest == largest) {\n     \
    \       return null;\n        }\n        long middle = smallest + (largest - smallest)\
    \ / 2;\n        if (lst.Contains(middle)) {\n            return middle;\n    \
    \    }\n        if (middle == smallest) {\n            return smallest;\n    \
    \    }\n        if (middle == largest) {\n            return largest;\n      \
    \  }\n        List<long> smallerList = new List<long>();\n        List<long> largerList\
    \ = new List<long>();\n        foreach (long num in lst) {\n            if (num\
    \ < middle) {\n                smallerList.Add(num);\n            } else {\n \
    \               largerList.Add(num);\n            }\n        }\n        if (smallerList.Count\
    \ > largerList.Count) {\n            return smallerList.Min();\n        }\n  \
    \      return largerList.Min();", "        if (lst.Count == 0)\n            return\
    \ null;\n        var smallest = lst[0];\n        var smallestIndex = 0;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n                smallestIndex = i;\n\
    \            }\n        }\n        if (smallestIndex == 0)\n            return\
    \ null;\n        return lst[smallestIndex + 1];", "        if (lst.Count == 0)\
    \ return null;\n        long smallest = lst[0];\n        long secondSmallest =\
    \ lst[1];\n        bool foundSmallest = false;\n        bool foundSecondSmallest\
    \ = false;\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n                foundSmallest = true;\n            }\n          \
    \  else if (lst[i] == smallest) {\n                foundSmallest = true;\n   \
    \         }\n            else if (lst[i] < secondSmallest) {\n               \
    \ secondSmallest = lst[i];\n                foundSecondSmallest = true;\n    \
    \        }\n            else if (lst[i] == secondSmallest) {\n               \
    \ foundSecondSmallest = true;\n            }\n        }\n        if (foundSmallest)\
    \ {\n            return secondSmallest;\n        }\n        else if (foundSecondSmallest)\
    \ {\n            return secondSmallest;\n        }\n        return null;", " \
    \       if (lst.Count == 0) return null;\n        var min = lst.Min();\n     \
    \   var max = lst.Max();\n        if (min == max) return min;\n        var mid\
    \ = (min + max) / 2;\n        if (mid == min) return mid;\n        if (mid ==\
    \ max) return mid;\n        if (mid < min) return min;\n        if (mid > max)\
    \ return max;\n        if (mid == lst.Count / 2) return mid;\n        if (mid\
    \ == lst.Count / 2 + 1) return mid;\n        return null;", "        if (lst.Count\
    \ == 0) return null;\n        long min = lst[0];\n        long min2 = lst[0];\n\
    \        foreach (long i in lst) {\n            if (i < min) {\n             \
    \   min2 = min;\n                min = i;\n            } else if (i < min2) {\n\
    \                min2 = i;\n            }\n        }\n        return min2;", " \
    \       if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] > secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            else\
    \ if (i == smallest) {\n                secondSmallest = i;\n            }\n \
    \       }\n        if (secondSmallest == smallest) {\n            return null;\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long second = smallest;\n        bool found = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       second = smallest;\n                smallest = lst[i];\n             \
    \   found = true;\n            } else if (lst[i] == smallest) {\n            \
    \    second = smallest;\n                smallest = lst[i];\n                found\
    \ = true;\n            }\n        }\n        if (found) return second;\n     \
    \   return null;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long i in\
    \ lst) {\n            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var min = lst.Min();\n        var\
    \ max = lst.Max();\n        if (min == max) return min;\n        var mid = min\
    \ + (max - min) / 2;\n        if (mid == min) return mid;\n        if (mid ==\
    \ max) return max;\n        if (mid < min) return min;\n        if (mid > max)\
    \ return max;\n        if (mid < lst.Skip(1).FirstOrDefault()) return mid;\n \
    \       if (mid > lst.Skip(1).FirstOrDefault()) return max;\n        return null;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[0];\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        if\
    \ (found)\n            return secondSmallest;\n        else\n            return\
    \ null;", "        if (lst.Count == 0)\n            return null;\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         }\n            else if (lst[i] < secondSmallest) {\n               \
    \ secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (var i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        bool found = false;\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            } else if (lst[i] == smallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (found) {\n            return\
    \ secondSmallest;\n        } else {\n            return null;\n        }", " \
    \       if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long min = lst[0];\n\
    \        long min2 = lst[0];\n        long min3 = lst[0];\n        foreach (long\
    \ i in lst) {\n            if (i < min)\n                min = i;\n          \
    \  if (i < min2)\n                min2 = i;\n            if (i < min3)\n     \
    \           min3 = i;\n        }\n        if (min2 < min)\n            return\
    \ min2;\n        if (min3 < min)\n            return min3;\n        return min;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long second = smallest;\n        foreach (long i in lst) {\n        \
    \    if (i < smallest)\n                second = smallest;\n            else if\
    \ (i > smallest)\n                second = i;\n            else\n            \
    \    return null;\n        }\n        return second;", "        long smallest\
    \ = lst.Min();\n        long secondSmallest = lst.SkipWhile(x => x < smallest).Skip(1).FirstOrDefault();\n\
    \        if (secondSmallest == smallest)\n            return null;\n        else\n\
    \            return secondSmallest;", "        long smallest = lst.Min();\n  \
    \      long largest = lst.Max();\n        long middle = lst.Count / 2;\n     \
    \   long middle2 = lst.Count / 2;\n        long middle3 = lst.Count / 2;\n   \
    \     long middle4 = lst.Count / 2;\n        long middle5 = lst.Count / 2;\n \
    \       long middle6 = lst.Count / 2;\n        long middle7 = lst.Count / 2;\n\
    \        long middle8 = lst.Count / 2;\n        long middle9 = lst.Count / 2;\n\
    \        long middle10 = lst.Count / 2;\n        long middle11 = lst.Count / 2;\n\
    \        long middle12 = lst.Count / 2;\n        long middle13 = lst.Count / 2;\n\
    \        long middle14 = lst.Count / 2;\n        long middle15 = lst.Count / 2;\n\
    \        long middle16 = lst.Count / 2;\n        long middle17 = lst.Count / 2;\n\
    \        long middle18 = lst.Count / 2;\n        long middle19 = lst.Count / 2;\n\
    \        long middle20 = lst.Count / 2;\n        long middle21 = lst.Count / 2;\n\
    \        long middle22 = lst.Count / 2;\n        long middle23 = lst.Count / 2;\n\
    \        long middle24 = lst.Count / 2;\n        long middle25 = lst.Count / 2;\n\
    \        long middle26 = lst.Count / 2;\n        long middle27 = lst.Count / 2;\n\
    \        long middle28 = lst.Count / 2;\n        long middle29 = lst.Count / 2;\n\
    \        long middle30 = lst.Count / 2;\n        long middle31 = lst.Count / 2;\n\
    \        long middle32 = lst.Count / 2;\n        long middle33 = lst.Count / 2;\n\
    \        long middle34 = lst.Count / 2;\n        long middle35 = lst.Count / 2;\n\
    \        long middle36 = lst.Count / 2;\n        long middle37 = lst.Count / 2;\n\
    \        long middle38 = lst.Count / 2;\n        long middle39 = lst.Count / 2;\n\
    \        long middle40 = lst.Count / 2;\n        long middle41 = lst.Count / 2;\n\
    \        long middle42 = lst.Count / 2;\n        long middle43 = lst.Count / 2;\n\
    \        long middle44 = lst.Count / 2;\n        long middle45 = lst.Count / 2;\n\
    \        long middle46 = lst.Count / 2;", "        if (lst.Count == 0)\n     \
    \       return null;\n        long min = lst[0];\n        long min2 = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min2 = min;\n                min = lst[i];\n            }\
    \ else if (lst[i] < min2) {\n                min2 = lst[i];\n            }\n \
    \       }\n        return min2;", "        if (lst.Count == 0) {\n           \
    \ return null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i > secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var min = lst[0];\n        var minIndex = 0;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == lst.Count - 1) return null;\n        return lst[minIndex\
    \ + 1];", "        long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).FirstOrDefault();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long min = lst[0];\n\
    \        long max = lst[0];\n        foreach (long i in lst) {\n            if\
    \ (i < min)\n                min = i;\n            if (i > max)\n            \
    \    max = i;\n        }\n        if (min == max)\n            return null;\n\
    \        return max;", "        if (lst.Count == 0) return null;\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long min =\
    \ lst[0];\n        long min2 = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min2 = min;\n     \
    \           min = lst[i];\n            } else if (lst[i] < min2) {\n         \
    \       min2 = lst[i];\n            }\n        }\n        return min2;", "   \
    \     if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var min = lst.Min();\n\
    \        var max = lst.Max();\n        if (min == max)\n            return min;\n\
    \        var mid = (min + max) / 2;\n        if (mid == min)\n            return\
    \ null;\n        if (mid == max)\n            return max;\n        if (lst.Contains(mid))\n\
    \            return mid;\n        if (mid < min)\n            return NextSmallest(new\
    \ List<long>(lst.Where(x => x < mid).ToList()));\n        if (mid > max)\n   \
    \         return NextSmallest(new List<long>(lst.Where(x => x > mid).ToList()));\n\
    \        return null;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        foreach (long i\
    \ in lst) {\n            if (i < smallest) {\n                secondSmallest =\
    \ smallest;\n                smallest = i;\n                foundSmallest = true;\n\
    \            }\n            else if (i == smallest) {\n                foundSmallest\
    \ = true;\n            }\n            else if (foundSmallest) {\n            \
    \    if (i < secondSmallest) {\n                    secondSmallest = i;\n    \
    \                foundSecondSmallest = true;\n                }\n            \
    \    else if (i == secondSmallest) {\n                    foundSecondSmallest\
    \ = true;\n                }\n            }\n        }\n        if (foundSecondSmallest)\
    \ {\n            return secondSmallest;\n        }\n        return null;", " \
    \       if (lst.Count == 0) return null;\n        long min = lst[0];\n       \
    \ long min2 = lst[0];\n        foreach (long i in lst) {\n            if (i <\
    \ min) {\n                min = i;\n            }\n            if (i < min2) {\n\
    \                min2 = i;\n            }\n        }\n        if (min2 < min)\
    \ {\n            return min2;\n        }\n        return min;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        bool foundSmallest = false;\n   \
    \     bool foundSecondSmallest = false;\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                foundSmallest\
    \ = true;\n            }\n            else if (lst[i] == smallest) {\n       \
    \         foundSmallest = true;\n            }\n            else if (lst[i] <\
    \ secondSmallest) {\n                secondSmallest = lst[i];\n              \
    \  foundSecondSmallest = true;\n            }\n        }\n        if (foundSmallest)\
    \ {\n            return smallest;\n        }\n        else if (foundSecondSmallest)\
    \ {\n            return secondSmallest;\n        }\n        return null;", " \
    \       if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        foreach (long i in lst) {\n            if (i < min) min\
    \ = i;\n            if (i > max) max = i;\n        }\n        if (min == max)\
    \ return null;\n        return max;", "        if (lst.Count == 0)\n         \
    \   return null;\n        var smallest = lst[0];\n        var smallest_index =\
    \ lst.IndexOf(smallest);\n        if (smallest_index == 0)\n            return\
    \ null;\n        var second_smallest = lst[smallest_index - 1];\n        var second_smallest_index\
    \ = lst.IndexOf(second_smallest);\n        if (second_smallest_index == 0)\n \
    \           return null;\n        if (second_smallest_index > smallest_index)\n\
    \            return second_smallest;\n        return smallest;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        var min = lst.Min();\n        var max = lst.Max();\n\
    \        if (min == max) {\n            return min;\n        }\n        var mid\
    \ = min + (max - min) / 2;\n        if (mid == min) {\n            return mid;\n\
    \        }\n        if (mid == max) {\n            return mid;\n        }\n  \
    \      if (mid < min) {\n            return mid;\n        }\n        if (mid >\
    \ max) {\n            return mid;\n        }\n        return NextSmallest(lst.Where(x\
    \ => x < mid).ToList());", "        if (lst.Count == 0)\n            return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = 0;\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        if\
    \ (found) {\n            return secondSmallest;\n        }\n        return null;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[0];\n        foreach (long i in lst) {\n     \
    \       if (i < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = i;\n            } else if (i < secondSmallest) {\n   \
    \             secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long second = smallest;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                second = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > smallest)\
    \ {\n                second = smallest;\n                smallest = lst[i];\n\
    \            } else {\n                second = lst[i];\n            }\n     \
    \   }\n        return second;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] > secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        var min = lst[0];\n        var\
    \ min2 = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n                min2 = lst[i\
    \ - 1];\n            }\n        }\n        if (min == min2) return null;\n   \
    \     return min2;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n            }\n            if (lst[i] > max) {\n\
    \                max = lst[i];\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        return max;", "        if (lst.Count\
    \ == 0) return null;\n        var smallest = lst[0];\n        var secondSmallest\
    \ = lst[1];\n        for (var i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long min = lst[0];\n        long max = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) min = lst[i];\n\
    \            if (lst[i] > max) max = lst[i];\n        }\n        if (min == max)\
    \ return null;\n        return max;", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var min = lst[0];\n        var\
    \ min2 = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n                min2 = lst[i\
    \ - 1];\n            }\n        }\n        return min2;", "        if (lst.Count\
    \ == 0)\n            return null;\n        long smallest = lst[0];\n        long\
    \ second = smallest;\n        foreach (long i in lst) {\n            if (i < smallest)\n\
    \                second = smallest;\n            else if (i > smallest)\n    \
    \            second = i;\n            else\n                return null;\n   \
    \     }\n        return second;", "        if (lst.Count == 0) {\n           \
    \ return null;\n        }\n        var smallest = lst[0];\n        var smallestIndex\
    \ = lst.IndexOf(smallest);\n        if (smallestIndex == lst.Count - 1) {\n  \
    \          return null;\n        }\n        var secondSmallest = lst[smallestIndex\
    \ + 1];\n        if (secondSmallest < smallest) {\n            return secondSmallest;\n\
    \        }\n        return smallest;", "        if (lst.Count == 0) {\n      \
    \      return null;\n        }\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        var smallest\
    \ = lst[0];\n        var secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    var min = lst.Min();\n        var max = lst.Max();\n        if (min == max)\
    \ return min;\n        if (min > max) return null;\n        var mid = min + (max\
    \ - min) / 2;\n        if (mid == max) return mid;\n        if (mid > max) return\
    \ NextSmallest(new List<long>(lst.Where(x => x < mid).ToList()));\n        if\
    \ (mid < min) return NextSmallest(new List<long>(lst.Where(x => x > mid).ToList()));\n\
    \        return mid;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        bool foundSmallest = false;\n     \
    \   bool foundSecondSmallest = false;\n        foreach (long i in lst) {\n   \
    \         if (i == smallest) {\n                foundSmallest = true;\n      \
    \      }\n            if (i == secondSmallest) {\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    var smallest = lst[0];\n        var secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        bool foundSmallest = false;\n     \
    \   bool foundSecondSmallest = false;\n        foreach (long i in lst) {\n   \
    \         if (i == smallest) {\n                foundSmallest = true;\n      \
    \      } else if (i == secondSmallest) {\n                foundSecondSmallest\
    \ = true;\n            } else if (foundSmallest && foundSecondSmallest) {\n  \
    \              return secondSmallest;\n            }\n            secondSmallest\
    \ = smallest;\n            smallest = i;\n        }\n        return null;", " \
    \       long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n            } else if (lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        }\n        if\
    \ (min == max) return null;\n        return max;", "        long smallest = lst.Min();\n\
    \        long secondSmallest = lst.SkipWhile(x => x < smallest).Skip(1).First();\n\
    \        return secondSmallest < smallest ? null : secondSmallest;", "       \
    \ if (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        foreach (long i in lst) {\n            if\
    \ (i < smallest) {\n                secondSmallest = smallest;\n             \
    \   smallest = i;\n            } else if (i < secondSmallest) {\n            \
    \    secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;"]
stop_tokens:
- "\n    }\n"
