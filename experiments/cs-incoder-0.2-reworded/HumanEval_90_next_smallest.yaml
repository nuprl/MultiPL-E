name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return null if there\
  \ is no such element.\n    // >>> NextSmallest((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L})))\n    // 2L\n    // >>> NextSmallest((new\
  \ List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L})))\n \
  \   // 2L\n    // >>> NextSmallest((new List<long>()))\n    // null\n    // >>>\
  \ NextSmallest((new List<long>(new long[]{(long)1L, (long)1L})))\n    // null\n\
  \    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).FirstOrDefault();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long second = smallest;\n        foreach (long x in lst) {\n           \
    \ if (x < smallest) {\n                second = smallest;\n                smallest\
    \ = x;\n            }\n            if (x > second) {\n                second =\
    \ x;\n            }\n        }\n        return second == smallest ? null : second;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            if (i\
    \ < secondSmallest) {\n                secondSmallest = i;\n            }\n  \
    \      }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ found = false;\n        for (int i = 2; i < lst.Count; i++) {\n            if\
    \ (lst[i] < smallest) {\n                secondSmallest = smallest;\n        \
    \        smallest = lst[i];\n                found = true;\n            } else\
    \ if (lst[i] == smallest) {\n                secondSmallest = lst[i];\n      \
    \      }\n        }\n        return found ? secondSmallest : null;", "       \
    \ long smallest = lst.Min();\n        long largest = lst.Max();\n        if (smallest\
    \ == largest) return null;\n        long mid = (smallest + largest) / 2;\n   \
    \     if (mid == smallest) return mid;\n        if (mid == largest) return mid;\n\
    \        if (lst.Contains(mid)) return mid;\n        if (lst.Contains(smallest\
    \ - 1)) return smallest - 1;\n        if (lst.Contains(smallest + 1)) return smallest\
    \ + 1;\n        if (lst.Contains(largest - 1)) return largest - 1;\n        if\
    \ (lst.Contains(largest + 1)) return largest + 1;\n        return null;", "  \
    \      if (lst.Count == 0) return null;\n        var smallest = lst[0];\n    \
    \    var smallestIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < smallest) {\n                smallest = lst[i];\n   \
    \             smallestIndex = i;\n            }\n        }\n        if (smallestIndex\
    \ == lst.Count - 1) {\n            return null;\n        }\n        return lst[smallestIndex\
    \ + 1];", "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var min = lst[0];\n        var minIndex = 0;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == lst.Count - 1) return null;\n        return lst[minIndex\
    \ + 1];", "        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long min = lst[0];\n\
    \        long min2 = lst[0];\n        foreach (long i in lst) {\n            if\
    \ (i < min) {\n                min2 = min;\n                min = i;\n       \
    \     } else if (i < min2) {\n                min2 = i;\n            }\n     \
    \   }\n        return min2;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[0];\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long min = lst[0];\n        long\
    \ min2 = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n                min2 = lst[i];\n\
    \            }\n        }\n        return min2;", "        if (lst.Count == 0)\
    \ {\n            return null;\n        }\n        long smallest = lst[0];\n  \
    \      long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;"]
stop_tokens:
- "\n    }\n"
