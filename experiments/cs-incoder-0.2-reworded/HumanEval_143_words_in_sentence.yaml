name: HumanEval_143_words_in_sentence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string representing a sentence,\n    // the\
  \ sentence contains some words separated by a space,\n    // and you have to return\
  \ a string that contains the words from the original sentence,\n    // whose lengths\
  \ are prime numbers,\n    // the order of the words in the new string should be\
  \ the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"\
  This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"\
  lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <=\
  \ len(sentence) <= 100\n    // * sentence contains only letters\n    public static\
  \ string WordsInSentence(string sentence) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
  This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
  \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
  there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
  Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
  go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\"\
  )).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
  is\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            primes.Add(n);\n   \
    \     }\n        primes.Sort();\n        foreach (int prime in primes) {\n   \
    \         int count = 0;\n            foreach (char c in chars) {\n          \
    \      if (Convert.ToInt32(c) == prime) {\n                    count++;\n    \
    \            }\n            }\n            if (count == chars.Length) {\n    \
    \            result += \" \" + Convert.ToString(prime);\n            }\n     \
    \   }\n        return result.Trim();", "        string result = \"\";\n      \
    \  string word = \"\";\n        bool isPrime = true;\n        foreach (char c\
    \ in sentence) {\n            isPrime = true;\n            for (int i = 1; i <\
    \ c; i++) {\n                if (c % i == 0) {\n                    isPrime =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if (isPrime) {\n                result += \" \" + word;\n            \
    \    word = \"\";\n            }\n            word += c;\n        }\n        return\
    \ result;", "        string result = \"\";\n        string word = \"\";\n    \
    \    string temp = \"\";\n        foreach (char c in sentence) {\n           \
    \ if (char.IsLetter(c)) {\n                word += c;\n            } else {\n\
    \                temp = word;\n                word = \"\";\n                if\
    \ (IsPrime(temp.Length)) {\n                    result += temp;\n            \
    \    }\n            }\n        }\n        return result;", "        string result\
    \ = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n\
    \            if (IsPrime(n)) {\n                result += \" \" + c;\n       \
    \     }\n        }\n        return result.Trim();", "        string result = \"\
    \";\n        string words = sentence.Split(' ');\n        List<int> primes = new\
    \ List<int>();\n        foreach (string word in words) {\n            int prime\
    \ = GetPrime(word);\n            if (prime > 1) {\n                primes.Add(prime);\n\
    \            }\n        }\n        foreach (int prime in primes) {\n         \
    \   string newWord = string.Empty;\n            foreach (string word in words)\
    \ {\n                if (GetPrime(word) == prime) {\n                    newWord\
    \ += \" \" + word;\n                }\n            }\n            result += newWord;\n\
    \        }\n        return result;", "        string result = \"\";\n        char[]\
    \ chars = sentence.ToCharArray();\n        List<int> primes = new List<int>();\n\
    \        foreach (char c in chars) {\n            int prime = 1;\n           \
    \ while (prime * prime <= chars.Length) {\n                if (chars[prime * prime\
    \ - 1] == c) {\n                    prime++;\n                } else {\n     \
    \               break;\n                }\n            }\n            if (prime\
    \ > 1) {\n                primes.Add(prime);\n            }\n        }\n     \
    \   foreach (int prime in primes) {\n            string temp = string.Empty;\n\
    \            for (int i = 0; i < prime; i++) {\n                temp += chars[i];\n\
    \            }\n            result += temp + \" \";\n        }\n        return\
    \ result;", "        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            bool isPrime = true;\n\
    \            for (int i = 2; i <= Math.Sqrt(n); i++) {\n                if (n\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes.Add(n);\n            }\n        }\n        foreach (int prime in primes)\
    \ {\n            result += \" \" + chars[prime];\n        }\n        return result.Trim();",
  "        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            for (int i = 2; i <= Math.Sqrt(length); i++)\n        \
    \    {\n                if (length % i == 0)\n                {\n            \
    \        isPrime = false;\n                    break;\n                }\n   \
    \         }\n            if (isPrime)\n            {\n                result +=\
    \ \" \" + word;\n            }\n        }\n        return result.Trim();", " \
    \       string result = \"\";\n        bool isPrime = true;\n        string temp\
    \ = \"\";\n        foreach (char c in sentence) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                isPrime = false;\n           \
    \ }\n        }\n        if (isPrime) {\n            int n = Convert.ToInt32(sentence);\n\
    \            int count = 0;\n            while (n > 2) {\n                if (n\
    \ % 2 == 0) {\n                    count++;\n                }\n             \
    \   n = n / 2;\n            }\n            int i = 2;\n            while (i <=\
    \ count) {\n                temp = temp + sentence.Substring(i, 1) + \" \";\n\
    \                i++;\n            }\n            result = temp;\n        }\n\
    \        return result;", "        string result = \"\";\n        string words\
    \ = sentence.Split(' ');\n        foreach (string word in words) {\n         \
    \   int length = word.Length;\n            if (length == 1) continue;\n      \
    \      if (IsPrime(length)) {\n                result += \" \" + word;\n     \
    \       }\n        }\n        return result.Trim();", "        string result =\
    \ \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        foreach (char c in chars) {\n            if (IsPrime(c.Length)) {\n \
    \               result += \" \" + c;\n            }\n        }\n        return\
    \ result.Trim();", "        string result = \"\";\n        foreach (string word\
    \ in sentence.Split(' '))\n        {\n            int length = word.Length;\n\
    \            bool isPrime = true;\n            int counter = 1;\n            while\
    \ (counter <= length)\n            {\n                if (length%counter == 0)\n\
    \                {\n                    isPrime = false;\n                   \
    \ break;\n                }\n                counter++;\n            }\n     \
    \       if (isPrime)\n            {\n                result += \" \" + word;\n\
    \            }\n        }\n        return result.Trim();", "        string result\
    \ = \"\";\n        string word = \"\";\n        string temp = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                temp =\
    \ word;\n                word = \"\";\n                isPrime = true;\n     \
    \           for (int i = 0; i < temp.Length; i++) {\n                    isPrime\
    \ = IsPrime(temp.Substring(0, i));\n                    if (!isPrime) {\n    \
    \                    break;\n                    }\n                }\n      \
    \          if (isPrime) {\n                    result += temp;\n             \
    \   }\n            }\n        }\n        return result;", "        string result\
    \ = \"\";\n        char[] chars = sentence.ToCharArray();\n        List<int> primes\
    \ = new List<int>();\n        foreach (char c in chars) {\n            int n =\
    \ Convert.ToInt32(c);\n            bool isPrime = true;\n            int i = 2;\n\
    \            while (i <= Math.Sqrt(n)) {\n                if (n % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n                i += 1;\n            }\n            if (isPrime) {\n\
    \                primes.Add(n);\n            }\n        }\n        foreach (int\
    \ prime in primes) {\n            result += \" \" + chars[prime];\n        }\n\
    \        return result.Trim();", "        string result = \"\";\n        string\
    \ word = \"\";\n        string temp = \"\";\n        string temp2 = \"\";\n  \
    \      bool isPrime = true;\n        int length = sentence.Length;\n        for\
    \ (int i = 0; i < length; i++)\n        {\n            word = sentence.Substring(i,\
    \ 1);\n            temp = word + \" \";\n            int count = 0;\n        \
    \    int count2 = 0;\n            while (temp != \"\")\n            {\n      \
    \          temp = temp.Substring(0, temp.Length - 1);\n                count++;\n\
    \            }\n            while (temp2 != \"\")\n            {\n           \
    \     temp2 = temp2.Substring(0, temp2.Length - 1);\n                count2++;\n\
    \            }\n            if (count % 2 == 0)\n            {\n             \
    \   isPrime = false;\n            }\n            if (count2 % 2 == 0)\n      \
    \      {\n                isPrime = false;\n            }\n            if (isPrime)\n\
    \            {\n                result += temp;\n            }\n        }\n  \
    \      return result;", "        string result = \"\";\n        char[] charArray\
    \ = sentence.ToCharArray();\n        List<int> primes = new List<int>();\n   \
    \     foreach (char c in charArray) {\n            int n = Convert.ToInt32(c);\n\
    \            primes.Add(n);\n        }\n        primes.Sort();\n        foreach\
    \ (int n in primes) {\n            if (n % 2 == 0) {\n                for (int\
    \ i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i == 0) {\n\
    \                        break;\n                    }\n                }\n  \
    \              if (i == Math.Sqrt(n)) {\n                    result += \" \" +\
    \ n;\n                }\n            }\n        }\n        return result.Trim();",
  "        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                if (words.Contains(word)) {\n             \
    \       result += \" \" + word;\n                } else {\n                  \
    \  words.Add(word);\n                }\n            }\n        }\n        string\
    \ newResult = result.Trim();\n        char[] newChars = newResult.ToCharArray();\n\
    \        HashSet<string> newWords = new HashSet<string>();\n        foreach (char\
    \ c in newChars) {\n            if (char.IsLetter(c)) {\n                string\
    \ word = c.ToString();\n                if (newWords.Contains(word)) {\n     \
    \               result += \" \" + word;\n                } else {\n          \
    \          newWords.Add(word);\n                }\n            }\n        }\n\
    \        return result.Trim();", "        char[] charArray = sentence.ToCharArray();\n\
    \        List<string> result = new List<string>();\n        foreach (char c in\
    \ charArray) {\n            int length = GetLength(c);\n            if (length\
    \ == 0)\n                continue;\n            bool isPrime = true;\n       \
    \     for (int i = 3; i <= Math.Sqrt(length); i += 2) {\n                if (length\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result.Add(c);\n            }\n        }\n        return string.Join(\" \"\
    , result.ToArray());", "        string result = \"\";\n        string word = \"\
    \";\n        string word2 = \"\";\n        string word3 = \"\";\n        string\
    \ word4 = \"\";\n        string word5 = \"\";\n        string word6 = \"\";\n\
    \        string word7 = \"\";\n        string word8 = \"\";\n        string word9\
    \ = \"\";\n        string word10 = \"\";\n        string word11 = \"\";\n    \
    \    string word12 = \"\";\n        string word13 = \"\";\n        string word14\
    \ = \"\";\n        string word15 = \"\";\n        string word16 = \"\";\n    \
    \    string word17 = \"\";\n        string word18 = \"\";\n        string word19\
    \ = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n    \
    \    string word22 = \"\";\n        string word23 = \"\";\n        string word24\
    \ = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n    \
    \    string word27 = \"\";\n        string word28 = \"\";\n        string word29\
    \ = \"\";\n        string word30 = \"\";\n        string word31 = \"\";\n    \
    \    string word32 = \"\";\n        string word33 = \"\";\n        string word34\
    \ = \"\";\n        string word35 = \"\";\n        string word36 = \"\";\n    \
    \    string word37 = \"\";\n        string word38 = \"\";\n        string word39\
    \ = \"\";\n        string word40 = \"\";\n        string word41 = \"\";\n    \
    \    string word42 = \"\";\n        string word43 = \"\";\n        string word44\
    \ = \"\";\n        string word45 = \"\";\n        string word46 = \"\";\n    \
    \    string word47 = \"\";\n        string word48 = \"\";\n        string word49\
    \ = \"\";\n        string word50 = \"\";\n        string word51 = \"\";\n    \
    \    string word52 = \"\";\n        string word53 = \"\";\n        string word54\
    \ = \"\";\n        string word55 = \"\";\n        string word56 = \"\";\n    \
    \    string word57 = \"\";\n        string word58 = \"\";\n        string word59\
    \ = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n    \
    \    string word62 = \"\";\n        string word63 = \"\";\n        string word64\
    \ = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n    \
    \    string word67 = \"\";\n        string word68 = \"\";\n        string word69\
    \ = \"\";\n        string word70 = \"\";\n        string word71 = \"\";\n    \
    \    string word72 = \"\";\n        string word73 = \"\";\n        string word74\
    \ = \"\";\n        string word75 = \"\";\n        string word76 = \"\";\n    \
    \    string word77 = \"\";\n        string word78 = \"\";\n        string word79\
    \ = \"\";\n        string word80 = \"\";\n        string word81 = \"\";\n    \
    \    string word82 = ", "        string result = \"\";\n        char[] chars =\
    \ sentence.ToCharArray();\n        Array.Sort(chars);\n        foreach (char c\
    \ in chars) {\n            if (IsPrimeNumber(c)) {\n                result +=\
    \ \" \" + c;\n            }\n        }\n        return result.Trim();"]
stop_tokens:
- "\n    }\n"
