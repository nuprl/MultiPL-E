name: HumanEval_9_rolling_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>\
  \ numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long max = 0;\n\
    \        long currentMax = 0;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxValue = numbers[0];\n        bool first = true;\n        foreach (long\
    \ number in numbers) {\n            if (first) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = currentMaxValue;\n\
    \                first = false;\n            } else {\n                if (number\
    \ > currentMax) {\n                    currentMax = number;\n                \
    \    currentMaxIndex = currentMaxValue;\n                }\n            }\n  \
    \      }\n        result.Add(currentMax);\n        currentMaxValue = currentMaxIndex;\n\
    \        first = true;\n        foreach (long number in numbers) {\n         \
    \   if (first) {\n                max = number;\n                currentMax =\
    \ number;\n                currentMaxIndex = currentMaxValue;\n              \
    \  first = false;\n            } else {\n                if (number > currentMax)\
    \ {\n                    currentMax = number;\n                    currentMaxIndex\
    \ = currentMaxValue;\n                }\n            }\n        }\n        result.Add(currentMax);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentNumber = number;\n\
    \            }\n            if (number == currentMax) {\n                currentNumber++;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.Add(currentNumber);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2\
    \ = 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentSum = 0;\n        long\
    \ currentSumOfSquares = 0;\n        long currentSumOfProducts = 0;\n        long\
    \ currentSumOfProductsOfSquares = 0;\n        long currentSumOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfSquares = 0;\n        long\
    \ currentSumOfProductsOfProductsOfProducts = 0;\n        long currentSumOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProducts = 0;\n\
    \        long currentSumOfProductsOfProductsOfProductsOfProductsOfSquares = 0;\n\
    \        long currentSumOfProductsOfProductsOfProductsOfProductsOfProducts = 0;\n\
    \        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProduct", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long current = numbers.First();\n\
    \        long sum = 0;\n        foreach (long n in numbers) {\n            sum\
    \ += n;\n            if (sum > max) {\n                max = sum;\n          \
    \  }\n            if (sum == current) {\n                result.Add(n);\n    \
    \        }\n            current = n;\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            currentMax = number;\n            currentMaxIndex\
    \ = 0;\n            while (currentMaxIndex < result.Count && currentMax < result[currentMaxIndex])\
    \ {\n                currentMax = result[currentMaxIndex];\n                currentMaxIndex++;\n\
    \            }\n            result.Insert(currentMaxIndex, number);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMax = maxValue;\n  \
    \      long currentSum = 0;\n        long currentCount = 0;\n        foreach (long\
    \ number in numbers) {\n            currentSum += number;\n            if (currentSum\
    \ > currentMax) {\n                currentMax = currentSum;\n                currentCount\
    \ = 1;\n            } else if (currentSum == currentMax) {\n                currentCount++;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n        foreach\
    \ (long number in numbers) {\n            currentNumber = number;\n          \
    \  currentMax = number;\n            while (currentNumber != 0) {\n          \
    \      currentMax = Math.Max(currentMax, currentNumber);\n                currentNumber\
    \ = currentNumber / 2;\n            }\n            result.Add(currentMax);\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Max();\n\
    \        long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();", "        List<long> result = new List<long>();\n        long\
    \ maxValue = numbers.Max();\n        long currentMax = maxValue;\n        long\
    \ currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2\
    \ = 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n   \
    \     long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n      \
    \  long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n   \
    \     long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n      \
    \  long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n   \
    \     long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n      \
    \  long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n   \
    \     long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n      \
    \  long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n   \
    \     long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n      \
    \  long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n   \
    \     long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n      \
    \  long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(currentMax", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentNumber = numbers.First();\n        foreach (long number\
    \ in numbers) {\n            if (number > currentNumber) {\n                currentMax\
    \ = currentNumber;\n                currentNumber = number;\n            }\n \
    \           else if (number == currentNumber) {\n                currentMax =\
    \ currentNumber;\n            }\n            else if (number < currentNumber)\
    \ {\n                currentMax = currentNumber;\n                currentNumber\
    \ = number;\n            }\n            else {\n                currentMax = currentNumber;\n\
    \                currentNumber = number;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long sum = 0;\n        long count = 0;\n        foreach (long\
    \ number in numbers) {\n            currentSum += number;\n            if (currentSum\
    \ > max) {\n                max = currentSum;\n                currentMax = number;\n\
    \            }\n            sum += number;\n            count++;\n        }\n\
    \        if (count > 0) {\n            currentMax = currentSum / count;\n    \
    \        result.Add(currentMax);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = numbers.First();\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                result.Add(currentMax);\n\
    \                max = currentMax;\n                currentMax = number;\n   \
    \         }\n            else {\n                max = Math.Max(max, number);\n\
    \                currentMax = Math.Max(currentMax, number);\n            }\n \
    \       }\n        result.Add(currentMax);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long currentMax\
    \ = 0;\n        long currentSum = 0;\n        long sum = 0;\n        long currentSum2\
    \ = 0;\n        long currentSum3 = 0;\n        long currentSum4 = 0;\n       \
    \ long currentSum5 = 0;\n        long currentSum6 = 0;\n        long currentSum7\
    \ = 0;\n        long currentSum8 = 0;\n        long currentSum9 = 0;\n       \
    \ long currentSum10 = 0;\n        long currentSum11 = 0;\n        long currentSum12\
    \ = 0;\n        long currentSum13 = 0;\n        long currentSum14 = 0;\n     \
    \   long currentSum15 = 0;\n        long currentSum16 = 0;\n        long currentSum17\
    \ = 0;\n        long currentSum18 = 0;\n        long currentSum19 = 0;\n     \
    \   long currentSum20 = 0;\n        long currentSum21 = 0;\n        long currentSum22\
    \ = 0;\n        long currentSum23 = 0;\n        long currentSum24 = 0;\n     \
    \   long currentSum25 = 0;\n        long currentSum26 = 0;\n        long currentSum27\
    \ = 0;\n        long currentSum28 = 0;\n        long currentSum29 = 0;\n     \
    \   long currentSum30 = 0;\n        long currentSum31 = 0;\n        long currentSum32\
    \ = 0;\n        long currentSum33 = 0;\n        long currentSum34 = 0;\n     \
    \   long currentSum35 = 0;\n        long currentSum36 = 0;\n        long currentSum37\
    \ = 0;\n        long currentSum38 = 0;\n        long currentSum39 = 0;\n     \
    \   long currentSum40 = 0;\n        long currentSum41 = 0;\n        long currentSum42\
    \ = 0;\n        long currentSum43 = 0;\n        long currentSum44 = 0;\n     \
    \   long currentSum45 = 0;\n        long currentSum46 = 0;\n        long currentSum47\
    \ = 0;\n        long currentSum48 = 0;\n        long currentSum49 = 0;\n     \
    \   long currentSum50 = 0;\n        long currentSum51 = 0;\n        long currentSum52\
    \ = 0;\n        long currentSum53 = 0;\n        long currentSum54 = 0;\n     \
    \   long currentSum55 = 0;\n        long currentSum56 = 0;\n        long currentSum57\
    \ = 0;\n        long currentSum58 = 0;\n        long currentSum59 = 0;\n     \
    \   long currentSum60 = 0;\n        long currentSum61 = 0;\n        long currentSum62\
    \ = 0;\n        long currentSum63 = 0;\n        long currentSum64 = 0;\n     \
    \   long currentSum65 = 0;\n        long currentSum66 = 0;\n        long currentSum67\
    \ = 0;\n        long currentSum68 = 0;\n        long currentSum69 = 0;\n     \
    \   long currentSum70 = 0;\n        ", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        bool isMax\
    \ = true;\n        bool isMaxIndex = true;\n        bool isMaxValue = true;\n\
    \        bool isMaxIndexValue = true;\n        bool isMaxIndexValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValue = true;\n      \
    \  bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValue = true;\n        bool\
    \ isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue = true;\n      \
    \  bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n        bool isMaxIndexValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValueAndMaxValue\
    \ = true;\n", "        List<long> result = new List<long>();\n        long max\
    \ = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n      \
    \  foreach (long number in numbers) {\n            if (number > currentMax) {\n\
    \                currentMax = number;\n                currentNumber = number;\n\
    \            }\n            else if (number == currentMax) {\n               \
    \ currentNumber++;\n            }\n            else {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentNumber = number;\n\
    \            }\n        }\n        result.Add(currentMax);\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexInResult = 0;\n        long currentMaxIndexInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResult = 0;\n        long\
    \ currentMaxIndexInResultInResultInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndex", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n\
    \        long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult",
  "        List<long> max = new List<long>();\n        long maxValue = numbers.First();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexValue = numbers.First();\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentMaxIndex = currentMaxIndexValue;\n       \
    \     }\n            currentMaxIndexValue = number;\n        }\n        max.Add(currentMax);\n\
    \        numbers.RemoveAt(currentMaxIndex);\n        if (numbers.Count > 0) {\n\
    \            RollingMax(numbers, max, currentMax);\n        }\n        return\
    \ max;", "        List<long> result = new List<long>();\n        long max = 0;\n\
    \        long currentMax = 0;\n        long currentNumber = 0;\n        foreach\
    \ (long number in numbers) {\n            currentNumber = number;\n          \
    \  currentMax = number;\n            while (currentNumber != 0) {\n          \
    \      currentMax = Math.Max(currentMax, currentNumber);\n                currentNumber\
    \ = currentNumber / 10;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        foreach (long number\
    \ in numbers) {\n            currentMax = Math.Max(currentMax, number);\n    \
    \        if (number > max) {\n                max = number;\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        long currentNumber2\
    \ = 0;\n        long currentNumber3 = 0;\n        long currentNumber4 = 0;\n \
    \       long currentNumber5 = 0;\n        long currentNumber6 = 0;\n        long\
    \ currentNumber7 = 0;\n        long currentNumber8 = 0;\n        long currentNumber9\
    \ = 0;\n        long currentNumber10 = 0;\n        long currentNumber11 = 0;\n\
    \        long currentNumber12 = 0;\n        long currentNumber13 = 0;\n      \
    \  long currentNumber14 = 0;\n        long currentNumber15 = 0;\n        long\
    \ currentNumber16 = 0;\n        long currentNumber17 = 0;\n        long currentNumber18\
    \ = 0;\n        long currentNumber19 = 0;\n        long currentNumber20 = 0;\n\
    \        long currentNumber21 = 0;\n        long currentNumber22 = 0;\n      \
    \  long currentNumber23 = 0;\n        long currentNumber24 = 0;\n        long\
    \ currentNumber25 = 0;\n        long currentNumber26 = 0;\n        long currentNumber27\
    \ = 0;\n        long currentNumber28 = 0;\n        long currentNumber29 = 0;\n\
    \        long currentNumber30 = 0;\n        long currentNumber31 = 0;\n      \
    \  long currentNumber32 = 0;\n        long currentNumber33 = 0;\n        long\
    \ currentNumber34 = 0;\n        long currentNumber35 = 0;\n        long currentNumber36\
    \ = 0;\n        long currentNumber37 = 0;\n        long currentNumber38 = 0;\n\
    \        long currentNumber39 = 0;\n        long currentNumber40 = 0;\n      \
    \  long currentNumber41 = 0;\n        long currentNumber42 = 0;\n        long\
    \ currentNumber43 = 0;\n        long currentNumber44 = 0;\n        long currentNumber45\
    \ = 0;\n        long currentNumber46 = 0;\n        long currentNumber47 = 0;\n\
    \        long currentNumber48 = 0;\n        long currentNumber49 = 0;\n      \
    \  long currentNumber50 = 0;\n        long currentNumber51 = 0;\n        long\
    \ currentNumber52 = 0;\n        long currentNumber53 = 0;\n        long currentNumber54\
    \ = 0;\n        long currentNumber55 = 0;\n        long currentNumber56 = 0;\n\
    \        long currentNumber57 = 0;\n        long currentNumber58 = 0;\n      \
    \  long currentNumber59 = 0;\n        long currentNumber60 = 0;\n        long\
    \ currentNumber61 = 0;\n        long currentNumber62 = 0;\n        long currentNumber63\
    \ = 0;\n        long currentNumber64 = 0;\n        long currentNumber65 = 0;\n\
    \        long currentNumber66 = 0;\n        long currentNumber67 = 0;\n      \
    \  long currentNumber68 = 0;\n        long currentNumber69 = 0;\n        long\
    \ currentNumber70 = 0;\n        long currentNumber71 = 0;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long cur = 0;\n \
    \       foreach (long n in numbers) {\n            if (n > max) {\n          \
    \      max = n;\n                cur = n;\n            }\n            else if\
    \ (n == max) {\n                cur += n;\n            }\n            result.Add(cur);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = numbers.Max();\n        long currentMax = max;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxValue = numbers.First();\n   \
    \     long currentMaxValueIndex = -1;\n        bool isMax = true;\n        bool\
    \ isMaxIndex = false;\n        bool isMaxValue = false;\n        bool isMaxValueIndex\
    \ = false;\n        bool isMaxIndexValue = false;\n        bool isMaxIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValue = false;\n        bool isMaxIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValue = false;\n      \
    \  bool isMaxIndexValueIndexValueIndexValueIndex = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValue\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndex =\
    \ false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = false;\n        bool isMaxIndexValueIndex", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            cur = n;\n            max = Math.Max(max,\
    \ cur);\n            result.Add(max);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max = numbers.First();\n\
    \        long current = numbers.First();\n        long previous = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > max) {\n\
    \                result.Add(max);\n                max = number;\n           \
    \ }\n            if (number > current) {\n                result.Add(current);\n\
    \                current = number;\n            }\n            if (number > previous)\
    \ {\n                result.Add(previous);\n                previous = number;\n\
    \            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                result.Add(max);\n           \
    \     max = number;\n                currentMax = number;\n                currentMaxIndex\
    \ = numbers.IndexOf(number);\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ foreach (long number in numbers) {\n            currentMax = Math.Max(currentMax,\
    \ number);\n            if (number > max) {\n                max = number;\n \
    \           }\n            result.Add(number);\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long maxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                maxIndex = result.Count;\n            }\n            result.Add(number);\n\
    \        }\n        result.RemoveAt(maxIndex);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndex = numbers.Count;\n        bool found = false;\n   \
    \     do {\n            currentMaxIndex--;\n            currentMax = numbers[currentMaxIndex];\n\
    \            found = false;\n            for (int i = currentMaxIndex; i >= 0;\
    \ i--) {\n                if (numbers[i] == currentMax) {\n                  \
    \  found = true;\n                    break;\n                }\n            }\n\
    \            if (!found) {\n                result.Add(currentMax);\n        \
    \    }\n        } while (currentMaxIndex > 0);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.Index", "        List<long> rollingMax\
    \ = new List<long>();\n        long rollingMaxValue = numbers.First();\n     \
    \   rollingMax.Add(rollingMaxValue);\n        foreach (long number in numbers)\
    \ {\n            if (number > rollingMaxValue) {\n                rollingMaxValue\
    \ = number;\n                rollingMax.Add(rollingMaxValue);\n            }\n\
    \        }\n        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = max;\n      \
    \          currentMaxIndex = numbers.IndexOf(number);\n            }\n       \
    \     else {\n                if (number == currentMax) {\n                  \
    \  currentMaxIndex++;\n                }\n                else {\n           \
    \         result.Add(max);\n                    max = number;\n              \
    \      currentMax = max;\n                    currentMaxIndex = numbers.IndexOf(number);\n\
    \                }\n            }\n        }\n        result.Add(max);\n     \
    \   return result;", "        List<long> max = new List<long>();\n        long\
    \ maxValue = numbers.Max();\n        long currentMax = maxValue;\n        long\
    \ currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n        long currentMaxIndex3\
    \ = 0;\n        long currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n\
    \        long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n    \
    \    long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long\
    \ currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12\
    \ = 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 =\
    \ 0;\n        long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n\
    \        long currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n  \
    \      long currentMaxIndex19 = 0;\n        long currentMaxIndex20 = 0;\n    \
    \    long currentMaxIndex21 = 0;\n        long currentMaxIndex22 = 0;\n      \
    \  long currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n        long\
    \ currentMaxIndex25 = 0;\n        long currentMaxIndex26 = 0;\n        long currentMaxIndex27\
    \ = 0;\n        long currentMaxIndex28 = 0;\n        long currentMaxIndex29 =\
    \ 0;\n        long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n\
    \        long currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n  \
    \      long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n    \
    \    long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n      \
    \  long currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long\
    \ currentMaxIndex40 = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42\
    \ = 0;\n        long currentMaxIndex43 = 0;\n        long currentMaxIndex44 =\
    \ 0;\n        long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n\
    \        long currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n  \
    \      long currentMaxIndex49 = 0;\n        long currentMaxIndex50 = 0;\n    \
    \    long currentMaxIndex51 = 0;\n        long currentMaxIndex52 = 0;\n      \
    \  long currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n        long\
    \ currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n        long currentMaxIndex57\
    \ = 0;\n        long currentMaxIndex58 = 0;\n        long currentMaxIndex59 =\
    \ 0;\n        long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n\
    \        long current", "        List<long> result = new List<long>();\n     \
    \   long max = 0;\n        long currentMax = 0;\n        long currentNumber =\
    \ 0;\n        foreach (long number in numbers) {\n            currentNumber =\
    \ number;\n            currentMax = number;\n            while (currentNumber\
    \ > currentMax) {\n                currentMax = currentNumber;\n             \
    \   currentNumber = numbers.Where(n => n > currentMax).Max();\n            }\n\
    \            result.Add(currentMax);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentSum = 0;\n        long\
    \ currentSumOfSquares = 0;\n        long currentSumOfSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferences = 0;\n        long currentSumOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferences = 0;\n        long\
    \ currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSum", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber > 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber--;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n  \
    \      foreach (long number in numbers) {\n            currentSum = currentSum\
    \ + number;\n            currentSumOfSquares = currentSumOfSquares + number *\
    \ number;\n            if (currentSumOfSquares > currentMax * currentMax) {\n\
    \                currentMax = currentSumOfSquares;\n            }\n          \
    \  result.Add(currentMax);\n        }\n        return result;", "        var max\
    \ = new List<long>();\n        var rollingMax = new List<long>();\n        var\
    \ rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n     \
    \   max.Add(rollingMaxValue);\n        rollingMax.Add(rollingMaxValue);\n    \
    \    rollingMaxIndex++;\n        foreach (var number in numbers) {\n         \
    \   if (number > rollingMaxValue) {\n                rollingMaxValue = number;\n\
    \                rollingMax.Add(rollingMaxValue);\n                rollingMaxIndex++;\n\
    \            }\n            else {\n                rollingMaxValue = rollingMax[rollingMaxIndex];\n\
    \                rollingMaxIndex++;\n            }\n            max.Add(rollingMaxValue);\n\
    \        }\n        return max;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        bool isMax = true;\n        foreach (long number in numbers) {\n\
    \            if (number > max) {\n                max = number;\n            \
    \    currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else if (number < max) {\n                isMax = false;\n\
    \            }\n            if (isMax) {\n                result.Add(currentMax);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n   \
    \     long currentMax = numbers.First();\n        long currentMaxIndex = numbers.First();\n\
    \        long currentMaxValue = numbers.First();\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentMaxIndex = currentMaxIndex;\n            \
    \    currentMaxValue = currentMaxValue;\n            }\n            if (number\
    \ > max) {\n                max = number;\n                maxIndex = currentMaxIndex;\n\
    \            }\n            currentMaxValue = currentMaxValue;\n        }\n  \
    \      result.Add(max);\n        result.Add(maxIndex);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = numbers.First();\n        long rollingMax = current;\n        foreach\
    \ (long number in numbers) {\n            if (number > rollingMax) {\n       \
    \         rollingMax = number;\n            }\n            if (number > max) {\n\
    \                max = number;\n            }\n        }\n        result.Add(rollingMax);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long maxIndex = -1;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                maxIndex = result.Count;\n            }\n            result.Add(number);\n\
    \        }\n        result.RemoveAt(maxIndex);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentSum = 0;\n        long\
    \ currentCount = 0;\n        foreach (long number in numbers) {\n            currentSum\
    \ += number;\n            if (currentSum > currentMax) {\n                currentMax\
    \ = currentSum;\n                currentCount = 1;\n            }\n          \
    \  else if (currentSum == currentMax) {\n                currentCount++;\n   \
    \         }\n            else {\n                currentCount = 1;\n         \
    \       currentMax = currentSum;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n            }\n            else if (number\
    \ == max) {\n                currentMax = currentMax + number;\n            }\n\
    \            else {\n                result.Add(currentMax);\n               \
    \ max = number;\n                currentMax = number;\n            }\n       \
    \ }\n        result.Add(currentMax);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n  \
    \      long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOf",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long\
    \ currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6\
    \ = 0;\n        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n\
    \        long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n   \
    \     long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n     \
    \   long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n       \
    \ long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long\
    \ currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19\
    \ = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 =\
    \ 0;\n        long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n\
    \        long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n  \
    \      long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n    \
    \    long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n      \
    \  long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n        long\
    \ currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34\
    \ = 0;\n        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 =\
    \ 0;\n        long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n\
    \        long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n  \
    \      long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n    \
    \    long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n      \
    \  long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long\
    \ currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49\
    \ = 0;\n        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 =\
    \ 0;\n        long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n\
    \        long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n  \
    \      long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n    \
    \    long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n      \
    \  long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n        long\
    \ current", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long current = numbers.First();\n        foreach (long number in\
    \ numbers) {\n            if (number > current) {\n                max = number;\n\
    \            } else {\n                max = Math.Max(max, number);\n        \
    \    }\n            result.Add(max);\n            current = number;\n        }\n\
    \        return result;", "        List<long> max = new List<long>();\n      \
    \  long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Count;\n\
    \        long currentMaxIndexValue2 = numbers.Count;\n        long currentMaxIndexValue3\
    \ = numbers.Count;\n        long currentMaxIndexValue4 = numbers.Count;\n    \
    \    long currentMaxIndexValue5 = numbers.Count;\n        long currentMaxIndexValue6\
    \ = numbers.Count;\n        long currentMaxIndexValue7 = numbers.Count;\n    \
    \    long currentMaxIndexValue8 = numbers.Count;\n        long currentMaxIndexValue9\
    \ = numbers.Count;\n        long currentMaxIndexValue10 = numbers.Count;\n   \
    \     long currentMaxIndexValue11 = numbers.Count;\n        long currentMaxIndexValue12\
    \ = numbers.Count;\n        long currentMaxIndexValue13 = numbers.Count;\n   \
    \     long currentMaxIndexValue14 = numbers.Count;\n        long currentMaxIndexValue15\
    \ = numbers.Count;\n        long currentMaxIndexValue16 = numbers.Count;\n   \
    \     long currentMaxIndexValue17 = numbers.Count;\n        long currentMaxIndexValue18\
    \ = numbers.Count;\n        long currentMaxIndexValue19 = numbers.Count;\n   \
    \     long currentMaxIndexValue20 = numbers.Count;\n        long currentMaxIndexValue21\
    \ = numbers.Count;\n        long currentMaxIndexValue22 = numbers.Count;\n   \
    \     long currentMaxIndexValue23 = numbers.Count;\n        long currentMaxIndexValue24\
    \ = numbers.Count;\n        long currentMaxIndexValue25 = numbers.Count;\n   \
    \     long currentMaxIndexValue26 = numbers.Count;\n        long currentMaxIndexValue27\
    \ = numbers.Count;\n        long currentMaxIndexValue28 = numbers.Count;\n   \
    \     long currentMaxIndexValue29 = numbers.Count;\n        long currentMaxIndexValue30\
    \ = numbers.Count;\n        long currentMaxIndexValue31 = numbers.Count;\n   \
    \     long currentMaxIndexValue32 = numbers.Count;\n        long currentMaxIndexValue33\
    \ = numbers.Count;\n        long currentMaxIndexValue34 = numbers.Count;\n   \
    \     long currentMaxIndexValue35 = numbers.Count;\n        long currentMaxIndexValue36\
    \ = numbers.Count;\n        long currentMaxIndexValue37 = numbers.Count;\n   \
    \     long currentMaxIndexValue38 = numbers.Count;\n        long currentMaxIndexValue39\
    \ = numbers.Count;\n        long currentMaxIndexValue40 = numbers.Count;\n   \
    \     long currentMaxIndexValue41 = numbers.Count;\n", "        List<long> result\
    \ = new List<long>();\n        long max = numbers.Max();\n        long maxIndex\
    \ = -1;\n        long currentMax = max;\n        long currentIndex = -1;\n   \
    \     bool isMax = true;\n        foreach (long number in numbers) {\n       \
    \     if (number > currentMax) {\n                currentMax = number;\n     \
    \           currentIndex = -1;\n            }\n            if (number == currentMax)\
    \ {\n                currentIndex++;\n            }\n            if (currentIndex\
    \ == maxIndex) {\n                isMax = true;\n            }\n            if\
    \ (currentIndex != maxIndex) {\n                isMax = false;\n            }\n\
    \            if (isMax) {\n                result.Add(number);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n     \
    \   long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long\
    \ currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7\
    \ = 0;\n        long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n\
    \        long currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n  \
    \      long currentMaxIndex12 = 0;\n        long currentMaxIndex13 = 0;\n    \
    \    long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n      \
    \  long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n        long\
    \ currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n        long currentMaxIndex20\
    \ = 0;\n        long currentMaxIndex21 = 0;\n        long currentMaxIndex22 =\
    \ 0;\n        long currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n\
    \        long currentMaxIndex25 = 0;\n        long currentMaxIndex26 = 0;\n  \
    \      long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n    \
    \    long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n      \
    \  long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long\
    \ currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35\
    \ = 0;\n        long currentMaxIndex36 = 0;\n        long currentMaxIndex37 =\
    \ 0;\n        long currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n\
    \        long currentMaxIndex40 = 0;\n        long currentMaxIndex41 = 0;\n  \
    \      long currentMaxIndex42 = 0;\n        long currentMaxIndex43 = 0;\n    \
    \    long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n      \
    \  long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n        long\
    \ currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n        long currentMaxIndex50\
    \ = 0;\n        long currentMaxIndex51 = 0;\n        long currentMaxIndex52 =\
    \ 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n\
    \        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n  \
    \      long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n    \
    \    long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n      \
    \  long currentMaxIndex61 = 0;\n        long current", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n            }\n            if (number\
    \ > max) {\n                max = number;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n            }\n            result.Insert(currentMaxIndex,\
    \ currentMax);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        foreach (long number in numbers) {\n   \
    \         currentSum += number;\n            if (currentSum > max) {\n       \
    \         max = currentSum;\n                currentMax = number;\n          \
    \  }\n        }\n        result.Add(currentMax);\n        return result;", " \
    \       var rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n\
    \        var rollingMaxValue = numbers.First();\n        var rollingMaxTimes =\
    \ 0;\n        var rollingMaxTimesMax = numbers.Count;\n        var rollingMaxTimesMaxIndex\
    \ = 0;\n        var rollingMaxTimesMaxValue = numbers.First();\n        var rollingMaxTimesMaxTimes\
    \ = 0;\n        var rollingMaxTimesMaxTimesMax = numbers.Count;\n        var rollingMaxTimesMaxTimesMaxIndex\
    \ = 0;\n        var rollingMaxTimesMaxTimesMaxValue = numbers.First();\n     \
    \   var rollingMaxTimesMaxTimesMaxTimes = 0;\n        var rollingMaxTimesMaxTimesMaxTimesMax\
    \ = numbers.Count;\n        var rollingMaxTimesMaxTimesMaxTimesMaxIndex = 0;\n\
    \        var rollingMaxTimesMaxTimesMaxTimesMaxValue = numbers.First();\n    \
    \    var rollingMaxTimesMaxTimesMaxTimesMaxTimes = 0;\n        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMax\
    \ = numbers.Count;\n        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxIndex\
    \ = 0;\n        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxValue = numbers.First();\n\
    \        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimes = 0;\n        var\
    \ rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMax = numbers.Count;\n      \
    \  var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxIndex = 0;\n        var\
    \ rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxValue = numbers.First();\n\
    \        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxTimes = 0;\n  \
    \      var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMax = numbers.Count;\n\
    \        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxIndex =\
    \ 0;\n        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxValue\
    \ = numbers.First();\n        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxTimes\
    \ = 0;\n        var rollingMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMaxTimesMax\
    \ = numbers.Count;\n        var rollingMaxTimes", "        List<long> rollingMax\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        rollingMax.Add(numbers[0]);\n        foreach (long number in numbers)\
    \ {\n            currentMaxValue = Math.Max(currentMaxValue, number);\n      \
    \      if (currentMaxValue > max) {\n                max = currentMaxValue;\n\
    \                currentMax = currentMaxIndex;\n            }\n            currentMaxIndex++;\n\
    \        }\n        rollingMax.Add(max);\n        return rollingMax;", "     \
    \   List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber > currentMax) {\n                currentMax\
    \ = currentNumber;\n                currentNumber = numbers.TakeWhile(n => n >\
    \ currentMax).Last();\n            }\n            result.Add(currentMax);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n            }\n            else if (number\
    \ == max) {\n                currentMax++;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long currentMax =\
    \ numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMax);\n \
    \       foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                maxIndex = currentMaxIndex;\n\
    \            }\n            if (number == currentMax) {\n                result.Add(number);\n\
    \            }\n        }\n        if (result.Count > 0) {\n            max =\
    \ result.Max();\n            maxIndex = result.IndexOf(max);\n        }\n    \
    \    return result.Take(maxIndex + 1).ToList();", "        List<long> result =\
    \ new List<long>();\n        long max = 0;\n        long current = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > current)\
    \ {\n                max = number;\n            }\n            else {\n      \
    \          max = Math.Max(max, number);\n            }\n            result.Add(max);\n\
    \            current = number;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentNumber = 0;\n        long currentSum = 0;\n        long\
    \ currentSumOfSquares = 0;\n        long currentSumOfCubes = 0;\n        foreach\
    \ (long number in numbers) {\n            currentNumber = number;\n          \
    \  currentSum = 0;\n            currentSumOfSquares = 0;\n            currentSumOfCubes\
    \ = 0;\n            for (long i = 1; i < currentNumber; i++) {\n             \
    \   currentSum += currentNumber;\n                currentSumOfSquares += currentNumber\
    \ * currentNumber;\n                currentSumOfCubes += currentNumber * currentNumber\
    \ * currentNumber;\n            }\n            if (currentSumOfSquares > currentSumOfCubes)\
    \ {\n                max = currentSumOfSquares;\n            } else {\n      \
    \          max = currentSumOfCubes;\n            }\n            result.Add(max);\n\
    \            currentMax = max;\n            currentSum = 0;\n            currentSumOfSquares\
    \ = 0;\n            currentSumOfCubes = 0;\n        }\n        return result;",
  "        var rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n\
    \        var rollingMaxValue = numbers.First();\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex\
    \ = rollingMaxIndex;\n        var rollingMaxMaxValue = rollingMaxValue;\n    \
    \    var rollingMaxMaxIndex = rollingMaxIndex;\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex\
    \ = rollingMaxIndex;\n        var rollingMaxMaxValue = rollingMaxValue;\n    \
    \    var rollingMaxMaxIndex = rollingMaxIndex;\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex\
    \ = rollingMaxIndex;\n        var rollingMaxMaxValue = rollingMaxValue;\n    \
    \    var rollingMaxMaxIndex = rollingMaxIndex;\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex\
    \ = rollingMaxIndex;\n        var rollingMaxMaxValue = rollingMaxValue;\n    \
    \    var rollingMaxMaxIndex = rollingMaxIndex;\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex\
    \ = rollingMaxIndex;\n        var rollingMaxMaxValue = rollingMaxValue;\n    \
    \    var rollingMaxMaxIndex = rollingMaxIndex;\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex\
    \ = rollingMaxIndex;\n        var rollingMaxMaxValue = rollingMaxValue;\n    \
    \    var rollingMaxMaxIndex = rollingMaxIndex;\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    var rollingMaxMaxValue = rollingMaxValue;\n        var rollingMaxMaxIndex\
    \ = rollingMaxIndex;\n        var rollingMaxMaxValue = rollingMaxValue;\n    \
    \    var rollingMaxMaxIndex = rollingMaxIndex;\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    var rolling", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long curMax = 0;\n        long curMaxIndex = 0;\n        long\
    \ curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMax", "        List<long> result = new List<long>();\n      \
    \  long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Last();\n\
    \        long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();", "        List<long> result = new List<long>();\n       \
    \ long max = 0;\n        long currentMax = 0;\n        foreach (long number in\
    \ numbers) {\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n            }\n            else if (number\
    \ == max) {\n                currentMax = currentMax + number;\n            }\n\
    \            else {\n                result.Add(currentMax);\n               \
    \ max = number;\n                currentMax = number;\n            }\n       \
    \ }\n        result.Add(currentMax);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n      \
    \  long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n \
    \       long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueValue = numbers.First();\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = currentMaxValueIndex;\n\
    \                currentMaxValueIndex = currentMaxValueIndex;\n              \
    \  currentMaxValueValue = currentMaxValue;\n            }\n            if (number\
    \ > max) {\n                max = number;\n                currentMax = currentMaxValue;\n\
    \                currentMaxIndex = currentMaxValueIndex;\n            }\n    \
    \        if (number == currentMaxValue) {\n                currentMaxValueIndex++;\n\
    \            }\n        }\n        result.Add(max);\n        result.Add(currentMax);\n\
    \        result.Add(currentMaxIndex);\n        result.Add(currentMaxValueIndex);\n\
    \        result.Add(currentMaxValueValue);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long currentMax\
    \ = 0;\n        long currentNumber = 0;\n        long currentSum = 0;\n      \
    \  long currentSumOfSquares = 0;\n        long currentSumOfSquareRoots = 0;\n\
    \        long currentSumOfSquareRootOfSquares = 0;\n        long currentSumOfSquareRootOfSquareRoots\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquares = 0;\n      \
    \  long currentSumOfSquareRootOfSquareRootOfSquareRoots = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSum", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares2\
    \ = 0;\n        long currentSumOfSquares3 = 0;\n        long currentSumOfSquares4\
    \ = 0;\n        long currentSumOfSquares5 = 0;\n        long currentSumOfSquares6\
    \ = 0;\n        long currentSumOfSquares7 = 0;\n        long currentSumOfSquares8\
    \ = 0;\n        long currentSumOfSquares9 = 0;\n        long currentSumOfSquares10\
    \ = 0;\n        long currentSumOfSquares11 = 0;\n        long currentSumOfSquares12\
    \ = 0;\n        long currentSumOfSquares13 = 0;\n        long currentSumOfSquares14\
    \ = 0;\n        long currentSumOfSquares15 = 0;\n        long currentSumOfSquares16\
    \ = 0;\n        long currentSumOfSquares17 = 0;\n        long currentSumOfSquares18\
    \ = 0;\n        long currentSumOfSquares19 = 0;\n        long currentSumOfSquares20\
    \ = 0;\n        long currentSumOfSquares21 = 0;\n        long currentSumOfSquares22\
    \ = 0;\n        long currentSumOfSquares23 = 0;\n        long currentSumOfSquares24\
    \ = 0;\n        long currentSumOfSquares25 = 0;\n        long currentSumOfSquares26\
    \ = 0;\n        long currentSumOfSquares27 = 0;\n        long currentSumOfSquares28\
    \ = 0;\n        long currentSumOfSquares29 = 0;\n        long currentSumOfSquares30\
    \ = 0;\n        long currentSumOfSquares31 = 0;\n        long currentSumOfSquares32\
    \ = 0;\n        long currentSumOfSquares33 = 0;\n        long currentSumOfSquares34\
    \ = 0;\n        long currentSumOfSquares35 = 0;\n        long currentSumOfSquares36\
    \ = 0;\n        long currentSumOfSquares37 = 0;\n        long currentSumOfSquares38\
    \ = 0;\n        long currentSumOfSquares39 = 0;\n        long currentSumOfSquares40\
    \ = 0;\n        long currentSumOfSquares41 = 0;\n        long currentSumOfSquares42\
    \ = 0;\n        long currentSumOfSquares43 = 0;\n        long currentSumOfSquares44\
    \ = 0;\n        long currentSumOfSquares45 = 0;\n        long currentSumOfSquares46\
    \ = 0;\n        long currentSumOfSquares47 = 0;\n        long currentSumOfSquares48\
    \ = 0;\n        long currentSumOfSquares49 = 0;\n        ", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n  \
    \      foreach (long number in numbers) {\n            currentSum += number;\n\
    \            currentSumOfSquares += number * number;\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                currentMax = currentSum;\n   \
    \         }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> rollingMax = new List<long>();\n        long rollingMaxElement\
    \ = numbers.Max();\n        long rollingMaxIndex = 0;\n        long rollingMaxIndexCount\
    \ = 0;\n        long rollingMaxIndexCountMax = numbers.Count - 1;\n        long\
    \ rollingMaxIndexCountMin = numbers.Count - 2;\n        long rollingMaxIndexCountMin2\
    \ = numbers.Count - 3;\n        long rollingMaxIndexCountMin3 = numbers.Count\
    \ - 4;\n        long rollingMaxIndexCountMin4 = numbers.Count - 5;\n        long\
    \ rollingMaxIndexCountMin5 = numbers.Count - 6;\n        long rollingMaxIndexCountMin6\
    \ = numbers.Count - 7;\n        long rollingMaxIndexCountMin7 = numbers.Count\
    \ - 8;\n        long rollingMaxIndexCountMin8 = numbers.Count - 9;\n        long\
    \ rollingMaxIndexCountMin9 = numbers.Count - 10;\n        long rollingMaxIndexCountMin10\
    \ = numbers.Count - 11;\n        long rollingMaxIndexCountMin11 = numbers.Count\
    \ - 12;\n        long rollingMaxIndexCountMin12 = numbers.Count - 13;\n      \
    \  long rollingMaxIndexCountMin13 = numbers.Count - 14;\n        long rollingMaxIndexCountMin14\
    \ = numbers.Count - 15;\n        long rollingMaxIndexCountMin15 = numbers.Count\
    \ - 16;\n        long rollingMaxIndexCountMin16 = numbers.Count - 17;\n      \
    \  long rollingMaxIndexCountMin17 = numbers.Count - 18;\n        long rollingMaxIndexCountMin18\
    \ = numbers.Count - 19;\n        long rollingMaxIndexCountMin19 = numbers.Count\
    \ - 20;\n        long rollingMaxIndexCountMin20 = numbers.Count - 21;\n      \
    \  long rollingMaxIndexCountMin21 = numbers.Count - 22;\n        long rollingMaxIndexCountMin22\
    \ = numbers.Count - 23;\n        long rollingMaxIndexCountMin23 = numbers.Count\
    \ - 24;\n        long rollingMaxIndexCountMin24 = numbers.Count - 25;\n      \
    \  long rollingMaxIndexCountMin25 = numbers.Count - 26;\n        long rollingMaxIndexCountMin26\
    \ = numbers.Count - 27;\n        long rollingMaxIndexCountMin27 = numbers.Count\
    \ - 28;\n        long rollingMaxIndexCountMin28 = numbers.Count - 29;\n      \
    \  long rollingMaxIndexCountMin29 = numbers.Count - 30;\n        long rollingMaxIndexCountMin30\
    \ = numbers.Count - 31;\n        long rollingMaxIndex", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n   \
    \     long currentMax = numbers.First();\n        long currentMaxIndex = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number == currentMax) {\n                currentMaxIndex++;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                maxIndex = currentMaxIndex;\n            }\n        }\n     \
    \   result.Add(max);\n        result.Add(maxIndex);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = numbers.First();\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.Add(number);\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentNumber = number;\n\
    \            }\n            else if (number == currentMax) {\n               \
    \ currentNumber++;\n            }\n            else {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentNumber = number;\n\
    \            }\n        }\n        result.Add(currentMax);\n        return result;",
  "        List<long> rollingMax = new List<long>();\n        long max = 0;\n    \
    \    long currentMax = 0;\n        long currentNumber = 0;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfCubes\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n  \
    \      foreach (long number in numbers) {\n            if (number > currentNumber)\
    \ {\n                currentMax = currentNumber;\n                currentNumber\
    \ = number;\n            }\n            if (number > max) {\n                max\
    \ = number;\n            }\n            result.Add(number);\n        }\n     \
    \   result.Add(max);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long current = numbers.First();\n\
    \        long previous = numbers.First();\n        foreach (long number in numbers)\
    \ {\n            if (number > current) {\n                max = Math.Max(max,\
    \ current);\n                result.Add(current);\n                current = number;\n\
    \            }\n            previous = current;\n            current = number;\n\
    \        }\n        result.Add(Math.Max(max, current));\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndex = numbers.Count;\n        long currentMaxValue = numbers.Last();\n\
    \        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex =\
    \ numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n       \
    \ long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long currentMaxValueIndex\
    \ = numbers.Count;\n        long currentMaxValueIndex = numbers.Count;\n     \
    \   long currentMaxValueIndex = numbers.Count;\n        long current", "     \
    \   List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ curMax = 0;\n        long curMaxIndex = 0;\n        long curMaxValue = numbers[0];\n\
    \        long curMaxIndex = numbers.Count;\n        foreach (long number in numbers)\
    \ {\n            if (number > curMaxValue) {\n                max = number;\n\
    \                curMaxValue = number;\n                curMaxIndex = curMaxIndex;\n\
    \            }\n            if (number == curMaxValue) {\n                curMaxIndex++;\n\
    \            }\n            if (curMaxIndex == curMaxIndex) {\n              \
    \  result.Add(max);\n                curMaxValue = max;\n                curMaxIndex\
    \ = curMaxIndex;\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long maxIndex\
    \ = 0;\n        long currentMax = numbers.First();\n        long currentMaxIndex\
    \ = numbers.First();\n        foreach (long number in numbers) {\n           \
    \ if (number > currentMax) {\n                currentMax = number;\n         \
    \       currentMaxIndex = currentMaxIndex;\n            }\n            if (number\
    \ == currentMax) {\n                result.Add(number);\n            }\n     \
    \       if (number > max) {\n                max = number;\n                maxIndex\
    \ = currentMaxIndex;\n            }\n        }\n        result.Add(max);\n   \
    \     result.Add(maxIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            currentNumber = number;\n            currentMax = number;\n     \
    \       while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ cur = 0;\n        foreach (long n in numbers) {\n            if (n > max) {\n\
    \                max = n;\n                cur = n;\n            }\n         \
    \   if (n == max) {\n                result.Add(cur);\n            }\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        foreach (long number in numbers) {\n  \
    \          currentSum += number;\n            if (currentSum > currentMax) {\n\
    \                currentMax = currentSum;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        bool first = true;\n        foreach (long number in numbers) {\n\
    \            if (first) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \            first = false;\n            } else {\n                if (number\
    \ > max) {\n                    max = number;\n                    currentMax\
    \ = number;\n                    currentMaxIndex = numbers.IndexOf(number);\n\
    \                }\n            }\n        }\n        result.Add(max);\n     \
    \   foreach (long number in numbers) {\n            if (number > currentMax) {\n\
    \                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n        }\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        List<long> max = new List<long>();\n      \
    \  long maxValue = numbers.First();\n        long currentMaxValue = maxValue;\n\
    \        foreach (long number in numbers) {\n            if (number > maxValue)\
    \ {\n                max.Add(currentMaxValue);\n                currentMaxValue\
    \ = number;\n            }\n        }\n        max.Add(currentMaxValue);\n   \
    \     return max;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        foreach (long number in numbers)\
    \ {\n            currentMax = number;\n            max = Math.Max(max, currentMax);\n\
    \            result.Add(currentMax);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ maxIndex = 0;\n        long currentMax = numbers.First();\n        long currentMaxIndex\
    \ = numbers.First();\n        foreach (long number in numbers) {\n           \
    \ if (number > currentMax) {\n                currentMax = number;\n         \
    \       currentMaxIndex = currentMaxIndex;\n            }\n            if (number\
    \ > max) {\n                max = number;\n                maxIndex = currentMaxIndex;\n\
    \            }\n            currentMaxIndex++;\n        }\n        result.Add(max);\n\
    \        result.Add(maxIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long curMax = 0;\n     \
    \   long curMaxIndex = 0;\n        foreach (long n in numbers) {\n           \
    \ if (n == max) {\n                result.Add(n);\n                curMaxIndex\
    \ = result.Count - 1;\n            } else {\n                if (n > max) {\n\
    \                    max = n;\n                    curMax = max;\n           \
    \         curMaxIndex = result.Count - 1;\n                } else {\n        \
    \            result.Add(n);\n                }\n            }\n        }\n   \
    \     if (curMaxIndex == result.Count - 1) {\n            result.Add(max);\n \
    \       }\n        return result;", "        List<long> rollingMax = new List<long>();\n\
    \        long rollingMaxElement = numbers.First();\n        long rollingMaxIndex\
    \ = 0;\n        long rollingMaxValue = numbers.First();\n        foreach (long\
    \ number in numbers) {\n            if (number > rollingMaxElement) {\n      \
    \          rollingMax.Add(rollingMaxValue);\n                rollingMaxElement\
    \ = number;\n                rollingMaxIndex = 0;\n                rollingMaxValue\
    \ = number;\n            } else if (number == rollingMaxElement) {\n         \
    \       rollingMaxIndex++;\n                rollingMaxValue = number;\n      \
    \      }\n        }\n        rollingMax.Add(rollingMaxValue);\n        return\
    \ rollingMax;", "        var result = new List<long>();\n        long max = 0;\n\
    \        long currentMax = 0;\n        long currentMaxIndex = 0;\n        foreach\
    \ (var number in numbers) {\n            if (number > max) {\n               \
    \ max = number;\n                currentMax = number;\n                currentMaxIndex\
    \ = numbers.IndexOf(number);\n            }\n            else if (number == max)\
    \ {\n                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else if (number < max) {\n                if (currentMaxIndex\
    \ == numbers.IndexOf(max)) {\n                    currentMax = number;\n     \
    \               currentMaxIndex = numbers.IndexOf(number);\n                }\n\
    \                else {\n                    result.Add(max);\n              \
    \      max = number;\n                    currentMax = number;\n             \
    \       currentMaxIndex = numbers.IndexOf(number);\n                }\n      \
    \      }\n        }\n        result.Add(max);\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexInResult = -1;\n        bool isMaxValueFound = false;\n\
    \        bool isMaxValueFoundInResult = false;\n        long currentMaxIndexInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResult = -1;\n        long\
    \ currentMaxIndexInResultInResultInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentSum = 0;\n        long\
    \ currentSumOfSquares = 0;\n        long currentSumOfSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferences = 0;\n        long currentSumOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferences = 0;\n        long\
    \ currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSum", "        List<long> max = new List<long>();\n\
    \        long maxNumber = 0;\n        long currentNumber = 0;\n        long currentMax\
    \ = 0;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n\
    \        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n    \
    \    long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n        long\
    \ currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long currentMaxIndex9\
    \ = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11 =\
    \ 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 = 0;\n\
    \        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n  \
    \      long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n    \
    \    long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n      \
    \  long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n        long\
    \ currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long currentMaxIndex24\
    \ = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26 =\
    \ 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n\
    \        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n  \
    \      long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n    \
    \    long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n      \
    \  long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n        long\
    \ currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long currentMaxIndex39\
    \ = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41 =\
    \ 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 = 0;\n\
    \        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n  \
    \      long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n    \
    \    long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n      \
    \  long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long\
    \ currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54\
    \ = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 =\
    \ 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n\
    \        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n  \
    \      long currentMaxIndex61 = 0;\n        ", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                currentMax = currentMax * numbers.IndexOf(number)\
    \ + number;\n            }\n            result.Add(currentMax);\n        }\n \
    \       return result;", "        List<long> rollingMax = new List<long>();\n\
    \        long rollingMaxValue = numbers.First();\n        rollingMax.Add(rollingMaxValue);\n\
    \        foreach (long number in numbers) {\n            if (number > rollingMaxValue)\
    \ {\n                rollingMaxValue = number;\n            }\n            rollingMax.Add(rollingMaxValue);\n\
    \        }\n        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       bool isMax = true;\n        foreach (long number in numbers) {\n     \
    \       currentMaxIndex++;\n            currentMaxIndexValue = currentMaxIndex;\n\
    \            currentMax = number;\n            isMax = number == maxValue;\n \
    \           if (isMax) {\n                result.Add(currentMax);\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfProducts = 0;\n        long currentSumOfProductsOfSquares =\
    \ 0;\n        long currentSumOfProductsOfProducts = 0;\n        long currentSumOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProducts = 0;\n        long\
    \ currentSumOfProductsOfProductsOfProductsOfSquares = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProduct", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n       \
    \ long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 = 0;\n \
    \       long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6 =\
    \ 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.Index", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            currentNumber = number;\n            currentMax = number;\n     \
    \       while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ maxIndex = 0;\n        long currentMax = 0;\n        long currentMaxIndex =\
    \ 0;\n        long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n\
    \        long currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n    \
    \    long currentMaxIndex6 = 0;\n        long currentMaxIndex7 = 0;\n        long\
    \ currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n        long currentMaxIndex10\
    \ = 0;\n        long currentMaxIndex11 = 0;\n        long currentMaxIndex12 =\
    \ 0;\n        long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n\
    \        long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n  \
    \      long currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n    \
    \    long currentMaxIndex19 = 0;\n        long currentMaxIndex20 = 0;\n      \
    \  long currentMaxIndex21 = 0;\n        long currentMaxIndex22 = 0;\n        long\
    \ currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n        long currentMaxIndex25\
    \ = 0;\n        long currentMaxIndex26 = 0;\n        long currentMaxIndex27 =\
    \ 0;\n        long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n\
    \        long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n  \
    \      long currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n    \
    \    long currentMaxIndex34 = 0;\n        long currentMaxIndex35 = 0;\n      \
    \  long currentMaxIndex36 = 0;\n        long currentMaxIndex37 = 0;\n        long\
    \ currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n        long currentMaxIndex40\
    \ = 0;\n        long currentMaxIndex41 = 0;\n        long currentMaxIndex42 =\
    \ 0;\n        long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n\
    \        long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n  \
    \      long currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n    \
    \    long currentMaxIndex49 = 0;\n        long currentMaxIndex50 = 0;\n      \
    \  long currentMaxIndex51 = 0;\n        long currentMaxIndex52 = 0;\n        long\
    \ currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n        long currentMaxIndex55\
    \ = 0;\n        long currentMaxIndex56 = 0;\n        long currentMaxIndex57 =\
    \ 0;\n        long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n\
    \        long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n  \
    \      long ", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMaxValue = maxValue;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2\
    \ = 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueCount = 1;\n        long currentMaxValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValue = numbers.Count;\n        long\
    \ currentMaxValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValue);\n\
    \        long currentMaxValueCountValueCount = 1;\n        long currentMaxValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValue = numbers.Count;\n  \
    \      long currentMaxValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCount = 1;\n        long currentMaxValueCountValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValue = numbers.Count;\n\
    \        long currentMaxValueCountValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCount = 1;\n      \
    \  long currentMaxValueCountValueCountValueCountValueCountIndex = 0;\n       \
    \ long currentMaxValueCountValueCountValueCountValueCountValue = numbers.Count;\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCount = 1;\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCountValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCountValueCountValue",
  "        List<long> max = new List<long>();\n        long maxValue = numbers.First();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = max.Count;\n\
    \            }\n            max.Add(currentMax);\n        }\n        max.Add(currentMax);\n\
    \        return max;", "        List<long> result = new List<long>();\n      \
    \  long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    long currentMaxIndexValue = numbers[0];\n        bool first = true;\n   \
    \     foreach (long number in numbers) {\n            if (first) {\n         \
    \       max = number;\n                currentMax = number;\n                currentMaxIndex\
    \ = number;\n                currentMaxValue = number;\n                currentMaxIndexValue\
    \ = number;\n                first = false;\n            }\n            if (number\
    \ > currentMax) {\n                max = number;\n                currentMax =\
    \ number;\n                currentMaxIndex = number;\n                currentMaxValue\
    \ = number;\n                currentMaxIndexValue = number;\n            }\n \
    \           if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexValue = currentMaxIndex;\n            }\n    \
    \        if (number > currentMaxValue) {\n                currentMaxValue = number;\n\
    \                currentMaxIndexValue = currentMaxIndex;\n            }\n    \
    \    }\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        result.Add(currentMaxValue);\n        result.Add(currentMaxIndexValue);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long cur = 0;\n        foreach (long n in numbers)\
    \ {\n            if (n > max) {\n                max = n;\n                cur\
    \ = n;\n            }\n            else if (n == max) {\n                cur +=\
    \ n;\n            }\n            else {\n                result.Add(cur);\n  \
    \              max = n;\n                cur = n;\n            }\n        }\n\
    \        result.Add(cur);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            currentNumber = number;\n            currentMax = number;\n     \
    \       while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> max = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();", "   \
    \     List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber > 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber--;\n \
    \           }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            if (currentSum > currentMax) {\n                currentMax\
    \ = currentSum;\n            }\n            result.Add(currentMax);\n        }\n\
    \        return result;", "        List<long> max = new List<long>();\n      \
    \  long maxValue = numbers.First();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = numbers.IndexOf(maxValue);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndexValue2 =\
    \ numbers.ElementAt(currentMaxIndex + 1);\n        long currentMaxIndexValue3\
    \ = numbers.ElementAt(currentMaxIndex + 2);\n        long currentMaxIndexValue4\
    \ = numbers.ElementAt(currentMaxIndex + 3);\n        long currentMaxIndexValue5\
    \ = numbers.ElementAt(currentMaxIndex + 4);\n        long currentMaxIndexValue6\
    \ = numbers.ElementAt(currentMaxIndex + 5);\n        long currentMaxIndexValue7\
    \ = numbers.ElementAt(currentMaxIndex + 6);\n        long currentMaxIndexValue8\
    \ = numbers.ElementAt(currentMaxIndex + 7);\n        long currentMaxIndexValue9\
    \ = numbers.ElementAt(currentMaxIndex + 8);\n        long currentMaxIndexValue10\
    \ = numbers.ElementAt(currentMaxIndex + 9);\n        long currentMaxIndexValue11\
    \ = numbers.ElementAt(currentMaxIndex + 10);\n        long currentMaxIndexValue12\
    \ = numbers.ElementAt(currentMaxIndex + 11);\n        long currentMaxIndexValue13\
    \ = numbers.ElementAt(currentMaxIndex + 12);\n        long currentMaxIndexValue14\
    \ = numbers.ElementAt(currentMaxIndex + 13);\n        long currentMaxIndexValue15\
    \ = numbers.ElementAt(currentMaxIndex + 14);\n        long currentMaxIndexValue16\
    \ = numbers.ElementAt(currentMaxIndex + 15);\n        long currentMaxIndexValue17\
    \ = numbers.ElementAt(currentMaxIndex + 16);\n        long currentMaxIndexValue18\
    \ = numbers.ElementAt(currentMaxIndex + 17);\n        long currentMaxIndexValue19\
    \ = numbers.ElementAt(currentMaxIndex + 18);\n        long currentMaxIndexValue20\
    \ = numbers.ElementAt(currentMaxIndex + 19);\n        long currentMaxIndexValue21\
    \ = numbers.ElementAt(currentMaxIndex + 20);\n        long currentMaxIndexValue22\
    \ = numbers.ElementAt(currentMaxIndex + 21);\n        long currentMaxIndexValue23\
    \ = numbers.ElementAt(currentMaxIndex + 22);\n        long currentMaxIndexValue24\
    \ = numbers.ElementAt(currentMaxIndex + 23);\n        long currentMaxIndexValue25\
    \ = numbers.ElementAt(currentMaxIndex + 24);\n        long currentMaxIndexValue26\
    \ = numbers.ElementAt(currentMaxIndex + 25);\n        long currentMaxIndexValue27\
    \ = numbers.ElementAt(currentMaxIndex + 26);\n        long currentMaxIndexValue28\
    \ = numbers.ElementAt(currentMaxIndex + 27);\n        long currentMaxIndexValue",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentSum = 0;\n        long\
    \ currentSumOfSquares = 0;\n        long currentSumOfSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferences = 0;\n        long currentSumOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferences = 0;\n        long\
    \ currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSum", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long current = numbers.First();\n        long\
    \ previous = current;\n        long rollingMax = current;\n        foreach (long\
    \ number in numbers) {\n            if (number > rollingMax) {\n             \
    \   rollingMax = number;\n            }\n            if (number > max) {\n   \
    \             max = number;\n            }\n            previous = current;\n\
    \            current = number;\n        }\n        result.Add(rollingMax);\n \
    \       result.Add(max);\n        return result;", "        List<long> max = new\
    \ List<long>();\n        long maxValue = numbers.First();\n        long currentMax\
    \ = maxValue;\n        foreach (long number in numbers) {\n            if (number\
    \ > currentMax) {\n                currentMax = number;\n            }\n     \
    \   }\n        max.Add(currentMax);\n        numbers.Remove(maxValue);\n     \
    \   RollingMax(numbers, max, currentMax);\n        return max;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        long currentNumber2\
    \ = 0;\n        long currentNumber3 = 0;\n        long currentNumber4 = 0;\n \
    \       long currentNumber5 = 0;\n        long currentNumber6 = 0;\n        long\
    \ currentNumber7 = 0;\n        long currentNumber8 = 0;\n        long currentNumber9\
    \ = 0;\n        long currentNumber10 = 0;\n        long currentNumber11 = 0;\n\
    \        long currentNumber12 = 0;\n        long currentNumber13 = 0;\n      \
    \  long currentNumber14 = 0;\n        long currentNumber15 = 0;\n        long\
    \ currentNumber16 = 0;\n        long currentNumber17 = 0;\n        long currentNumber18\
    \ = 0;\n        long currentNumber19 = 0;\n        long currentNumber20 = 0;\n\
    \        long currentNumber21 = 0;\n        long currentNumber22 = 0;\n      \
    \  long currentNumber23 = 0;\n        long currentNumber24 = 0;\n        long\
    \ currentNumber25 = 0;\n        long currentNumber26 = 0;\n        long currentNumber27\
    \ = 0;\n        long currentNumber28 = 0;\n        long currentNumber29 = 0;\n\
    \        long currentNumber30 = 0;\n        long currentNumber31 = 0;\n      \
    \  long currentNumber32 = 0;\n        long currentNumber33 = 0;\n        long\
    \ currentNumber34 = 0;\n        long currentNumber35 = 0;\n        long currentNumber36\
    \ = 0;\n        long currentNumber37 = 0;\n        long currentNumber38 = 0;\n\
    \        long currentNumber39 = 0;\n        long currentNumber40 = 0;\n      \
    \  long currentNumber41 = 0;\n        long currentNumber42 = 0;\n        long\
    \ currentNumber43 = 0;\n        long currentNumber44 = 0;\n        long currentNumber45\
    \ = 0;\n        long currentNumber46 = 0;\n        long currentNumber47 = 0;\n\
    \        long currentNumber48 = 0;\n        long currentNumber49 = 0;\n      \
    \  long currentNumber50 = 0;\n        long currentNumber51 = 0;\n        long\
    \ currentNumber52 = 0;\n        long currentNumber53 = 0;\n        long currentNumber54\
    \ = 0;\n        long currentNumber55 = 0;\n        long currentNumber56 = 0;\n\
    \        long currentNumber57 = 0;\n        long currentNumber58 = 0;\n      \
    \  long currentNumber59 = 0;\n        long currentNumber60 = 0;\n        long\
    \ currentNumber61 = 0;\n        long currentNumber62 = 0;\n        long currentNumber63\
    \ = 0;\n        long currentNumber64 = 0;\n        long currentNumber65 = 0;\n\
    \        long currentNumber66 = 0;\n        long currentNumber67 = 0;\n      \
    \  long currentNumber68 = 0;\n        long currentNumber69 = 0;\n        long\
    \ currentNumber70 = 0;\n        long currentNumber71 = 0;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n      \
    \  long currentMaxIndexValue = 0;\n        bool isMax = true;\n        bool isMaxIndex\
    \ = false;\n        bool isMaxIndexValue = false;\n        bool isMaxIndexValue2\
    \ = false;\n        bool isMaxIndexValue3 = false;\n        bool isMaxIndexValue4\
    \ = false;\n        bool isMaxIndexValue5 = false;\n        bool isMaxIndexValue6\
    \ = false;\n        bool isMaxIndexValue7 = false;\n        bool isMaxIndexValue8\
    \ = false;\n        bool isMaxIndexValue9 = false;\n        bool isMaxIndexValue10\
    \ = false;\n        bool isMaxIndexValue11 = false;\n        bool isMaxIndexValue12\
    \ = false;\n        bool isMaxIndexValue13 = false;\n        bool isMaxIndexValue14\
    \ = false;\n        bool isMaxIndexValue15 = false;\n        bool isMaxIndexValue16\
    \ = false;\n        bool isMaxIndexValue17 = false;\n        bool isMaxIndexValue18\
    \ = false;\n        bool isMaxIndexValue19 = false;\n        bool isMaxIndexValue20\
    \ = false;\n        bool isMaxIndexValue21 = false;\n        bool isMaxIndexValue22\
    \ = false;\n        bool isMaxIndexValue23 = false;\n        bool isMaxIndexValue24\
    \ = false;\n        bool isMaxIndexValue25 = false;\n        bool isMaxIndexValue26\
    \ = false;\n        bool isMaxIndexValue27 = false;\n        bool isMaxIndexValue28\
    \ = false;\n        bool isMaxIndexValue29 = false;\n        bool isMaxIndexValue30\
    \ = false;\n        bool isMaxIndexValue31 = false;\n        bool isMaxIndexValue32\
    \ = false;\n        bool isMaxIndexValue33 = false;\n        bool isMaxIndexValue34\
    \ = false;\n        bool isMaxIndexValue35 = false;\n        bool isMaxIndexValue36\
    \ = false;\n        bool isMaxIndexValue37 = false;\n        bool isMaxIndexValue38\
    \ = false;\n        bool isMaxIndexValue39 = false;\n        bool isMaxIndexValue40\
    \ = false;\n        bool isMaxIndexValue41 = false;\n        bool isMaxIndexValue42\
    \ = false;\n        bool isMaxIndexValue43 = false;\n        bool isMaxIndexValue44\
    \ = false;\n        bool isMaxIndexValue45 = false;\n        bool isMaxIndexValue46\
    \ = false;\n        bool isMaxIndexValue47 = false;\n        bool isMaxIndexValue48\
    \ = false;\n        bool isMaxIndexValue49 = false;\n        bool isMaxIndexValue50\
    \ = false;\n        bool is", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long currentCount = 0;\n        foreach (long number in numbers)\
    \ {\n            currentCount += 1;\n            currentSum += number;\n     \
    \       if (currentSum > currentMax) {\n                currentMax = currentSum;\n\
    \            }\n            if (currentCount == numbers.Count) {\n           \
    \     result.Add(currentMax);\n                currentMax = 0;\n             \
    \   currentSum = 0;\n                currentCount = 0;\n            }\n      \
    \  }\n        return result;", "        List<long> max = new List<long>();\n \
    \       long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n     \
    \   long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long\
    \ currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7\
    \ = 0;\n        long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n\
    \        long currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n  \
    \      long currentMaxIndex12 = 0;\n        long currentMaxIndex13 = 0;\n    \
    \    long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n      \
    \  long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n        long\
    \ currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n        long currentMaxIndex20\
    \ = 0;\n        long currentMaxIndex21 = 0;\n        long currentMaxIndex22 =\
    \ 0;\n        long currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n\
    \        long currentMaxIndex25 = 0;\n        long currentMaxIndex26 = 0;\n  \
    \      long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n    \
    \    long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n      \
    \  long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long\
    \ currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35\
    \ = 0;\n        long currentMaxIndex36 = 0;\n        long currentMaxIndex37 =\
    \ 0;\n        long currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n\
    \        long currentMaxIndex40 = 0;\n        long currentMaxIndex41 = 0;\n  \
    \      long currentMaxIndex42 = 0;\n        long currentMaxIndex43 = 0;\n    \
    \    long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n      \
    \  long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n        long\
    \ currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n        long currentMaxIndex50\
    \ = 0;\n        long currentMaxIndex51 = 0;\n        long currentMaxIndex52 =\
    \ 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n\
    \        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n  \
    \      long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n    \
    \    long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n      \
    \  long currentMaxIndex61 = 0;\n        long current", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        foreach (long number in numbers) {\n   \
    \         currentSum += number;\n            if (currentSum > max) {\n       \
    \         max = currentSum;\n                currentMax = number;\n          \
    \  }\n        }\n        result.Add(currentMax);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max = 0;\n       \
    \ long cur = 0;\n        foreach (long n in numbers) {\n            if (n > max)\
    \ {\n                max = n;\n                cur = n;\n            }\n     \
    \       else if (n == max) {\n                cur += n;\n            }\n     \
    \       result.Add(cur);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxIndexValue = 0;\n        bool isMax = true;\n        bool isMaxIndex\
    \ = false;\n        bool isMaxIndexValue = false;\n        bool isMaxIndexValueInCurrentMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMax = false;\n        bool\
    \ isMaxIndexValueInCurrentMaxInMaxInMax = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMax = false;\n\
    \        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMax = false;\n\
    \        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMax = false;\n\
    \        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMax = false;\n\
    \        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMax = false;\n\
    \        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax =\
    \ false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = false;\n        bool isMaxIndexValueInCurrentMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        bool isMax = true;\n\
    \        foreach (long number in numbers) {\n            if (number > max) {\n\
    \                max = number;\n                currentMax = max;\n          \
    \      currentMaxIndex = numbers.IndexOf(number);\n            }\n           \
    \ if (number == max) {\n                isMax = true;\n            }\n       \
    \     if (number < max && !isMax) {\n                result.Add(max);\n      \
    \          max = number;\n                currentMax = max;\n                currentMaxIndex\
    \ = numbers.IndexOf(number);\n                isMax = true;\n            }\n \
    \           if (number == max && isMax) {\n                isMax = false;\n  \
    \          }\n        }\n        result.Add(max);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexInResult = -1;\n        long currentMaxIndexInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResult = -1;\n        long\
    \ currentMaxIndexInResultInResultInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult",
  "        List<long> rollingMax = new List<long>();\n        long rollingMaxElement\
    \ = numbers.First();\n        long rollingMaxElementFoundAt = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > rollingMaxElement)\
    \ {\n                rollingMaxElement = number;\n                rollingMaxElementFoundAt\
    \ = rollingMaxElementFoundAt;\n            }\n            if (number == rollingMaxElementFoundAt)\
    \ {\n                rollingMax.Add(number);\n            }\n        }\n     \
    \   return rollingMax;", "        List<long> result = new List<long>();\n    \
    \    long maxValue = numbers.Max();\n        long currentMax = maxValue;\n   \
    \     long currentMaxIndex = -1;\n        long currentMaxIndex2 = -1;\n      \
    \  long currentMaxIndex3 = -1;\n        long currentMaxIndex4 = -1;\n        long\
    \ currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n        long currentMaxIndex7\
    \ = -1;\n        long currentMaxIndex8 = -1;\n        long currentMaxIndex9 =\
    \ -1;\n        long currentMaxIndex10 = -1;\n        long currentMaxIndex11 =\
    \ -1;\n        long currentMaxIndex12 = -1;\n        long currentMaxIndex13 =\
    \ -1;\n        long currentMaxIndex14 = -1;\n        long currentMaxIndex15 =\
    \ -1;\n        long currentMaxIndex16 = -1;\n        long currentMaxIndex17 =\
    \ -1;\n        long currentMaxIndex18 = -1;\n        long currentMaxIndex19 =\
    \ -1;\n        long currentMaxIndex20 = -1;\n        long currentMaxIndex21 =\
    \ -1;\n        long currentMaxIndex22 = -1;\n        long currentMaxIndex23 =\
    \ -1;\n        long currentMaxIndex24 = -1;\n        long currentMaxIndex25 =\
    \ -1;\n        long currentMaxIndex26 = -1;\n        long currentMaxIndex27 =\
    \ -1;\n        long currentMaxIndex28 = -1;\n        long currentMaxIndex29 =\
    \ -1;\n        long currentMaxIndex30 = -1;\n        long currentMaxIndex31 =\
    \ -1;\n        long currentMaxIndex32 = -1;\n        long currentMaxIndex33 =\
    \ -1;\n        long currentMaxIndex34 = -1;\n        long currentMaxIndex35 =\
    \ -1;\n        long currentMaxIndex36 = -1;\n        long currentMaxIndex37 =\
    \ -1;\n        long currentMaxIndex38 = -1;\n        long currentMaxIndex39 =\
    \ -1;\n        long currentMaxIndex40 = -1;\n        long currentMaxIndex41 =\
    \ -1;\n        long currentMaxIndex42 = -1;\n        long currentMaxIndex43 =\
    \ -1;\n        long currentMaxIndex44 = -1;\n        long currentMaxIndex45 =\
    \ -1;\n        long currentMaxIndex46 = -1;\n        long currentMaxIndex47 =\
    \ -1;\n        long currentMaxIndex48 = -1;\n        long currentMaxIndex49 =\
    \ -1;\n        long currentMaxIndex50 = -1;\n        long currentMaxIndex51 =\
    \ -1;\n        long currentMaxIndex52 = -1;\n        long currentMaxIndex53 =\
    \ -1;\n        long currentMaxIndex54 = -1;\n        long currentMaxIndex55 =\
    \ -1;\n        long currentMax", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquares", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.Index", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        foreach (long number in numbers) {\n         \
    \   currentSum += number;\n            if (currentSum > max) {\n             \
    \   max = currentSum;\n                currentMax = number;\n            }\n \
    \       }\n        result.Add(currentMax);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long currentMax\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentNumber = number;\n            }\n            else if (number\
    \ == currentMax) {\n                currentNumber++;\n            }\n        \
    \    else if (number < currentMax) {\n                currentMax = number;\n \
    \               currentNumber = number;\n            }\n            result.Add(currentNumber);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            if (currentSum > max) {\n                max = currentSum;\n\
    \                currentMax = number;\n            }\n        }\n        result.Add(currentMax);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long current = numbers.First();\n        foreach\
    \ (long number in numbers) {\n            if (number > current) {\n          \
    \      max = number;\n            }\n            else if (number == current) {\n\
    \                max = Math.Max(max, number);\n            }\n            else\
    \ {\n                max = Math.Max(max, current + number);\n            }\n \
    \           current = number;\n            result.Add(max);\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ maxValue = numbers.Max();\n        long currentMax = maxValue;\n        long\
    \ currentSum = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfCubes\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n   \
    \     long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n  \
    \      long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSum", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = numbers.IndexOf(maxValue);\n\
    \        long currentMaxIndex2 = numbers.IndexOf(maxValue, currentMaxIndex + 1);\n\
    \        long currentMaxIndex3 = numbers.IndexOf(maxValue, currentMaxIndex + 2);\n\
    \        long currentMaxIndex4 = numbers.IndexOf(maxValue, currentMaxIndex + 3);\n\
    \        long currentMaxIndex5 = numbers.IndexOf(maxValue, currentMaxIndex + 4);\n\
    \        long currentMaxIndex6 = numbers.IndexOf(maxValue, currentMaxIndex + 5);\n\
    \        long currentMaxIndex7 = numbers.IndexOf(maxValue, currentMaxIndex + 6);\n\
    \        long currentMaxIndex8 = numbers.IndexOf(maxValue, currentMaxIndex + 7);\n\
    \        long currentMaxIndex9 = numbers.IndexOf(maxValue, currentMaxIndex + 8);\n\
    \        long currentMaxIndex10 = numbers.IndexOf(maxValue, currentMaxIndex +\
    \ 9);\n        long currentMaxIndex11 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 10);\n        long currentMaxIndex12 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 11);\n        long currentMaxIndex13 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 12);\n        long currentMaxIndex14 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 13);\n        long currentMaxIndex15 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 14);\n        long currentMaxIndex16 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 15);\n        long currentMaxIndex17 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 16);\n        long currentMaxIndex18 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 17);\n        long currentMaxIndex19 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 18);\n        long currentMaxIndex20 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 19);\n        long currentMaxIndex21 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 20);\n        long currentMaxIndex22 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 21);\n        long currentMaxIndex23 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 22);\n        long currentMaxIndex24 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 23);\n        long currentMaxIndex25 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 24);\n        long currentMaxIndex26 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 25);\n        long currentMaxIndex27 = numbers.IndexOf(maxValue, currentMaxIndex\
    \ + 26);\n        long currentMax", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        foreach (long number in\
    \ numbers) {\n            currentSum += number;\n            currentSumOfSquares\
    \ += number * number;\n            if (currentSum > max) {\n                max\
    \ = currentSum;\n            }\n            if (currentSumOfSquares > currentMax)\
    \ {\n                currentMax = currentSumOfSquares;\n            }\n      \
    \      result.Add(number);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            currentNumber = number;\n            currentMax = number;\n \
    \           while (currentNumber > currentMax) {\n                currentMax =\
    \ currentNumber;\n                currentNumber = numbers.Skip(numbers.IndexOf(currentNumber)).First();\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> rollingMax = new List<long>();\n        long rollingMaxValue\
    \ = numbers.Max();\n        long rollingMaxIndex = 0;\n        long rollingMaxIndexCount\
    \ = 0;\n        long rollingMaxIndexCountMax = numbers.Count - 1;\n        long\
    \ rollingMaxIndexCountMin = numbers.Count - 2;\n        long rollingMaxIndexCountMinMax\
    \ = numbers.Count - 3;\n        long rollingMaxIndexCountMinMaxMax = numbers.Count\
    \ - 4;\n        long rollingMaxIndexCountMinMaxMax = numbers.Count - 5;\n    \
    \    long rollingMaxIndexCountMinMaxMaxMax = numbers.Count - 6;\n        long\
    \ rollingMaxIndexCountMinMaxMaxMax = numbers.Count - 7;\n        long rollingMaxIndexCountMinMaxMaxMax\
    \ = numbers.Count - 8;\n        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count\
    \ - 9;\n        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 10;\n\
    \        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 11;\n    \
    \    long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 12;\n        long\
    \ rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 13;\n        long rollingMaxIndexCountMinMaxMaxMaxMax\
    \ = numbers.Count - 14;\n        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count\
    \ - 15;\n        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 16;\n\
    \        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 17;\n    \
    \    long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 18;\n        long\
    \ rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 19;\n        long rollingMaxIndexCountMinMaxMaxMaxMax\
    \ = numbers.Count - 20;\n        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count\
    \ - 21;\n        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 22;\n\
    \        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 23;\n    \
    \    long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 24;\n        long\
    \ rollingMaxIndexCountMinMaxMaxMaxMax = numbers.Count - 25;\n        long rollingMaxIndexCountMinMaxMaxMaxMax\
    \ = numbers.Count - 26;\n        long rollingMaxIndexCountMinMaxMaxMaxMax = numbers.",
  "        List<long> max = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            currentSumOfSquares += number * number;\n            if\
    \ (currentSum > currentMax) {\n                currentMax = currentSum;\n    \
    \        }\n            if (currentSumOfSquares > max) {\n                max\
    \ = currentSumOfSquares;\n            }\n            result.Add(number);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long currentMax =\
    \ numbers[0];\n        long currentMaxIndex = numbers[0];\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > currentMax) {\n\
    \                currentMax = numbers[i];\n                currentMaxIndex = i;\n\
    \            }\n        }\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        for (int i = numbers.Count - 1; i >= 0; i--) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n                currentMaxIndex\
    \ = i;\n            }\n            else {\n                result.Add(currentMax);\n\
    \                result.Add(currentMaxIndex);\n                currentMax = numbers[i];\n\
    \                currentMaxIndex = i;\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var rollingMax =\
    \ numbers.Max();\n        var rollingMaxIndex = numbers.IndexOf(rollingMax);\n\
    \        var rollingMaxIndexInSequence = numbers.IndexOf(rollingMax, rollingMaxIndex\
    \ + 1);\n        var rollingMaxIndexInSequenceInSequence = numbers.IndexOf(rollingMax,\
    \ rollingMaxIndex + 2);\n        var rollingMaxIndexInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 3);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 4);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 5);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 6);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 7);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 8);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 9);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 10);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 11);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 12);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 13);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 14);\n        var rollingMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(rollingMax, rollingMaxIndex + 15);\n        var rollingMaxIndexInSequenceInSequenceIn",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long sum = 0;\n     \
    \   long sumOfSquares = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOf",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber > 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber--;\n \
    \           }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n        long\
    \ currentSum = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = 0;\n            while (currentNumber > 0)\
    \ {\n                currentSum += currentNumber;\n                currentNumber--;\n\
    \            }\n            if (currentSum > max) {\n                max = currentSum;\n\
    \                currentMax = currentNumber;\n            }\n        }\n     \
    \   result.Add(max);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long sum = 0;\n        long count = 0;\n     \
    \   foreach (long number in numbers) {\n            currentSum += number;\n  \
    \          if (currentSum > max) {\n                max = currentSum;\n      \
    \      }\n            currentMax = currentSum;\n            currentSum = 0;\n\
    \            count++;\n        }\n        result.Add(max);\n        foreach (long\
    \ number in numbers) {\n            sum += number;\n            if (sum > currentMax)\
    \ {\n                currentMax = sum;\n            }\n            currentSum\
    \ = 0;\n        }\n        result.Add(currentMax);\n        return result;", " \
    \       List<long> max = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> rollingMax = new List<long>();\n        long max = 0;\n    \
    \    long currentMax = 0;\n        long currentNumber = 0;\n        long currentNumber2\
    \ = 0;\n        long currentNumber3 = 0;\n        long currentNumber4 = 0;\n \
    \       long currentNumber5 = 0;\n        long currentNumber6 = 0;\n        long\
    \ currentNumber7 = 0;\n        long currentNumber8 = 0;\n        long currentNumber9\
    \ = 0;\n        long currentNumber10 = 0;\n        long currentNumber11 = 0;\n\
    \        long currentNumber12 = 0;\n        long currentNumber13 = 0;\n      \
    \  long currentNumber14 = 0;\n        long currentNumber15 = 0;\n        long\
    \ currentNumber16 = 0;\n        long currentNumber17 = 0;\n        long currentNumber18\
    \ = 0;\n        long currentNumber19 = 0;\n        long currentNumber20 = 0;\n\
    \        long currentNumber21 = 0;\n        long currentNumber22 = 0;\n      \
    \  long currentNumber23 = 0;\n        long currentNumber24 = 0;\n        long\
    \ currentNumber25 = 0;\n        long currentNumber26 = 0;\n        long currentNumber27\
    \ = 0;\n        long currentNumber28 = 0;\n        long currentNumber29 = 0;\n\
    \        long currentNumber30 = 0;\n        long currentNumber31 = 0;\n      \
    \  long currentNumber32 = 0;\n        long currentNumber33 = 0;\n        long\
    \ currentNumber34 = 0;\n        long currentNumber35 = 0;\n        long currentNumber36\
    \ = 0;\n        long currentNumber37 = 0;\n        long currentNumber38 = 0;\n\
    \        long currentNumber39 = 0;\n        long currentNumber40 = 0;\n      \
    \  long currentNumber41 = 0;\n        long currentNumber42 = 0;\n        long\
    \ currentNumber43 = 0;\n        long currentNumber44 = 0;\n        long currentNumber45\
    \ = 0;\n        long currentNumber46 = 0;\n        long currentNumber47 = 0;\n\
    \        long currentNumber48 = 0;\n        long currentNumber49 = 0;\n      \
    \  long currentNumber50 = 0;\n        long currentNumber51 = 0;\n        long\
    \ currentNumber52 = 0;\n        long currentNumber53 = 0;\n        long currentNumber54\
    \ = 0;\n        long currentNumber55 = 0;\n        long currentNumber56 = 0;\n\
    \        long currentNumber57 = 0;\n        long currentNumber58 = 0;\n      \
    \  long currentNumber59 = 0;\n        long currentNumber60 = 0;\n        long\
    \ currentNumber61 = 0;\n        long currentNumber62 = 0;\n        long currentNumber63\
    \ = 0;\n        long currentNumber64 = 0;\n        long currentNumber65 = 0;\n\
    \        long currentNumber66 = 0;\n        long currentNumber67 = 0;\n      \
    \  long currentNumber68 = 0;\n        long currentNumber69 = 0;\n        long\
    \ currentNumber70 = 0;\n        long currentNumber", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        bool found = false;\n        foreach (long\
    \ number in numbers) {\n            if (number > currentMax) {\n             \
    \   currentMax = number;\n                currentMaxIndex = result.Count;\n  \
    \          }\n            if (number == currentMax) {\n                found =\
    \ true;\n            }\n            if (found) {\n                result.Add(number);\n\
    \            }\n        }\n        if (result.Count > currentMaxIndex) {\n   \
    \         max = currentMax;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = number;\n   \
    \         }\n            else {\n                currentMax = Math.Max(currentMax,\
    \ number);\n            }\n            result.Add(currentMax);\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       bool found = false;\n        foreach (long number in numbers) {\n    \
    \        if (number == currentMaxValue) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexValue = number;\n                found = true;\n\
    \            }\n            if (found) {\n                result.Add(currentMaxIndexValue);\n\
    \                currentMaxValue = currentMaxIndexValue;\n                currentMaxIndex\
    \ = 0;\n                found = false;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(currentMaxIndexValue);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentSum = 0;\n        long\
    \ sum = 0;\n        long sumOfSquares = 0;\n        long currentSumOfSquares =\
    \ 0;\n        long currentSumOfSquareOfSquares = 0;\n        long currentSumOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquares = 0;\n      \
    \  long currentSumOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n        long\
    \ currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n \
    \       long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOf", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4\
    \ = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n\
    \        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n    \
    \    long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n       \
    \ long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n        long\
    \ currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15\
    \ = 0;\n        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 =\
    \ 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n\
    \        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n  \
    \      long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n    \
    \    long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n      \
    \  long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n        long\
    \ currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30\
    \ = 0;\n        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 =\
    \ 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n\
    \        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n  \
    \      long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n    \
    \    long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n      \
    \  long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n        long\
    \ currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45\
    \ = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 =\
    \ 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n\
    \        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n  \
    \      long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n    \
    \    long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n      \
    \  long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n        long\
    \ currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60\
    \ = 0;\n        long currentMaxIndex61 = 0;\n        long current", "        List<long>\
    \ max = new List<long>();\n        long maxValue = numbers.Max();\n        long\
    \ currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = 0;\n        long currentMaxValueIndex\
    \ = 0;\n        long currentMaxValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        long ", "        List<long> result = new List<long>();\n     \
    \   long max = 0;\n        long currentMax = 0;\n        long currentNumber =\
    \ 0;\n        foreach (long number in numbers) {\n            currentNumber =\
    \ number;\n            currentMax = number;\n            while (currentNumber\
    \ > currentMax) {\n                currentMax = currentNumber;\n             \
    \   currentNumber -= currentMax;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n\
    \        bool found = false;\n        foreach (long number in numbers) {\n   \
    \         if (number == currentMax) {\n                currentMaxIndex++;\n  \
    \              currentMaxIndexInResult = currentMaxIndex;\n                found\
    \ = true;\n            }\n            else if (number > currentMax) {\n      \
    \          currentMax = number;\n                currentMaxIndex = -1;\n     \
    \           currentMaxIndexInResult = -1;\n                found = false;\n  \
    \          }\n            else if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexInResult = currentMaxIndex;\n                found\
    \ = true;\n            }\n            else if (number > currentMax) {\n      \
    \          currentMax = number;\n                currentMaxIndex = -1;\n     \
    \           currentMaxIndexInResult = -1;\n                found = false;\n  \
    \          }\n            else if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexInResult = currentMaxIndex;\n                found\
    \ = true;\n            }\n            else if (number > currentMax) {\n      \
    \          currentMax = number;\n                currentMaxIndex = -1;\n     \
    \           currentMaxIndexInResult = -1;\n                found = false;\n  \
    \          }\n            else if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexInResult = currentMaxIndex;\n                found\
    \ = true;\n            }\n            else if (number > currentMax) {\n      \
    \          currentMax = number;\n                currentMaxIndex = -1;\n     \
    \           currentMaxIndexInResult = -1;\n                found = false;\n  \
    \          }\n            else if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexInResult = currentMaxIndex;\n                found\
    \ = true;\n            }\n            else if (number > currentMax) {\n      \
    \          currentMax = number;\n                currentMaxIndex = -1;\n     \
    \           currentMaxIndexInResult = -1;\n                found = false;\n  \
    \          }\n            else if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexInResult = currentMaxIndex;\n                found\
    \ = true;\n            }\n            else if (number > currentMax) {\n      \
    \          currentMax = number;\n                currentMaxIndex = -1;\n     \
    \           currentMaxIndexInResult = -1;\n                found = false;\n  \
    \          }\n            else if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexInResult = currentMaxIndex;\n                found\
    \ = true;\n            }\n            else if (number > currentMax) {\n      \
    \          currentMax = number;\n                currentMaxIndex = -1;\n     \
    \           currentMaxIndexInResult = -1;\n                ", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number > max) {\n                max = number;\n        \
    \        currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else {\n                currentMax = currentMax;\n\
    \                currentMaxIndex = currentMaxIndex;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n\
    \        long currentMax = numbers.First();\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                currentMax = number;\n\
    \                maxIndex = result.Count;\n            }\n            else if\
    \ (number == currentMax) {\n                maxIndex++;\n            }\n     \
    \       max = Math.Max(max, currentMax);\n            result.Add(max);\n     \
    \       currentMax = number;\n        }\n        return result;", "        List<long>\
    \ max = new List<long>();\n        long maxElement = numbers.First();\n      \
    \  long currentMaxElement = maxElement;\n        long currentMax = maxElement;\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxElement)\
    \ {\n                currentMaxElement = number;\n                currentMax =\
    \ number;\n            }\n            else if (number == currentMaxElement) {\n\
    \                currentMax = currentMaxElement;\n            }\n            else\
    \ if (number < currentMaxElement) {\n                currentMaxElement = number;\n\
    \                currentMax = number;\n            }\n        }\n        max.Add(currentMax);\n\
    \        return max;", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n\
    \        long currentSumOfSquares = 0;\n        foreach (long number in numbers)\
    \ {\n            currentSum += number;\n            currentSumOfSquares += number\
    \ * number;\n            if (currentSum > currentMax) {\n                currentMax\
    \ = currentSum;\n            }\n            if (currentSumOfSquares > currentMax\
    \ * currentMax) {\n                currentMax = currentSum;\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        long currentSum =\
    \ 0;\n        foreach (long number in numbers) {\n            currentNumber =\
    \ number;\n            currentSum = currentNumber;\n            while (currentSum\
    \ != 0) {\n                currentMax = currentSum;\n                currentSum\
    \ = 0;\n                foreach (long number in numbers) {\n                 \
    \   if (number == currentNumber) {\n                        currentSum += number;\n\
    \                    }\n                }\n                if (currentSum > currentMax)\
    \ {\n                    currentMax = currentSum;\n                }\n       \
    \     }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else {\n                if (number == currentMax)\
    \ {\n                    currentMaxIndex++;\n                }\n             \
    \   else {\n                    result.Add(currentMax);\n                    currentMax\
    \ = number;\n                    currentMaxIndex = numbers.IndexOf(number);\n\
    \                }\n            }\n        }\n        result.Add(currentMax);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n            currentMaxValue = number;\n            currentMaxIndex\
    \ = result.Count;\n            result.Add(number);\n        }\n        result.RemoveAt(currentMaxIndex);\n\
    \        result.Insert(currentMaxIndex, max);\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        foreach (long number in numbers) {\n            if\
    \ (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n            }\n            else {\n                currentMax = Math.Max(currentMax,\
    \ number);\n            }\n            result.Add(currentMax);\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long max = 0;\n        long currentMax = numbers.First();\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n            }\n            if (number > max) {\n\
    \                max = number;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> max = new List<long>();\n      \
    \  long maxValue = numbers.Max();\n        long currentMax = maxValue;\n     \
    \   long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n  \
    \          if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = numbers.IndexOf(number);\n            }\n \
    \       }\n        max.Add(currentMax);\n        numbers.RemoveAt(currentMaxIndex);\n\
    \        return RollingMax(numbers, max);", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex2 = -1;\n   \
    \     long currentMaxIndex3 = -1;\n        long currentMaxIndex4 = -1;\n     \
    \   long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n       \
    \ long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n        long\
    \ currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n        long currentMaxIndex11\
    \ = -1;\n        long currentMaxIndex12 = -1;\n        long currentMaxIndex13\
    \ = -1;\n        long currentMaxIndex14 = -1;\n        long currentMaxIndex15\
    \ = -1;\n        long currentMaxIndex16 = -1;\n        long currentMaxIndex17\
    \ = -1;\n        long currentMaxIndex18 = -1;\n        long currentMaxIndex19\
    \ = -1;\n        long currentMaxIndex20 = -1;\n        long currentMaxIndex21\
    \ = -1;\n        long currentMaxIndex22 = -1;\n        long currentMaxIndex23\
    \ = -1;\n        long currentMaxIndex24 = -1;\n        long currentMaxIndex25\
    \ = -1;\n        long currentMaxIndex26 = -1;\n        long currentMaxIndex27\
    \ = -1;\n        long currentMaxIndex28 = -1;\n        long currentMaxIndex29\
    \ = -1;\n        long currentMaxIndex30 = -1;\n        long currentMaxIndex31\
    \ = -1;\n        long currentMaxIndex32 = -1;\n        long currentMaxIndex33\
    \ = -1;\n        long currentMaxIndex34 = -1;\n        long currentMaxIndex35\
    \ = -1;\n        long currentMaxIndex36 = -1;\n        long currentMaxIndex37\
    \ = -1;\n        long currentMaxIndex38 = -1;\n        long currentMaxIndex39\
    \ = -1;\n        long currentMaxIndex40 = -1;\n        long currentMaxIndex41\
    \ = -1;\n        long currentMaxIndex42 = -1;\n        long currentMaxIndex43\
    \ = -1;\n        long currentMaxIndex44 = -1;\n        long currentMaxIndex45\
    \ = -1;\n        long currentMaxIndex46 = -1;\n        long currentMaxIndex47\
    \ = -1;\n        long currentMaxIndex48 = -1;\n        long currentMaxIndex49\
    \ = -1;\n        long currentMaxIndex50 = -1;\n        long currentMaxIndex51\
    \ = -1;\n        long currentMaxIndex52 = -1;\n        long currentMaxIndex53\
    \ = -1;\n        long currentMaxIndex54 = -1;\n        long currentMaxIndex55\
    \ = -1;\n        long currentMax", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long n in numbers)\
    \ {\n            max = Math.Max(max, n);\n            cur = n;\n            result.Add(max);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueCount = 1;\n\
    \        long currentMaxValueCountIndex = 0;\n        bool isMax = true;\n   \
    \     bool isMaxIndex = false;\n        bool isMaxValue = false;\n        bool\
    \ isMaxValueIndex = false;\n        bool isMaxValueCount = false;\n        bool\
    \ isMaxValueCountIndex = false;\n        bool isMaxCount = false;\n        bool\
    \ isMaxCountIndex = false;\n        bool isMaxIndexCount = false;\n        bool\
    \ isMaxIndexCountIndex = false;\n        bool isMaxIndexCountIndex = false;\n\
    \        bool isMaxIndexCountIndexCount = false;\n        bool isMaxIndexCountIndexCountIndex\
    \ = false;\n        bool isMaxIndexCountIndexCountIndexIndex = false;\n      \
    \  bool isMaxIndexCountIndexCountIndexIndexIndex = false;\n        bool isMaxIndexCountIndexCountIndexIndexIndex\
    \ = false;\n        bool isMaxIndexCountIndexCountIndexIndexIndexIndex = false;\n\
    \        bool isMaxIndexCountIndexCountIndexIndexIndexIndex = false;\n       \
    \ bool isMaxIndexCountIndexCountIndexIndexIndexIndex = false;\n        bool isMaxIndexCountIndexCountIndexIndexIndexIndex\
    \ = false;\n        bool isMaxIndexCountIndexCountIndexIndexIndexIndex = false;\n\
    \        bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n  \
    \      bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n    \
    \    bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n      \
    \  bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n        bool\
    \ isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n        bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex\
    \ = false;\n        bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex =\
    \ false;\n        bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n\
    \        bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n  \
    \      bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n    \
    \    bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n      \
    \  bool isMaxIndexCountIndexCountIndexIndexIndexIndexIndex = false;\n        bool\
    \ isMaxIndexCountIndexCountIndexIndexIndexIndexIndexIndex = false;\n        bool\
    \ isMaxIndexCountIndexCountIndexIndexIndexIndexIndexIndex = false;\n        bool\
    \ isMaxIndexCountIndexCountIndexIndexIndexIndexIndexIndex = false;\n        bool\
    \ is", "        List<long> result = new List<long>();\n        long max = 0;\n\
    \        long currentMax = 0;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxValue = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        bool isMax = true;\n        bool isMaxIndex = false;\n        bool isMaxValue\
    \ = false;\n        bool isMaxValueIndex = false;\n        bool isMaxValueIndex2\
    \ = false;\n        bool isMaxValueIndex3 = false;\n        bool isMaxValueIndex4\
    \ = false;\n        bool isMaxValueIndex5 = false;\n        bool isMaxValueIndex6\
    \ = false;\n        bool isMaxValueIndex7 = false;\n        bool isMaxValueIndex8\
    \ = false;\n        bool isMaxValueIndex9 = false;\n        bool isMaxValueIndex10\
    \ = false;\n        bool isMaxValueIndex11 = false;\n        bool isMaxValueIndex12\
    \ = false;\n        bool isMaxValueIndex13 = false;\n        bool isMaxValueIndex14\
    \ = false;\n        bool isMaxValueIndex15 = false;\n        bool isMaxValueIndex16\
    \ = false;\n        bool isMaxValueIndex17 = false;\n        bool isMaxValueIndex18\
    \ = false;\n        bool isMaxValueIndex19 = false;\n        bool isMaxValueIndex20\
    \ = false;\n        bool isMaxValueIndex21 = false;\n        bool isMaxValueIndex22\
    \ = false;\n        bool isMaxValueIndex23 = false;\n        bool isMaxValueIndex24\
    \ = false;\n        bool isMaxValueIndex25 = false;\n        bool isMaxValueIndex26\
    \ = false;\n        bool isMaxValueIndex27 = false;\n        bool isMaxValueIndex28\
    \ = false;\n        bool isMaxValueIndex29 = false;\n        bool isMaxValueIndex30\
    \ = false;\n        bool isMaxValueIndex31 = false;\n        bool isMaxValueIndex32\
    \ = false;\n        bool isMaxValueIndex33 = false;\n        bool isMaxValueIndex34\
    \ = false;\n        bool isMaxValueIndex35 = false;\n        bool isMaxValueIndex36\
    \ = false;\n        bool isMaxValueIndex37 = false;\n        bool isMaxValueIndex38\
    \ = false;\n        bool isMaxValueIndex39 = false;\n        bool isMaxValueIndex40\
    \ = false;\n        bool isMaxValueIndex41 = false;\n        bool isMaxValueIndex42\
    \ = false;\n        bool isMaxValueIndex43 = false;\n        bool isMaxValueIndex44\
    \ = false;\n        bool isMaxValueIndex45 = false;\n        bool isMaxValueIndex46\
    \ = false;\n        bool isMaxValueIndex47 = false;\n        bool isMaxValueIndex48\
    \ = false;\n        bool isMaxValueIndex", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        bool first = true;\n        foreach (long number in numbers) {\n\
    \            if (first) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = 0;\n                first = false;\n\
    \            }\n            else {\n                if (number > max) {\n    \
    \                max = number;\n                    currentMax = number;\n   \
    \                 currentMaxIndex = 0;\n                }\n                else\
    \ {\n                    currentMax = currentMax;\n                    currentMaxIndex++;\n\
    \                }\n            }\n        }\n        result.Add(max);\n     \
    \   if (currentMaxIndex > 0) {\n            result.Add(RollingMax(numbers.Skip(currentMaxIndex).Take(currentMaxIndex)));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ foreach (long number in numbers) {\n            currentSum += number;\n    \
    \        currentSumOfSquares += number * number;\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                result.Add(currentMax);\n    \
    \            currentMax = currentSum;\n                currentSum = currentSumOfSquares;\n\
    \                currentSumOfSquares = 0;\n            }\n        }\n        if\
    \ (currentSumOfSquares > currentMax * currentMax) {\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ foreach (long number in numbers) {\n            currentMax = number;\n     \
    \       max = Math.Max(max, currentMax);\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        bool isMax = true;\n        foreach (long number in numbers) {\n\
    \            if (number == maxValue) {\n                result.Add(maxValue);\n\
    \                currentMax = maxValue;\n                currentMaxIndex = 0;\n\
    \                currentMaxIndexValue = 0;\n                isMax = true;\n  \
    \          } else if (number > maxValue) {\n                currentMax = number;\n\
    \                currentMaxIndex = numbers.IndexOf(number);\n                currentMaxIndexValue\
    \ = number;\n                isMax = false;\n            }\n        }\n      \
    \  if (isMax) {\n            result.Add(currentMax);\n            result.Add(currentMaxIndex);\n\
    \            result.Add(currentMaxIndexValue);\n        }\n        return result;",
  "        List<long> max = new List<long>();\n        long maxElement = numbers.First();\n\
    \        long currentElement = numbers.First();\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n            }\n            if (number\
    \ > currentElement) {\n                currentElement = number;\n            }\n\
    \            if (number > maxElement) {\n                maxElement = number;\n\
    \            }\n        }\n        max.Add(maxElement);\n        max.Add(currentMax);\n\
    \        return max;", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        long currentMax = 0;\n        foreach (long number in\
    \ numbers) {\n            currentMax = Math.Max(currentMax, number);\n       \
    \     if (number > max) {\n                max = number;\n            }\n    \
    \        result.Add(currentMax);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     bool isMax = true;\n        foreach (long number in numbers) {\n       \
    \     if (number > currentMax) {\n                currentMax = number;\n     \
    \           currentMaxIndex = result.Count;\n                isMax = true;\n \
    \           } else if (number == currentMax) {\n                isMax = false;\n\
    \            }\n            result.Add(number);\n            if (isMax) {\n  \
    \              result.Add(currentMax);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n        long\
    \ currentSum = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = currentNumber;\n            while (currentSum\
    \ > 0) {\n                currentMax = currentSum;\n                currentSum\
    \ = 0;\n                foreach (long number in numbers) {\n                 \
    \   if (number == currentNumber) {\n                        currentSum += number;\n\
    \                        if (currentSum > currentMax) {\n                    \
    \        currentMax = currentSum;\n                        }\n               \
    \     }\n                }\n                result.Add(currentMax);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(0);\n        long currentMaxIndexValue\
    \ = numbers.ElementAt(0);\n        long currentMaxIndexValue = numbers.ElementAt(0);\n\
    \        long currentMaxIndexValue = ", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long currentMax =\
    \ numbers[0];\n        long currentMaxIndex = numbers[0];\n        foreach (long\
    \ number in numbers) {\n            if (number > currentMax) {\n             \
    \   currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number == currentMax) {\n                result.Add(number);\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                maxIndex = currentMaxIndex;\n            }\n        }\n     \
    \   if (maxIndex != currentMaxIndex) {\n            result.Add(max);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Max();\n\
    \        long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();", "        List<long> max = new List<long>();\n        long\
    \ maxNumber = 0;\n        long currentMax = 0;\n        long currentNumber = numbers.First();\n\
    \        long currentSum = 0;\n        foreach (long number in numbers) {\n  \
    \          currentSum += number;\n            if (currentSum > currentMax) {\n\
    \                currentMax = currentSum;\n            }\n            if (currentSum\
    \ > maxNumber) {\n                maxNumber = currentSum;\n            }\n   \
    \         currentNumber = number;\n            currentSum = 0;\n        }\n  \
    \      max.Add(maxNumber);\n        return max;", "        List<long> result =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentSum = 0;\n        long sum = 0;\n        long sumOfSquares =\
    \ 0;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            sumOfSquares += number * number;\n            if (sumOfSquares >\
    \ currentSum) {\n                currentMax = max;\n                currentSum\
    \ = sumOfSquares;\n            }\n            max = Math.Max(max, number);\n \
    \           result.Add(number);\n        }\n        result.Add(currentMax);\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
