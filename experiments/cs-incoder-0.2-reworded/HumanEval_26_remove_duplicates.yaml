name: HumanEval_26_remove_duplicates
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a list of integers, remove all elements that occur more\
  \ than once.\n    // Keep order of elements left the same as in the input.\n   \
  \ // >>> RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)2L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)4L}))\n    public static List<long> RemoveDuplicates(List<long> numbers)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)3L,\
  \ (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        var seen = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (seen.Add(n)) {\n      \
    \          numbers.Remove(n);\n            }\n        }\n        return numbers;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        var seen = new HashSet<long>();\n    \
    \    foreach (var number in numbers) {\n            if (seen.Add(number)) {\n\
    \                numbers.Remove(number);\n            }\n        }\n        return\
    \ numbers;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      var seen = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (seen.Add(number)) {\n                numbers.Remove(number);\n\
    \            }\n        }\n        return numbers;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (seen.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        long lastNumber;\n\
    \        bool seen = false;\n        foreach (var number in numbers) {\n     \
    \       if (seen) {\n                if (number == lastNumber) {\n           \
    \         seen = false;\n                } else {\n                    result.Add(number);\n\
    \                }\n            } else {\n                seen = true;\n     \
    \           lastNumber = number;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        foreach (var number\
    \ in numbers) {\n            if (result.Contains(number)) {\n                continue;\n\
    \            }\n            result.Add(number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        foreach (var number in numbers)\
    \ {\n            if (result.Contains(number)) {\n                continue;\n \
    \           }\n            result.Add(number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (set.Add(number)) {\n                result.Add(number);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (seen.Add(number)) {\n                result.Add(number);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long n in numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (set.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        foreach (var number in numbers)\
    \ {\n            if (numbers.Contains(number)) {\n                numbers.Remove(number);\n\
    \            }\n            else {\n                result.Add(number);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach\
    \ (long n in numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (seen.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      var seen = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (seen.Add(number)) {\n                numbers.Remove(number);\n\
    \            }\n        }\n        return numbers;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (set.Add(n)) {\n      \
    \          result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (set.Add(number)) {\n                result.Add(number);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (set.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (set.Add(number)) {\n                result.Add(number);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (seen.Add(number))\
    \ {\n                numbers.Remove(number);\n            }\n        }\n     \
    \   return numbers;", "        var result = new List<long>();\n        foreach\
    \ (var number in numbers) {\n            if (result.Contains(number)) {\n    \
    \            continue;\n            }\n            result.Add(number);\n     \
    \   }\n        return result;", "        var seen = new HashSet<long>();\n   \
    \     foreach (var n in numbers) {\n            if (seen.Add(n)) {\n         \
    \       numbers.Remove(n);\n            }\n        }\n        return numbers;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hashSet = new HashSet<long>();\n        foreach (long n in numbers) {\n    \
    \        if (hashSet.Add(n)) {\n                result.Add(n);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        foreach (long number in numbers) {\n  \
    \          if (number != lastNumber) {\n                result.Add(number);\n\
    \                lastNumber = number;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        var seen = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (seen.Add(n)) {\n      \
    \          numbers.Remove(n);\n            }\n        }\n        return numbers;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        var seen = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (seen.Add(n)) {\n      \
    \          numbers.Remove(n);\n            }\n        }\n        return numbers;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (seen.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hashSet = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (hashSet.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (seen.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (seen.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (set.Add(number)) {\n                result.Add(number);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (set.Add(number)) {\n                result.Add(number);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (seen.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long number in numbers) {\n   \
    \         if (set.Add(number)) {\n                result.Add(number);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach\
    \ (long n in numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (seen.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (seen.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (set.Add(number)) {\n                result.Add(number);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        foreach (long number in numbers) {\n  \
    \          if (number == lastNumber) {\n                continue;\n          \
    \  }\n            result.Add(number);\n            lastNumber = number;\n    \
    \    }\n        return result;", "        var result = new List<long>();\n   \
    \     var seen = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (seen.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> hashSet = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (hashSet.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                continue;\n    \
    \        }\n            lastNumber = number;\n            currentNumber = number;\n\
    \            result.Add(number);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (seen.Add(n)) {\n     \
    \           result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> hashSet =\
    \ new HashSet<long>();\n        foreach (long number in numbers) {\n         \
    \   if (hashSet.Add(number)) {\n                result.Add(number);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (set.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (set.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (seen.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long lastNumber = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            if (number == lastNumber) {\n                continue;\n        \
    \    }\n            lastNumber = number;\n            result.Add(number);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      var seen = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (seen.Add(number)) {\n                numbers.Remove(number);\n\
    \            }\n        }\n        return numbers;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        foreach (var number\
    \ in numbers) {\n            if (result.Contains(number)) {\n                continue;\n\
    \            }\n            result.Add(number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        foreach (long number in numbers) {\n  \
    \          if (number != lastNumber) {\n                result.Add(number);\n\
    \                lastNumber = number;\n            }\n        }\n        return\
    \ result;", "        var seen = new HashSet<long>();\n        foreach (var number\
    \ in numbers) {\n            if (seen.Add(number)) {\n                numbers.Remove(number);\n\
    \            }\n        }\n        return numbers;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (set.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long number in numbers) {\n   \
    \         if (set.Add(number)) {\n                result.Add(number);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach\
    \ (long n in numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> hashSet =\
    \ new HashSet<long>();\n        foreach (long number in numbers) {\n         \
    \   if (hashSet.Add(number)) {\n                result.Add(number);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
