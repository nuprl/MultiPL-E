name: HumanEval_78_hex_key
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You have been tasked to write a function that receives \n  \
  \  // a hexadecimal number as a string and counts the number of hexadecimal \n \
  \   // digits that are primes (prime number, or a prime, is a natural number \n\
  \    // greater than 1 that is not a product of two smaller natural numbers).\n\
  \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
  \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
  \ 13).\n    // Note: you may assume the input is always correct or empty string,\
  \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n   \
  \ // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n\
  \    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"\
  ))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long\
  \ HexKey(string num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
  AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
  ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
  123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12L));\n    }\n\n}\n"
completions: ["        long result = 0;\n        foreach (char c in num) {\n     \
    \       int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n    \
    \            throw new ArgumentOutOfRangeException(\"num\");\n            }\n\
    \            result += (long)Math.Pow(16, digit);\n        }\n        return result;",
  "        long result = 0;\n        foreach (char c in num) {\n            int digit\
    \ = c - '0';\n            if (digit >= 2 && digit <= 6) {\n                result\
    \ += (long)Math.Pow(digit, 2);\n            }\n        }\n        return result;",
  "        long ret = 0;\n        foreach (char c in num) {\n            int val =\
    \ (int)c;\n            if (val > 9) {\n                val -= 10;\n          \
    \  }\n            long tmp = val * val;\n            if (tmp > ret) {\n      \
    \          ret = tmp;\n            }\n        }\n        return ret;", "     \
    \   long result = 0;\n        foreach (char c in num) {\n            int d = (int)c;\n\
    \            if (d >= '0' && d <= '9') {\n                result += (long)Math.Pow(16,\
    \ (int)c - '0');\n            }\n        }\n        return result;", "       \
    \ long result = 0;\n        string hex = num.ToUpper();\n        char[] hexChars\
    \ = hex.ToCharArray();\n        foreach (char hexChar in hexChars) {\n       \
    \     int decimal = Convert.ToInt32(hexChar, 16);\n            if (decimal >=\
    \ 2 && decimal <= 9) {\n                result += decimal;\n            }\n  \
    \      }\n        return result;", "        long num2 = 0;\n        foreach (char\
    \ c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= '0'\
    \ && d <= '9') {\n                num2 += d;\n            }\n        }\n     \
    \   return num2;", "        long result = 0;\n        long digits = 0;\n     \
    \   long primes = 0;\n        long hexDigits = 0;\n        string hex = num.ToUpper();\n\
    \        char[] hexChars = hex.ToCharArray();\n        foreach (char hexChar in\
    \ hexChars) {\n            hexDigits += hexChar.ToString().Length;\n        }\n\
    \        foreach (char hexChar in hexChars) {\n            digits += hexChar.ToString().Length;\n\
    \        }\n        long hexDigit = hexDigits;\n        long hexDigitPrimes =\
    \ hexDigit / 2;\n        long hexDigitPrime = hexDigitPrimes;\n        long hexDigitPrimePrimes\
    \ = hexDigitPrime / 2;\n        long hexDigitPrimePrime = hexDigitPrimePrimes;\n\
    \        long hexDigitPrimePrimePrimes = hexDigitPrimePrime / 2;\n        long\
    \ hexDigitPrimePrimePrime = hexDigitPrimePrimePrimes;\n        long hexDigitPrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrime / 2;\n        long hexDigitPrimePrimePrimePrime =\
    \ hexDigitPrimePrimePrimePrimes;\n        long hexDigitPrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrime / 2;\n        long hexDigitPrimePrimePrimePrimePrime\
    \ = hexDigitPrimePrimePrimePrimePrimes;\n        long hexDigitPrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimePrime / 2;\n        long hexDigitPrimePrimePrimePrimePrime\
    \ = hexDigitPrimePrimePrimePrimePrimePrimes;\n        long hexDigitPrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimePrimePrime / 2;\n        long hexDigitPrimePrimePrimePrimePrimePrime\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimes;\n        long hexDigitPrimePrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrime / 2;\n        long hexDigitPrimePrimePrimePrimePrimePrimePrime\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimePrime", "        long result =\
    \ 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            int power = (int)Math.Pow(16, digit);\n  \
    \          result += power;\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit\
    \ = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw\
    \ new ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n\
    \            result += (long)Math.Pow(16, digit);\n        }\n        return result;",
  "        long numDigits = 0;\n        long numPrimes = 0;\n        long numPrimes2\
    \ = 0;\n        long numPrimes3 = 0;\n        long numPrimes4 = 0;\n        long\
    \ numPrimes5 = 0;\n        long numPrimes6 = 0;\n        long numPrimes7 = 0;\n\
    \        long numPrimes8 = 0;\n        long numPrimes9 = 0;\n        long numPrimes10\
    \ = 0;\n        long numPrimes11 = 0;\n        long numPrimes12 = 0;\n       \
    \ long numPrimes13 = 0;\n        long numPrimes14 = 0;\n        long numPrimes15\
    \ = 0;\n        long numPrimes16 = 0;\n        long numPrimes17 = 0;\n       \
    \ long numPrimes18 = 0;\n        long numPrimes19 = 0;\n        long numPrimes20\
    \ = 0;\n        long numPrimes21 = 0;\n        long numPrimes22 = 0;\n       \
    \ long numPrimes23 = 0;\n        long numPrimes24 = 0;\n        long numPrimes25\
    \ = 0;\n        long numPrimes26 = 0;\n        long numPrimes27 = 0;\n       \
    \ long numPrimes28 = 0;\n        long numPrimes29 = 0;\n        long numPrimes30\
    \ = 0;\n        long numPrimes31 = 0;\n        long numPrimes32 = 0;\n       \
    \ long numPrimes33 = 0;\n        long numPrimes34 = 0;\n        long numPrimes35\
    \ = 0;\n        long numPrimes36 = 0;\n        long numPrimes37 = 0;\n       \
    \ long numPrimes38 = 0;\n        long numPrimes39 = 0;\n        long numPrimes40\
    \ = 0;\n        long numPrimes41 = 0;\n        long numPrimes42 = 0;\n       \
    \ long numPrimes43 = 0;\n        long numPrimes44 = 0;\n        long numPrimes45\
    \ = 0;\n        long numPrimes46 = 0;\n        long numPrimes47 = 0;\n       \
    \ long numPrimes48 = 0;\n        long numPrimes49 = 0;\n        long numPrimes50\
    \ = 0;\n        long numPrimes51 = 0;\n        long numPrimes52 = 0;\n       \
    \ long numPrimes53 = 0;\n        long numPrimes54 = 0;\n        long numPrimes55\
    \ = 0;\n        long numPrimes56 = 0;\n        long numPrimes57 = 0;\n       \
    \ long numPrimes58 = 0;\n        long numPrimes59 = 0;\n        long numPrimes60\
    \ = 0;\n        long numPrimes61 = 0;\n        long numPrimes62 = 0;\n       \
    \ long numPrimes63 = 0;\n        long numPrimes64", "        long ret = 0;\n \
    \       foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    HexKey\", \"The input string contains invalid characters.\");\n            }\n\
    \            int digit2 = digit - 10;\n            if (digit2 == 0) {\n      \
    \          ret += digit * digit2;\n            }\n            else {\n       \
    \         ret += digit * digit2;\n                ret += digit2;\n           \
    \ }\n        }\n        return ret;", "        long result = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit <\
    \ 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal\
    \ digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;", "        long ret = 0;\n      \
    \  long numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimes2\
    \ = numPrimes;\n        long numPrimes3 = numPrimes;\n        long numPrimes4\
    \ = numPrimes;\n        long numPrimes5 = numPrimes;\n        long numPrimes6\
    \ = numPrimes;\n        long numPrimes7 = numPrimes;\n        long numPrimes8\
    \ = numPrimes;\n        long numPrimes9 = numPrimes;\n        long numPrimes10\
    \ = numPrimes;\n        long numPrimes11 = numPrimes;\n        long numPrimes12\
    \ = numPrimes;\n        long numPrimes13 = numPrimes;\n        long numPrimes14\
    \ = numPrimes;\n        long numPrimes15 = numPrimes;\n        long numPrimes16\
    \ = numPrimes;\n        long numPrimes17 = numPrimes;\n        long numPrimes18\
    \ = numPrimes;\n        long numPrimes19 = numPrimes;\n        long numPrimes20\
    \ = numPrimes;\n        long numPrimes21 = numPrimes;\n        long numPrimes22\
    \ = numPrimes;\n        long numPrimes23 = numPrimes;\n        long numPrimes24\
    \ = numPrimes;\n        long numPrimes25 = numPrimes;\n        long numPrimes26\
    \ = numPrimes;\n        long numPrimes27 = numPrimes;\n        long numPrimes28\
    \ = numPrimes;\n        long numPrimes29 = numPrimes;\n        long numPrimes30\
    \ = numPrimes;\n        long numPrimes31 = numPrimes;\n        long numPrimes32\
    \ = numPrimes;\n        long numPrimes33 = numPrimes;\n        long numPrimes34\
    \ = numPrimes;\n        long numPrimes35 = numPrimes;\n        long numPrimes36\
    \ = numPrimes;\n        long numPrimes37 = numPrimes;\n        long numPrimes38\
    \ = numPrimes;\n        long numPrimes39 = numPrimes;\n        long numPrimes40\
    \ = numPrimes;\n        long numPrimes41 = numPrimes;\n        long numPrimes42\
    \ = numPrimes;\n        long numPrimes43 = numPri", "        long num2 = 0;\n\
    \        bool isPrime = true;\n        string hex = num.ToUpper();\n        char[]\
    \ hexChars = hex.ToCharArray();\n        foreach (char c in hexChars) {\n    \
    \        int num = Convert.ToInt32(c);\n            int num2 = num * num;\n  \
    \          if (num2 > num) {\n                isPrime = false;\n            }\n\
    \        }\n        if (isPrime) {\n            num2 = Convert.ToInt64(hexChars[0])\
    \ * Convert.ToInt64(hexChars[0]);\n        }\n        return num2;", "       \
    \ long result = 0;\n        long digit = 0;\n        long prime = 0;\n       \
    \ bool isPrime = true;\n        string hex = num.ToUpper();\n        foreach (char\
    \ c in hex) {\n            digit = Convert.ToInt64(c);\n            if (isPrime)\
    \ {\n                prime = digit * digit;\n                if (prime > result)\
    \ {\n                    result = prime;\n                }\n            }\n \
    \           else {\n                prime = digit * digit;\n                if\
    \ (prime < result) {\n                    result = prime;\n                }\n\
    \            }\n            isPrime = !isPrime;\n        }\n        return result;",
  "        long result = 0;\n        long digit = 0;\n        long prime = 0;\n  \
    \      long primeCount = 0;\n        string hex = num.ToUpper();\n        char[]\
    \ hexChars = hex.ToCharArray();\n        foreach (char hexChar in hexChars) {\n\
    \            digit = Convert.ToInt64(hexChar, 16);\n            prime = digit\
    \ % 10;\n            if (prime == 0) {\n                primeCount++;\n      \
    \      }\n        }\n        if (primeCount >= 2) {\n            primeCount--;\n\
    \        }\n        prime = prime * 2;\n        primeCount--;\n        foreach\
    \ (char hexChar in hexChars) {\n            digit = Convert.ToInt64(hexChar, 16);\n\
    \            prime = prime % 10;\n            if (prime == 0) {\n            \
    \    primeCount--;\n            }\n        }\n        result = prime * primeCount;\n\
    \        return result;", "        long result = 0;\n        long digit = 0;\n\
    \        bool isPrime = true;\n        foreach (char c in num) {\n           \
    \ digit = Convert.ToInt64(c);\n            if (digit > 9) {\n                digit\
    \ = digit - 10;\n            }\n            if (digit == 0) {\n              \
    \  isPrime = false;\n            }\n            if (isPrime) {\n             \
    \   if (digit % 2 == 0) {\n                    isPrime = false;\n            \
    \    }\n            }\n            if (isPrime) {\n                result += digit;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n\
    \            if (digit >= 2 && digit <= 9) {\n                result += digit\
    \ * digit;\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Hexadecimal digit must be between 'A' and 'F'.\");\n            }\n          \
    \  result += (digit - 'A') * Math.Pow(16, num.Length - 1 - c.ToString().Length);\n\
    \        }\n        return result;", "        long numOfDigits = 0;\n        long\
    \ numOfPrimes = 0;\n        long numOfPrimeDigits = 0;\n        long numOfPrimeDigits2\
    \ = 0;\n        long numOfPrimeDigits3 = 0;\n        long numOfPrimeDigits4 =\
    \ 0;\n        long numOfPrimeDigits5 = 0;\n        long numOfPrimeDigits6 = 0;\n\
    \        long numOfPrimeDigits7 = 0;\n        long numOfPrimeDigits8 = 0;\n  \
    \      long numOfPrimeDigits9 = 0;\n        long numOfPrimeDigits10 = 0;\n   \
    \     long numOfPrimeDigits11 = 0;\n        long numOfPrimeDigits12 = 0;\n   \
    \     long numOfPrimeDigits13 = 0;\n        long numOfPrimeDigits14 = 0;\n   \
    \     long numOfPrimeDigits15 = 0;\n        long numOfPrimeDigits16 = 0;\n   \
    \     long numOfPrimeDigits17 = 0;\n        long numOfPrimeDigits18 = 0;\n   \
    \     long numOfPrimeDigits19 = 0;\n        long numOfPrimeDigits20 = 0;\n   \
    \     long numOfPrimeDigits21 = 0;\n        long numOfPrimeDigits22 = 0;\n   \
    \     long numOfPrimeDigits23 = 0;\n        long numOfPrimeDigits24 = 0;\n   \
    \     long numOfPrimeDigits25 = 0;\n        long numOfPrimeDigits26 = 0;\n   \
    \     long numOfPrimeDigits27 = 0;\n        long numOfPrimeDigits28 = 0;\n   \
    \     long numOfPrimeDigits29 = 0;\n        long numOfPrimeDigits30 = 0;\n   \
    \     long numOfPrimeDigits31 = 0;\n        long numOfPrimeDigits32 = 0;\n   \
    \     long numOfPrimeDigits33 = 0;\n        long numOfPrimeDigits34 = 0;\n   \
    \     long numOfPrimeDigits35 = 0;\n        long numOfPrimeDigits36 = 0;\n   \
    \     long numOfPrimeDigits37 = 0;\n        long numOfPrimeDigits38 = 0;\n   \
    \     long numOfPrimeDigits39 = 0;\n        long numOfPrimeDigits40 = 0;\n   \
    \     long numOfPrimeDigits41 = 0;\n        long numOfPrimeDigits42 = 0;\n   \
    \     long numOfPrimeDigits43 = 0;\n        long numOfPrimeDigits44 = 0;\n   \
    \     long numOfPrimeDigits45 = 0;\n        long numOfPrimeDigits"]
stop_tokens:
- "\n    }\n"
