name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L,\
  \ (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L,\
  \ (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)5L, (long)653L}))\n    // >>> Common((new List<long>(new\
  \ long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)2L, (long)3L}))\n    public\
  \ static List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long max = 0;\n\
    \        foreach (long i in l1) {\n            max = Math.Max(max, i);\n     \
    \   }\n        foreach (long i in l2) {\n            max = Math.Max(max, i);\n\
    \        }\n        long min = max;\n        foreach (long i in l1) {\n      \
    \      min = Math.Min(min, i);\n        }\n        foreach (long i in l2) {\n\
    \            min = Math.Min(min, i);\n        }\n        long mid = min + (max\
    \ - min) / 2;\n        foreach (long i in l1) {\n            if (i < mid) {\n\
    \                result.Add(i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (i < mid) {\n                result.Add(i);\n   \
    \         }\n        }\n        return result;", "        if (l1 == null || l2\
    \ == null || l1.Count != l2.Count) return null;\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n   \
    \         max = Math.Max(max, x);\n        }\n        foreach (long x in l2) {\n\
    \            max = Math.Max(max, x);\n        }\n        long min = max;\n   \
    \     foreach (long x in l1) {\n            if (x < min) min = x;\n        }\n\
    \        foreach (long x in l2) {\n            if (x > max) max = x;\n       \
    \ }\n        long mid = min + (max - min) / 2;\n        foreach (long x in l1)\
    \ {\n            if (x < mid) result.Add(x);\n        }\n        foreach (long\
    \ x in l2) {\n            if (x > mid) result.Add(x);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long minValue = l1.Min();\n        long maxValue = l1.Max();\n        long\
    \ minValue2 = l2.Min();\n        long maxValue2 = l2.Max();\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = minValue ==\
    \ maxValue;\n        bool isMaxValue = maxValue == minValue;\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = minValue ==\
    \ maxValue;\n        bool isMaxValue = maxValue == minValue;\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = minValue ==\
    \ maxValue;\n        bool isMaxValue = maxValue == minValue;\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = minValue ==\
    \ maxValue;\n        bool isMaxValue = maxValue == minValue;\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = min", "   \
    \     List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n\
    \        HashSet<long> h2 = new HashSet<long>(l2);\n        foreach (long x in\
    \ h1) {\n            if (h2.Contains(x)) {\n                result.Add(x);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long i in l1) {\n\
    \            if (l2.Contains(i)) {\n                result.Add(i);\n         \
    \       max = Math.Max(max, i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (!l1.Contains(i)) {\n                result.Add(i);\n\
    \                max = Math.Max(max, i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).Take(max).ToList();", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            foreach (long y\
    \ in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long common = 0;\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    common++;\n \
    \                   break;\n                }\n            }\n            if (common\
    \ > 0) {\n                result.Add(x);\n                common = 0;\n      \
    \      }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l1) {\n            bool found = false;\n            foreach\
    \ (long j in l2) {\n                if (i == j) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l1) {\n            foreach (long j in l2) {\n       \
    \         if (i == j) result.Add(i);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        foreach (var item\
    \ in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long common = 0;\n        foreach (long i in l1)\
    \ {\n            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (i == common || j == common) continue;\n                if\
    \ (i == j) common = i;\n                else if (i == common) common = j;\n  \
    \              else if (j == common) common = i;\n            }\n            result.Add(common);\n\
    \            common = 0;\n        }\n        return result;", "        if (l1\
    \ == null || l2 == null)\n            return null;\n        if (l1.Count != l2.Count)\n\
    \            return null;\n        List<long> result = new List<long>();\n   \
    \     foreach (long i in l1) {\n            bool found = false;\n            foreach\
    \ (long j in l2) {\n                if (i == j)\n                    found = true;\n\
    \            }\n            if (!found)\n                result.Add(i);\n    \
    \    }\n        return result;"]
stop_tokens:
- "\n    }\n"
