name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L,\
  \ (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L,\
  \ (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)5L, (long)653L}))\n    // >>> Common((new List<long>(new\
  \ long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)2L, (long)3L}))\n    public\
  \ static List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long max = 0;\n\
    \        foreach (long i in l1) {\n            max = Math.Max(max, i);\n     \
    \   }\n        foreach (long i in l2) {\n            max = Math.Max(max, i);\n\
    \        }\n        long min = max;\n        foreach (long i in l1) {\n      \
    \      min = Math.Min(min, i);\n        }\n        foreach (long i in l2) {\n\
    \            min = Math.Min(min, i);\n        }\n        long mid = min + (max\
    \ - min) / 2;\n        foreach (long i in l1) {\n            if (i < mid) {\n\
    \                result.Add(i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (i < mid) {\n                result.Add(i);\n   \
    \         }\n        }\n        return result;", "        if (l1 == null || l2\
    \ == null || l1.Count != l2.Count) return null;\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n   \
    \         max = Math.Max(max, x);\n        }\n        foreach (long x in l2) {\n\
    \            max = Math.Max(max, x);\n        }\n        long min = max;\n   \
    \     foreach (long x in l1) {\n            if (x < min) min = x;\n        }\n\
    \        foreach (long x in l2) {\n            if (x > max) max = x;\n       \
    \ }\n        long mid = min + (max - min) / 2;\n        foreach (long x in l1)\
    \ {\n            if (x < mid) result.Add(x);\n        }\n        foreach (long\
    \ x in l2) {\n            if (x > mid) result.Add(x);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long minValue = l1.Min();\n        long maxValue = l1.Max();\n        long\
    \ minValue2 = l2.Min();\n        long maxValue2 = l2.Max();\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = minValue ==\
    \ maxValue;\n        bool isMaxValue = maxValue == minValue;\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = minValue ==\
    \ maxValue;\n        bool isMaxValue = maxValue == minValue;\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = minValue ==\
    \ maxValue;\n        bool isMaxValue = maxValue == minValue;\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = minValue ==\
    \ maxValue;\n        bool isMaxValue = maxValue == minValue;\n        bool isMinValue2\
    \ = minValue2 == maxValue2;\n        bool isMaxValue2 = maxValue2 == minValue2;\n\
    \        bool isMinValue = minValue == maxValue;\n        bool isMaxValue = maxValue\
    \ == minValue;\n        bool isMinValue2 = minValue2 == maxValue2;\n        bool\
    \ isMaxValue2 = maxValue2 == minValue2;\n        bool isMinValue = min", "   \
    \     List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n\
    \        HashSet<long> h2 = new HashSet<long>(l2);\n        foreach (long x in\
    \ h1) {\n            if (h2.Contains(x)) {\n                result.Add(x);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long i in l1) {\n\
    \            if (l2.Contains(i)) {\n                result.Add(i);\n         \
    \       max = Math.Max(max, i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (!l1.Contains(i)) {\n                result.Add(i);\n\
    \                max = Math.Max(max, i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).Take(max).ToList();", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            foreach (long y\
    \ in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long common = 0;\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    common++;\n \
    \                   break;\n                }\n            }\n            if (common\
    \ > 0) {\n                result.Add(x);\n                common = 0;\n      \
    \      }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l1) {\n            bool found = false;\n            foreach\
    \ (long j in l2) {\n                if (i == j) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l1) {\n            foreach (long j in l2) {\n       \
    \         if (i == j) result.Add(i);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        foreach (var item\
    \ in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long common = 0;\n        foreach (long i in l1)\
    \ {\n            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (i == common || j == common) continue;\n                if\
    \ (i == j) common = i;\n                else if (i == common) common = j;\n  \
    \              else if (j == common) common = i;\n            }\n            result.Add(common);\n\
    \            common = 0;\n        }\n        return result;", "        if (l1\
    \ == null || l2 == null)\n            return null;\n        if (l1.Count != l2.Count)\n\
    \            return null;\n        List<long> result = new List<long>();\n   \
    \     foreach (long i in l1) {\n            bool found = false;\n            foreach\
    \ (long j in l2) {\n                if (i == j)\n                    found = true;\n\
    \            }\n            if (!found)\n                result.Add(i);\n    \
    \    }\n        return result;", "        if (l1 == null || l2 == null || l1.Count\
    \ != l2.Count) {\n            return null;\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ found = true;\n            }\n            if (!found) result.Add(i);\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            bool found = false;\n         \
    \   foreach (long j in l2) {\n                if (i == j) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \       }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n\
    \        HashSet<long> h2 = new HashSet<long>(l2);\n        h1.IntersectWith(h2).ToList().ForEach(result.Add);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null || l1.Count != l2.Count) {\n            return\
    \ null;\n        }\n        List<long> result = new List<long>();\n        HashSet<long>\
    \ set1 = new HashSet<long>(l1);\n        HashSet<long> set2 = new HashSet<long>(l2);\n\
    \        foreach (long x in set1) {\n            if (set2.Contains(x)) {\n   \
    \             result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n\
    \            if (l2.Contains(x)) {\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (l1.Contains(x))\
    \ {\n                max = Math.Max(max, x);\n            }\n        }\n     \
    \   if (max == 0) {\n            return new List<long>();\n        }\n       \
    \ foreach (long x in l1) {\n            if (l2.Contains(x)) {\n              \
    \  result.Add(x);\n            }\n        }\n        foreach (long x in l2) {\n\
    \            if (l1.Contains(x)) {\n                result.Add(x);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y)\n                    result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long mid1 = min1 + (max1\
    \ - min1) / 2;\n        long mid2 = min2 + (max2 - min2) / 2;\n        long mid\
    \ = mid1;\n        long mid2 = mid2;\n        bool found = false;\n        while\
    \ (!found && mid <= max1 && mid2 <= max2) {\n            if (l1[mid] == l2[mid2])\
    \ {\n                result.Add(l1[mid]);\n                mid++;\n          \
    \      mid2++;\n                found = true;\n            } else if (l1[mid]\
    \ < l2[mid2]) {\n                mid++;\n            } else {\n              \
    \  mid2++;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            bool\
    \ found = false;\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long i in l1) {\n\
    \            if (l2.Contains(i)) {\n                max = Math.Max(max, i);\n\
    \            }\n        }\n        foreach (long i in l2) {\n            if (l1.Contains(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   foreach (long i in l1) {\n            if (l2.Contains(i)) {\n            \
    \    result.Add(i);\n            }\n        }\n        foreach (long i in l2)\
    \ {\n            if (l1.Contains(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result.OrderBy(i => i).ToList();", "    \
    \    List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) {\n           \
    \         result.Remove(i);\n                    result.Remove(j);\n         \
    \       }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> hs1 = new HashSet<long>(l1);\n\
    \        HashSet<long> hs2 = new HashSet<long>(l2);\n        foreach (long x in\
    \ hs1) {\n            if (hs2.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ found = true;\n            }\n            if (!found) result.Add(i);\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        if (l1 == null ||\
    \ l2 == null)\n            return null;\n        if (l1.Count != l2.Count)\n \
    \           return null;\n        List<long> result = new List<long>();\n    \
    \    foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y)\n                    found = true;\n\
    \            }\n            if (!found)\n                result.Add(x);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        var l3 = new List<long>();\n        foreach (var x in l1) {\n         \
    \   foreach (var y in l2) {\n                if (x == y) {\n                 \
    \   l3.Add(x);\n                    break;\n                }\n            }\n\
    \        }\n        return l3;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y)\n                    result.Add(x);\n            }\n\
    \        }\n        return result;", "        var l3 = new List<long>();\n   \
    \     foreach (var item in l1) {\n            if (l2.Contains(item)) {\n     \
    \           l3.Add(item);\n            }\n        }\n        return l3;", "  \
    \      List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            foreach (long\
    \ j in l2) {\n                if (i == j) result.Add(i);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            bool found = false;\n         \
    \   foreach (long j in l2) {\n                if (i == j) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) continue;\n                if\
    \ (i == common) result.Add(j);\n                if (j == common) result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long mid1\
    \ = min1 + (max1 - min1) / 2;\n        long mid2 = min2 + (max2 - min2) / 2;\n\
    \        bool found = false;\n        long mid;\n        do {\n            mid\
    \ = mid1;\n            while (mid <= mid2) {\n                if (l1.Contains(mid))\
    \ {\n                    result.Add(mid);\n                    found = true;\n\
    \                    break;\n                }\n                mid++;\n     \
    \       }\n            mid1 = mid;\n            mid = mid2;\n            while\
    \ (mid >= mid1) {\n                if (l2.Contains(mid)) {\n                 \
    \   result.Add(mid);\n                    found = true;\n                    break;\n\
    \                }\n                mid--;\n            }\n            mid2 =\
    \ mid;\n        } while (!found);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        foreach (long x in\
    \ l1) {\n            max = Math.Max(max, x);\n        }\n        foreach (long\
    \ x in l2) {\n            max = Math.Max(max, x);\n        }\n        long min\
    \ = max;\n        foreach (long x in l1) {\n            min = Math.Min(min, x);\n\
    \        }\n        foreach (long x in l2) {\n            min = Math.Min(min,\
    \ x);\n        }\n        long mid = min + (max - min) / 2;\n        long mid2\
    \ = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n \
    \       long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l1) {\n            bool\
    \ found = false;\n            foreach (long j in l2) {\n                if (i\
    \ == j) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long minValue = l1.Min();\n\
    \        long maxValue = l1.Max();\n        long minValue2 = l2.Min();\n     \
    \   long maxValue2 = l2.Max();\n        if (minValue == minValue2 && maxValue\
    \ == maxValue2) {\n            return result;\n        }\n        if (minValue\
    \ == minValue2) {\n            foreach (long value in l2) {\n                if\
    \ (value == minValue) {\n                    result.Add(value);\n            \
    \    }\n            }\n            return result;\n        }\n        if (maxValue\
    \ == maxValue2) {\n            foreach (long value in l1) {\n                if\
    \ (value == maxValue) {\n                    result.Add(value);\n            \
    \    }\n            }\n            return result;\n        }\n        long mid\
    \ = minValue + (maxValue - minValue) / 2;\n        List<long> left = new List<long>();\n\
    \        List<long> right = new List<long>();\n        foreach (long value in\
    \ l1) {\n            if (value < mid) {\n                left.Add(value);\n  \
    \          } else {\n                right.Add(value);\n            }\n      \
    \  }\n        foreach (long value in l2) {\n            if (value < mid) {\n \
    \               left.Add(value);\n            } else {\n                right.Add(value);\n\
    \            }\n        }\n        result = Common(left, right);\n        if (result.Count\
    \ == 0) {\n            return result;\n        }\n        long mid2 = minValue2\
    \ + (maxValue2 - minValue2) / 2;\n        List<long> left2 = new List<long>();\n\
    \        List<long> right2 = new List<long>();\n        foreach (long value in\
    \ l1) {\n            if (value < mid2) {\n                left2.Add(value);\n\
    \            } else {\n                right2.Add(value);\n            }\n   \
    \     }\n        foreach (long value in l2) {\n            if (value < mid2) {\n\
    \                left2.Add(value);\n            } else {\n                right2.Add(value);\n\
    \            }\n        }\n        result = result.Union(Common(left2, right2)).ToList();\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set1 = new HashSet<long>(l1);\n        HashSet<long> set2\
    \ = new HashSet<long>(l2);\n        foreach (long x in set1) {\n            if\
    \ (set2.Contains(x)) {\n                result.Add(x);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long x in l1) {\n            if (l2.Contains(x)) {\n                max = Math.Max(max,\
    \ x);\n            }\n        }\n        foreach (long x in l2) {\n          \
    \  if (l1.Contains(x)) {\n                max = Math.Max(max, x);\n          \
    \  }\n        }\n        if (max > 0) {\n            foreach (long x in l1) {\n\
    \                if (l2.Contains(x)) {\n                    result.Add(x);\n \
    \               }\n            }\n            foreach (long x in l2) {\n     \
    \           if (l1.Contains(x)) {\n                    result.Add(x);\n      \
    \          }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            bool\
    \ found = false;\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n\
    \            max = Math.Max(max, x);\n        }\n        foreach (long x in l2)\
    \ {\n            max = Math.Max(max, x);\n        }\n        foreach (long x in\
    \ l1) {\n            foreach (long y in l2) {\n                if (x == y) {\n\
    \                    result.Add(x);\n                    break;\n            \
    \    }\n            }\n        }\n        return result.OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long min1\
    \ = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long min1 = l1.Min();\n        long max1\
    \ = l1.Max();\n        long min2 = l2.Min();\n        long max2 = l2.Max();\n\
    \        long min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long min1\
    \ = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long min1 = l1.Min();\n        long max1\
    \ = l1.Max();\n        long min2 = l2.Min();\n        long max2 = l2.Max();\n\
    \        long min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long min1\
    \ = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long min1 = l1.Min();\n        long max1\
    \ = l1.Max();\n        long min2 = l2.Min();\n        long max2 = l2.Max();\n\
    \        long min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long min1 = l1.Min", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            bool found = false;\n            foreach (long y in l2) {\n \
    \               if (x == y) {\n                    found = true;\n           \
    \         break;\n                }\n            }\n            if (!found) {\n\
    \                result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y)\n                    result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            if (l2.Contains(i)) {\n                max = i;\n\
    \                break;\n            }\n        }\n        foreach (long i in\
    \ l2) {\n            if (l1.Contains(i)) {\n                if (i > max) {\n \
    \                   max = i;\n                }\n            }\n        }\n  \
    \      result.Add(max);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y)\n                    result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long i in l1) {\n            bool found = false;\n            foreach\
    \ (long j in l2) {\n                if (i == j) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> h1 = new HashSet<long>(l1);\n        HashSet<long> h2 = new\
    \ HashSet<long>(l2);\n        foreach (long x in h1) {\n            if (h2.Contains(x))\
    \ {\n                result.Add(x);\n                h1.Remove(x);\n         \
    \       h2.Remove(x);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            if (l2.Contains(item))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            bool\
    \ found = false;\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        if (l1 == null ||\
    \ l2 == null) return null;\n        if (l1.Count != l2.Count) return null;\n \
    \       List<long> result = new List<long>();\n        foreach (long i in l1)\
    \ {\n            bool found = false;\n            foreach (long j in l2) {\n \
    \               if (i == j) found = true;\n            }\n            if (!found)\
    \ result.Add(i);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        if (l1 == null || l2 == null || l1.Count !=\
    \ l2.Count) {\n            return null;\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long i in l1) {\n            foreach (long j in l2) {\n          \
    \      if (i == j) result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            bool found =\
    \ false;\n            foreach (var item2 in l2) {\n                if (item ==\
    \ item2) {\n                    found = true;\n                    break;\n  \
    \              }\n            }\n            if (!found) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        if (l1 == null ||\
    \ l2 == null)\n            return null;\n        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y)\n                  \
    \  found = true;\n            }\n            if (!found)\n                result.Add(x);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n        HashSet<long>\
    \ h2 = new HashSet<long>(l2);\n        foreach (long x in h1) {\n            if\
    \ (h2.Contains(x)) {\n                result.Add(x);\n                h1.Remove(x);\n\
    \                h2.Remove(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long minDiff = max1 - min1;\n        long maxDiff = max2\
    \ - min2;\n        if (minDiff > maxDiff) {\n            minDiff = maxDiff - min1;\n\
    \            maxDiff = max1 - min2;\n        }\n        long mid1 = min1 + (minDiff\
    \ / 2);\n        long mid2 = min2 + (minDiff / 2);\n        long midDiff = max1\
    \ - min1;\n        long midMax = max2 - min2;\n        long midMin = min1 - min2;\n\
    \        long midMid = (midMax + midMin) / 2;\n        long midMidDiff = midMax\
    \ - mid1;\n        long midMidMax = midMax - mid2;\n        long midMidMin = midMin\
    \ - mid2;\n        long midMidMid = (midMidMax + midMidMin) / 2;\n        long\
    \ midMidMidDiff = midMidMax - midMid;\n        long midMidMidMax = midMidMax -\
    \ midMidMax;\n        long midMidMidMin = midMidMin - midMidMin;\n        long\
    \ midMidMid = (midMidMidMax + midMidMidMin) / 2;\n        long midMidMidDiff =\
    \ midMidMidMax - midMidMid;\n        long midMidMidMax = midMidMidMax - midMidMidMax;\n\
    \        long midMidMidMin = midMidMidMin - midMidMidMin;\n        long midMidMid\
    \ = (midMidMidMax + midMidMidMin) / 2;\n        long midMidMidDiff = midMidMidMax\
    \ - midMidMid;\n        long midMidMidMax = midMidMidMax - midMidMidMax;\n   \
    \     long midMidMidMin = midMidMidMin - midMidMidMin;\n        long midMidMid\
    \ = (midMidMidMax + midMidMidMin) / 2;\n        long midMidMidDiff = midMidMidMax\
    \ - midMidMid;\n        long midMidMidMax = midMidMidMax - midMidMidMax;\n   \
    \     long midMidMidMin = midMidMidMin - midMidMidMin;\n        long midMidMid\
    \ = (midMidMidMax + midMidMidMin) / 2;\n        long midMidMidDiff = midMidMidMax\
    \ - midMidMid;\n        long ", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   foreach (long i in l2) {\n            if (l1.Contains(i)) {\n            \
    \    max = Math.Max(max, i);\n            }\n        }\n        foreach (long\
    \ i in l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        foreach (long i in l2) {\n            if (l1.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        var l3 = new List<long>();\n   \
    \     foreach (var i in l1) {\n            foreach (var j in l2) {\n         \
    \       if (i == j) l3.Add(i);\n            }\n        }\n        return l3;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long mid1 = (long)((min1 + max1) / 2);\n        long mid2\
    \ = (long)((min2 + max2) / 2);\n        long mid = (long)((min1 + max2) / 2);\n\
    \        long minDiff = max1 - min2;\n        long maxDiff = max1 - min1;\n  \
    \      long diff = (long)Math.Abs(minDiff);\n        long midDiff = maxDiff /\
    \ 2;\n        long midDiff2 = midDiff / 2;\n        long midDiff3 = midDiff2 /\
    \ 2;\n        long midDiff4 = midDiff3 / 2;\n        long midDiff5 = midDiff4\
    \ / 2;\n        long midDiff6 = midDiff5 / 2;\n        long midDiff7 = midDiff6\
    \ / 2;\n        long midDiff8 = midDiff7 / 2;\n        long midDiff9 = midDiff8\
    \ / 2;\n        long midDiff10 = midDiff9 / 2;\n        long midDiff11 = midDiff10\
    \ / 2;\n        long midDiff12 = midDiff11 / 2;\n        long midDiff13 = midDiff12\
    \ / 2;\n        long midDiff14 = midDiff13 / 2;\n        long midDiff15 = midDiff14\
    \ / 2;\n        long midDiff16 = midDiff15 / 2;\n        long midDiff17 = midDiff16\
    \ / 2;\n        long midDiff18 = midDiff17 / 2;\n        long midDiff19 = midDiff18\
    \ / 2;\n        long midDiff20 = midDiff19 / 2;\n        long midDiff21 = midDiff20\
    \ / 2;\n        long midDiff22 = midDiff21 / 2;\n        long midDiff23 = midDiff22\
    \ / 2;\n        long midDiff24 = midDiff23 / 2;\n        long midDiff25 = midDiff24\
    \ / 2;\n        long midDiff26 = midDiff25 / 2;\n        long midDiff27 = midDiff26\
    \ / 2;\n        long midDiff28 = midDiff27 / 2;\n        long midDiff29 = midDiff28\
    \ / 2;\n        long midDiff30 = midDiff29 / 2;\n        long midDiff31 = midDiff30\
    \ / 2;\n        long midDiff32 = midDiff31 / 2;\n        long midDiff33 = midDiff32\
    \ / 2;\n        long midDiff34 = midDiff33 / 2;", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long max1 = 0, max2 = 0;\n        foreach (long x in l1) {\n            if\
    \ (max1 < x) max1 = x;\n            foreach (long y in l2) {\n               \
    \ if (max2 < y) max2 = y;\n            }\n        }\n        long min1 = 0, min2\
    \ = 0;\n        foreach (long x in l1) {\n            if (min1 < x) min1 = x;\n\
    \            foreach (long y in l2) {\n                if (min2 < y) min2 = y;\n\
    \            }\n        }\n        long mid1 = (max1 + min1) / 2;\n        long\
    \ mid2 = (max2 + min2) / 2;\n        foreach (long x in l1) {\n            if\
    \ (x == mid1) result.Add(x);\n            else if (x == mid2) result.Add(x);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long max1 = 0, max2 = 0;\n        foreach (long x in\
    \ l1) {\n            if (max1 < x) {\n                max1 = x;\n            }\n\
    \        }\n        foreach (long x in l2) {\n            if (max2 < x) {\n  \
    \              max2 = x;\n            }\n        }\n        if (max1 == max2)\
    \ {\n            foreach (long x in l1) {\n                if (l2.Contains(x))\
    \ {\n                    result.Add(x);\n                }\n            }\n  \
    \      }\n        else {\n            long mid1 = max1 / 2;\n            long\
    \ mid2 = max2 / 2;\n            List<long> l3 = Common(l1, l2.Where(x => x < mid1));\n\
    \            List<long> l4 = Common(l2, l1.Where(x => x < mid2));\n          \
    \  List<long> l5 = Common(l3, l4);\n            List<long> l6 = Common(l4, l5);\n\
    \            List<long> l7 = Common(l5, l6);\n            List<long> l8 = Common(l6,\
    \ l7);\n            List<long> l9 = Common(l7, l8);\n            List<long> l10\
    \ = Common(l8, l9);\n            List<long> l11 = Common(l9, l10);\n         \
    \   List<long> l12 = Common(l10, l11);\n            List<long> l13 = Common(l11,\
    \ l12);\n            List<long> l14 = Common(l12, l13);\n            List<long>\
    \ l15 = Common(l13, l14);\n            List<long> l16 = Common(l14, l15);\n  \
    \          List<long> l17 = Common(l15, l16);\n            List<long> l18 = Common(l16,\
    \ l17);\n            List<long> l19 = Common(l17, l18);\n            List<long>\
    \ l20 = Common(l18, l19);\n            List<long> l21 = Common(l19, l20);\n  \
    \          List<long> l22 = Common(l20, l21);\n            List<long> l23 = Common(l21,\
    \ l22);\n            List<long> l24 = Common(l22, l23);\n            List<long>\
    \ l25 = Common(l23, l24);\n            List<long> l26 = Common(l24, l25);\n  \
    \          List<long> l27 = Common(l25, l26);\n            List<long> l28 = Common(l26,\
    \ l27);\n            List<long> l29 = Common(l27, l28);\n            List<long>\
    \ l30 = Common(l28, l29);\n            List<long> l31 = Common(l29, l30);\n  \
    \          List<long> l32 = Common(l30, l", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                max = Math.Max(max, x);\n            }\n        }\n     \
    \   foreach (long x in l2) {\n            if (l1.Contains(x)) {\n            \
    \    max = Math.Max(max, x);\n            }\n        }\n        foreach (long\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (l1.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result.OrderBy(x => x).ToList();", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            bool found = false;\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             found = true;\n                    break;\n                }\n \
    \           }\n            if (!found) {\n                result.Add(x);\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long i in l1) {\n            foreach (long j in l2) {\n          \
    \      if (i == j) result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        if (l1 == null ||\
    \ l2 == null || l1.Count != l2.Count) {\n            return null;\n        }\n\
    \        List<long> result = new List<long>();\n        HashSet<long> set1 = new\
    \ HashSet<long>(l1);\n        HashSet<long> set2 = new HashSet<long>(l2);\n  \
    \      foreach (long x in set1) {\n            if (set2.Contains(x)) {\n     \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                result.Add(x);\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (l1.Contains(x))\
    \ {\n                result.Add(x);\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long minValue = l1.Min();\n        long maxValue\
    \ = l1.Max();\n        long minValue2 = l2.Min();\n        long maxValue2 = l2.Max();\n\
    \        long minValue3 = l1.Min(x => x);\n        long maxValue3 = l1.Max(x =>\
    \ x);\n        long minValue4 = l2.Min(x => x);\n        long maxValue4 = l2.Max(x\
    \ => x);\n        long minValue5 = l1.Min(x => x);\n        long maxValue5 = l1.Max(x\
    \ => x);\n        long minValue6 = l2.Min(x => x);\n        long maxValue6 = l2.Max(x\
    \ => x);\n        long minValue7 = l1.Min(x => x);\n        long maxValue7 = l1.Max(x\
    \ => x);\n        long minValue8 = l2.Min(x => x);\n        long maxValue8 = l2.Max(x\
    \ => x);\n        long minValue9 = l1.Min(x => x);\n        long maxValue9 = l1.Max(x\
    \ => x);\n        long minValue10 = l2.Min(x => x);\n        long maxValue10 =\
    \ l2.Max(x => x);\n        long minValue11 = l1.Min(x => x);\n        long maxValue11\
    \ = l1.Max(x => x);\n        long minValue12 = l2.Min(x => x);\n        long maxValue12\
    \ = l2.Max(x => x);\n        long minValue13 = l1.Min(x => x);\n        long maxValue13\
    \ = l1.Max(x => x);\n        long minValue14 = l2.Min(x => x);\n        long maxValue14\
    \ = l2.Max(x => x);\n        long minValue15 = l1.Min(x => x);\n        long maxValue15\
    \ = l1.Max(x => x);\n        long minValue16 = l2.Min(x => x);\n        long maxValue16\
    \ = l2.Max(x => x);\n        long minValue17 = l1.Min(x => x);\n        long maxValue17\
    \ = l1.Max(x => x);\n        long minValue18 = l2.Min(x => x);\n        long maxValue18\
    \ = l2.Max(x => x);\n        long minValue19 = l1.Min(x => x);\n        long maxValue19\
    \ = l1.Max(x => x);\n        long minValue20 = l2.", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n\
    \        HashSet<long> h2 = new HashSet<long>(l2);\n        foreach (long x in\
    \ h1) {\n            if (h2.Contains(x)) {\n                result.Add(x);\n \
    \               h2.Remove(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n   \
    \     HashSet<long> h2 = new HashSet<long>(l2);\n        foreach (long x in h1)\
    \ {\n            if (h2.Contains(x)) {\n                result.Add(x);\n     \
    \           h2.Remove(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long x in l1) {\n            if (l2.Contains(x)) {\n                max = Math.Max(max,\
    \ x);\n            }\n        }\n        foreach (long x in l2) {\n          \
    \  if (l1.Contains(x)) {\n                max = Math.Max(max, x);\n          \
    \  }\n        }\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        foreach\
    \ (long x in l2) {\n            if (l1.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set1 = new HashSet<long>(l1);\n \
    \       HashSet<long> set2 = new HashSet<long>(l2);\n        foreach (long x in\
    \ set1) {\n            if (set2.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  HashSet<long> h1 = new HashSet<long>(l1);\n        HashSet<long> h2 = new HashSet<long>(l2);\n\
    \        foreach (long x in h1) {\n            if (h2.Contains(x)) {\n       \
    \         result.Add(x);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long mid1 = min1 + (max1 - min1) / 2;\n        long mid2\
    \ = min2 + (max2 - min2) / 2;\n        bool found = false;\n        long mid;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n        long mid2;\n        long mid1;\n\
    \        long mid2;\n        long mid1;\n", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            foreach (long j in l2) {\n    \
    \            if (i == j) result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long common = 0;\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    common++;\n\
    \                }\n            }\n        }\n        if (common > 0) {\n    \
    \        result.Add(common);\n        }\n        return result.OrderBy(x => x).ToList();"]
stop_tokens:
- "\n    }\n"
