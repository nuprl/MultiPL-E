language: cs
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 3) == 0);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95d5fa59a9d64a0ea1e2559dfa1a7977>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95d5fa59a9d64a0ea1e2559dfa1a7977>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5cyf52i.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1002: ; expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpx5cyf52i.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6i4ebaxa.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a <= 0) return false;\n        if (a > 180) return\
    \ false;\n        if (a % 3 == 0) return true;\n        long b = a / 3;\n    \
    \    if (a % 3 == 2) return Iscube(b);\n        if (a % 3 == 1) return Iscube(b\
    \ * 3) || Iscube(b * 5);\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <398e79dec267485693543726a28dc557>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <398e79dec267485693543726a28dc557>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long m = n;\n        long r =\
    \ n;\n        long s = n;\n        long t = n;\n        long u = n;\n        long\
    \ v = n;\n        long w = n;\n        long x = n;\n        long y = n;\n    \
    \    long z = n;\n        long A = n;\n        long B = n;\n        long C = n;\n\
    \        long D = n;\n        long E = n;\n        long F = n;\n        long G\
    \ = n;\n        long H = n;\n        long I = n;\n        long J = n;\n      \
    \  long K = n;\n        long L = n;\n        long M = n;\n        long N = n;\n\
    \        long O = n;\n        long P = n;\n        long Q = n;\n        long R\
    \ = n;\n        long S = n;\n        long T = n;\n        long U = n;\n      \
    \  long V = n;\n        long W = n;\n        long X = n;\n        long Y = n;\n\
    \        long Z = n;\n        long AA = n;\n        long AB = n;\n        long\
    \ AC = n;\n        long AD = n;\n        long AE = n;\n        long AF = n;\n\
    \        long AG = n;\n        long AH = n;\n        long AI = n;\n        long\
    \ AJ = n;\n        long AK = n;\n        long AL = n;\n        long AM = n;\n\
    \        long AN = n;\n        long AO = n;\n        long AP = n;\n        long\
    \ AQ = n;\n        long AR = n;\n        long AS = n;\n        long AT = n;\n\
    \        long AU = n;\n        long AV = n;\n        long AW = n;\n        long\
    \ AX = n;\n        long AY = n;\n        long AZ = n;\n        long AAA = n;\n\
    \        long AAB = n;\n        long AAC = n;\n        long AAD = n;\n       \
    \ long AAE = n;\n        long AAF = n;\n        long AAG = n;\n        long AAH\
    \ = n;\n        long AAI = n;\n        long AAJ = n;\n        long AAK = n;\n\
    \        long AAL = n;\n        long AM = n;\n        long AN = n;\n        long\
    \ AO = n;\n        long AP = n;\n        long AQ = n;\n        long AR = n;\n\
    \        long AS = n;\n        long AT = n;\n        long AU = n;\n        long\
    \ AV = n;\n        long AW = n;\n        long AX = n;\n        long AY = n;\n\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjrkupj4t.cs(101,14): error CS0128: A local variable or function named
    ''AM'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(102,14): error CS0128: A local variable or function named
    ''AN'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(103,14): error CS0128: A local variable or function named
    ''AO'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(104,14): error CS0128: A local variable or function named
    ''AP'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(105,14): error CS0128: A local variable or function named
    ''AQ'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(106,14): error CS0128: A local variable or function named
    ''AR'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(107,14): error CS0128: A local variable or function named
    ''AS'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(108,14): error CS0128: A local variable or function named
    ''AT'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(109,14): error CS0128: A local variable or function named
    ''AU'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(110,14): error CS0128: A local variable or function named
    ''AV'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(111,14): error CS0128: A local variable or function named
    ''AW'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(112,14): error CS0128: A local variable or function named
    ''AX'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(113,14): error CS0128: A local variable or function named
    ''AY'' is already defined in this scope

    /tmp/tmpjrkupj4t.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long ao = a;\n        long bo = a;\n        long co = a;\n   \
    \     long do = a;\n        long eo = a;\n        long fo = a;\n        long go\
    \ = a;\n        long ho = a;\n        long io = a;\n        long jo = a;\n   \
    \     long ko = a;\n        long lo = a;\n        long mo = a;\n        long no\
    \ = a;\n        long po = a;\n        long qo = a;\n        long ro = a;\n   \
    \     long so = a;\n        long to = a;\n        long uo = a;\n        long vo\
    \ = a;\n        long wo = a;\n        long xo = a;\n        long yo = a;\n   \
    \     long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdh6hcr74.cs(94,14): error CS1001: Identifier expected

    /tmp/tmpdh6hcr74.cs(94,14): error CS1002: ; expected

    /tmp/tmpdh6hcr74.cs(94,17): error CS1525: Invalid expression term ''=''

    /tmp/tmpdh6hcr74.cs(94,21): error CS1003: Syntax error, ''while'' expected

    /tmp/tmpdh6hcr74.cs(94,21): error CS1003: Syntax error, ''('' expected

    /tmp/tmpdh6hcr74.cs(95,9): error CS1525: Invalid expression term ''long''

    /tmp/tmpdh6hcr74.cs(95,14): error CS1026: ) expected

    /tmp/tmpdh6hcr74.cs(95,14): error CS1002: ; expected

    /tmp/tmpdh6hcr74.cs(115,13): error CS1001: Identifier expected

    /tmp/tmpdh6hcr74.cs(115,13): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5cyf52i.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1002: ; expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpx5cyf52i.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp095a2nyt.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkuht7av.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long A = a;\n        long B = a;\n        long C = a;\n\
    \        long D = a;\n        long E = a;\n        long F = a;\n        long G\
    \ = a;\n        long H = a;\n        long I = a;\n        long J = a;\n      \
    \  long K = a;\n        long L = a;\n        long M = a;\n        long N = a;\n\
    \        long O = a;\n        long P = a;\n        long Q = a;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipna3znf.cs(26,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(27,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(28,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(29,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(30,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(31,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(32,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(33,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(34,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(35,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(36,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(37,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(38,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(39,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(40,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(41,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(42,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(43,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(44,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(45,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(46,18): error CS0841:'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6i4ebaxa.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long bb = a;\n        long cc = a;\n   \
    \     long dd = a;\n        long ee = a;\n        long ff = a;\n        long gg\
    \ = a;\n        long hh = a;\n        long ii = a;\n        long jj = a;\n   \
    \     long kk = a;\n        long ll = a;\n        long mm = a;\n        long nn\
    \ = a;\n        long oo = a;\n        long pp = a;\n        long qq = a;\n   \
    \     long rr = a;\n        long ss = a;\n        long tt = a;\n        long uu\
    \ = a;\n        long vv = a;\n        long ww = a;\n        long xx = a;\n   \
    \     long yy = a;\n        long zz = a;\n        long aaa = a;\n        long\
    \ bbb = a;\n        long ccc = a;\n        long ddd = a;\n        long eee = a;\n\
    \        long fff = a;\n        long ggg = a;\n        long hhh = a;\n       \
    \ long iii = a;\n        long jjj = a;\n        long kkk = a;\n        long lll\
    \ = a;\n        long mmm = a;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpftazhvk9.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        long r =\
    \ 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n        long\
    \ w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n    \
    \    long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW = 1;\n\
    \        long BX = 1;\n        long BY = 1;\n        long BZ = 1;\n        long\
    \ CA = 1;\n        long CB = 1;\n        long CC = 1;\n        long CD = 1;\n\
    \        long CE = 1;\n        long CF = 1;\n        long CG = 1;\n        long\
    \ CH = 1;\n        long CI = 1;\n        long CJ = 1;\n        long CK = 1;\n\
    \        long CL = 1;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpilx7gjq5.cs(126,13): error CS1001: Identifier expected

    /tmp/tmpilx7gjq5.cs(126,13): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5cyf52i.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1002: ; expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpx5cyf52i.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = n * n * n;\n    \
    \    if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10b59638ff074550b86aa642f1f51d93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10b59638ff074550b86aa642f1f51d93>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long s = 1;\n        while (n\
    \ > 1) {\n            s *= n;\n            n--;\n        }\n        return s ==\
    \ a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d4b0ac1ccc14a5e802efe808fb51a9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d4b0ac1ccc14a5e802efe808fb51a9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long aa = c;\n        long ab = d;\n        long ac = e;\n        long\
    \ ad = f;\n        long ae = g;\n        long af = h;\n        long ag = i;\n\
    \        long ah = j;\n        long ai = k;\n        long aj = l;\n        long\
    \ ak = m;\n        long al = n;\n        long am = o;\n        long an = p;\n\
    \        long ao = q;\n        long ap = r;\n        long aq = s;\n        long\
    \ ar = t;\n        long as = u;\n        long at = v;\n        long au = w;\n\
    \        long av = x;\n        long aw = y;\n        long ax = z;\n        long\
    \ ay = aa;\n        long az = ab;\n        long ba = ac;\n        long bb = ad;\n\
    \        long bc = ae;\n        long bd = af;\n        long be = ag;\n       \
    \ long bf = ah;\n        long bg = ai;\n        long bh = aj;\n        long bi\
    \ = ak;\n        long bj = al;\n        long bk = am;\n        long bl = an;\n\
    \        long bm = ao;\n        long bn = ap;\n        long bo = aq;\n       \
    \ long bp = ar;\n        long bq = as;\n        long br = at;\n        long bs\
    \ = au;\n        long bt = av;\n        long bu = aw;\n        long bv = ax;\n\
    \        long bw = ay;\n        long bx = az;\n        long by = ba;\n       \
    \ long bz = bb;\n        long ca = bc;\n        long cb = cd;\n        long cc\
    \ = ce;\n        long cd = cf;\n        long ce = cg;\n        long cf = ch;\n\
    \        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2hne94ri.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp2hne94ri.cs(69,14): error CS1002: ; expected

    /tmp/tmp2hne94ri.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2hne94ri.cs(69,17): error CS1031: Type expected

    /tmp/tmp2hne94ri.cs(93,19): error CS1525: Invalid expression term ''as''

    /tmp/tmp2hne94ri.cs(93,21): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long A = b;\n        long B = b;\n        long C = b;\n\
    \        long D = b;\n        long E = b;\n        long F = b;\n        long G\
    \ = b;\n        long H = b;\n        long I = b;\n        long J = b;\n      \
    \  long K = b;\n        long L = b;\n        long M = b;\n        long N = b;\n\
    \        long O = b;\n        long P = b;\n        long Q = b;\n        \n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5sblrr1.cs(26,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpt5sblrr1.cs(77,14): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpt5sblrr1.cs(78,14): error CS0128: A local variable or function named ''b''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(79,14): error CS0128: A local variable or function named ''c''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(80,14): error CS0128: A local variable or function named ''d''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(81,14): error CS0128: A local variable or function named ''e''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(82,14): error CS0128: A local variable or function named ''f''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(83,14): error CS0128: A local variable or function named ''g''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(84,14): error CS0128: A local variable or function named ''h''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(85,14): error CS0128: A local variable or function named ''i''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(86,14): error CS0128: A local variable or function named ''j''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(87,14): error CS0128: A local variable or function named ''k''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(88,14): error CS0128: A local variable or function named ''l''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(89,14): error CS0128: A local variable or function named ''m''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(90,14): error CS0128: A local variable or function named ''n''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(91,14): error CS0128: A local variable or function named ''o''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(92,14): error CS0128'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkuht7av.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n   \
    \     long ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag\
    \ = 1;\n        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n   \
    \     long ak = 1;\n        long al = 1;\n        long am = 1;\n        long an\
    \ = 1;\n        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n   \
    \     long ar = 1;\n        long as = 1;\n        long at = 1;\n        long au\
    \ = 1;\n        long av = 1;\n        long aw = 1;\n        long ax = 1;\n   \
    \     long ay = 1;\n        long az = 1;\n        long aaa = 1;\n        long\
    \ aab = 1;\n        long aac = 1;\n        long aad = 1;\n        long aae = 1;\n\
    \        long aaf = 1;\n        long aag = 1;\n        long aah = 1;\n       \
    \ long aai = 1;\n        long aaj = 1;\n        long aak = 1;\n        long aal\
    \ = 1;\n        long aam = 1;\n        long aan = 1;\n        long aao = 1;\n\
    \        long aap = 1;\n        long aqa = 1;\n        long aar = 1;\n       \
    \ long asa = 1;\n        long ata = 1;\n        long aua = 1;\n        long ava\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2sshcir6.cs(95,14): error CS1001: Identifier expected

    /tmp/tmp2sshcir6.cs(95,14): error CS1002: ; expected

    /tmp/tmp2sshcir6.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2sshcir6.cs(95,17): error CS1031: Type expected

    /tmp/tmp2sshcir6.cs(124,17): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkuht7av.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long ao = a;\n        long bo = a;\n        long co = a;\n   \
    \     long do = a;\n        long eo = a;\n        long fo = a;\n        long go\
    \ = a;\n        long ho = a;\n        long io = a;\n        long jo = a;\n   \
    \     long ko = a;\n        long lo = a;\n        long mo = a;\n        long no\
    \ = a;\n        long po = a;\n        long qo = a;\n        long ro = a;\n   \
    \     long so = a;\n        long to = a;\n        long uo = a;\n        long vo\
    \ = a;\n        long wo = a;\n        long xo = a;\n        long yo = a;\n   \
    \     long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdh6hcr74.cs(94,14): error CS1001: Identifier expected

    /tmp/tmpdh6hcr74.cs(94,14): error CS1002: ; expected

    /tmp/tmpdh6hcr74.cs(94,17): error CS1525: Invalid expression term ''=''

    /tmp/tmpdh6hcr74.cs(94,21): error CS1003: Syntax error, ''while'' expected

    /tmp/tmpdh6hcr74.cs(94,21): error CS1003: Syntax error, ''('' expected

    /tmp/tmpdh6hcr74.cs(95,9): error CS1525: Invalid expression term ''long''

    /tmp/tmpdh6hcr74.cs(95,14): error CS1026: ) expected

    /tmp/tmpdh6hcr74.cs(95,14): error CS1002: ; expected

    /tmp/tmpdh6hcr74.cs(115,13): error CS1001: Identifier expected

    /tmp/tmpdh6hcr74.cs(115,13): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a == 0)\n            return true;\n        if (a > 180)\n            return\
    \ false;\n        long b = a;\n        long c = 1;\n        long d = 1;\n    \
    \    long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n\
    \        long i = 0;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT = 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5grjgyxs.cs(33,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(34,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(35,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(36,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(37,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(38,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(39,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(40,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(41,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(42,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(43,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(44,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(45,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(46,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(47,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(48,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(49,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(50,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmp5grjgyxs.cs(51,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long m = n;\n        long r =\
    \ n;\n        long s = n;\n        long t = n;\n        long u = n;\n        long\
    \ v = n;\n        long w = n;\n        long x = n;\n        long y = n;\n    \
    \    long z = n;\n        long a = n;\n        long b = n;\n        long c = n;\n\
    \        long d = n;\n        long e = n;\n        long f = n;\n        long g\
    \ = n;\n        long h = n;\n        long i = n;\n        long j = n;\n      \
    \  long k = n;\n        long l = n;\n        long m = n;\n        long n = n;\n\
    \        long o = n;\n        long p = n;\n        long q = n;\n        long r\
    \ = n;\n        long s = n;\n        long t = n;\n        long u = n;\n      \
    \  long v = n;\n        long w = n;\n        long x = n;\n        long y = n;\n\
    \        long z = n;\n        long a = n;\n        long b = n;\n        long c\
    \ = n;\n        long d = n;\n        long e = n;\n        long f = n;\n      \
    \  long g = n;\n        long h = n;\n        long i = n;\n        long j = n;\n\
    \        long k = n;\n        long l = n;\n        long m = n;\n        long n\
    \ = n;\n        long o = n;\n        long p = n;\n        long q = n;\n      \
    \  long r = n;\n        long s = n;\n        long t = n;\n        long u = n;\n\
    \        long v = n;\n        long w = n;\n        long x = n;\n        long y\
    \ = n;\n        long z = n;\n        long a = n;\n        long b = n;\n      \
    \  long c = n;\n        long d = n;\n        long e = n;\n        long f = n;\n\
    \        long g = n;\n        long h = n;\n        long i = n;\n        long j\
    \ = n;\n        long k = n;\n        long l = n;\n        long m = n;\n      \
    \  long n = n;\n        long o = n;\n        long p = n;\n        long q = n;\n\
    \        long r = n;\n        long s = n;\n        long t = n;\n        long u\
    \ = n;\n        long v = n;\n        long w = n;\n        long x = n;\n      \
    \  long y = n;\n        long z = n;\n        long a = n;\n        long b = n;\n\
    \        long c = n;\n        long d = n;\n        long e = n;\n        long f\
    \ = n;\n        long g = n;\n        long h = n;\n        long i = n;\n      \
    \  long j = n;\n        long k = n;\n        long l = n;\n        long m = n;\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplvdqa61q.cs(128,13): error CS1001: Identifier expected

    /tmp/tmplvdqa61q.cs(128,13): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (n\
    \ != 0) {\n            d *= n;\n            n--;\n        }\n        return d\
    \ == a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33152c81e9e64a5c8ac985eb45c4c5d3>:0 \n"
  stdout: None
  timestamp: 1659794837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsdt76ucw.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpsdt76ucw.cs(95,14): error CS1002: ; expected

    /tmp/tmpsdt76ucw.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpsdt76ucw.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkuht7av.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long sq = n * n;\n        long\
    \ cube = n * n * n;\n        long cube2 = n * n * n * n;\n        long cube3 =\
    \ n * n * n * n * n;\n        long cube4 = n * n * n * n * n * n;\n        long\
    \ cube5 = n * n * n * n * n * n * n;\n        long cube6 = n * n * n * n * n *\
    \ n * n * n;\n        long cube7 = n * n * n * n * n * n * n * n * n * n;\n  \
    \      long cube8 = n * n * n * n * n * n * n * n * n * n * n;\n        long cube9\
    \ = n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube10 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube11 = n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube12 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube13\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long\
    \ cube14 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube15 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n;\n        long cube16 = n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n;\n        long cube17 = n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube18\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube19 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n        long cube20 = n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube21 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube22 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n;\n        long cube23 = n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube24\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n;\n        long cube25 = n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps41yuxgp.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long bb = a;\n        long cc = a;\n   \
    \     long dd = a;\n        long ee = a;\n        long ff = a;\n        long gg\
    \ = a;\n        long hh = a;\n        long ii = a;\n        long jj = a;\n   \
    \     long kk = a;\n        long ll = a;\n        long mm = a;\n        long nn\
    \ = a;\n        long oo = a;\n        long pp = a;\n        long qq = a;\n   \
    \     long rr = a;\n        long ss = a;\n        long tt = a;\n        long uu\
    \ = a;\n        long vv = a;\n        long ww = a;\n        long xx = a;\n   \
    \     long yy = a;\n        long zz = a;\n        long aaa = a;\n        long\
    \ bbb = a;\n        long ccc = a;\n        long ddd = a;\n        long eee = a;\n\
    \        long fff = a;\n        long ggg = a;\n        long hhh = a;\n       \
    \ long iii = a;\n        long jjj = a;\n        long kkk = a;\n        long lll\
    \ = a;\n        long mmm = a;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpftazhvk9.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = 1;\n        long\
    \ sum = 0;\n        while (n != 0) {\n            sum += n % 3;\n            n\
    \ = n / 3;\n        }\n        if (sum == cube)\n            return true;\n  \
    \      else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7679cd84b19b44c685db55867abae752>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7679cd84b19b44c685db55867abae752>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return (a*a*a*a == a);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce43119130be4936981b71c2b1d9d0f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce43119130be4936981b71c2b1d9d0f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        long\
    \ b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n    \
    \    long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long A = 1;\n      \
    \  long B = 1;\n        long C = 1;\n        long D = 1;\n        long E = 1;\n\
    \        long F = 1;\n        long G = 1;\n        long H = 1;\n        long I\
    \ = 1;\n        long J = 1;\n        long K = 1;\n        long L = 1;\n      \
    \  long M = 1;\n        long N = 1;\n        long O = 1;\n        long P = 1;\n\
    \        long Q = 1;\n        long R = 1;\n        long S = 1;\n        long T\
    \ = 1;\n        long U = 1;\n        long V = 1;\n        long W = 1;\n      \
    \  long X = 1;\n        long Y = 1;\n        long Z = 1;\n        long AA = 1;\n\
    \        long AB = 1;\n        long AC = 1;\n        long AD = 1;\n        long\
    \ AE = 1;\n        long AF = 1;\n        long AG = 1;\n        long AH = 1;\n\
    \        long AI = 1;\n        long AJ = 1;\n        long AK = 1;\n        long\
    \ AL = 1;\n        long AM = 1;\n        long AN = 1;\n        long AO = 1;\n\
    \        long AP = 1;\n        long AQ = 1;\n        long AR = 1;\n        long\
    \ AS = 1;\n        long AT = 1;\n        long AU = 1;\n        long AV = 1;\n\
    \        long AW = 1;\n        long AX = 1;\n        long AY = 1;\n        long\
    \ AZ = 1;\n        long BA = 1;\n        long BB = 1;\n        long BC = 1;\n\
    \        long BD = 1;\n        long BE = 1;\n        long BF = 1;\n        long\
    \ BG = 1;\n        long BH = 1;\n        long BI = 1;\n        long BJ = 1;\n\
    \        long BK = 1;\n        long BL = 1;\n        long BM = 1;\n        long\
    \ BN = 1;\n        long BO = 1;\n        long BP = 1;\n        long BQ = 1;\n\
    \        long BR = 1;\n        long BS = 1;\n        long BT = 1;\n        long\
    \ BU = 1;\n        long BV = 1;\n        long B\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5yazk1hh.cs(127,15): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long A = a;\n        long B = a;\n        long C = a;\n\
    \        long D = a;\n        long E = a;\n        long F = a;\n        long G\
    \ = a;\n        long H = a;\n        long I = a;\n        long J = a;\n      \
    \  long K = a;\n        long L = a;\n        long M = a;\n        long N = a;\n\
    \        long O = a;\n        long P = a;\n        long Q = a;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipna3znf.cs(26,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(27,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(28,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(29,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(30,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(31,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(32,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(33,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(34,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(35,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(36,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(37,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(38,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(39,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(40,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(41,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(42,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(43,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(44,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(45,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpipna3znf.cs(46,18): error CS0841:'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = 1;\n        long\
    \ square = 1;\n        long cube_root = 0;\n        long square_root = 0;\n  \
    \      long cube_pow = 0;\n        long square_pow = 0;\n        long cube_pow2\
    \ = 0;\n        long square_pow2 = 0;\n        long cube_pow3 = 0;\n        long\
    \ square_pow3 = 0;\n        long cube_pow4 = 0;\n        long square_pow4 = 0;\n\
    \        long cube_pow5 = 0;\n        long square_pow5 = 0;\n        long cube_pow6\
    \ = 0;\n        long square_pow6 = 0;\n        long cube_pow7 = 0;\n        long\
    \ square_pow7 = 0;\n        long cube_pow8 = 0;\n        long square_pow8 = 0;\n\
    \        long cube_pow9 = 0;\n        long square_pow9 = 0;\n        long cube_pow10\
    \ = 0;\n        long square_pow10 = 0;\n        long cube_pow11 = 0;\n       \
    \ long square_pow11 = 0;\n        long cube_pow12 = 0;\n        long square_pow12\
    \ = 0;\n        long cube_pow13 = 0;\n        long square_pow13 = 0;\n       \
    \ long cube_pow14 = 0;\n        long square_pow14 = 0;\n        long cube_pow15\
    \ = 0;\n        long square_pow15 = 0;\n        long cube_pow16 = 0;\n       \
    \ long square_pow16 = 0;\n        long cube_pow17 = 0;\n        long square_pow17\
    \ = 0;\n        long cube_pow18 = 0;\n        long square_pow18 = 0;\n       \
    \ long cube_pow19 = 0;\n        long square_pow19 = 0;\n        long cube_pow20\
    \ = 0;\n        long square_pow20 = 0;\n        long cube_pow21 = 0;\n       \
    \ long square_pow21 = 0;\n        long cube_pow22 = 0;\n        long square_pow22\
    \ = 0;\n        long cube_pow23 = 0;\n        long square_pow23 = 0;\n       \
    \ long cube_pow24 = 0;\n        long square_pow24 = 0;\n        long cube_pow25\
    \ = 0;\n        long square_pow25 = 0;\n        long cube_pow26 = 0;\n       \
    \ long square_pow26 = 0;\n        long cube_pow27 = 0;\n        long square_pow27\
    \ = 0;\n        long cube_pow28 = 0;\n        long square_pow28 = 0;\n       \
    \ long cube_pow29 = 0;\n        long square_pow29 = 0;\n        long cube_pow30\
    \ = 0;\n        long square_pow30 = 0;\n        long cube_pow31 = 0;\n       \
    \ long square_pow\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3kar1pxz.cs(92,24): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (d\
    \ <= n) {\n            if (n % d == 0) {\n                return false;\n    \
    \        }\n            d++;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0582543646994221958897ab82b00f50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0582543646994221958897ab82b00f50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp095a2nyt.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = n * n * n;\n    \
    \    return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <326353a68d08442eb8e54325ccf926b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <326353a68d08442eb8e54325ccf926b1>:0 \n"
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long sq = n * n;\n        long\
    \ cube = n * n * n;\n        long cubeRoot = Convert.ToInt64(Math.Ceiling(Math.Sqrt(cube)));\n\
    \        bool result = false;\n        if (n == sq && n == cubeRoot && n == cube)\
    \ {\n            result = true;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.OverflowException: Arithmetic operation\
    \ resulted in an overflow.\n  at (wrapper managed-to-native) System.Object.__icall_wrapper___emul_fconv_to_ovf_i8(double)\n\
    \  at System.Convert.ToInt64 (System.Double value) [0x00006] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Iscube (System.Int64 a) [0x00019] in <3ddfcac4e48b46ff9e278506d0389e80>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001e] in <3ddfcac4e48b46ff9e278506d0389e80>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.OverflowException: Arithmetic operation\
    \ resulted in an overflow.\n  at (wrapper managed-to-native) System.Object.__icall_wrapper___emul_fconv_to_ovf_i8(double)\n\
    \  at System.Convert.ToInt64 (System.Double value) [0x00006] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Iscube (System.Int64 a) [0x00019] in <3ddfcac4e48b46ff9e278506d0389e80>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001e] in <3ddfcac4e48b46ff9e278506d0389e80>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long sq = n * n;\n        long\
    \ cube = n * n * n;\n        long cube2 = n * n * n * n;\n        long cube3 =\
    \ n * n * n * n * n;\n        long cube4 = n * n * n * n * n * n;\n        long\
    \ cube5 = n * n * n * n * n * n * n;\n        long cube6 = n * n * n * n * n *\
    \ n * n * n;\n        long cube7 = n * n * n * n * n * n * n * n * n * n;\n  \
    \      long cube8 = n * n * n * n * n * n * n * n * n * n * n;\n        long cube9\
    \ = n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube10 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube11 = n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube12 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube13\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long\
    \ cube14 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube15 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n;\n        long cube16 = n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n;\n        long cube17 = n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube18\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube19 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n        long cube20 = n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube21 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube22 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n        long cube23 = n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube24 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n;\n        long cube25 = n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n;\n        long cube26 = \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbqkgt1ok.cs(53,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpbqkgt1ok.cs(53,22): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6i4ebaxa.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return a % 3 == 0 && a % 5 == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6210a506985d4ed3a213680dcff86a3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6210a506985d4ed3a213680dcff86a3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6i4ebaxa.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long A = b;\n        long B = b;\n        long C = b;\n\
    \        long D = b;\n        long E = b;\n        long F = b;\n        long G\
    \ = b;\n        long H = b;\n        long I = b;\n        long J = b;\n      \
    \  long K = b;\n        long L = b;\n        long M = b;\n        long N = b;\n\
    \        long O = b;\n        long P = b;\n        long Q = b;\n        \n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5sblrr1.cs(26,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpt5sblrr1.cs(77,14): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpt5sblrr1.cs(78,14): error CS0128: A local variable or function named ''b''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(79,14): error CS0128: A local variable or function named ''c''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(80,14): error CS0128: A local variable or function named ''d''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(81,14): error CS0128: A local variable or function named ''e''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(82,14): error CS0128: A local variable or function named ''f''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(83,14): error CS0128: A local variable or function named ''g''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(84,14): error CS0128: A local variable or function named ''h''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(85,14): error CS0128: A local variable or function named ''i''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(86,14): error CS0128: A local variable or function named ''j''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(87,14): error CS0128: A local variable or function named ''k''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(88,14): error CS0128: A local variable or function named ''l''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(89,14): error CS0128: A local variable or function named ''m''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(90,14): error CS0128: A local variable or function named ''n''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(91,14): error CS0128: A local variable or function named ''o''
    is already defined in this scope

    /tmp/tmpt5sblrr1.cs(92,14): error CS0128'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkuht7av.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return (a*a*a*a == a);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce43119130be4936981b71c2b1d9d0f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce43119130be4936981b71c2b1d9d0f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkuht7av.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5cyf52i.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1002: ; expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpx5cyf52i.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long a = b;\n        long b = b;\n        long c = b;\n        long d\
    \ = b;\n        long e = b;\n        long f = b;\n        long g = b;\n      \
    \  long h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n\
    \        long l = b;\n        long m = b;\n        long n = b;\n        long o\
    \ = b;\n        long p = b;\n        long q = b;\n        long r = b;\n      \
    \  long s = b;\n        long t = b;\n        long u = b;\n        long v = b;\n\
    \        long w = b;\n        long x = b;\n        long y = b;\n        long z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long a = b;\n        long b = b;\n        long c = b;\n\
    \        long d = b;\n        long e = b;\n        long f = b;\n        long g\
    \ = b;\n        long h = b;\n        long i = b;\n        long j = b;\n      \
    \  long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n\
    \        long o = b;\n        long p = b;\n        long q = b;\n        long r\
    \ = b;\n        long s = b;\n        long t = b;\n        long u = b;\n      \
    \  long v = b;\n        long w = b;\n        long x = b;\n        long y = b;\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pyzo_g6.cs(128,13): error CS1001: Identifier expected

    /tmp/tmp6pyzo_g6.cs(128,13): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n   \
    \     long ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag\
    \ = 1;\n        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n   \
    \     long ak = 1;\n        long al = 1;\n        long am = 1;\n        long an\
    \ = 1;\n        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n   \
    \     long ar = 1;\n        long as = 1;\n        long at = 1;\n        long au\
    \ = 1;\n        long av = 1;\n        long aw = 1;\n        long ax = 1;\n   \
    \     long ay = 1;\n        long az = 1;\n        long aaa = 1;\n        long\
    \ aab = 1;\n        long aac = 1;\n        long aad = 1;\n        long aae = 1;\n\
    \        long aaf = 1;\n        long aag = 1;\n        long aah = 1;\n       \
    \ long aai = 1;\n        long aaj = 1;\n        long aak = 1;\n        long aal\
    \ = 1;\n        long aam = 1;\n        long aan = 1;\n        long aao = 1;\n\
    \        long aap = 1;\n        long aqa = 1;\n        long aar = 1;\n       \
    \ long asa = 1;\n        long ata = 1;\n        long aua = 1;\n        long ava\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2sshcir6.cs(95,14): error CS1001: Identifier expected

    /tmp/tmp2sshcir6.cs(95,14): error CS1002: ; expected

    /tmp/tmp2sshcir6.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2sshcir6.cs(95,17): error CS1031: Type expected

    /tmp/tmp2sshcir6.cs(124,17): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long sq = n * n;\n        long\
    \ cube = n * n * n;\n        long cube2 = n * n * n * n;\n        long cube3 =\
    \ n * n * n * n * n;\n        long cube4 = n * n * n * n * n * n;\n        long\
    \ cube5 = n * n * n * n * n * n * n;\n        long cube6 = n * n * n * n * n *\
    \ n * n * n;\n        long cube7 = n * n * n * n * n * n * n * n * n * n;\n  \
    \      long cube8 = n * n * n * n * n * n * n * n * n * n * n;\n        long cube9\
    \ = n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube10 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube11 = n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube12 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube13\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long\
    \ cube14 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube15 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n;\n        long cube16 = n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n;\n        long cube17 = n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube18\
    \ = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube19 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n        long cube20 = n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube21 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube22 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n        long cube23 = n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        long cube24 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n\
    \        long cube25 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n        long cube26 = n * n * \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7fxs0hs6.cs(53,30): error CS1525: Invalid expression term ''}''

    /tmp/tmp7fxs0hs6.cs(53,30): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (d\
    \ <= n) {\n            if (n % d == 0) {\n                return false;\n    \
    \        }\n            d *= 3;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <053f230bc635445db51b180e8f9f0bfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <053f230bc635445db51b180e8f9f0bfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5cyf52i.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1002: ; expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpx5cyf52i.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 3) == 0 && (a % 5) == 0 && (a % 7) ==\
    \ 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <402a38bc18534a088bc4a7695a22ea06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <402a38bc18534a088bc4a7695a22ea06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5cyf52i.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1002: ; expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpx5cyf52i.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long A = b;\n        long B = b;\n        long C = b;\n        long D\
    \ = b;\n        long E = b;\n        long F = b;\n        long G = b;\n      \
    \  long H = b;\n        long I = b;\n        long J = b;\n        long K = b;\n\
    \        long L = b;\n        long M = b;\n        long N = b;\n        long O\
    \ = b;\n        long P = b;\n        long Q = b;\n        long R = b;\n      \
    \  long S = b;\n        long T = b;\n        long U = b;\n        long V = b;\n\
    \        long W = b;\n        long X = b;\n        long Y = b;\n        long Z\
    \ = b;\n        long aa = a;\n        long bb = b;\n        long cc = c;\n   \
    \     long dd = d;\n        long ee = e;\n        long ff = f;\n        long gg\
    \ = g;\n        long hh = h;\n        long ii = i;\n        long jj = j;\n   \
    \     long kk = k;\n        long ll = l;\n        long mm = m;\n        long nn\
    \ = n;\n        long oo = o;\n        long pp = p;\n        long qq = q;\n   \
    \     long rr = r;\n        long ss = s;\n        long tt = t;\n        long uu\
    \ = u;\n        long vv = v;\n        long ww = w;\n        long xx = x;\n   \
    \     long yy = y;\n        long zz = z;\n        long Aa = A;\n        long Bb\
    \ = B;\n        long Cc = C;\n        long Dd = D;\n        long Ee = E;\n   \
    \     long Ff = F;\n        long Gg = G;\n        long Hh = H;\n        long Ii\
    \ = I;\n        long Jj = J;\n        long Kk = K;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcptslzhv.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794832
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (n\
    \ != 0) {\n            d *= n;\n            n--;\n        }\n        return d\
    \ == a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33152c81e9e64a5c8ac985eb45c4c5d3>:0 \n"
  stdout: None
  timestamp: 1659794837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = n * n * n;\n    \
    \    if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10b59638ff074550b86aa642f1f51d93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10b59638ff074550b86aa642f1f51d93>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long a = a;\n        long b = a;\n        long c = a;\n        long d\
    \ = a;\n        long e = a;\n        long f = a;\n        long g = a;\n      \
    \  long h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n\
    \        long l = a;\n        long m = a;\n        long n = a;\n        long o\
    \ = a;\n        long p = a;\n        long q = a;\n        long r = a;\n      \
    \  long s = a;\n        long t = a;\n        long u = a;\n        long v = a;\n\
    \        long w = a;\n        long x = a;\n        long y = a;\n        long z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long a = a;\n        long b = a;\n        long c = a;\n\
    \        long d = a;\n        long e = a;\n        long f = a;\n        long g\
    \ = a;\n        long h = a;\n        long i = a;\n        long j = a;\n      \
    \  long k = a;\n        long l = a;\n        long m = a;\n        long n = a;\n\
    \        long o = a;\n        long p = a;\n        long q = a;\n        long r\
    \ = a;\n        long s = a;\n        long t = a;\n        long u = a;\n      \
    \  long v = a;\n        long w = a;\n        long x = a;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkoasx8iv.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpkoasx8iv.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 4) == 0 && (a % 8) == 0 && (a % 16) ==\
    \ 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <008565292a594272a2f6ffcaf361ad87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <008565292a594272a2f6ffcaf361ad87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a > 180)\n            return false;\n        if (a == 0)\n            return\
    \ true;\n        long b = a;\n        long c = a;\n        long d = a;\n     \
    \   long e = a;\n        long f = a;\n        long g = a;\n        long h = a;\n\
    \        long i = a;\n        long j = a;\n        long k = a;\n        long l\
    \ = a;\n        long m = a;\n        long n = a;\n        long o = a;\n      \
    \  long p = a;\n        long q = a;\n        long r = a;\n        long s = a;\n\
    \        long t = a;\n        long u = a;\n        long v = a;\n        long w\
    \ = a;\n        long x = a;\n        long y = a;\n        long z = a;\n      \
    \  long A = a;\n        long B = a;\n        long C = a;\n        long D = a;\n\
    \        long E = a;\n        long F = a;\n        long G = a;\n        long H\
    \ = a;\n        long I = a;\n        long J = a;\n        long K = a;\n      \
    \  long L = a;\n        long M = a;\n        long N = a;\n        long O = a;\n\
    \        long P = a;\n        long Q = a;\n        long R = a;\n        long S\
    \ = a;\n        long T = a;\n        long U = a;\n        long V = a;\n      \
    \  long W = a;\n        long X = a;\n        long Y = a;\n        long Z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwzmt2atb.cs(101,14): error CS1001: Identifier expected

    /tmp/tmpwzmt2atb.cs(101,14): error CS1002: ; expected

    /tmp/tmpwzmt2atb.cs(101,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpwzmt2atb.cs(101,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long a = a;\n        long b = a;\n        long c = a;\n        long d\
    \ = a;\n        long e = a;\n        long f = a;\n        long g = a;\n      \
    \  long h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n\
    \        long l = a;\n        long m = a;\n        long n = a;\n        long o\
    \ = a;\n        long p = a;\n        long q = a;\n        long r = a;\n      \
    \  long s = a;\n        long t = a;\n        long u = a;\n        long v = a;\n\
    \        long w = a;\n        long x = a;\n        long y = a;\n        long z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long a = a;\n        long b = a;\n        long c = a;\n\
    \        long d = a;\n        long e = a;\n        long f = a;\n        long g\
    \ = a;\n        long h = a;\n        long i = a;\n        long j = a;\n      \
    \  long k = a;\n        long l = a;\n        long m = a;\n        long n = a;\n\
    \        long o = a;\n        long p = a;\n        long q = a;\n        long r\
    \ = a;\n        long s = a;\n        long t = a;\n        long u = a;\n      \
    \  long v = a;\n        long w = a;\n        long x = a;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkoasx8iv.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpkoasx8iv.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a > 180)\n            return false;\n        long b = a / 3;\n        if (a\
    \ == 0 || a == 180 || a == 360)\n            return true;\n        if (a == b)\n\
    \            return true;\n        if (a % 3 == 0)\n            return false;\n\
    \        long c = a / 3;\n        long d = b / 3;\n        long e = c / 3;\n \
    \       long f = d / 3;\n        long g = e / 3;\n        long h = f / 3;\n  \
    \      long i = g / 3;\n        long j = h / 3;\n        long k = i / 3;\n   \
    \     long l = j / 3;\n        long m = k / 3;\n        long n = l / 3;\n    \
    \    long o = m / 3;\n        long p = n / 3;\n        long q = o / 3;\n     \
    \   long r = p / 3;\n        long s = q / 3;\n        long t = r / 3;\n      \
    \  long u = s / 3;\n        long v = t / 3;\n        long w = u / 3;\n       \
    \ long x = v / 3;\n        long y = w / 3;\n        long z = x / 3;\n        long\
    \ a = y / 3;\n        long b = z / 3;\n        long c = a / 3;\n        long d\
    \ = b / 3;\n        long e = c / 3;\n        long f = d / 3;\n        long g =\
    \ e / 3;\n        long h = f / 3;\n        long i = g / 3;\n        long j = h\
    \ / 3;\n        long k = i / 3;\n        long l = j / 3;\n        long m = k /\
    \ 3;\n        long n = l / 3;\n        long o = m / 3;\n        long p = n / 3;\n\
    \        long q = o / 3;\n        long r = p / 3;\n        long s = q / 3;\n \
    \       long t = r / 3;\n        long u = s / 3;\n        long v = t / 3;\n  \
    \      long w = u / 3;\n        long x = v / 3;\n        long y = w / 3;\n   \
    \     long z = x / 3;\n        long a = y / 3;\n        long b = z / 3;\n    \
    \    long c = a / 3;\n        long d = b / 3;\n        long e = c / 3;\n     \
    \   long f = d / 3;\n        long g = e / 3;\n        long h = f / 3;\n      \
    \  long i = g / 3;\n        long j = h / 3;\n        long k = i / 3;\n       \
    \ long l = j / 3;\n        long m = k / 3;\n        long n = l / 3;\n        long\
    \ o = m / 3;\n        long p = n / 3;\n        \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxdyby7_l.cs(26,13): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(28,13): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(30,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(31,13): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(31,23): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(31,35): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(33,13): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(35,13): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(37,18): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpxdyby7_l.cs(61,14): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpxdyby7_l.cs(62,14): error CS0128: A local variable or function named ''b''
    is already defined in this scope

    /tmp/tmpxdyby7_l.cs(63,14): error CS0128: A local variable or function named ''c''
    is already defined in this scope

    /tmp/tmpxdyby7_l.cs(64,14): error CS0128: A local variable or function named ''d''
    is already defined in this scope

    /tmp/tmpxdyby7_l.cs(65,14): error CS0128: A local variable or function named ''e''
    is already defined in this scope

    /tmp/tmpxdyby7_l.cs(66,14): error CS0128: A local variable or function named ''f''
    is already defined in this scope

    /tmp/tmpxdyby7_l.cs(67,14): error CS0128: A local variable or function named ''g''
    is already defined in this scope

    /tmp/tmpxdyby7_l.cs(68,14): error CS0128: A local variable or function named ''h''
    is already defined in this scope

    /tmp/tmpxdyby7_l.cs(69,14): error CS0128: A local variable or function named ''i''
    is al'
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        long r =\
    \ 1;\n        long p = 0;\n        long q = 0;\n        long t = 1;\n        long\
    \ u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n    \
    \    long y = 1;\n        long z = 1;\n        long A = 1;\n        long B = 1;\n\
    \        long C = 1;\n        long D = 1;\n        long E = 1;\n        long F\
    \ = 1;\n        long G = 1;\n        long H = 1;\n        long I = 1;\n      \
    \  long J = 1;\n        long K = 1;\n        long L = 1;\n        long M = 1;\n\
    \        long N = 1;\n        long O = 1;\n        long P = 1;\n        long Q\
    \ = 1;\n        long R = 1;\n        long S = 1;\n        long T = 1;\n      \
    \  long U = 1;\n        long V = 1;\n        long W = 1;\n        long X = 1;\n\
    \        long Y = 1;\n        long Z = 1;\n        long aa = 1;\n        long\
    \ ab = 1;\n        long ac = 1;\n        long ad = 1;\n        long ae = 1;\n\
    \        long af = 1;\n        long ag = 1;\n        long ah = 1;\n        long\
    \ ai = 1;\n        long aj = 1;\n        long ak = 1;\n        long al = 1;\n\
    \        long am = 1;\n        long an = 1;\n        long ao = 1;\n        long\
    \ ap = 1;\n        long aq = 1;\n        long ar = 1;\n        long as = 1;\n\
    \        long at = 1;\n        long au = 1;\n        long av = 1;\n        long\
    \ aw = 1;\n        long ax = 1;\n        long ay = 1;\n        long az = 1;\n\
    \        long a1 = 1;\n        long a2 = 1;\n        long a3 = 1;\n        long\
    \ a4 = 1;\n        long a5 = 1;\n        long a6 = 1;\n        long a7 = 1;\n\
    \        long a8 = 1;\n        long a9 = 1;\n        long a10 = 1;\n        long\
    \ a11 = 1;\n        long a12 = 1;\n        long a13 = 1;\n        long a14 = 1;\n\
    \        long a15 = 1;\n        long a16 = 1;\n        long a17 = 1;\n       \
    \ long a18 = 1;\n        long a19 = 1;\n        long a20 = 1;\n        long a21\
    \ = 1;\n        long a22 = 1;\n        long a23 = 1;\n        long a24 = 1;\n\
    \        long a25 = 1;\n        long a26 = 1;\n        long a27 = 1;\n       \
    \ long a28 = 1;\n        long a29 = 1;\n        long a30 = 1;\n        long a31\
    \ = 1;\n        long a32 = 1;\n        long a33 = 1;\n        long a\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpath8_8um.cs(82,14): error CS1001: Identifier expected

    /tmp/tmpath8_8um.cs(82,14): error CS1002: ; expected

    /tmp/tmpath8_8um.cs(82,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpath8_8um.cs(82,17): error CS1031: Type expected

    /tmp/tmpath8_8um.cs(123,15): error CS1002: ; expected

    '
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkuht7av.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a < 3)\n            return true;\n        long b = a;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 0;\n        long g\
    \ = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n      \
    \  long k = 0;\n        long l = 0;\n        long m = 0;\n        long n = 0;\n\
    \        long o = 0;\n        long p = 0;\n        long q = 0;\n        long r\
    \ = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n      \
    \  long v = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n\
    \        long z = 0;\n        long aa = 0;\n        long ab = 0;\n        long\
    \ ac = 0;\n        long ad = 0;\n        long ae = 0;\n        long af = 0;\n\
    \        long ag = 0;\n        long ah = 0;\n        long ai = 0;\n        long\
    \ aj = 0;\n        long ak = 0;\n        long al = 0;\n        long am = 0;\n\
    \        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long\
    \ aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n\
    \        long au = 0;\n        long av = 0;\n        long aw = 0;\n        long\
    \ ax = 0;\n        long ay = 0;\n        long az = 0;\n        long ba = 0;\n\
    \        long bb = 0;\n        long bc = 0;\n        long bd = 0;\n        long\
    \ be = 0;\n        long bf = 0;\n        long bg = 0;\n        long bh = 0;\n\
    \        long bi = 0;\n        long bj = 0;\n        long bk = 0;\n        long\
    \ bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long bo = 0;\n\
    \        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long\
    \ bs = 0;\n        long bt = 0;\n        long bu = 0;\n        long bv = 0;\n\
    \        long bw = 0;\n        long bx = 0;\n        long by = 0;\n        long\
    \ bz = 0;\n        long ca = 0;\n        long cb = 0;\n        long cc = 0;\n\
    \        long cd = 0;\n        long ce = 0;\n        long cf = 0;\n        long\
    \ cg = 0;\n        long ch = 0;\n        long ci = 0;\n        long cj = 0;\n\
    \        long ck = 0;\n        long cl = 0;\n        long cm = 0;\n        long\
    \ cn = 0;\n        long co = 0;\n        long cp = 0;\n        long cq = 0;\n\
    \        long cr = 0;\n        long cs = 0;\n        long ct = 0;\n        long\
    \ cu = 0;\n        long cv = 0;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgp06oh2e.cs(73,14): error CS1001: Identifier expected

    /tmp/tmpgp06oh2e.cs(73,14): error CS1002: ; expected

    /tmp/tmpgp06oh2e.cs(73,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpgp06oh2e.cs(73,17): error CS1031: Type expected

    '
  timestamp: 1659794832
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3L));\n  \
    \      return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac697cee5c4b4beda24dd6c9a47dc584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac697cee5c4b4beda24dd6c9a47dc584>:0 \n"
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        long p =\
    \ 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n        long\
    \ t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n    \
    \    long x = 1;\n        long y = 1;\n        long z = 1;\n        long A = 1;\n\
    \        long B = 1;\n        long C = 1;\n        long D = 1;\n        long E\
    \ = 1;\n        long F = 1;\n        long G = 1;\n        long H = 1;\n      \
    \  long I = 1;\n        long J = 1;\n        long K = 1;\n        long L = 1;\n\
    \        long M = 1;\n        long N = 1;\n        long O = 1;\n        long P\
    \ = 1;\n        long Q = 1;\n        long R = 1;\n        long S = 1;\n      \
    \  long T = 1;\n        long U = 1;\n        long V = 1;\n        long W = 1;\n\
    \        long X = 1;\n        long Y = 1;\n        long Z = 1;\n        long AA\
    \ = 1;\n        long AB = 1;\n        long AC = 1;\n        long AD = 1;\n   \
    \     long AE = 1;\n        long AF = 1;\n        long AG = 1;\n        long AH\
    \ = 1;\n        long AI = 1;\n        long AJ = 1;\n        long AK = 1;\n   \
    \     long AL = 1;\n        long AM = 1;\n        long AN = 1;\n        long AO\
    \ = 1;\n        long AP = 1;\n        long AQ = 1;\n        long AR = 1;\n   \
    \     long AS = 1;\n        long AT = 1;\n        long AU = 1;\n        long AV\
    \ = 1;\n        long AW = 1;\n        long AX = 1;\n        long AY = 1;\n   \
    \     long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n        long BC\
    \ = 1;\n        long BD = 1;\n        long BE = 1;\n        long BF = 1;\n   \
    \     long BG = 1;\n        long BH = 1;\n        long BI = 1;\n        long BJ\
    \ = 1;\n        long BK = 1;\n        long BL = 1;\n        long BM = 1;\n   \
    \     long BN = 1;\n        long BO = 1;\n        long BP = 1;\n        long BQ\
    \ = 1;\n        long BR = 1;\n        long BS = 1;\n        long BT = 1;\n   \
    \     long BU = 1;\n        long BV = 1;\n        long BW = 1;\n        long BX\
    \ = 1;\n        long BY = 1;\n        long BZ = 1;\n        long CA = 1;\n   \
    \     long CB = 1;\n        long CC = 1;\n        long CD = 1;\n        long CE\
    \ = 1;\n        long CF = 1;\n        long CG = 1;\n        long CH = 1;\n   \
    \     long CI = 1;\n        long C\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0cscdbjc.cs(126,15): error CS1002: ; expected

    '
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long a = b;\n        long b = b;\n        long c = b;\n        long d\
    \ = b;\n        long e = b;\n        long f = b;\n        long g = b;\n      \
    \  long h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n\
    \        long l = b;\n        long m = b;\n        long n = b;\n        long o\
    \ = b;\n        long p = b;\n        long q = b;\n        long r = b;\n      \
    \  long s = b;\n        long t = b;\n        long u = b;\n        long v = b;\n\
    \        long w = b;\n        long x = b;\n        long y = b;\n        long z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long a = b;\n        long b = b;\n        long c = b;\n\
    \        long d = b;\n        long e = b;\n        long f = b;\n        long g\
    \ = b;\n        long h = b;\n        long i = b;\n        long j = b;\n      \
    \  long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n\
    \        long o = b;\n        long p = b;\n        long q = b;\n        long r\
    \ = b;\n        long s = b;\n        long t = b;\n        long u = b;\n      \
    \  long v = b;\n        long w = b;\n        long x = b;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfwz77j2g.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpfwz77j2g.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = 0;\n        long\
    \ cube_pow = 0;\n        long cube_pow_pow = 0;\n        long cube_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long\
    \ cube_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n     \
    \   long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n     \
    \   long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n     \
    \   long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n \
    \       long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long\
    \ cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n     \
    \   long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n\
    \        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n    \
    \    long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long\
    \ cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow = 0;\n        long cube_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow\
    \ = 0;\n        long cube_pow_pow_\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6moemts8.cs(61,27): error CS1002: ; expected

    '
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long AA = a;\n        long AB\
    \ = a;\n        long AC = a;\n        long AD = a;\n        long AE = a;\n   \
    \     long AF = a;\n        long AG = a;\n        long AH = a;\n        long AI\
    \ = a;\n        long AJ = a;\n        long AK = a;\n        long AL = a;\n   \
    \     long AM\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptd9vkqzg.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a < 1)\n            return true;\n        if (a % 3 == 0)\n            return\
    \ true;\n        if (a % 5 == 0)\n            return true;\n        if (a % 7\
    \ == 0)\n            return true;\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f015d96b016544de8aa5d5f68916b142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f015d96b016544de8aa5d5f68916b142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        long r =\
    \ 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n        long\
    \ w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n    \
    \    long A = 1;\n        long B = 1;\n        long C = 1;\n        long D = 1;\n\
    \        long E = 1;\n        long F = 1;\n        long G = 1;\n        long H\
    \ = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n      \
    \  long L = 1;\n        long M = 1;\n        long N = 1;\n        long O = 1;\n\
    \        long P = 1;\n        long Q = 1;\n        long R = 1;\n        long S\
    \ = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n      \
    \  long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z = 1;\n\
    \        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n        long\
    \ AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG = 1;\n\
    \        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n        long\
    \ AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN = 1;\n\
    \        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n        long\
    \ AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU = 1;\n\
    \        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n        long\
    \ AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB = 1;\n\
    \        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n        long\
    \ BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI = 1;\n\
    \        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n        long\
    \ BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP = 1;\n\
    \        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n        long\
    \ BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW = 1;\n\
    \        long BX = 1;\n        long BY = 1;\n        long BZ = 1;\n        long\
    \ CA = 1;\n        long CB = 1;\n        long CC = 1;\n        long CD = 1;\n\
    \        long CE = 1;\n        long CF = 1;\n        long CG = 1;\n        long\
    \ CH = 1;\n        long CI = 1;\n        long CJ = 1;\n        long CK = 1;\n\
    \        long CL = 1;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpilx7gjq5.cs(126,13): error CS1001: Identifier expected

    /tmp/tmpilx7gjq5.cs(126,13): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        return ((a % 4) == 0 && (a % 8) == 0 && (a % 16) ==\
    \ 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <008565292a594272a2f6ffcaf361ad87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <008565292a594272a2f6ffcaf361ad87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3L));\n  \
    \      return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac697cee5c4b4beda24dd6c9a47dc584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac697cee5c4b4beda24dd6c9a47dc584>:0 \n"
  stdout: ''
  timestamp: 1659794832
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     if (cube == a)\n            return true;\n        else\n            return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c78bb5317f7412a98c827cfe959dc60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c78bb5317f7412a98c827cfe959dc60>:0 \n"
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        if (cube == a)\n   \
    \         return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n\
    \    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) ==\
    \ (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6i4ebaxa.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 0;\n        long g = 0;\n        long\
    \ h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n    \
    \    long l = 0;\n        long m = 0;\n        long n = 0;\n        long o = 0;\n\
    \        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s\
    \ = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n      \
    \  long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n\
    \        long A = 0;\n        long B = 0;\n        long C = 0;\n        long D\
    \ = 0;\n        long E = 0;\n        long F = 0;\n        long G = 0;\n      \
    \  long H = 0;\n        long I = 0;\n        long J = 0;\n        long K = 0;\n\
    \        long L = 0;\n        long M = 0;\n        long N = 0;\n        long O\
    \ = 0;\n        long P = 0;\n        long Q = 0;\n        long R = 0;\n      \
    \  long S = 0;\n        long T = 0;\n        long U = 0;\n        long V = 0;\n\
    \        long W = 0;\n        long X = 0;\n        long Y = 0;\n        long Z\
    \ = 0;\n        long AA = 0;\n        long BB = 0;\n        long CC = 0;\n   \
    \     long DD = 0;\n        long EE = 0;\n        long FF = 0;\n        long GG\
    \ = 0;\n        long HH = 0;\n        long II = 0;\n        long JJ = 0;\n   \
    \     long KK = 0;\n        long LL = 0;\n        long MM = 0;\n        long NN\
    \ = 0;\n        long OO = 0;\n        long PP = 0;\n        long QQ = 0;\n   \
    \     long RR = 0;\n        long SS = 0;\n        long TT = 0;\n        long UU\
    \ = 0;\n        long VV = 0;\n        long WW = 0;\n        long XX = 0;\n   \
    \     long YY = 0;\n        long ZZ = 0;\n        long AAA = 0;\n        long\
    \ BBB = 0;\n        long CCC = 0;\n        long DDD = 0;\n        long EEE = 0;\n\
    \        long FFF = 0;\n        long GGG = 0;\n        long HHH = 0;\n       \
    \ long III = 0;\n        long JJJ = 0;\n        long KKK = 0;\n        long LLL\
    \ = 0;\n        long MMM = 0;\n        long NNN = 0;\n        long OOO = 0;\n\
    \        long PPP = 0;\n        long QQQ = 0;\n        long RRR = 0;\n       \
    \ long SSS = 0;\n        long TTT = 0;\n        long UUU = 0;\n        long VVV\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptcgis1ju.cs(124,17): error CS1002: ; expected

    '
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n        long\
    \ ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag = 1;\n\
    \        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n        long\
    \ ak = 1;\n        long al = 1;\n        long am = 1;\n        long an = 1;\n\
    \        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n        long\
    \ ar = 1;\n        long as = 1;\n        long at = 1;\n        long au = 1;\n\
    \        long av = 1;\n        long aw = 1;\n        long ax = 1;\n        long\
    \ ay = 1;\n        long az = 1;\n        long aaa = 1;\n        long aab = 1;\n\
    \        long aac = 1;\n        long aad = 1;\n        long aae = 1;\n       \
    \ long aaf = 1;\n        long aag = 1;\n        long aah = 1;\n        long ai1\
    \ = 1;\n        long aj1 = 1;\n        long ak1 = 1;\n        long al1 = 1;\n\
    \        long am1 = 1;\n        long an1 = 1;\n        long ao1 = 1;\n       \
    \ long ap1 = 1;\n        long aq1 = 1;\n        long ar1 = 1;\n        long as1\
    \ = 1;\n        long at1 = 1;\n        long au1 = 1;\n        long av1 = 1;\n\
    \        long aw1 = 1;\n        long ax1 = 1;\n        long ay1 = 1;\n       \
    \ long az1 = 1;\n        long aaa1 = 1;\n        long aab1 = 1;\n        long\
    \ aac1 = 1;\n        long aad1 = 1;\n        long aae1 = 1;\n        long aaf1\
    \ = 1;\n        long aag1 = 1;\n        long aah1 = 1;\n        long ai1 = 1;\n\
    \        long aj1 = 1;\n        long ak1 = 1;\n        long al1 = 1;\n       \
    \ long am1 = 1;\n        long an1 = 1;\n        long ao1 = 1;\n        long ap1\
    \ = 1;\n        long aq1 = 1;\n        long ar1 = 1;\n        long as1 = 1;\n\
    \        long at1 = 1;\n        long au1 = 1;\n        long av1 = 1;\n       \
    \ long aw\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp50lxjcyt.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp50lxjcyt.cs(69,14): error CS1002: ; expected

    /tmp/tmp50lxjcyt.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp50lxjcyt.cs(69,17): error CS1031: Type expected

    /tmp/tmp50lxjcyt.cs(125,16): error CS1002: ; expected

    '
  timestamp: 1659794832
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (n\
    \ != 0) {\n            d *= n;\n            n--;\n        }\n        return d\
    \ == a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33152c81e9e64a5c8ac985eb45c4c5d3>:0 \n"
  stdout: None
  timestamp: 1659794837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long a = a;\n        long b = a;\n        long c = a;\n        long d\
    \ = a;\n        long e = a;\n        long f = a;\n        long g = a;\n      \
    \  long h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n\
    \        long l = a;\n        long m = a;\n        long n = a;\n        long o\
    \ = a;\n        long p = a;\n        long q = a;\n        long r = a;\n      \
    \  long s = a;\n        long t = a;\n        long u = a;\n        long v = a;\n\
    \        long w = a;\n        long x = a;\n        long y = a;\n        long z\
    \ = a;\n        long a = a;\n        long b = a;\n        long c = a;\n      \
    \  long d = a;\n        long e = a;\n        long f = a;\n        long g = a;\n\
    \        long h = a;\n        long i = a;\n        long j = a;\n        long k\
    \ = a;\n        long l = a;\n        long m = a;\n        long n = a;\n      \
    \  long o = a;\n        long p = a;\n        long q = a;\n        long r = a;\n\
    \        long s = a;\n        long t = a;\n        long u = a;\n        long v\
    \ = a;\n        long w = a;\n        long x = a;\n        long y = a;\n      \
    \  long z = a;\n        long a = a;\n        long b = a;\n        long c = a;\n\
    \        long d = a;\n        long e = a;\n        long f = a;\n        long g\
    \ = a;\n        long h = a;\n        long i = a;\n        long j = a;\n      \
    \  long k = a;\n        long l = a;\n        long m = a;\n        long n = a;\n\
    \        long o = a;\n        long p = a;\n        long q = a;\n        long r\
    \ = a;\n        long s = a;\n        long t = a;\n        long u = a;\n      \
    \  long v = a;\n        long w = a;\n        long x = a;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkoasx8iv.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpkoasx8iv.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (n\
    \ != 0) {\n            long r = n % d;\n            if (r != 0) {\n          \
    \      return false;\n            }\n            d *= d;\n            n /= d;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659794837
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkuht7av.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /tmp/tmpfkuht7av.cs(45,14): warning CS0219: The variable ''u'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long cube = 1;\n        long\
    \ sum = 0;\n        long square = 0;\n        long squareSum = 0;\n        long\
    \ squareSquare = 0;\n        long squareSquareSum = 0;\n        long squareSquareSquare\
    \ = 0;\n        long squareSquareSquareSum = 0;\n        long squareSquareSquareSquare\
    \ = 0;\n        long squareSquareSquareSquareSum = 0;\n        long squareSquareSquareSquareSum\
    \ = 0;\n        long squareSquareSquareSquareSum = 0;\n        long squareSquareSquareSquareSum\
    \ = 0;\n        long squareSquareSquareSquareSum = 0;\n        long squareSquareSquareSquareSum\
    \ = 0;\n        long squareSquareSquareSquareSum = 0;\n        long squareSquareSquareSquareSum\
    \ = 0;\n        long squareSquareSquareSum = 0;\n        long squareSum = 0;\n\
    \        long sumSquare = 0;\n        long sumSquareSquare = 0;\n        long\
    \ sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare = 0;\n      \
    \  long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare = 0;\n\
    \        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare =\
    \ 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n        long sumSquareSquareSquare = 0;\n        long sumSquareSquareSquare\
    \ = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8rtlla3.cs(37,14): error CS0128: A local variable or function named ''squareSquareSquareSquareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(38,14): error CS0128: A local variable or function named ''squareSquareSquareSquareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(39,14): error CS0128: A local variable or function named ''squareSquareSquareSquareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(40,14): error CS0128: A local variable or function named ''squareSquareSquareSquareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(41,14): error CS0128: A local variable or function named ''squareSquareSquareSquareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(42,14): error CS0128: A local variable or function named ''squareSquareSquareSquareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(43,14): error CS0128: A local variable or function named ''squareSquareSquareSquareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(44,14): error CS0128: A local variable or function named ''squareSquareSquareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(45,14): error CS0128: A local variable or function named ''squareSum''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(49,14): error CS0128: A local variable or function named ''sumSquareSquareSquare''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(50,14): error CS0128: A local variable or function named ''sumSquareSquareSquare''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(51,14): error CS0128: A local variable or function named ''sumSquareSquareSquare''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(52,14): error CS0128: A local variable or function named ''sumSquareSquareSquare''
    is already defined in this scope

    /tmp/tmpr8rtlla3.cs(53,14): error CS0128: A local variable or function named ''sumSquareSquareSquare''
    is already defined in this scope

    /tmp/tmpr8rtlla'
  timestamp: 1659794832
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long a = b;\n        long b = b;\n        long c = b;\n        long d\
    \ = b;\n        long e = b;\n        long f = b;\n        long g = b;\n      \
    \  long h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n\
    \        long l = b;\n        long m = b;\n        long n = b;\n        long o\
    \ = b;\n        long p = b;\n        long q = b;\n        long r = b;\n      \
    \  long s = b;\n        long t = b;\n        long u = b;\n        long v = b;\n\
    \        long w = b;\n        long x = b;\n        long y = b;\n        long z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long a = b;\n        long b = b;\n        long c = b;\n\
    \        long d = b;\n        long e = b;\n        long f = b;\n        long g\
    \ = b;\n        long h = b;\n        long i = b;\n        long j = b;\n      \
    \  long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n\
    \        long o = b;\n        long p = b;\n        long q = b;\n        long r\
    \ = b;\n        long s = b;\n        long t = b;\n        long u = b;\n      \
    \  long v = b;\n        long w = b;\n        long x = b;\n        long y = b;\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pyzo_g6.cs(128,13): error CS1001: Identifier expected

    /tmp/tmp6pyzo_g6.cs(128,13): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long AA = a;\n        long AB = a;\n        long AC = a;\n   \
    \     long AD = a;\n        long AE = a;\n        long AF = a;\n        long AG\
    \ = a;\n        long AH = a;\n        long AI = a;\n        long AJ = a;\n   \
    \     long AK = a;\n        long AL = a;\n        long AM = a;\n        long AN\
    \ = a;\n        long AO = a;\n        long AP = a;\n        long AQ = a;\n   \
    \     long AR = a;\n        long AS = a;\n        long AT = a;\n        long AU\
    \ = a;\n        long AV = a;\n        long AW = a;\n        long AX = a;\n   \
    \     long AY = a;\n        long AZ = a;\n        long BA = a;\n        long BB\
    \ = a;\n        long BC = a;\n        long BD = a;\n        long BE = a;\n   \
    \     long BF = a;\n        long BG = a;\n        long BH = a;\n        long BI\
    \ = a;\n        long BJ = a;\n        long BK = a;\n        long BL = a;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q50serw.cs(25,24): error CS0161: ''Problem.Iscube(long)'': not all code
    paths return a value

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = b;\n        long d =\
    \ b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long\
    \ h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n    \
    \    long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n\
    \        long p = b;\n        long q = b;\n        long r = b;\n        long s\
    \ = b;\n        long t = b;\n        long u = b;\n        long v = b;\n      \
    \  long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n\
    \        long a = b;\n        long b = b;\n        long c = b;\n        long d\
    \ = b;\n        long e = b;\n        long f = b;\n        long g = b;\n      \
    \  long h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n\
    \        long l = b;\n        long m = b;\n        long n = b;\n        long o\
    \ = b;\n        long p = b;\n        long q = b;\n        long r = b;\n      \
    \  long s = b;\n        long t = b;\n        long u = b;\n        long v = b;\n\
    \        long w = b;\n        long x = b;\n        long y = b;\n        long z\
    \ = b;\n        long a = b;\n        long b = b;\n        long c = b;\n      \
    \  long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n\
    \        long h = b;\n        long i = b;\n        long j = b;\n        long k\
    \ = b;\n        long l = b;\n        long m = b;\n        long n = b;\n      \
    \  long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n\
    \        long s = b;\n        long t = b;\n        long u = b;\n        long v\
    \ = b;\n        long w = b;\n        long x = b;\n        long y = b;\n      \
    \  long z = b;\n        long a = b;\n        long b = b;\n        long c = b;\n\
    \        long d = b;\n        long e = b;\n        long f = b;\n        long g\
    \ = b;\n        long h = b;\n        long i = b;\n        long j = b;\n      \
    \  long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n\
    \        long o = b;\n        long p = b;\n        long q = b;\n        long r\
    \ = b;\n        long s = b;\n        long t = b;\n        long u = b;\n      \
    \  long v = b;\n        long w = b;\n        long x = b;\n        long y = \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfwz77j2g.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpfwz77j2g.cs(127,17): error CS1002: ; expected

    '
  timestamp: 1659794832
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        if (a < 0)\n            return false;\n        if\
    \ (a % 3 == 0)\n            return true;\n        if (a % 5 == 0)\n          \
    \  return true;\n        if (a % 7 == 0)\n            return true;\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06f67389e5a04bcdbc645811f80ba945>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06f67389e5a04bcdbc645811f80ba945>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794833
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n    \
    \    long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n\
    \        long A = 1;\n        long B = 1;\n        long C = 1;\n        long D\
    \ = 1;\n        long E = 1;\n        long F = 1;\n        long G = 1;\n      \
    \  long H = 1;\n        long I = 1;\n        long J = 1;\n        long K = 1;\n\
    \        long L = 1;\n        long M = 1;\n        long N = 1;\n        long O\
    \ = 1;\n        long P = 1;\n        long Q = 1;\n        long R = 1;\n      \
    \  long S = 1;\n        long T = 1;\n        long U = 1;\n        long V = 1;\n\
    \        long W = 1;\n        long X = 1;\n        long Y = 1;\n        long Z\
    \ = 1;\n        long AA = 1;\n        long AB = 1;\n        long AC = 1;\n   \
    \     long AD = 1;\n        long AE = 1;\n        long AF = 1;\n        long AG\
    \ = 1;\n        long AH = 1;\n        long AI = 1;\n        long AJ = 1;\n   \
    \     long AK = 1;\n        long AL = 1;\n        long AM = 1;\n        long AN\
    \ = 1;\n        long AO = 1;\n        long AP = 1;\n        long AQ = 1;\n   \
    \     long AR = 1;\n        long AS = 1;\n        long AT = 1;\n        long AU\
    \ = 1;\n        long AV = 1;\n        long AW = 1;\n        long AX = 1;\n   \
    \     long AY = 1;\n        long AZ = 1;\n        long BA = 1;\n        long BB\
    \ = 1;\n        long BC = 1;\n        long BD = 1;\n        long BE = 1;\n   \
    \     long BF = 1;\n        long BG = 1;\n        long BH = 1;\n        long BI\
    \ = 1;\n        long BJ = 1;\n        long BK = 1;\n        long BL = 1;\n   \
    \     long BM = 1;\n        long BN = 1;\n        long BO = 1;\n        long BP\
    \ = 1;\n        long BQ = 1;\n        long BR = 1;\n        long BS = 1;\n   \
    \     long BT = 1;\n        long BU = 1;\n        long BV = 1;\n        long BW\
    \ = 1;\n        long BX = 1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvt8a9fd.cs(26,14): warning CS0219: The variable ''b'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(27,14): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(28,14): warning CS0219: The variable ''d'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(29,14): warning CS0219: The variable ''e'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(30,14): warning CS0219: The variable ''f'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(31,14): warning CS0219: The variable ''g'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(32,14): warning CS0219: The variable ''h'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(33,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(34,14): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(35,14): warning CS0219: The variable ''k'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(36,14): warning CS0219: The variable ''l'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(37,14): warning CS0219: The variable ''m'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(38,14): warning CS0219: The variable ''n'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(39,14): warning CS0219: The variable ''o'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(40,14): warning CS0219: The variable ''p'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(41,14): warning CS0219: The variable ''q'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(42,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(43,14): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    /tmp/tmpkvt8a9fd.cs(44,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    /t'
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\n        long bp = a;\n\
    \        long bq = a;\n        long br = a;\n        long bs = a;\n        long\
    \ bt = a;\n        long bu = a;\n        long bv = a;\n        long bw = a;\n\
    \        long bx = a;\n        long by = a;\n        long bz = a;\n        long\
    \ ca = a;\n        long cb = a;\n        long cc = a;\n        long cd = a;\n\
    \        long ce = a;\n        long cf = a;\n        long cg = a;\n        long\
    \ ch = a;\n        long ci = a;\n        long cj = a;\n        long ck = a;\n\
    \        long cl = a;\n        long cm\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L))\
    \ == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L))\
    \ == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9aw9yk39.cs(69,14): error CS1001: Identifier expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1002: ; expected

    /tmp/tmp9aw9yk39.cs(69,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp9aw9yk39.cs(69,17): error CS1031: Type expected

    /tmp/tmp9aw9yk39.cs(115,16): error CS1002: ; expected

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long n = a;\n        long d = 1;\n        while (n\
    \ > 1) {\n            d *= n;\n            n /= 3;\n        }\n        return\
    \ d == a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00b050f946bb4a1eaf0e2ebe53de6e73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00b050f946bb4a1eaf0e2ebe53de6e73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794833
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long b = a;\n        long c = a;\n        long d =\
    \ a;\n        long e = a;\n        long f = a;\n        long g = a;\n        long\
    \ h = a;\n        long i = a;\n        long j = a;\n        long k = a;\n    \
    \    long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long A = a;\n        long B = a;\n        long C = a;\n        long D\
    \ = a;\n        long E = a;\n        long F = a;\n        long G = a;\n      \
    \  long H = a;\n        long I = a;\n        long J = a;\n        long K = a;\n\
    \        long L = a;\n        long M = a;\n        long N = a;\n        long O\
    \ = a;\n        long P = a;\n        long Q = a;\n        long R = a;\n      \
    \  long S = a;\n        long T = a;\n        long U = a;\n        long V = a;\n\
    \        long W = a;\n        long X = a;\n        long Y = a;\n        long Z\
    \ = a;\n        long aa = a;\n        long ab = a;\n        long ac = a;\n   \
    \     long ad = a;\n        long ae = a;\n        long af = a;\n        long ag\
    \ = a;\n        long ah = a;\n        long ai = a;\n        long aj = a;\n   \
    \     long ak = a;\n        long al = a;\n        long am = a;\n        long an\
    \ = a;\n        long ao = a;\n        long ap = a;\n        long aq = a;\n   \
    \     long ar = a;\n        long as = a;\n        long at = a;\n        long au\
    \ = a;\n        long av = a;\n        long aw = a;\n        long ax = a;\n   \
    \     long ay = a;\n        long az = a;\n        long ba = a;\n        long bb\
    \ = a;\n        long bc = a;\n        long bd = a;\n        long be = a;\n   \
    \     long bf = a;\n        long bg = a;\n        long bh = a;\n        long bi\
    \ = a;\n        long bj = a;\n        long bk = a;\n        long bl = a;\n   \
    \     long bm = a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5cyf52i.cs(95,14): error CS1001: Identifier expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1002: ; expected

    /tmp/tmpx5cyf52i.cs(95,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpx5cyf52i.cs(95,17): error CS1031: Type expected

    '
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Convert.ToInt64(Math.Pow(a, 3));\n   \
    \     return cube == a;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n\
    \    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) ==\
    \ (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L))\
    \ == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e107ef2f32114266bafee713072fec08>:0 \n"
  stdout: ''
  timestamp: 1659794831
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes an integer a and returns true\
    \ \n    // if this ingeger is a cube of some integer number.\n    // Note: you\
    \ may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n\
    \    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n\
    \    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n\
    \    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool\
    \ Iscube(long a) {\n        long cube = Cube(a);\n        return cube == a;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L))\
    \ == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L))\
    \ == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L))\
    \ == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L))\
    \ == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z0robd6.cs(26,21): error CS0103: The name ''Cube'' does not exist in
    the current context

    '
  timestamp: 1659794831
