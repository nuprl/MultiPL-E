name: HumanEval_126_is_sorted
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return whether or not they are sorted\n\
  \    // in ascending order. If list has more than 1 duplicate of the same\n    //\
  \ number, return false. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n  \
  \  // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n\
  \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>\
  \ IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,\
  \ (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //\
  \ (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
  \ (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
  \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
  \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
  \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n\
  \    }\n\n}\n"
completions: ["        long lastValue = lst[0];\n        bool isSorted = true;\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                isSorted = false;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                isSorted = false;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        long last = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            if (lst[i]\
    \ == last) {\n                found = true;\n            }\n            last =\
    \ lst[i];\n        }\n        return found;", "        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        long first = lst[0];\n      \
    \  long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n     \
    \           isSorted = false;\n                break;\n            }\n       \
    \     if (lst[i] > last) {\n                isSorted = false;\n              \
    \  break;\n            }\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                return false;\n            if (lst[i] > lastValue)\n        \
    \        isSorted = true;\n            lastValue = lst[i];\n        }\n      \
    \  return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             isSorted = false;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long lastValue = lst[0];\n        bool isSorted = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  if (lst[i] == lastValue) {\n                isSorted = true;\n            \
    \    break;\n            }\n            lastValue = lst[i];\n        }\n     \
    \   return isSorted;", "        long last = lst[0];\n        bool sorted = false;\n\
    \        foreach (long i in lst) {\n            if (i > last) {\n            \
    \    sorted = true;\n                break;\n            }\n            last =\
    \ i;\n        }\n        return sorted;", "        if (lst.Count < 2)\n      \
    \      return true;\n        long lastValue = lst[0];\n        bool isSorted =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < lastValue)\n                isSorted = false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ found = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < last) {\n                return false;\n            }\n          \
    \  if (lst[i] == last) {\n                found = true;\n            }\n     \
    \       last = lst[i];\n        }\n        return found;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long first = lst[0];\n        long last\
    \ = lst[lst.Count - 1];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < first)\n                isSorted\
    \ = false;\n            if (lst[i] > last)\n                isSorted = false;\n\
    \        }\n        return isSorted;", "        long prevVal = lst[0];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < prevVal) {\n                isSorted = false;\n       \
    \         break;\n            }\n            prevVal = lst[i];\n        }\n  \
    \      return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            else if (lst[i] > lastValue)\n      \
    \          isSorted = false;\n            lastValue = lst[i];\n        }\n   \
    \     return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        long prev = 0;\n \
    \       bool isSorted = true;\n        foreach (long num in lst) {\n         \
    \   if (num < prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = num;\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2) return true;\n        if (lst.Count\
    \ > 2) return false;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        var seen = new HashSet<long>();\n  \
    \      foreach (var item in lst) {\n            if (seen.Add(item))\n        \
    \        return false;\n        }\n        return true;", "        long prev =\
    \ 0;\n        bool sorted = false;\n        foreach (long n in lst) {\n      \
    \      if (prev > n) {\n                sorted = false;\n                break;\n\
    \            }\n            prev = n;\n        }\n        return sorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool first = true;\n        foreach (long num in lst) {\n           \
    \ if (num == last)\n                continue;\n            if (first)\n      \
    \          first = false;\n            else\n                return false;\n \
    \           last = num;\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool flag = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \          last = lst[i];\n        }\n        return flag;", "        if (lst.Count\
    \ < 2) return true;\n        long lastValue = lst[0];\n        bool isSorted =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                isSorted\
    \ = true;\n                break;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item))\n      \
    \          return false;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool first = true;\n        foreach (long i in lst) {\n            if\
    \ (first && i == last)\n                return false;\n            if (first &&\
    \ i != last)\n                return false;\n            first = false;\n    \
    \        last = i;\n        }\n        return true;", "        if (lst.Count <\
    \ 2) return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool found = false;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n\
    \                return false;\n            }\n            if (lst[i] == last)\
    \ {\n                found = true;\n            }\n            last = lst[i];\n\
    \        }\n        return found;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool isSorted = false;\n       \
    \ for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n  \
    \              return false;\n            }\n            isSorted = true;\n  \
    \          last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first && num == last) return\
    \ false;\n            if (num < last) return false;\n            last = num;\n\
    \            first = false;\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        long lastValue = lst[0];\n        bool isSorted =\
    \ true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ first = true;\n        foreach (long num in lst) {\n            if (first &&\
    \ num == last) return false;\n            if (num < last) return false;\n    \
    \        last = num;\n            first = false;\n        }\n        return true;",
  "        if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < last) {\n                isSorted = false;\n                break;\n\
    \            }\n            last = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n   \
    \     bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;", "       \
    \ if (lst.Count < 2)\n            return true;\n        long first = lst[0];\n\
    \        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n\
    \                isSorted = false;\n            if (lst[i] > last)\n         \
    \       isSorted = false;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2) return true;\n \
    \       if (lst.Count > 2) return false;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Contains(item)) return\
    \ false;\n            seen.Add(item);\n        }\n        return true;", "   \
    \     if (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long first = lst[0];\n        long last = lst[lst.Count - 1];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < first)\n                isSorted = false;\n        \
    \    if (lst[i] > last)\n                isSorted = false;\n        }\n      \
    \  return isSorted;", "        if (lst.Count < 2) return true;\n        if (lst.Count\
    \ > 2) return false;\n        if (lst.Count == 2) return lst.First() == lst.Last();\n\
    \        long first = lst.First();\n        long last = lst.Last();\n        bool\
    \ isAscending = true;\n        long lastValue = last;\n        foreach (long value\
    \ in lst) {\n            if (value > lastValue) {\n                isAscending\
    \ = false;\n                break;\n            }\n            lastValue = value;\n\
    \        }\n        return isAscending;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long prev = 0;\n\
    \        bool isSorted = true;\n        foreach (long num in lst) {\n        \
    \    if (num < prev)\n                isSorted = false;\n            prev = num;\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool first = true;\n  \
    \      foreach (long num in lst) {\n            if (first && num == last)\n  \
    \              continue;\n            first = false;\n            if (num < last)\n\
    \                return false;\n            last = num;\n        }\n        return\
    \ true;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ last = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long last = lst[0];\n        bool isSorted = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < last) {\n                return\
    \ false;\n            }\n            isSorted = true;\n            last = lst[i];\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;", "        if (lst.Count < 2)\n            return true;\n \
    \       var seen = new HashSet<long>();\n        foreach (var item in lst) {\n\
    \            if (seen.Add(item))\n                return false;\n        }\n \
    \       return true;", "        long prev = 0;\n        bool isSorted = true;\n\
    \        foreach (long num in lst) {\n            if (prev > num) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  prev = num;\n        }\n        return isSorted;", "        if (lst.Count <\
    \ 2) return true;\n        var seen = new HashSet<long>();\n        foreach (var\
    \ x in lst) {\n            if (seen.Add(x)) {\n                return false;\n\
    \            }\n        }\n        return true;", "        bool isSorted = true;\n\
    \        long lastValue = lst[0];\n        foreach (long value in lst) {\n   \
    \         if (value > lastValue) {\n                isSorted = false;\n      \
    \          break;\n            }\n            lastValue = value;\n        }\n\
    \        return isSorted;", "        long lastValue = lst.Last();\n        bool\
    \ isSorted = true;\n        foreach (long value in lst) {\n            if (value\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = value;\n        }\n        return isSorted;",
  "        long prevVal = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prevVal) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  prevVal = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var x in lst) {\n            if (seen.Contains(x)) return false;\n        \
    \    seen.Add(x);\n        }\n        return true;", "        if (lst.Count <\
    \ 2)\n            return true;\n        var seen = new HashSet<long>();\n    \
    \    foreach (var item in lst) {\n            if (seen.Add(item))\n          \
    \      return false;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        var seen = new HashSet<long>();\n  \
    \      foreach (var item in lst) {\n            if (seen.Contains(item))\n   \
    \             return false;\n            seen.Add(item);\n        }\n        return\
    \ true;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ last = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                return false;\n  \
    \          }\n            if (lst[i] == last) {\n                found = true;\n\
    \            }\n            last = lst[i];\n        }\n        return found;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ lastValue = lst[0];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        var seen = new HashSet<long>();\n        foreach (var\
    \ item in lst) {\n            if (seen.Add(item)) {\n                return false;\n\
    \            }\n        }\n        return true;", "        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = true;\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < last)\n                isSorted = false;\n          \
    \  last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        if (lst.Count > 2 && lst.Distinct().Count() > 1)\
    \ return false;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;", "        if (lst.Count < 2)\n            return true;\n \
    \       long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (lst[i] == last) {\n                isSorted = true;\n                break;\n\
    \            }\n            last = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool found = false;\n        foreach (long num in lst) {\n          \
    \  if (num == last)\n                found = true;\n            else\n       \
    \         found = false;\n            if (found)\n                return false;\n\
    \            last = num;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        var seen = new HashSet<long>();\n  \
    \      foreach (var item in lst) {\n            if (seen.Contains(item))\n   \
    \             return false;\n            seen.Add(item);\n        }\n        return\
    \ true;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ last = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        var seen = new HashSet<long>();\n        foreach (var item in lst) {\n\
    \            if (seen.Add(item))\n                return false;\n        }\n \
    \       return true;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        var hashSet = new HashSet<long>(lst);\n\
    \        if (hashSet.Count != lst.Count) return false;\n        var sortedList\
    \ = lst.OrderBy(x => x).ToList();\n        if (sortedList.Count != lst.Count)\
    \ return false;\n        foreach (var item in sortedList) {\n            if (hashSet.Contains(item))\
    \ return false;\n        }\n        return true;", "        if (lst.Count < 2)\
    \ return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2) return true;\n \
    \       long last = lst[0];\n        bool first = true;\n        foreach (long\
    \ num in lst) {\n            if (first && num == last) return true;\n        \
    \    if (num < last) return false;\n            last = num;\n            first\
    \ = false;\n        }\n        return true;", "        if (lst.Count < 2) return\
    \ true;\n        long prev = 0;\n        bool isSorted = true;\n        foreach\
    \ (long num in lst) {\n            if (num < prev) {\n                isSorted\
    \ = false;\n                break;\n            }\n            prev = num;\n \
    \       }\n        return isSorted;", "        if (lst.Count < 2)\n          \
    \  return true;\n        long prev = 0;\n        long curr = lst[0];\n       \
    \ bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n     \
    \       if (lst[i] < curr) {\n                isSorted = false;\n            \
    \    break;\n            }\n            if (lst[i] == prev)\n                continue;\n\
    \            prev = lst[i];\n            curr = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ prev = 0;\n        long current = lst[0];\n        bool isSorted = true;\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < current)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == current) {\n                if (prev != lst[i - 1])\
    \ {\n                    isSorted = false;\n                    break;\n     \
    \           }\n            }\n            prev = current;\n            current\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = true;\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < last)\n                return false;\n            else\n\
    \                last = lst[i];\n        }\n        return isSorted;", "     \
    \   if (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                isSorted = false;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        var seen = new HashSet<long>();\n        foreach (var\
    \ item in lst) {\n            if (seen.Contains(item)) return false;\n       \
    \     seen.Add(item);\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            if (lst[i]\
    \ == last) {\n                found = true;\n            }\n            last =\
    \ lst[i];\n        }\n        return found;", "        if (lst.Count < 2) return\
    \ true;\n        long last = lst[0];\n        bool found = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] != last) {\n     \
    \           found = true;\n                break;\n            }\n        }\n\
    \        return found;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            else\n                lastValue = lst[i];\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2) return true;\n \
    \       long last = lst[0];\n        bool isSorted = true;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n             \
    \   isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool first\
    \ = true;\n        foreach (long value in lst) {\n            if (first)\n   \
    \             first = false;\n            else\n                if (lastValue\
    \ == value)\n                    return false;\n            lastValue = value;\n\
    \        }\n        return true;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long first = lst[0];\n        long last = lst[lst.Count - 1];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < first)\n                isSorted = false;\n        \
    \    if (lst[i] > last)\n                isSorted = false;\n        }\n      \
    \  return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        var hash = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (hash.Contains(item)) return\
    \ false;\n            hash.Add(item);\n        }\n        return true;", "   \
    \     if (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                return false;\n        \
    \    else\n                lastValue = lst[i];\n        }\n        return true;",
  "        if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2)\n            return true;\n        var hash = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (hash.Contains(item))\n \
    \               return false;\n            hash.Add(item);\n        }\n      \
    \  return true;", "        if (lst.Count < 2) return true;\n        long last\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            isSorted = true;\n       \
    \     last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Add(item)) return false;\n       \
    \ }\n        return true;", "        if (lst.Count < 2) return true;\n       \
    \ long lastValue = lst[0];\n        bool isSorted = true;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) isSorted = false;\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ found = false;\n        foreach (long num in lst) {\n            if (num ==\
    \ last) return false;\n            if (num < last) found = true;\n           \
    \ last = num;\n        }\n        return found;", "        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool found = false;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] != last) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        return found;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = true;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                isSorted = false;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long lastValue = lst[0];\n        bool isSorted = true;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  lastValue = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ != last) {\n                found = true;\n                break;\n        \
    \    }\n        }\n        return found;", "        if (lst.Count < 2) return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = true;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                return false;\n        \
    \    else\n                lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long first = lst[0];\n       \
    \ long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n     \
    \           isSorted = false;\n                break;\n            }\n       \
    \     if (lst[i] > last) {\n                isSorted = false;\n              \
    \  break;\n            }\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        var hash = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (hash.Contains(item)) return false;\n  \
    \          hash.Add(item);\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        if (lst.Count > 2 && lst.Distinct().Count() > 1)\
    \ return false;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2) return true;\n \
    \       long lastValue = lst[0];\n        bool first = true;\n        foreach\
    \ (long value in lst) {\n            if (first) {\n                first = false;\n\
    \                if (lastValue == value) return false;\n            } else {\n\
    \                if (lastValue == value) return false;\n            }\n      \
    \      lastValue = value;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        if (lst.Count > 2 && lst.Distinct().Count()\
    \ > 1) return false;\n        long last = lst.Last();\n        long first = lst.First();\n\
    \        if (last < first) return true;\n        if (last > first) return false;\n\
    \        long mid = first + (last - first) / 2;\n        bool isSorted = true;\n\
    \        foreach (long num in lst) {\n            if (num < mid) isSorted = false;\n\
    \            if (num > mid) isSorted = false;\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long prevVal = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prevVal)\n                isSorted = false;\n            prevVal = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2) return true;\n\
    \        if (lst.Count > 2) return false;\n        long first = lst[0];\n    \
    \    long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n     \
    \           isSorted = false;\n                break;\n            }\n       \
    \     if (lst[i] > last) {\n                isSorted = false;\n              \
    \  break;\n            }\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Contains(item)) return false;\n  \
    \          seen.Add(item);\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first) {\n             \
    \   first = false;\n                if (num == last) return true;\n          \
    \  } else {\n                if (num != last) return false;\n            }\n \
    \           last = num;\n        }\n        return false;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last)\n                return false;\n            isSorted = isSorted && (lst[i]\
    \ <= last);\n            last = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Contains(item)) return\
    \ false;\n            seen.Add(item);\n        }\n        return true;", "   \
    \     if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item)) return false;\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long first = lst[0];\n        long last = lst[lst.Count - 1];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < first) isSorted = false;\n            if (lst[i] > last)\
    \ isSorted = false;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ firstValue = true;\n        bool lastValueIsDuplicate = false;\n        bool\
    \ firstValueIsDuplicate = false;\n        foreach (long value in lst) {\n    \
    \        if (firstValue) {\n                firstValueIsDuplicate = firstValue\
    \ && value == lastValue;\n                firstValue = false;\n            }\n\
    \            lastValueIsDuplicate = lastValue == value;\n            lastValue\
    \ = value;\n        }\n        return firstValueIsDuplicate && lastValueIsDuplicate;",
  "        if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            lastValue = lst[i];\n    \
    \    }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long prevVal = lst[0];\n        bool isSorted = true;\n     \
    \   for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prevVal)\n\
    \                isSorted = false;\n            prevVal = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            else\n                lastValue = lst[i];\n\
    \        }\n        return true;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long first = lst[0];\n        long last\
    \ = lst[lst.Count - 1];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < first)\n                isSorted\
    \ = false;\n            if (lst[i] > last)\n                isSorted = false;\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool first = true;\n  \
    \      foreach (long num in lst) {\n            if (first && num == last)\n  \
    \              continue;\n            if (num < last)\n                return\
    \ false;\n            last = num;\n            first = false;\n        }\n   \
    \     return true;", "        if (lst.Count < 2) return true;\n        long prev\
    \ = 0;\n        bool isSorted = true;\n        foreach (long i in lst) {\n   \
    \         if (prev > i) {\n                isSorted = false;\n               \
    \ break;\n            }\n            prev = i;\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long prev = 0;\n        bool flag = true;\n        foreach (long i in\
    \ lst) {\n            if (prev > i) {\n                flag = false;\n       \
    \         break;\n            }\n            prev = i;\n        }\n        return\
    \ flag;", "        if (lst.Count < 2) return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            isSorted = false;\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool first = true;\n        foreach (long num in lst) {\n           \
    \ if (first && num == last)\n                continue;\n            first = false;\n\
    \            if (num < last)\n                return false;\n            last\
    \ = num;\n        }\n        return true;", "        if (lst.Count < 2) return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == lastValue) {\n                isSorted = true;\n  \
    \          }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool firstValue = true;\n        foreach (long value in lst)\
    \ {\n            if (firstValue) {\n                firstValue = false;\n    \
    \            continue;\n            }\n            if (value == lastValue)\n \
    \               return false;\n            lastValue = value;\n        }\n   \
    \     return true;", "        if (lst.Count < 2)\n            return true;\n \
    \       long prevVal = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prevVal) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  prevVal = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        if (lst.Count > 2) return false;\n        long first\
    \ = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted =\
    \ true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < first) {\n                isSorted = false;\n                break;\n    \
    \        }\n            if (lst[i] > last) {\n                isSorted = false;\n\
    \                break;\n            }\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long first = lst[0];\n\
    \        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n\
    \                isSorted = false;\n            if (lst[i] > last)\n         \
    \       isSorted = false;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long first = lst[0];\n        long last\
    \ = lst[lst.Count - 1];\n        if (first > last)\n            return false;\n\
    \        long mid = first + (last - first) / 2;\n        bool isLeft = true;\n\
    \        bool isRight = true;\n        foreach (long num in lst) {\n         \
    \   if (num == mid)\n                isLeft = isLeft && num < mid;\n         \
    \   else\n                isRight = isRight && num > mid;\n        }\n       \
    \ return isLeft && isRight;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool isSorted = false;\n       \
    \ for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        isSorted = true;\n            last = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ last = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long last = lst[0];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < last) {\n                isSorted\
    \ = false;\n                break;\n            }\n            last = lst[i];\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        long current\
    \ = lst[0];\n        bool isSorted = false;\n        foreach (long num in lst)\
    \ {\n            if (num < current) {\n                isSorted = false;\n   \
    \             break;\n            }\n            if (num == current) {\n     \
    \           if (prev != current) {\n                    isSorted = false;\n  \
    \                  break;\n                }\n            }\n            prev\
    \ = current;\n            current = num;\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < last) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            last = lst[i];\n   \
    \     }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = true;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                isSorted = false;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long lastValue = lst[0];\n        bool isSorted = true;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  lastValue = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long prev = 0;\n\
    \        long curr = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (lst[i] == prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                return false;\n           \
    \ }\n            if (lst[i] == last) {\n                found = true;\n      \
    \      }\n            last = lst[i];\n        }\n        return found;", "   \
    \     if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long first = lst[0];\n        long last = lst[lst.Count - 1];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < first) {\n                isSorted = false;\n         \
    \       break;\n            }\n            if (lst[i] > last) {\n            \
    \    isSorted = false;\n                break;\n            }\n        }\n   \
    \     return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ lastValue = lst[0];\n        bool isSorted = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst[i]\
    \ == lastValue) {\n                isSorted = true;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long prev = 0;\n        bool sorted\
    \ = false;\n        foreach (long num in lst) {\n            if (num > prev) {\n\
    \                sorted = true;\n                break;\n            }\n     \
    \       prev = num;\n        }\n        return sorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ != last) {\n                found = true;\n                break;\n        \
    \    }\n        }\n        return found;", "        if (lst.Count < 2) return\
    \ true;\n        long last = lst[0];\n        bool isSorted = false;\n       \
    \ for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        isSorted = true;\n            last = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ last = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        long prevVal = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prevVal) {\n                isSorted = false;\n                break;\n  \
    \          }\n            prevVal = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        long\
    \ lastValue = lst[0];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;", "        long prev\
    \ = 0;\n        bool isSorted = true;\n        foreach (long num in lst) {\n \
    \           if (num < prev) {\n                isSorted = false;\n           \
    \     break;\n            }\n            prev = num;\n        }\n        return\
    \ isSorted;", "        long prev = 0;\n        bool isSorted = true;\n       \
    \ foreach (long num in lst) {\n            if (num < prev) {\n               \
    \ isSorted = false;\n                break;\n            }\n            prev =\
    \ num;\n        }\n        return isSorted;", "        if (lst.Count < 2)\n  \
    \          return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first && num == last)\n\
    \                continue;\n            if (num < last)\n                return\
    \ false;\n            first = false;\n            last = num;\n        }\n   \
    \     return true;", "        if (lst.Count < 2)\n            return true;\n \
    \       long first = lst[0];\n        long last = lst[lst.Count - 1];\n      \
    \  bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n    \
    \        if (lst[i] < first)\n                isSorted = false;\n            if\
    \ (lst[i] > last)\n                isSorted = false;\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2) return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool first = true;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] != last) {\n                return false;\n           \
    \ }\n            last = lst[i];\n            if (first) {\n                first\
    \ = false;\n            }\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < lastValue)\n                isSorted = false;\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool first\
    \ = true;\n        foreach (long x in lst) {\n            if (first)\n       \
    \         first = false;\n            else\n                if (last > x)\n  \
    \                  return false;\n            last = x;\n        }\n        return\
    \ true;", "        if (lst.Count < 2) return true;\n        long first = lst[0];\n\
    \        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) isSorted\
    \ = false;\n            if (lst[i] > last) isSorted = false;\n        }\n    \
    \    return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool found = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] != last) {\n            \
    \    found = true;\n                break;\n            }\n        }\n       \
    \ return found;", "        if (lst.Count < 2)\n            return true;\n    \
    \    long last = lst[0];\n        bool first = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < last) {\n                return\
    \ false;\n            }\n            if (first) {\n                last = lst[i];\n\
    \                first = false;\n            }\n        }\n        return true;",
  "        if (lst.Count < 2) return true;\n        long first = lst[0];\n       \
    \ long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n     \
    \           isSorted = false;\n                break;\n            }\n       \
    \     if (lst[i] > last) {\n                isSorted = false;\n              \
    \  break;\n            }\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        var hash = new Dictionary<long, long>();\n\
    \        foreach (var item in lst) {\n            if (hash.ContainsKey(item))\n\
    \                return false;\n            hash[item] = item;\n        }\n  \
    \      return true;", "        if (lst.Count < 2) return true;\n        long last\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long lastValue = lst[0];\n        bool isSorted = true;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  lastValue = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long lastValue = lst[0];\n        bool first = true;\n\
    \        foreach (long value in lst) {\n            if (first) {\n           \
    \     first = false;\n                continue;\n            }\n            if\
    \ (value >= lastValue) return false;\n            lastValue = value;\n       \
    \ }\n        return true;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             isSorted = false;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        long prev = 0;\n        long curr = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                return false;\n            }\n            if (lst[i] == prev)\
    \ {\n                return false;\n            }\n            prev = lst[i];\n\
    \        }\n        return true;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                return false;\n        \
    \    else\n                lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool first = true;\n        foreach (long num in lst) {\n           \
    \ if (first && num == last)\n                return false;\n            else if\
    \ (num < last)\n                return false;\n            first = false;\n  \
    \          last = num;\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        if (lst.Count > 2 && lst.Skip(1).SequenceEqual(lst.Take(2)))\
    \ return false;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        if (first < last) return true;\n        if (first > last) return\
    \ false;\n        long mid = first + (last - first) / 2;\n        if (mid == first)\
    \ return IsSorted(lst.Skip(1).Take(mid));\n        if (mid == last) return IsSorted(lst.Take(mid).Skip(1).Take(last\
    \ - mid));\n        return IsSorted(lst.Skip(1).Take(mid).Take(last - mid));",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool first = true;\n        foreach (long num in lst) {\n           \
    \ if (first) {\n                first = false;\n                if (num == last)\n\
    \                    return false;\n                last = num;\n            \
    \    continue;\n            }\n            if (num == last)\n                return\
    \ false;\n            last = num;\n        }\n        return true;", "       \
    \ if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool first\
    \ = true;\n        foreach (long x in lst) {\n            if (first && x == last)\
    \ return false;\n            if (first && !first) continue;\n            if (x\
    \ < last) return false;\n            last = x;\n            first = false;\n \
    \       }\n        return true;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                return false;\n            else\n                lastValue =\
    \ lst[i];\n        }\n        return true;", "        if (lst.Count < 2)\n   \
    \         return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return isSorted;"]
stop_tokens:
- "\n    }\n"
