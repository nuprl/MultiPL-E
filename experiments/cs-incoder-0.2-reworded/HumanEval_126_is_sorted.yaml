name: HumanEval_126_is_sorted
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return whether or not they are sorted\n\
  \    // in ascending order. If list has more than 1 duplicate of the same\n    //\
  \ number, return false. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n  \
  \  // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n\
  \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>\
  \ IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,\
  \ (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //\
  \ (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
  \ (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
  \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
  \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
  \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n\
  \    }\n\n}\n"
completions: ["        long lastValue = lst[0];\n        bool isSorted = true;\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                isSorted = false;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                isSorted = false;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        long last = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            if (lst[i]\
    \ == last) {\n                found = true;\n            }\n            last =\
    \ lst[i];\n        }\n        return found;", "        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        long first = lst[0];\n      \
    \  long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n     \
    \           isSorted = false;\n                break;\n            }\n       \
    \     if (lst[i] > last) {\n                isSorted = false;\n              \
    \  break;\n            }\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                return false;\n            if (lst[i] > lastValue)\n        \
    \        isSorted = true;\n            lastValue = lst[i];\n        }\n      \
    \  return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             isSorted = false;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long lastValue = lst[0];\n        bool isSorted = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  if (lst[i] == lastValue) {\n                isSorted = true;\n            \
    \    break;\n            }\n            lastValue = lst[i];\n        }\n     \
    \   return isSorted;", "        long last = lst[0];\n        bool sorted = false;\n\
    \        foreach (long i in lst) {\n            if (i > last) {\n            \
    \    sorted = true;\n                break;\n            }\n            last =\
    \ i;\n        }\n        return sorted;", "        if (lst.Count < 2)\n      \
    \      return true;\n        long lastValue = lst[0];\n        bool isSorted =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < lastValue)\n                isSorted = false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ found = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < last) {\n                return false;\n            }\n          \
    \  if (lst[i] == last) {\n                found = true;\n            }\n     \
    \       last = lst[i];\n        }\n        return found;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long first = lst[0];\n        long last\
    \ = lst[lst.Count - 1];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < first)\n                isSorted\
    \ = false;\n            if (lst[i] > last)\n                isSorted = false;\n\
    \        }\n        return isSorted;", "        long prevVal = lst[0];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < prevVal) {\n                isSorted = false;\n       \
    \         break;\n            }\n            prevVal = lst[i];\n        }\n  \
    \      return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            else if (lst[i] > lastValue)\n      \
    \          isSorted = false;\n            lastValue = lst[i];\n        }\n   \
    \     return isSorted;"]
stop_tokens:
- "\n    }\n"
