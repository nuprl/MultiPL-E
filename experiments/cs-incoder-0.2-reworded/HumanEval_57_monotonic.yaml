name: HumanEval_57_monotonic
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return true is list elements are monotonically increasing or\
  \ decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
  \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>>\
  \ Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
  \    // (true)\n    public static bool Monotonic(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
  \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
  \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
  \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L,\
  \ (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
completions: ["        long prev = l.First();\n        bool result = true;\n     \
    \   foreach (long cur in l.Skip(1)) {\n            if (prev < cur) {\n       \
    \         result = false;\n                break;\n            }\n           \
    \ prev = cur;\n        }\n        return result;", "        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(", " \
    \       if (l.Count == 0) return true;\n        long first = l[0];\n        long\
    \ last = l[l-1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        bool isMonotonic\
    \ = true;\n        foreach (long x in l.Skip(1).Take(l.Count - 1)) {\n       \
    \     if (x > mid) {\n                isIncreasing = false;\n            }\n \
    \           if (x < mid) {\n                isDecreasing = false;\n          \
    \  }\n            if (x == mid) {\n                isMonotonic = false;\n    \
    \        }\n        }\n        return isIncreasing || isDecreasing || isMonotonic;",
  "        long first = l.First();\n        long last = l.Last();\n        if (first\
    \ > last)\n            return false;\n        if (first == last)\n           \
    \ return true;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = l.Take(1).All(x => x <= mid);\n        bool isDecreasing = l.Take(l.Count\
    \ - 1).All(x => x >= mid);\n        return isIncreasing || isDecreasing;", " \
    \       long max = l.Max();\n        long min = l.Min();\n        long mid = (max\
    \ + min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasing = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMon",
  "        long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool increasing = (max > min);\n        bool decreasing = (min > max);\n\
    \        if (increasing && decreasing)\n            return true;\n        if (increasing\
    \ && !decreasing)\n            return false;\n        if (!increasing && decreasing)\n\
    \            return true;\n        return false;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        if (min > max) {\n            return false;\n\
    \        }\n        long mid = l.Count / 2;\n        long midVal = l[mid];\n \
    \       long midPrevVal = l[mid - 1];\n        long midNextVal = l[mid + 1];\n\
    \        long midPrevPrevVal = l[mid - 2];\n        long midNextNextVal = l[mid\
    \ + 2];\n        long midPrevNextPrevVal = l[mid - 3];\n        long midNextNextNextVal\
    \ = l[mid + 3];\n        long midPrevNextNextPrevVal = l[mid - 4];\n        long\
    \ midNextNextNextNextVal = l[mid + 4];\n        long midPrevNextNextNextPrevVal\
    \ = l[mid - 5];\n        long midNextNextNextNextPrevVal = l[mid + 5];\n     \
    \   long midPrevNextNextNextNextPrevVal = l[mid - 6];\n        long midNextNextNextNextNextPrevVal\
    \ = l[mid + 6];\n        long midPrevNextNextNextNextNextPrevVal = l[mid - 7];\n\
    \        long midNextNextNextNextNextNextPrevVal = l[mid + 7];\n        long midPrevNextNextNextNextNextNextPrevVal\
    \ = l[mid - 8];\n        long midNextNextNextNextNextNextNextPrevVal = l[mid +\
    \ 8];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 9];\n\
    \        long midNextNextNextNextNextNextNextPrevVal = l[mid + 9];\n        long\
    \ midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 10];\n        long midNextNextNextNextNextNextNextPrevVal\
    \ = l[mid + 10];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid\
    \ - 11];\n        long midNextNextNextNextNextNextNextPrevVal = l[mid + 11];\n\
    \        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 12];\n    \
    \    long midNextNextNextNextNextNextNextPrevVal = l[mid + 12];\n        long\
    \ midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 13];\n        long midNextNextNextNextNextNextNextPrevVal\
    \ = l[mid + 13];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[m",
  "        if (l.Count == 0) return false;\n        long prev = l[0];\n        bool\
    \ increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n          \
    \  long current = l[i];\n            if (current < prev) {\n                increasing\
    \ = false;\n            }\n            prev = current;\n        }\n        return\
    \ increasing;", "        long max = l.Max();\n        long min = l.Min();\n  \
    \      if (min < max) {\n            long mid = l.Find((x) => x > min && x < max);\n\
    \            if (mid > max) {\n                return false;\n            }\n\
    \            if (mid < min) {\n                return true;\n            }\n \
    \           return Monotonic(l.Skip(1).Take(l.Count - 1).Concat(new List<long>()\
    \ { mid }));\n        }\n        return false;", "        if (l.Count < 2) return\
    \ true;\n        long first = l[0];\n        long last = l[l.Count - 1];\n   \
    \     if (first > last) return true;\n        long mid = first + (last - first)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n\
    \                isIncreasing = false;\n            } else if (l[i] > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        if (l.Count < 2) return false;\n  \
    \      long max = l.Max();\n        long min = l.Min();\n        long mid = l.Count\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool ", "        Debug.Assert(l.Count > 0);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(", "        if (l.Count < 2) return false;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ mid = first + ((last - first) / 2);\n        bool isIncreasing = true;\n   \
    \     bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < mid) {\n        \
    \        isIncreasing = false;\n            } else if (current > mid) {\n    \
    \            isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n            if (isIncreasing && isDecreasing)\
    \ return true;\n        }\n        return false;", "        long first = l.First();\n\
    \        long last = l.Last();\n        if (first == last)\n            return\
    \ true;\n        if (first < last)\n            return false;\n        long mid\
    \ = first + ((last - first) / 2);\n        bool isIncreasing = Monotonic(l, first,\
    \ mid);\n        bool isDecreasing = Monotonic(l, mid, last);\n        return\
    \ isIncreasing || isDecreasing;", "        long min = l.Min();\n        long max\
    \ = l.Max();\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x < min) {\n               \
    \ isDecreasing = false;\n            }\n            if (x > max) {\n         \
    \       isIncreasing = false;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + ((last\
    \ - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < mid) {\n                isIncreasing = false;\n\
    \            } else if (current > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n            mid = current;\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        long first = l.First();\n        long last = l.Last();\n\
    \        if (first < last)\n            return true;\n        if (first > last)\n\
    \            return false;\n        long mid = l.Count / 2;\n        if (mid <\
    \ 1)\n            return false;\n        long mid2 = mid / 2;\n        long mid3\
    \ = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n\
    \        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid", "        long max = l.Max();\n        long\
    \ min = l.Min();\n        if (min < max) {\n            long mid = (max + min)\
    \ / 2;\n            if (mid < min)\n                return false;\n          \
    \  if (mid > max)\n                return true;\n            long mid2 = mid +\
    \ 1;\n            while (true) {\n                if (l[mid2] < mid)\n       \
    \             mid++;\n                else\n                    mid--;\n     \
    \           if (mid < min)\n                    return false;\n              \
    \  if (mid > max)\n                    return true;\n                if (mid ==\
    \ mid2)\n                    break;\n            }\n            return true;\n\
    \        }\n        return false;", "        long first = l.First();\n       \
    \ long last = l.Last();\n        long mid = first + (last - first) / 2;\n    \
    \    bool isIncreasing = true;\n        bool isDecreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > mid) {\n                isDecreasing =\
    \ false;\n            }\n            if (x < mid) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        if (l.Count == 0) return true;\n        if (l.Count == 1) return false;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n     \
    \   bool isDecreasing = true;\n        for (int i = 0; i < l.Count - 1; i++) {\n\
    \            long current = l[i];\n            long next = l[i + 1];\n       \
    \     if (current > mid) {\n                isIncreasing = false;\n          \
    \  } else if (current < mid) {\n                isDecreasing = false;\n      \
    \      } else {\n                isIncreasing = isDecreasing = true;\n       \
    \     }\n            if (isIncreasing && next > mid) {\n                isIncreasing\
    \ = false;\n            } else if (isDecreasing && next < mid) {\n           \
    \     isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;"]
stop_tokens:
- "\n    }\n"
