name: HumanEval_57_monotonic
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return true is list elements are monotonically increasing or\
  \ decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
  \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>>\
  \ Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
  \    // (true)\n    public static bool Monotonic(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
  \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
  \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
  \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L,\
  \ (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
completions: ["        long prev = l.First();\n        bool result = true;\n     \
    \   foreach (long cur in l.Skip(1)) {\n            if (prev < cur) {\n       \
    \         result = false;\n                break;\n            }\n           \
    \ prev = cur;\n        }\n        return result;", "        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(", " \
    \       if (l.Count == 0) return true;\n        long first = l[0];\n        long\
    \ last = l[l-1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        bool isMonotonic\
    \ = true;\n        foreach (long x in l.Skip(1).Take(l.Count - 1)) {\n       \
    \     if (x > mid) {\n                isIncreasing = false;\n            }\n \
    \           if (x < mid) {\n                isDecreasing = false;\n          \
    \  }\n            if (x == mid) {\n                isMonotonic = false;\n    \
    \        }\n        }\n        return isIncreasing || isDecreasing || isMonotonic;",
  "        long first = l.First();\n        long last = l.Last();\n        if (first\
    \ > last)\n            return false;\n        if (first == last)\n           \
    \ return true;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = l.Take(1).All(x => x <= mid);\n        bool isDecreasing = l.Take(l.Count\
    \ - 1).All(x => x >= mid);\n        return isIncreasing || isDecreasing;", " \
    \       long max = l.Max();\n        long min = l.Min();\n        long mid = (max\
    \ + min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasing = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMon",
  "        long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool increasing = (max > min);\n        bool decreasing = (min > max);\n\
    \        if (increasing && decreasing)\n            return true;\n        if (increasing\
    \ && !decreasing)\n            return false;\n        if (!increasing && decreasing)\n\
    \            return true;\n        return false;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        if (min > max) {\n            return false;\n\
    \        }\n        long mid = l.Count / 2;\n        long midVal = l[mid];\n \
    \       long midPrevVal = l[mid - 1];\n        long midNextVal = l[mid + 1];\n\
    \        long midPrevPrevVal = l[mid - 2];\n        long midNextNextVal = l[mid\
    \ + 2];\n        long midPrevNextPrevVal = l[mid - 3];\n        long midNextNextNextVal\
    \ = l[mid + 3];\n        long midPrevNextNextPrevVal = l[mid - 4];\n        long\
    \ midNextNextNextNextVal = l[mid + 4];\n        long midPrevNextNextNextPrevVal\
    \ = l[mid - 5];\n        long midNextNextNextNextPrevVal = l[mid + 5];\n     \
    \   long midPrevNextNextNextNextPrevVal = l[mid - 6];\n        long midNextNextNextNextNextPrevVal\
    \ = l[mid + 6];\n        long midPrevNextNextNextNextNextPrevVal = l[mid - 7];\n\
    \        long midNextNextNextNextNextNextPrevVal = l[mid + 7];\n        long midPrevNextNextNextNextNextNextPrevVal\
    \ = l[mid - 8];\n        long midNextNextNextNextNextNextNextPrevVal = l[mid +\
    \ 8];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 9];\n\
    \        long midNextNextNextNextNextNextNextPrevVal = l[mid + 9];\n        long\
    \ midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 10];\n        long midNextNextNextNextNextNextNextPrevVal\
    \ = l[mid + 10];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid\
    \ - 11];\n        long midNextNextNextNextNextNextNextPrevVal = l[mid + 11];\n\
    \        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 12];\n    \
    \    long midNextNextNextNextNextNextNextPrevVal = l[mid + 12];\n        long\
    \ midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 13];\n        long midNextNextNextNextNextNextNextPrevVal\
    \ = l[mid + 13];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[m",
  "        if (l.Count == 0) return false;\n        long prev = l[0];\n        bool\
    \ increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n          \
    \  long current = l[i];\n            if (current < prev) {\n                increasing\
    \ = false;\n            }\n            prev = current;\n        }\n        return\
    \ increasing;", "        long max = l.Max();\n        long min = l.Min();\n  \
    \      if (min < max) {\n            long mid = l.Find((x) => x > min && x < max);\n\
    \            if (mid > max) {\n                return false;\n            }\n\
    \            if (mid < min) {\n                return true;\n            }\n \
    \           return Monotonic(l.Skip(1).Take(l.Count - 1).Concat(new List<long>()\
    \ { mid }));\n        }\n        return false;", "        if (l.Count < 2) return\
    \ true;\n        long first = l[0];\n        long last = l[l.Count - 1];\n   \
    \     if (first > last) return true;\n        long mid = first + (last - first)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n\
    \                isIncreasing = false;\n            } else if (l[i] > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        if (l.Count < 2) return false;\n  \
    \      long max = l.Max();\n        long min = l.Min();\n        long mid = l.Count\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool ", "        Debug.Assert(l.Count > 0);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(", "        if (l.Count < 2) return false;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ mid = first + ((last - first) / 2);\n        bool isIncreasing = true;\n   \
    \     bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < mid) {\n        \
    \        isIncreasing = false;\n            } else if (current > mid) {\n    \
    \            isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n            if (isIncreasing && isDecreasing)\
    \ return true;\n        }\n        return false;", "        long first = l.First();\n\
    \        long last = l.Last();\n        if (first == last)\n            return\
    \ true;\n        if (first < last)\n            return false;\n        long mid\
    \ = first + ((last - first) / 2);\n        bool isIncreasing = Monotonic(l, first,\
    \ mid);\n        bool isDecreasing = Monotonic(l, mid, last);\n        return\
    \ isIncreasing || isDecreasing;", "        long min = l.Min();\n        long max\
    \ = l.Max();\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x < min) {\n               \
    \ isDecreasing = false;\n            }\n            if (x > max) {\n         \
    \       isIncreasing = false;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + ((last\
    \ - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < mid) {\n                isIncreasing = false;\n\
    \            } else if (current > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n            mid = current;\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        long first = l.First();\n        long last = l.Last();\n\
    \        if (first < last)\n            return true;\n        if (first > last)\n\
    \            return false;\n        long mid = l.Count / 2;\n        if (mid <\
    \ 1)\n            return false;\n        long mid2 = mid / 2;\n        long mid3\
    \ = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n\
    \        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid", "        long max = l.Max();\n        long\
    \ min = l.Min();\n        if (min < max) {\n            long mid = (max + min)\
    \ / 2;\n            if (mid < min)\n                return false;\n          \
    \  if (mid > max)\n                return true;\n            long mid2 = mid +\
    \ 1;\n            while (true) {\n                if (l[mid2] < mid)\n       \
    \             mid++;\n                else\n                    mid--;\n     \
    \           if (mid < min)\n                    return false;\n              \
    \  if (mid > max)\n                    return true;\n                if (mid ==\
    \ mid2)\n                    break;\n            }\n            return true;\n\
    \        }\n        return false;", "        long first = l.First();\n       \
    \ long last = l.Last();\n        long mid = first + (last - first) / 2;\n    \
    \    bool isIncreasing = true;\n        bool isDecreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > mid) {\n                isDecreasing =\
    \ false;\n            }\n            if (x < mid) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        if (l.Count == 0) return true;\n        if (l.Count == 1) return false;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n     \
    \   bool isDecreasing = true;\n        for (int i = 0; i < l.Count - 1; i++) {\n\
    \            long current = l[i];\n            long next = l[i + 1];\n       \
    \     if (current > mid) {\n                isIncreasing = false;\n          \
    \  } else if (current < mid) {\n                isDecreasing = false;\n      \
    \      } else {\n                isIncreasing = isDecreasing = true;\n       \
    \     }\n            if (isIncreasing && next > mid) {\n                isIncreasing\
    \ = false;\n            } else if (isDecreasing && next < mid) {\n           \
    \     isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        if (l.Count == 0) return true;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + ((last\
    \ - first) / 2);\n        bool increasing = (mid > first);\n        bool decreasing\
    \ = (mid < last);\n        if (increasing || decreasing) {\n            bool increasing2\
    \ = Monotonic(l.Skip(1).Take(l.Count - 1));\n            bool decreasing2 = Monotonic(l.Take(1).Skip(l.Count\
    \ - 1));\n            return increasing && decreasing && increasing2 && decreasing2;\n\
    \        }\n        return false;", "        if (l.Count == 0) return true;\n\
    \        long first = l[0];\n        long last = l[l-1];\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        long midVal = mid;\n        long midVal2 = mid;\n        long\
    \ midVal3 = mid;\n        long midVal4 = mid;\n        long midVal5 = mid;\n \
    \       long midVal6 = mid;\n        long midVal7 = mid;\n        long midVal8\
    \ = mid;\n        long midVal9 = mid;\n        long midVal10 = mid;\n        long\
    \ midVal11 = mid;\n        long midVal12 = mid;\n        long midVal13 = mid;\n\
    \        long midVal14 = mid;\n        long midVal15 = mid;\n        long midVal16\
    \ = mid;\n        long midVal17 = mid;\n        long midVal18 = mid;\n       \
    \ long midVal19 = mid;\n        long midVal20 = mid;\n        long midVal21 =\
    \ mid;\n        long midVal22 = mid;\n        long midVal23 = mid;\n        long\
    \ midVal24 = mid;\n        long midVal25 = mid;\n        long midVal26 = mid;\n\
    \        long midVal27 = mid;\n        long midVal28 = mid;\n        long midVal29\
    \ = mid;\n        long midVal30 = mid;\n        long midVal31 = mid;\n       \
    \ long midVal32 = mid;\n        long midVal33 = mid;\n        long midVal34 =\
    \ mid;\n        long midVal35 = mid;\n        long midVal36 = mid;\n        long\
    \ midVal37 = mid;\n        long midVal38 = mid;\n        long midVal39 = mid;\n\
    \        long midVal40 = mid;\n        long midVal41 = mid;\n        long midVal42\
    \ = mid;\n        long midVal43 = mid;\n        long midVal44 = mid;\n       \
    \ long midVal45 = mid;\n        long midVal46 = mid;\n        long midVal47 =\
    \ mid;\n        long midVal48 = mid;\n        long midVal49 = mid;\n        long\
    \ midVal50 = mid;\n        long midVal51 = mid;\n        long midVal52 = mid;\n\
    \        long midVal5", "        long first = l.First();\n        long last =\
    \ l.Last();\n        if (first > last)\n            return false;\n        long\
    \ mid = first + ((last - first) / 2);\n        bool isIncreasing = true;\n   \
    \     bool isDecreasing = true;\n        foreach (long x in l)\n        {\n  \
    \          if (x > mid)\n            {\n                isDecreasing = false;\n\
    \                break;\n            }\n            if (x < mid)\n           \
    \ {\n                isIncreasing = false;\n                break;\n         \
    \   }\n        }\n        return isIncreasing || isDecreasing;", "        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ if (l.Count == 2) return l[0] == l[1] && l[1] == l[2];\n        if (l.Count\
    \ == 3) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3];\n        if (l.Count\
    \ == 4) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4];\n\
    \        if (l.Count == 5) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3]\
    \ && l[3] == l[4] && l[4] == l[5];\n        if (l.Count == 6) return l[0] == l[1]\
    \ && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5] == l[6];\n\
    \        if (l.Count == 7) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3]\
    \ && l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == l[7];\n        if\
    \ (l.Count == 8) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] ==\
    \ l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == l[7] && l[7] == l[8];\n    \
    \    if (l.Count == 9) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3] &&\
    \ l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == l[7] && l[7] == l[8]\
    \ && l[8] == l[9];\n        if (l.Count == 10) return l[0] == l[1] && l[1] ==\
    \ l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6]\
    \ == l[7] && l[7] == l[8] && l[8] == l[9] && l[9] == l[10];\n        if (l.Count\
    \ == 11) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] &&\
    \ l[4] == l[5] && l[5] == l[6] && l[6] == l[7] && l[7] == l[8] && l[8] == l[9]\
    \ && l[9] == l[10] && l[10] == l[11];\n        if (l.Count == 12) return l[0]\
    \ == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5]\
    \ == l[6] && l[6] == l[7] && l[7] == l[8] && l[8", "        long max = l.Max();\n\
    \        long min = l.Min();\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        long current;\n        long previous;\n      \
    \  foreach (long element in l) {\n            current = element;\n           \
    \ previous = current;\n            if (current > max) {\n                isIncreasing\
    \ = false;\n            }\n            if (current < min) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        if (isIncreasing && isDecreasing)\
    \ {\n            return true;\n        }\n        if (isIncreasing && !isDecreasing)\
    \ {\n            return false;\n        }\n        if (!isIncreasing && isDecreasing)\
    \ {\n            return false;\n        }\n        return isIncreasing ? true\
    \ : false;", "        long first = l.First();\n        long last = l.Last();\n\
    \        long middle = l.Count / 2;\n        long middle2 = middle + middle;\n\
    \        long middle3 = middle2 + middle;\n        long middle4 = middle3 + middle;\n\
    \        long middle5 = middle4 + middle;\n        long middle6 = middle5 + middle;\n\
    \        long middle7 = middle6 + middle;\n        long middle8 = middle7 + middle;\n\
    \        long middle9 = middle8 + middle;\n        long middle10 = middle9 + middle;\n\
    \        long middle11 = middle10 + middle;\n        long middle12 = middle11\
    \ + middle;\n        long middle13 = middle12 + middle;\n        long middle14\
    \ = middle13 + middle;\n        long middle15 = middle14 + middle;\n        long\
    \ middle16 = middle15 + middle;\n        long middle17 = middle16 + middle;\n\
    \        long middle18 = middle17 + middle;\n        long middle19 = middle18\
    \ + middle;\n        long middle20 = middle19 + middle;\n        long middle21\
    \ = middle20 + middle;\n        long middle22 = middle21 + middle;\n        long\
    \ middle23 = middle22 + middle;\n        long middle24 = middle23 + middle;\n\
    \        long middle25 = middle24 + middle;\n        long middle26 = middle25\
    \ + middle;\n        long middle27 = middle26 + middle;\n        long middle28\
    \ = middle27 + middle;\n        long middle29 = middle28 + middle;\n        long\
    \ middle30 = middle29 + middle;\n        long middle31 = middle30 + middle;\n\
    \        long middle32 = middle31 + middle;\n        long middle33 = middle32\
    \ + middle;\n        long middle34 = middle33 + middle;\n        long middle35\
    \ = middle34 + middle;\n        long middle36 = middle35 + middle;\n        long\
    \ middle37 = middle36 + middle;\n        long middle38 = middle37 + middle;\n\
    \        long middle39 = middle38 + middle;\n        long middle40 = middle39\
    \ + middle;\n        long middle41 = middle40 + middle;\n        long middle42\
    \ = middle41 + middle;\n        long middle43 = middle42 + middle;\n        long\
    \ middle44 = middle43 + middle;\n        long middle45 = middle44 + middle;\n\
    \        long middle46 = middle45 + middle;\n        long middle47 = middle46\
    \ + middle;\n        long middle48 = middle47 + middle;\n        long middle49\
    \ = middle48 + middle;\n        long middle50 = middle49 + middle;\n        long\
    \ middle51 = middle50 + middle;\n        long middle5", "        long first =\
    \ l.First();\n        long last = l.Last();\n        long mid = first + ((last\
    \ - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreas", "        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long x in l.Skip(1))\n\
    \        {\n            if (x < prev)\n            {\n                increasing\
    \ = false;\n                break;\n            }\n            prev = x;\n   \
    \     }\n        return increasing;", "        long prev = l.First();\n      \
    \  bool increasing = true;\n        foreach (long el in l.Skip(1))\n         \
    \   if (el < prev)\n                increasing = false;\n            else\n  \
    \              prev = el;\n        return increasing;", "        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ % 2 == 0);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(", " \
    \       if (l.Count < 2) return false;\n        long max = l.Max();\n        long\
    \ min = l.Min();\n        long mid = l.Count / 2;\n        bool isIncreasing =\
    \ true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isIncreasing2 = true;\n        bool isDecreasing2 = true;\n    \
    \    bool isMonotonic2 = true;\n        bool isIncreasing3 = true;\n        bool\
    \ isDecreasing3 = true;\n        bool isMonotonic3 = true;\n        bool isIncreasing4\
    \ = true;\n        bool isDecreasing4 = true;\n        bool isMonotonic4 = true;\n\
    \        bool isIncreasing5 = true;\n        bool isDecreasing5 = true;\n    \
    \    bool isMonotonic5 = true;\n        bool isIncreasing6 = true;\n        bool\
    \ isDecreasing6 = true;\n        bool isMonotonic6 = true;\n        bool isIncreasing7\
    \ = true;\n        bool isDecreasing7 = true;\n        bool isMonotonic7 = true;\n\
    \        bool isIncreasing8 = true;\n        bool isDecreasing8 = true;\n    \
    \    bool isMonotonic8 = true;\n        bool isIncreasing9 = true;\n        bool\
    \ isDecreasing9 = true;\n        bool isMonotonic9 = true;\n        bool isIncreasing10\
    \ = true;\n        bool isDecreasing10 = true;\n        bool isMonotonic10 = true;\n\
    \        bool isIncreasing11 = true;\n        bool isDecreasing11 = true;\n  \
    \      bool isMonotonic11 = true;\n        bool isIncreasing12 = true;\n     \
    \   bool isDecreasing12 = true;\n        bool isMonotonic12 = true;\n        bool\
    \ isIncreasing13 = true;\n        bool isDecreasing13 = true;\n        bool isMonotonic13\
    \ = true;\n        bool isIncreasing14 = true;\n        bool isDecreasing14 =\
    \ true;\n        bool isMonotonic14 = true;\n        bool isIncreasing15 = true;\n\
    \        bool isDecreasing15 = true;\n        bool isMonotonic15 = true;\n   \
    \     bool isIncreasing16 = true;\n        bool isDecreasing16 = true;\n     \
    \   bool isMonotonic16 = true;\n        bool isIncreasing17 = true;\n        bool\
    \ isDecreasing17 = true;\n        bool isMonotonic17 = true;\n        bool isIncreasing18\
    \ = true;", "        long max = l.Max();\n        long min = l.Min();\n      \
    \  if (min > max) return false;\n        if (min == max) return true;\n      \
    \  long mid = min + (max - min) / 2;\n        bool isIncreasing = true;\n    \
    \    bool isDecreasing = true;\n        foreach (long x in l) {\n            if\
    \ (x > mid) {\n                isIncreasing = false;\n            }\n        \
    \    if (x < mid) {\n                isDecreasing = false;\n            }\n  \
    \      }\n        return isIncreasing || isDecreasing;", "        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[0];\n       \
    \ long max = l[0];\n        bool increasing = true;\n        bool decreasing =\
    \ true;\n        foreach (long x in l.Skip(1)) {\n            if (x > max) {\n\
    \                increasing = false;\n                max = x;\n            }\n\
    \            if (x < min) {\n                decreasing = false;\n           \
    \     min = x;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + ((last - first) >> 1);\n\
    \        bool increasing = (mid > first);\n        bool decreasing = (mid < last);\n\
    \        if (increasing && decreasing) return true;\n        if (increasing &&\
    \ !decreasing) return true;\n        if (!increasing && decreasing) return true;\n\
    \        return false;", "        long first = l.First();\n        long last =\
    \ l.Last();\n        if (first > last)\n            return false;\n        long\
    \ mid = l.Skip(1).Take(2).Last();\n        if (mid < first || mid > last)\n  \
    \          return false;\n        long mid2 = l.Skip(2).Take(2).Last();\n    \
    \    if (mid2 < first || mid2 > last)\n            return false;\n        long\
    \ mid3 = l.Skip(3).Take(2).Last();\n        if (mid3 < first || mid3 > last)\n\
    \            return false;\n        long mid4 = l.Skip(4).Take(2).Last();\n  \
    \      if (mid4 < first || mid4 > last)\n            return false;\n        long\
    \ mid5 = l.Skip(5).Take(2).Last();\n        if (mid5 < first || mid5 > last)\n\
    \            return false;\n        long mid6 = l.Skip(6).Take(2).Last();\n  \
    \      if (mid6 < first || mid6 > last)\n            return false;\n        long\
    \ mid7 = l.Skip(7).Take(2).Last();\n        if (mid7 < first || mid7 > last)\n\
    \            return false;\n        long mid8 = l.Skip(8).Take(2).Last();\n  \
    \      if (mid8 < first || mid8 > last)\n            return false;\n        long\
    \ mid9 = l.Skip(9).Take(2).Last();\n        if (mid9 < first || mid9 > last)\n\
    \            return false;\n        long mid10 = l.Skip(10).Take(2).Last();\n\
    \        if (mid10 < first || mid10 > last)\n            return false;\n     \
    \   long mid11 = l.Skip(11).Take(2).Last();\n        if (mid11 < first || mid11\
    \ > last)\n            return false;\n        long mid12 = l.Skip(12).Take(2).Last();\n\
    \        if (mid12 < first || mid12 > last)\n            return false;\n     \
    \   long mid13 = l.Skip(13).Take(2).Last();\n        if (mid13 < first || mid13\
    \ > last)\n            return false;\n        long mid14 = l.Skip(14).Take(2).Last();\n\
    \        if (mid14 < first || mid14 > last)\n            return false;\n     \
    \   long mid15 = l.Skip(15).Take(2).Last();\n        if (mid15 < first || mid15\
    \ > last)\n            return false;\n        long mid16 = l.Skip(16).Take(2).Last();\n\
    \        if (mid16 < first || mid16 > last)\n            return false;\n     \
    \   long mid17 = l.Skip(17).Take", "        if (l.Count == 0) return true;\n \
    \       if (l.Count == 1) return l[0] == l[1];\n        long first = l[0];\n \
    \       long last = l[l.Count - 1];\n        long mid = first + ((last - first)\
    \ / 2);\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        foreach (long x in l) {\n         \
    \   if (x < mid) {\n                isIncreasing = false;\n            } else\
    \ if (x > mid) {\n                isDecreasing = false;\n            } else if\
    \ (x == mid) {\n                isMonotonic = false;\n            }\n        }\n\
    \        return isIncreasing || isDecreasing || isMonotonic;", "        long first\
    \ = l.First();\n        long last = l.Last();\n        if (first < last)\n   \
    \         return false;\n        long mid = first + ((last - first) >> 1);\n \
    \       bool isIncreasing = l.TakeWhile(x => x <= mid).All(x => x <= mid);\n \
    \       bool isDecreasing = l.TakeWhile(x => x >= mid).All(x => x >= mid);\n \
    \       return isIncreasing || isDecreasing;", "        long first = l.First();\n\
    \        long last = l.Last();\n        if (first < last)\n            return\
    \ true;\n        if (first > last)\n            return false;\n        long mid\
    \ = l.Skip(1).Take(2).Last();\n        if (mid < first)\n            return true;\n\
    \        if (mid > last)\n            return false;\n        long mid2 = l.Skip(1).Take(2).Last();\n\
    \        if (mid2 < first)\n            return true;\n        if (mid2 > last)\n\
    \            return false;\n        long mid3 = l.Skip(1).Take(2).Last();\n  \
    \      if (mid3 < first)\n            return true;\n        if (mid3 > last)\n\
    \            return false;\n        long mid4 = l.Skip(1).Take(2).Last();\n  \
    \      if (mid4 < first)\n            return true;\n        if (mid4 > last)\n\
    \            return false;\n        long mid5 = l.Skip(1).Take(2).Last();\n  \
    \      if (mid5 < first)\n            return true;\n        if (mid5 > last)\n\
    \            return false;\n        long mid6 = l.Skip(1).Take(2).Last();\n  \
    \      if (mid6 < first)\n            return true;\n        if (mid6 > last)\n\
    \            return false;\n        long mid7 = l.Skip(1).Take(2).Last();\n  \
    \      if (mid7 < first)\n            return true;\n        if (mid7 > last)\n\
    \            return false;\n        long mid8 = l.Skip(1).Take(2).Last();\n  \
    \      if (mid8 < first)\n            return true;\n        if (mid8 > last)\n\
    \            return false;\n        long mid9 = l.Skip(1).Take(2).Last();\n  \
    \      if (mid9 < first)\n            return true;\n        if (mid9 > last)\n\
    \            return false;\n        long mid10 = l.Skip(1).Take(2).Last();\n \
    \       if (mid10 < first)\n            return true;\n        if (mid10 > last)\n\
    \            return false;\n        long mid11 = l.Skip(1).Take(2).Last();\n \
    \       if (mid11 < first)\n            return true;\n        if (mid11 > last)\n\
    \            return false;\n        long mid12 = l.Skip(1).Take(2).Last();\n \
    \       if (mid12 < first)\n            return true;\n        if (mid12 > last)\n\
    \            return false;\n        long mid13 = l.Skip(1).Take(2).Last();\n \
    \       if (mid13 < first)\n            return true;\n        if (mid13 > last)\n\
    \            return false;\n        long mid14 = l.Skip(1).Take(2).Last();\n \
    \       if (mid14 < first)\n            return true;\n        if (mid14 > last)\n\
    \            return false;\n        long mid15", "        long min = l.Min();\n\
    \        long max = l.Max();\n        if (min > max) {\n            long tmp =\
    \ min;\n            min = max;\n            max = tmp;\n        }\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        long lastValue\
    \ = min;\n        foreach (long value in l) {\n            if (value > lastValue)\
    \ {\n                isDecreasing = false;\n            }\n            if (value\
    \ < lastValue) {\n                isIncreasing = false;\n            }\n     \
    \       if (value == lastValue) {\n                isIncreasing &= (lastValue\
    \ < value);\n                isDecreasing &= (lastValue > value);\n          \
    \  }\n            lastValue = value;\n        }\n        return isIncreasing ||\
    \ isDecreasing;", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0], last = l[l.Count - 1];\n        bool increasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < first) {\n                increasing = false;\n           \
    \ }\n            if (current > last) {\n                increasing = true;\n \
    \           }\n        }\n        return increasing;", "        if (l.Count ==\
    \ 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n        long\
    \ prev = l[0];\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < prev)\
    \ {\n                isIncreasing = false;\n            }\n            if (l[i]\
    \ > prev) {\n                isDecreasing = false;\n            }\n          \
    \  prev = l[i];\n        }\n        if (isIncreasing && isDecreasing) return true;\n\
    \        if (isIncreasing && !isDecreasing) return false;\n        if (!isIncreasing\
    \ && isDecreasing) return false;\n        return isIncreasing ? true : false;",
  "        long first = l.First();\n        long last = l.Last();\n        if (first\
    \ < last)\n            return false;\n        if (first == last)\n           \
    \ return true;\n        long mid = first + (last - first) / 2;\n        long mid2\
    \ = l.ElementAt(mid);\n        if (mid2 < mid)\n            return false;\n  \
    \      if (mid2 == mid)\n            return true;\n        long mid3 = l.ElementAt(mid\
    \ + 1);\n        if (mid3 < mid)\n            return false;\n        if (mid3\
    \ == mid)\n            return true;\n        long mid4 = l.ElementAt(mid + 2);\n\
    \        if (mid4 < mid)\n            return false;\n        if (mid4 == mid)\n\
    \            return true;\n        long mid5 = l.ElementAt(mid + 3);\n       \
    \ if (mid5 < mid)\n            return false;\n        if (mid5 == mid)\n     \
    \       return true;\n        long mid6 = l.ElementAt(mid + 4);\n        if (mid6\
    \ < mid)\n            return false;\n        if (mid6 == mid)\n            return\
    \ true;\n        long mid7 = l.ElementAt(mid + 5);\n        if (mid7 < mid)\n\
    \            return false;\n        if (mid7 == mid)\n            return true;\n\
    \        long mid8 = l.ElementAt(mid + 6);\n        if (mid8 < mid)\n        \
    \    return false;\n        if (mid8 == mid)\n            return true;\n     \
    \   long mid9 = l.ElementAt(mid + 7);\n        if (mid9 < mid)\n            return\
    \ false;\n        if (mid9 == mid)\n            return true;\n        long mid10\
    \ = l.ElementAt(mid + 8);\n        if (mid10 < mid)\n            return false;\n\
    \        if (mid10 == mid)\n            return true;\n        long mid11 = l.ElementAt(mid\
    \ + 9);\n        if (mid11 < mid)\n            return false;\n        if (mid11\
    \ == mid)\n            return true;\n        long mid12 = l.ElementAt(mid + 10);\n\
    \        if (mid12 < mid)\n            return false;\n        if (mid12 == mid)\n\
    \            return true;\n        long mid13 = l.ElementAt(mid + 11);\n     \
    \   if (mid13 < mid)\n            return false;\n        if (mid13 == mid)\n \
    \           return true;\n        long mid14 = l.ElementAt(mid + 12);\n      \
    \  if (mid14 < mid)\n            return false;\n        if (mid14 == mid)\n  \
    \          return true;\n        long mid15 = l.ElementAt(mid + 13);\n       \
    \ if (mid15 < mid)\n            return false;\n        if (mid15 == mid)\n   \
    \         return true;\n        long mid16 = l.ElementAt(mid + 14);\n        if\
    \ (mid16 < mid)\n            return false;\n        if (mid16 == mid)\n      \
    \      return true;\n        long mid17", "        long max = l.Max();\n     \
    \   long min = l.Min();\n        if (min == max) {\n            return true;\n\
    \        }\n        long mid = l.Count / 2;\n        long midVal = l[mid];\n \
    \       long midVal2 = l[mid+1];\n        if (midVal < midVal2) {\n          \
    \  return true;\n        }\n        long midVal3 = l[mid-1];\n        if (midVal\
    \ > midVal3) {\n            return true;\n        }\n        return false;", " \
    \       if (l.Count < 2) return false;\n        long prev = l[0];\n        long\
    \ current = l[1];\n        for (int i = 2; i < l.Count; i++) {\n            long\
    \ next = l[i];\n            if (current < next) {\n                return false;\n\
    \            }\n            if (current > prev) {\n                return true;\n\
    \            }\n            prev = current;\n            current = next;\n   \
    \     }\n        return false;", "        long max = l.Max();\n        long min\
    \ = l.Min();\n        long mid = l.Average();\n        long diff = max - min;\n\
    \        long midDiff = max - mid;\n        bool isIncreasing = (diff < 0) ==\
    \ (midDiff < 0);\n        return isIncreasing;", "        if (l.Count < 2) return\
    \ false;\n        long first = l[0];\n        long last = l[l.Count - 1];\n  \
    \      long mid = first + ((last - first) / 2);\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        if (l.Count < 2) return false;\n  \
    \      long first = l[0], last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isMonotonic = false;\n            }\n        }\n        if (isIncreasing\
    \ && isDecreasing) return isMonotonic;\n        if (isIncreasing && !isDecreasing)\
    \ return isMonotonic;\n        if (!isIncreasing && isDecreasing) return isMonotonic;\n\
    \        return false;", "        long first = l.First();\n        long last =\
    \ l.Last();\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        long current = first;\n        long previous = first;\n        foreach\
    \ (long item in l) {\n            if (item < current) {\n                isDecreasing\
    \ = false;\n            }\n            if (item > current) {\n               \
    \ isIncreasing = false;\n            }\n            if (item == current) {\n \
    \               if (item < previous) {\n                    isDecreasing = false;\n\
    \                }\n                if (item > previous) {\n                 \
    \   isIncreasing = false;\n                }\n            }\n            previous\
    \ = current;\n            current = item;\n        }\n        if (isIncreasing\
    \ && isDecreasing) {\n            return true;\n        }\n        if (isIncreasing\
    \ && !isDecreasing) {\n            return true;\n        }\n        if (!isIncreasing\
    \ && isDecreasing) {\n            return true;\n        }\n        return false;",
  "        long max = l.Max();\n        long min = l.Min();\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long element in\
    \ l) {\n            if (element < min) {\n                isDecreasing = false;\n\
    \            }\n            if (element > max) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = (first + last) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        bool isMonotonic\
    \ = true;\n        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonot",
  "        if (l.Count == 0) return true;\n        var first = l[0];\n        var\
    \ last = l[l-1];\n        if (first > last) return true;\n        if (first ==\
    \ last) return true;\n        if (first < last) return false;\n        var mid\
    \ = l.Count / 2;\n        var midVal = l[mid];\n        var midNext = l[mid +\
    \ 1];\n        if (midVal < midNext) return Monotonic(l);\n        if (midVal\
    \ > midNext) return Monotonic(l.Take(mid).Concat(l.Skip(mid+1)));\n        return\
    \ Monotonic(l.Take(mid).Concat(l.Skip(mid+1)).Concat(l.Take(mid+1).Concat(l.Skip(mid))));",
  "        long first = l.First();\n        long last = l.Last();\n        long mid\
    \ = first + (last - first) / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        foreach (long\
    \ num in l) {\n            if (num < mid) {\n                isDecreasing = false;\n\
    \            }\n            if (num > mid) {\n                isIncreasing = false;\n\
    \            }\n            if (num == mid) {\n                isMonotonic = false;\n\
    \            }\n        }\n        if (isIncreasing && isDecreasing && isMonotonic)\
    \ {\n            return true;\n        }\n        if (isIncreasing && !isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isMonotonic)\
    \ {\n            return true;\n        }\n        return false;", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool increasing = (max\
    \ > min);\n        bool decreasing = (min > max);\n        if (increasing || decreasing)\n\
    \            return true;\n        long mid = l.Count / 2;\n        long midVal\
    \ = l[mid];\n        bool leftIncreasing = (l[mid] > midVal);\n        bool rightIncreasing\
    \ = (midVal > l[mid]);\n        if (leftIncreasing || rightIncreasing)\n     \
    \       return true;\n        bool leftDecreasing = (l[mid] < midVal);\n     \
    \   bool rightDecreasing = (midVal < l[mid]);\n        if (leftDecreasing || rightDecreasing)\n\
    \            return true;\n        bool leftMonotonic = Monotonic(l);\n      \
    \  bool rightMonotonic = Monotonic(l);\n        return leftMonotonic && rightMonotonic;",
  "        long min = l.Min();\n        long max = l.Max();\n        if (min > max)\
    \ {\n            throw new ArgumentException(\"List elements must be monotonically\
    \ increasing or decreasing\");\n        }\n        if (min == max) {\n       \
    \     return true;\n        }\n        long mid = min + (max - min) / 2;\n   \
    \     bool isIncreasing = true;\n        bool isDecreasing = true;\n        foreach\
    \ (long element in l) {\n            if (element < mid) {\n                isIncreasing\
    \ = false;\n            }\n            if (element > mid) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        if (l.Count == 0)\n            return true;\n        long first = l[0];\n\
    \        long last = l[l.Count - 1];\n        if (first > last)\n            return\
    \ false;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid)\n                isIncreasing = false;\n\
    \            else if (l[i] > mid)\n                isDecreasing = false;\n   \
    \         else\n                break;\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = (max + min) / 2;\n        bool isIncreasing = true;\n    \
    \    bool isDecreasing = true;\n        foreach (long x in l) {\n            if\
    \ (x > mid) {\n                isDecreasing = false;\n            } else if (x\
    \ < mid) {\n                isIncreasing = false;\n            }\n        }\n\
    \        return isIncreasing || isDecreasing;", "        if (l.Count < 2) return\
    \ true;\n        long first = l[0];\n        long last = l[l.Count - 1];\n   \
    \     long mid = first + ((last - first) / 2);\n        bool isIncreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < mid) {\n                isIncreasing = false;\n   \
    \             break;\n            }\n            if (current > mid) {\n      \
    \          isIncreasing = true;\n                break;\n            }\n     \
    \   }\n        return isIncreasing;", "        long max = l.Max();\n        long\
    \ min = l.Min();\n        if (min > max) {\n            long tmp = min;\n    \
    \        min = max;\n            max = tmp;\n        }\n        long mid = min\
    \ + (max - min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        foreach (long x in l) {\n            if (x > mid) {\n     \
    \           isIncreasing = false;\n            }\n            if (x < mid) {\n\
    \                isDecreasing = false;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        long max = l.Max();\n        long min\
    \ = l.Min();\n        long mid = l.Count / 2;\n        long midVal = l[mid];\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  if (min < midVal) {\n            isIncreasing = false;\n        }\n       \
    \ if (max > midVal) {\n            isDecreasing = false;\n        }\n        if\
    \ (isIncreasing && isDecreasing) {\n            return true;\n        }\n    \
    \    if (isIncreasing) {\n            return false;\n        }\n        if (isDecreasing)\
    \ {\n            return true;\n        }\n        return false;", "        Debug.Assert(l.Count\
    \ > 0);\n        if (l.Count == 1) {\n            return true;\n        }\n  \
    \      long min = l.Min();\n        long max = l.Max();\n        if (min == max)\
    \ {\n            return true;\n        }\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        long lastElement = min;\n        foreach\
    \ (long element in l) {\n            if (element < last) {\n                isDecreasing\
    \ = false;\n            }\n            if (element > last) {\n               \
    \ isIncreasing = false;\n            }\n            lastElement = element;\n \
    \       }\n        if (isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if (isIncreasing && !isDecreasing) {\n            return false;\n\
    \        }\n        if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;", "        if (l.Count < 2) return true;\n \
    \       long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ mid = first + ((last - first) / 2);\n        bool isIncreasing = true;\n   \
    \     bool isDecreasing = true;\n        long midValue = l[l.Count - 1];\n   \
    \     long midValue2 = l[l.Count - 2];\n        long midValue3 = l[l.Count - 3];\n\
    \        long midValue4 = l[l.Count - 4];\n        long midValue5 = l[l.Count\
    \ - 5];\n        long midValue6 = l[l.Count - 6];\n        long midValue7 = l[l.Count\
    \ - 7];\n        long midValue8 = l[l.Count - 8];\n        long midValue9 = l[l.Count\
    \ - 9];\n        long midValue10 = l[l.Count - 10];\n        long midValue11 =\
    \ l[l.Count - 11];\n        long midValue12 = l[l.Count - 12];\n        long midValue13\
    \ = l[l.Count - 13];\n        long midValue14 = l[l.Count - 14];\n        long\
    \ midValue15 = l[l.Count - 15];\n        long midValue16 = l[l.Count - 16];\n\
    \        long midValue17 = l[l.Count - 17];\n        long midValue18 = l[l.Count\
    \ - 18];\n        long midValue19 = l[l.Count - 19];\n        long midValue20\
    \ = l[l.Count - 20];\n        long midValue21 = l[l.Count - 21];\n        long\
    \ midValue22 = l[l.Count - 22];\n        long midValue23 = l[l.Count - 23];\n\
    \        long midValue24 = l[l.Count - 24];\n        long midValue25 = l[l.Count\
    \ - 25];\n        long midValue26 = l[l.Count - 26];\n        long midValue27\
    \ = l[l.Count - 27];\n        long midValue28 = l[l.Count - 28];\n        long\
    \ midValue29 = l[l.Count - 29];\n        long midValue30 = l[l.Count - 30];\n\
    \        long midValue31 = l[l.Count - 31];\n        long midValue32 = l[l.Count\
    \ - 32];\n        long midValue33 = l[l.Count - 33];\n        long midValue34\
    \ = l[l.Count ", "        if (l.Count == 0) return true;\n        var min = l.Min();\n\
    \        var max = l.Max();\n        if (min > max) return false;\n        var\
    \ mid = l.Count / 2;\n        var l1 = l.GetRange(0, mid);\n        var l2 = l.GetRange(mid,\
    \ l.Count - mid);\n        if (l1.SequenceEqual(l2)) return true;\n        return\
    \ Monotonic(l1) || Monotonic(l2);", "        long min = l.Min();\n        long\
    \ max = l.Max();\n        bool isIncreasing = (min < max);\n        bool isDecreasing\
    \ = (max < min);\n        if (isIncreasing && isDecreasing)\n            return\
    \ true;\n        if (isIncreasing)\n            return false;\n        if (isDecreasing)\n\
    \            return true;\n        bool isMonotonic = true;\n        foreach (long\
    \ x in l)\n        {\n            long y = x - min;\n            if (y > 0)\n\
    \            {\n                isMonotonic = false;\n                break;\n\
    \            }\n        }\n        return isMonotonic;", "        long first =\
    \ l.First();\n        long last = l.Last();\n        if (first > last)\n     \
    \       return false;\n        long mid = first + (last - first) / 2;\n      \
    \  long mid2 = mid + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 - first)\
    \ / 2;\n        long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4\
    \ + (mid4 - first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n    \
    \    long mid7 = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7\
    \ - first) / 2;\n        long mid9 = mid8 + (mid8 - first) / 2;\n        long\
    \ mid10 = mid9 + (mid9 - first) / 2;\n        long mid11 = mid10 + (mid10 - first)\
    \ / 2;\n        long mid12 = mid11 + (mid11 - first) / 2;\n        long mid13\
    \ = mid12 + (mid12 - first) / 2;\n        long mid14 = mid13 + (mid13 - first)\
    \ / 2;\n        long mid15 = mid14 + (mid14 - first) / 2;\n        long mid16\
    \ = mid15 + (mid15 - first) / 2;\n        long mid17 = mid16 + (mid16 - first)\
    \ / 2;\n        long mid18 = mid17 + (mid17 - first) / 2;\n        long mid19\
    \ = mid18 + (mid18 - first) / 2;\n        long mid20 = mid19 + (mid19 - first)\
    \ / 2;\n        long mid21 = mid20 + (mid20 - first) / 2;\n        long mid22\
    \ = mid21 + (mid21 - first) / 2;\n        long mid23 = mid22 + (mid22 - first)\
    \ / 2;\n        long mid24 = mid23 + (mid23 - first) / 2;\n        long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        long mid26 = mid25 + (mid25 - first)\
    \ / 2;\n        long mid27 = mid26 + (mid26 - first) / 2;\n        long mid28\
    \ = mid27 + (mid27 - first) / 2;\n        long mid29 = mid28 + (mid28 - first)\
    \ / 2;\n        long mid30 = mid29 + (mid29 - first) / 2;\n        long mid31\
    \ = mid30 + (mid30 - first) / 2;\n        long mid32 = mid31 + (mid31 - first)\
    \ / 2;\n        long mid33 = mid32 + (mid32 - first) / 2;\n        long mid34\
    \ = mid33 + (mid33 - first", "        long first = l.First();\n        long last\
    \ = l.Last();\n        if (first == last) return true;\n        if (first > last)\
    \ return true;\n        if (first < last) return false;\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = Monotonic(l, first, mid);\n\
    \        bool isDecreasing = Monotonic(l, mid, last);\n        return isIncreasing\
    \ || isDecreasing;", "        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicDecreasingDe",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n \
    \       bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n           \
    \     decreasing = false;\n            }\n            if (l[i] > mid) {\n    \
    \            increasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.Count == 0) return true;\n        if (l.Count\
    \ == 1) return l[0] > l[1];\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        foreach (long x in l) {\n            if (x < mid) {\n               \
    \ isIncreasing = false;\n            }\n            if (x > mid) {\n         \
    \       isDecreasing = false;\n            }\n            if (x == mid) {\n  \
    \              isMonotonic = false;\n            }\n        }\n        if (isIncreasing\
    \ && isDecreasing && isMonotonic) {\n            return true;\n        }\n   \
    \     if (isIncreasing && !isDecreasing && !isMonotonic) {\n            return\
    \ true;\n        }\n        if (isDecreasing && !isIncreasing && !isMonotonic)\
    \ {\n            return true;\n        }\n        if (isMonotonic) {\n       \
    \     return true;\n        }\n        return false;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        bool isIncreasing = (max < min);\n     \
    \   if (isIncreasing) {\n            long current = l.First();\n            bool\
    \ isIncreasing2 = true;\n            foreach (long item in l) {\n            \
    \    if (item < current) {\n                    isIncreasing2 = false;\n     \
    \               break;\n                }\n                current = item;\n \
    \           }\n            return isIncreasing2;\n        } else {\n         \
    \   long current = l.First();\n            bool isIncreasing2 = true;\n      \
    \      foreach (long item in l) {\n                if (item > current) {\n   \
    \                 isIncreasing2 = false;\n                    break;\n       \
    \         }\n                current = item;\n            }\n            return\
    \ isIncreasing2;\n        }", "        if (l.Count == 0) return true;\n      \
    \  long first = l[0];\n        long last = l[l.Count - 1];\n        long mid =\
    \ first + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n        \
    \    if (l[i] < mid) {\n                isIncreasing = false;\n            } else\
    \ if (l[i] > mid) {\n                isDecreasing = false;\n            }\n  \
    \      }\n        return isIncreasing || isDecreasing;", "        if (l.Count\
    \ < 2) return false;\n        long prev = l[0];\n        long current = l[1];\n\
    \        bool increasing = true;\n        for (int i = 2; i < l.Count; i++) {\n\
    \            long next = l[i];\n            if (current > next) {\n          \
    \      increasing = false;\n            }\n            if (current < prev) {\n\
    \                increasing = true;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return increasing;", "      \
    \  long max = l.Max();\n        long min = l.Min();\n        if (max == min) {\n\
    \            return true;\n        }\n        long mid = max / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        bool isMonotonic\
    \ = true;\n        bool isIncreasingOrDecreasing = true;\n        bool isMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonic = true;\n        bool isMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonic = true;\n        bool\
    \ isMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing = true;\n        bool\
    \ isMonotonicOrMonotonicOrMonotonicOrMonotonic = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic",
  "        long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (min < mid);\n        bool isDecreasing = (max >\
    \ mid);\n        if (isIncreasing && isDecreasing)\n            return true;\n\
    \        if (isIncreasing && !isDecreasing)\n            return false;\n     \
    \   if (!isIncreasing && isDecreasing)\n            return true;\n        return\
    \ false;", "        long first = l.First();\n        long last = l.Last();\n \
    \       bool isIncreasing = true;\n        bool isDecreasing = true;\n       \
    \ bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n     \
    \   bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n      \
    \  bool isMonotonicIncreasingDecreasingMonotonicDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n     \
    \   bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasing", "        if (l.Count < 2) return\
    \ false;\n        long first = l[0];\n        long last = l[l.Count - 1];\n  \
    \      long mid = (first + last) / 2;\n        bool isIncreasing = true;\n   \
    \     bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < mid) {\n        \
    \        isIncreasing = false;\n            } else if (current > mid) {\n    \
    \            isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n            if (isIncreasing && isDecreasing)\
    \ return true;\n            if (isIncreasing && !isDecreasing) return false;\n\
    \            if (!isIncreasing && isDecreasing) return false;\n        }\n   \
    \     return false;", "        if (l.Count == 0) return true;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < first) {\n      \
    \          decreasing = false;\n            } else if (current > last) {\n   \
    \             increasing = false;\n            } else {\n                if (current\
    \ < first) decreasing = false;\n                if (current > last) increasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.Count == 0) return true;\n        long first = l[0];\n        long\
    \ last = l[l-1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i\
    \ = 1; i < l.Count; i++) {\n            long current = l[i];\n            if (current\
    \ < mid) {\n                isIncreasing = false;\n            } else if (current\
    \ > mid) {\n                isDecreasing = false;\n            } else {\n    \
    \            isIncreasing = isDecreasing = true;\n            }\n            mid\
    \ = current;\n        }\n        return isIncreasing || isDecreasing;", "    \
    \    long max = l.Max();\n        long min = l.Min();\n        if (max < min)\
    \ {\n            return false;\n        }\n        long mid = max / 2;\n     \
    \   long mid2 = min / 2;\n        long mid3 = mid / 2;\n        long mid4 = mid3\
    \ / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n       \
    \ long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8\
    \ / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n    \
    \    long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14\
    \ = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 /\
    \ 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n     \
    \   long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long mid50 = mid49 / 2;\n", "        long prev = l[0];\n\
    \        bool isIncreasing = true;\n        foreach (long x in l.Skip(1)) {\n\
    \            if (x < prev) {\n                isIncreasing = false;\n        \
    \    }\n            prev = x;\n        }\n        return isIncreasing;", "   \
    \     long max = l.Max();\n        long min = l.Min();\n        if (min > max)\
    \ return false;\n        long mid = l.Count / 2;\n        bool isIncreasing =\
    \ true;\n        bool isDecreasing = true;\n        for (int i = 0; i < mid; i++)\
    \ {\n            if (l[i] > max) return false;\n            if (l[i] < min) {\n\
    \                isIncreasing = false;\n                isDecreasing = false;\n\
    \                break;\n            }\n        }\n        for (int i = mid; i\
    \ < l.Count; i++) {\n            if (l[i] > max) return false;\n            if\
    \ (l[i] < min) {\n                isIncreasing = false;\n                isDecreasing\
    \ = false;\n                break;\n            }\n        }\n        if (isIncreasing\
    \ && isDecreasing) return true;\n        if (isIncreasing && !isDecreasing) return\
    \ true;\n        if (!isIncreasing && isDecreasing) return true;\n        return\
    \ false;", "        if (l.Count == 0) return true;\n        if (l.Count == 1)\
    \ return false;\n        long first = l[0];\n        long last = l[l.Count - 1];\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        long prev = l[0];\n        bool increasing\
    \ = true;\n        foreach (long el in l.Skip(1))\n            if (el < prev)\n\
    \                increasing = false;\n            else\n                prev =\
    \ el;\n        return increasing;", "        long max = l.Max();\n        long\
    \ min = l.Min();\n        if (min < max) {\n            long mid = (max + min)\
    \ / 2;\n            bool isIncreasing = l.Skip(1).All(x => x >= mid);\n      \
    \      bool isDecreasing = l.Skip(1).All(x => x <= mid);\n            return isIncreasing\
    \ || isDecreasing;\n        }\n        return false;", "        long first = l.First();\n\
    \        long last = l.Last();\n        long middle = l.Count / 2;\n        bool\
    \ increasing = (first < last);\n        bool decreasing = (first > last);\n  \
    \      if (increasing || decreasing) {\n            long middleValue = l.ElementAt(middle);\n\
    \            if (increasing) {\n                if (middleValue < first) {\n \
    \                   return false;\n                }\n            }\n        \
    \    if (decreasing) {\n                if (middleValue > last) {\n          \
    \          return false;\n                }\n            }\n        }\n      \
    \  return true;", "        if (l.Count == 0) return true;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        if (first == last) return\
    \ true;\n        if (first > last) return Monotonic(l.Skip(1).ToList());\n   \
    \     if (first < last) return Monotonic(l.Take(l.Count - 1).ToList());\n    \
    \    return false;", "        Debug.Assert(l.Count > 0);\n        if (l.Count\
    \ == 1) return true;\n        long first = l[0], last = l[0];\n        bool increasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < first) increasing = false;\n            if\
    \ (current > last) increasing = true;\n            last = current;\n        }\n\
    \        return increasing;", "        if (l.Count == 0) return true;\n      \
    \  long first = l[0];\n        long last = l[l.Count - 1];\n        long mid =\
    \ first + (last - first) / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n        \
    \    if (l[i] < mid) {\n                isIncreasing = false;\n            }\n\
    \            if (l[i] > mid) {\n                isDecreasing = false;\n      \
    \      }\n        }\n        if (isIncreasing && isDecreasing) return true;\n\
    \        if (isIncreasing && !isDecreasing) return false;\n        if (!isIncreasing\
    \ && isDecreasing) return false;\n        return true;", "        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = (first + last) / 2;\n        bool isIncreasing = true;\n \
    \       bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < mid) {\n        \
    \        isIncreasing = false;\n            } else if (current > mid) {\n    \
    \            isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        long max = l.Max();\n        long min = l.Min();\n\
    \        if (max < min) {\n            return false;\n        }\n        long\
    \ mid = min + (max - min) / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        foreach (long x in l) {\n            if (x > mid)\
    \ {\n                isDecreasing = false;\n            }\n            if (x <\
    \ mid) {\n                isIncreasing = false;\n            }\n        }\n  \
    \      return isIncreasing || isDecreasing;", "        long max = l.Max();\n \
    \       long min = l.Min();\n        long mid = l.Average();\n        bool increasing\
    \ = mid > max || mid < min;\n        bool decreasing = mid < max || mid > min;\n\
    \        return increasing || decreasing;", "        if (l.Count == 0) return\
    \ true;\n        long first = l[0];\n        long last = l[l.Count - 1];\n   \
    \     long middle = first + ((last - first) / 2);\n        bool isIncreasing =\
    \ true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < middle) {\n                isIncreasing = false;\n\
    \            }\n            if (l[i] > middle) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     bool isIncreasing = true;\n        bool isDecreasing = true;\n        foreach\
    \ (long x in l.Skip(1).Take(l.Count - 1)) {\n            if (x > mid) isDecreasing\
    \ = false;\n            if (x < mid) isIncreasing = false;\n        }\n      \
    \  return isIncreasing || isDecreasing;", "        if (l.Count < 2) return false;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ mid = first + (last - first) / 2;\n        long mid2 = mid + (mid - last) /\
    \ 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n \
    \       bool isMonotonic = true;\n        bool isMonotonic2 = true;\n        bool\
    \ isMonotonic3 = true;\n        bool isMonotonic4 = true;\n        bool isMonotonic5\
    \ = true;\n        bool isMonotonic6 = true;\n        bool isMonotonic7 = true;\n\
    \        bool isMonotonic8 = true;\n        bool isMonotonic9 = true;\n      \
    \  bool isMonotonic10 = true;\n        bool isMonotonic11 = true;\n        bool\
    \ isMonotonic12 = true;\n        bool isMonotonic13 = true;\n        bool isMonotonic14\
    \ = true;\n        bool isMonotonic15 = true;\n        bool isMonotonic16 = true;\n\
    \        bool isMonotonic17 = true;\n        bool isMonotonic18 = true;\n    \
    \    bool isMonotonic19 = true;\n        bool isMonotonic20 = true;\n        bool\
    \ isMonotonic21 = true;\n        bool isMonotonic22 = true;\n        bool isMonotonic23\
    \ = true;\n        bool isMonotonic24 = true;\n        bool isMonotonic25 = true;\n\
    \        bool isMonotonic26 = true;\n        bool isMonotonic27 = true;\n    \
    \    bool isMonotonic28 = true;\n        bool isMonotonic29 = true;\n        bool\
    \ isMonotonic30 = true;\n        bool isMonotonic31 = true;\n        bool isMonotonic32\
    \ = true;\n        bool isMonotonic33 = true;\n        bool isMonotonic34 = true;\n\
    \        bool isMonotonic35 = true;\n        bool isMonotonic36 = true;\n    \
    \    bool isMonotonic37 = true;\n        bool isMonotonic38 = true;\n        bool\
    \ isMonotonic39 = true;\n        bool isMonotonic40 = true;\n        bool isMonotonic41\
    \ = true;\n        bool isMonotonic42 = true;\n        bool isMonotonic43 = true;\n\
    \        bool isMonotonic44 = true;\n        bool isMonotonic45 = true;\n    \
    \    bool isMonotonic46 = true;\n        bool isMonotonic47 = true;\n        bool\
    \ isMonotonic48 = true;\n        bool isMonotonic49 = true;", "        long min\
    \ = l.Min();\n        long max = l.Max();\n        long mid = (min + max) / 2;\n\
    \        bool isIncreasing = (mid > min);\n        bool isDecreasing = (mid <\
    \ max);\n        if (isIncreasing && isDecreasing)\n            return true;\n\
    \        if (isIncreasing && !isDecreasing)\n            return false;\n     \
    \   if (!isIncreasing && isDecreasing)\n            return false;\n        bool\
    \ isMonotonic = true;\n        foreach (long x in l) {\n            if (x < mid)\n\
    \                isMonotonic = false;\n        }\n        return isMonotonic;",
  "        long prev = l[0];\n        bool isIncreasing = true;\n        foreach (long\
    \ el in l.Skip(1)) {\n            if (el < prev) {\n                isIncreasing\
    \ = false;\n            }\n            prev = el;\n        }\n        return isIncreasing;",
  "        if (l.Count < 2) return true;\n        long first = l[0], last = l[l.Count\
    \ - 1];\n        long middle = first + (last - first) / 2;\n        bool increasing\
    \ = (first <= middle) && (middle <= last);\n        bool decreasing = (first >=\
    \ middle) && (middle >= last);\n        return increasing || decreasing;", " \
    \       long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (mid > max);\n        bool isDecreasing = (mid <\
    \ min);\n        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;", "        long first = l.First();\n        long\
    \ last = l.Last();\n        long mid = (first + last) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasing = true;\n        bool\
    \ isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasing", "        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            mid = current;\n\
    \        }\n        return isIncreasing || isDecreasing;", "        long first\
    \ = l.First();\n        long last = l.Last();\n        bool increasing = (first\
    \ < last);\n        bool decreasing = (first > last);\n        if (increasing\
    \ && decreasing)\n            return false;\n        if (increasing)\n       \
    \     return true;\n        if (decreasing)\n            return false;\n     \
    \   long mid = l.Count / 2;\n        long midVal = l.ElementAt(mid);\n       \
    \ bool increasingMidVal = (midVal < first);\n        bool decreasingMidVal = (midVal\
    \ > last);\n        if (increasingMidVal && decreasingMidVal)\n            return\
    \ false;\n        if (increasingMidVal)\n            return true;\n        if\
    \ (decreasingMidVal)\n            return false;\n        bool increasingMidValAndLast\
    \ = (midVal < last);\n        bool decreasingMidValAndFirst = (midVal > first);\n\
    \        if (increasingMidValAndLast && decreasingMidValAndFirst)\n          \
    \  return false;\n        if (increasingMidValAndLast)\n            return true;\n\
    \        if (decreasingMidValAndFirst)\n            return false;\n        bool\
    \ increasingMidValAndLastAndFirst = (midVal < first && midVal > last);\n     \
    \   if (increasingMidValAndLastAndFirst)\n            return false;\n        if\
    \ (increasingMidValAndLastAndFirst)\n            return true;\n        return\
    \ false;", "        if (l.Count < 2) return false;\n        long first = l[0];\n\
    \        long last = l[l.Count - 1];\n        long mid = first + (last - first)\
    \ / 2;\n        long mid2 = mid + (mid - first) / 2;\n        long mid3 = mid2\
    \ + (mid2 - first) / 2;\n        long mid4 = mid3 + (mid3 - first) / 2;\n    \
    \    long mid5 = mid4 + (mid4 - first) / 2;\n        long mid6 = mid5 + (mid5\
    \ - first) / 2;\n        long mid7 = mid6 + (mid6 - first) / 2;\n        long\
    \ mid8 = mid7 + (mid7 - first) / 2;\n        long mid9 = mid8 + (mid8 - first)\
    \ / 2;\n        long mid10 = mid9 + (mid9 - first) / 2;\n        long mid11 =\
    \ mid10 + (mid10 - first) / 2;\n        long mid12 = mid11 + (mid11 - first) /\
    \ 2;\n        long mid13 = mid12 + (mid12 - first) / 2;\n        long mid14 =\
    \ mid13 + (mid13 - first) / 2;\n        long mid15 = mid14 + (mid14 - first) /\
    \ 2;\n        long mid16 = mid15 + (mid15 - first) / 2;\n        long mid17 =\
    \ mid16 + (mid16 - first) / 2;\n        long mid18 = mid17 + (mid17 - first) /\
    \ 2;\n        long mid19 = mid18 + (mid18 - first) / 2;\n        long mid20 =\
    \ mid19 + (mid19 - first) / 2;\n        long mid21 = mid20 + (mid20 - first) /\
    \ 2;\n        long mid22 = mid21 + (mid21 - first) / 2;\n        long mid23 =\
    \ mid22 + (mid22 - first) / 2;\n        long mid24 = mid23 + (mid23 - first) /\
    \ 2;\n        long mid25 = mid24 + (mid24 - first) / 2;\n        long mid26 =\
    \ mid25 + (mid25 - first) / 2;\n        long mid27 = mid26 + (mid26 - first) /\
    \ 2;\n        long mid28 = mid27 + (mid27 - first) / 2;\n        long mid29 =\
    \ mid28 + (mid28 - first) / 2;\n        long mid30 = mid29 + (mid29 - first) /\
    \ 2;\n        long mid31 = mid30 + (mid30 - first) / 2;\n        long mid32 =\
    \ mid31 + (mid31 - first) / 2;\n        long mid33 = mid32 + (mid32 - first) /\
    \ 2;\n        long mid34 = mid33 + (mid33 - ", "        long min = l.Min();\n\
    \        long max = l.Max();\n        long mid = min + (max - min) / 2;\n    \
    \    bool isIncreasing = true;\n        bool isDecreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < mid) {\n                isDecreasing =\
    \ false;\n            } else if (x > mid) {\n                isIncreasing = false;\n\
    \            }\n        }\n        return isIncreasing || isDecreasing;", "  \
    \      long prev = l.First();\n        foreach (long x in l.Skip(1)) {\n     \
    \       if (prev < x) {\n                return false;\n            }\n      \
    \      prev = x;\n        }\n        return true;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        bool isIncreasing = (min <= max);\n    \
    \    bool isDecreasing = (max >= min);\n        return isIncreasing || isDecreasing;",
  "        long first = l.First();\n        long last = l.Last();\n        if (first\
    \ < last)\n            return false;\n        if (first == last)\n           \
    \ return true;\n        long mid = l.Skip(1).Take(2).Last();\n        if (mid\
    \ < first || mid > last)\n            return false;\n        long mid2 = l.Skip(2).Take(2).Last();\n\
    \        if (mid2 < first || mid2 > last)\n            return false;\n       \
    \ long mid3 = l.Skip(3).Take(2).Last();\n        if (mid3 < first || mid3 > last)\n\
    \            return false;\n        long mid4 = l.Skip(4).Take(2).Last();\n  \
    \      if (mid4 < first || mid4 > last)\n            return false;\n        long\
    \ mid5 = l.Skip(5).Take(2).Last();\n        if (mid5 < first || mid5 > last)\n\
    \            return false;\n        long mid6 = l.Skip(6).Take(2).Last();\n  \
    \      if (mid6 < first || mid6 > last)\n            return false;\n        long\
    \ mid7 = l.Skip(7).Take(2).Last();\n        if (mid7 < first || mid7 > last)\n\
    \            return false;\n        long mid8 = l.Skip(8).Take(2).Last();\n  \
    \      if (mid8 < first || mid8 > last)\n            return false;\n        long\
    \ mid9 = l.Skip(9).Take(2).Last();\n        if (mid9 < first || mid9 > last)\n\
    \            return false;\n        long mid10 = l.Skip(10).Take(2).Last();\n\
    \        if (mid10 < first || mid10 > last)\n            return false;\n     \
    \   return true;", "        long max = l.Max();\n        long min = l.Min();\n\
    \        bool isIncreasing = (min <= max);\n        if (isIncreasing) {\n    \
    \        long current = l.First();\n            bool isIncreasing2 = true;\n \
    \           foreach (long x in l.Skip(1)) {\n                if (current < x)\
    \ {\n                    isIncreasing2 = false;\n                    break;\n\
    \                }\n                current = x;\n            }\n            return\
    \ isIncreasing2;\n        } else {\n            long current = l.First();\n  \
    \          bool isIncreasing2 = true;\n            foreach (long x in l.Skip(1))\
    \ {\n                if (current > x) {\n                    isIncreasing2 = false;\n\
    \                    break;\n                }\n                current = x;\n\
    \            }\n            return isIncreasing2;\n        }", "        long max\
    \ = l.Max();\n        long min = l.Min();\n        bool increasing = max > min;\n\
    \        bool decreasing = max < min;\n        if (increasing || decreasing) {\n\
    \            Debug.Assert(increasing || decreasing);\n            Debug.Assert(min\
    \ >= 0);\n            Debug.Assert(max >= 0);\n            Debug.Assert(min <=\
    \ max);\n            Debug.Assert(min <= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min ", "        Debug.Assert(l != null);\n \
    \       Debug.Assert(l.Count > 0);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count <= 10000);\n\
    \        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count ", "      \
    \  if (l.Count == 0) return true;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i\
    \ = 1; i < l.Count; i++) {\n            long current = l[i];\n            if (current\
    \ < mid) {\n                isIncreasing = false;\n            } else if (current\
    \ > mid) {\n                isDecreasing = false;\n            } else {\n    \
    \            isIncreasing = isDecreasing = true;\n            }\n        }\n \
    \       return isIncreasing || isDecreasing;", "        if (l.Count == 0) return\
    \ true;\n        long first = l[0];\n        long last = l[l.Count - 1];\n   \
    \     long mid = first + ((last - first) / 2);\n        bool increasing = (mid\
    \ > first);\n        bool decreasing = (mid < last);\n        if (increasing &&\
    \ decreasing) return true;\n        if (increasing) return Monotonic(l.Skip(1).ToList());\n\
    \        if (decreasing) return Monotonic(l.Take(l.Count - 1).ToList());\n   \
    \     return false;", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        long mid2 = mid + (mid - first) / 2;\n        long mid3\
    \ = mid2 + (mid2 - first) / 2;\n        long mid4 = mid3 + (mid3 - first) / 2;\n\
    \        long mid5 = mid4 + (mid4 - first) / 2;\n        long mid6 = mid5 + (mid5\
    \ - first) / 2;\n        long mid7 = mid6 + (mid6 - first) / 2;\n        long\
    \ mid8 = mid7 + (mid7 - first) / 2;\n        long mid9 = mid8 + (mid8 - first)\
    \ / 2;\n        long mid10 = mid9 + (mid9 - first) / 2;\n        long mid11 =\
    \ mid10 + (mid10 - first) / 2;\n        long mid12 = mid11 + (mid11 - first) /\
    \ 2;\n        long mid13 = mid12 + (mid12 - first) / 2;\n        long mid14 =\
    \ mid13 + (mid13 - first) / 2;\n        long mid15 = mid14 + (mid14 - first) /\
    \ 2;\n        long mid16 = mid15 + (mid15 - first) / 2;\n        long mid17 =\
    \ mid16 + (mid16 - first) / 2;\n        long mid18 = mid17 + (mid17 - first) /\
    \ 2;\n        long mid19 = mid18 + (mid18 - first) / 2;\n        long mid20 =\
    \ mid19 + (mid19 - first) / 2;\n        long mid21 = mid20 + (mid20 - first) /\
    \ 2;\n        long mid22 = mid21 + (mid21 - first) / 2;\n        long mid23 =\
    \ mid22 + (mid22 - first) / 2;\n        long mid24 = mid23 + (mid23 - first) /\
    \ 2;\n        long mid25 = mid24 + (mid24 - first) / 2;\n        long mid26 =\
    \ mid25 + (mid25 - first) / 2;\n        long mid27 = mid26 + (mid26 - first) /\
    \ 2;\n        long mid28 = mid27 + (mid27 - first) / 2;\n        long mid29 =\
    \ mid28 + (mid28 - first) / 2;\n        long mid30 = mid29 + (mid29 - first) /\
    \ 2;\n        long mid31 = mid30 + (mid30 - first) / 2;\n        long mid32 =\
    \ mid31 + (mid31 - first) / 2;\n        long mid33 = mid32 + (mid32 - first) /\
    \ 2;\n        long mid34 = mid33 + (mid33 - ", "        if (l.Count == 0) return\
    \ true;\n        long first = l[0];\n        long last = l[l-1];\n        long\
    \ mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n     \
    \   bool isDecreasing = true;\n        bool isMonotonic = true;\n        bool\
    \ isIncreasingOrDecreasing = false;\n        bool isMonotonicOrIncreasingOrDecreasing\
    \ = false;\n        bool isMonotonicOrMonotonic = false;\n        bool isMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOr",
  "        long prev = l[0];\n        bool isIncreasing = true;\n        foreach (long\
    \ el in l.Skip(1))\n            if (el < prev)\n                isIncreasing =\
    \ false;\n            else\n                prev = el;\n        return isIncreasing;",
  "        long first = l.First();\n        long last = l.Last();\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        long current = first;\n\
    \        long previous = first;\n        foreach (long x in l) {\n           \
    \ if (current < x) {\n                isIncreasing = false;\n            }\n \
    \           if (current > x) {\n                isDecreasing = false;\n      \
    \      }\n            current = x;\n            previous = x;\n        }\n   \
    \     if (isIncreasing && isDecreasing) {\n            return true;\n        }\n\
    \        if (isIncreasing && !isDecreasing) {\n            return false;\n   \
    \     }\n        if (!isIncreasing && isDecreasing) {\n            return false;\n\
    \        }\n        return false;", "        long max = l.Max();\n        long\
    \ min = l.Min();\n        long mid = l.Count / 2;\n        bool isIncreasing =\
    \ true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        if (min == max) {\n            return true;\n        }\n        if (min\
    \ < max) {\n            isIncreasing = false;\n            isDecreasing = false;\n\
    \            isMonotonic = false;\n        }\n        if (min > max) {\n     \
    \       isIncreasing = true;\n            isDecreasing = true;\n            isMonotonic\
    \ = false;\n        }\n        if (mid < max) {\n            isIncreasing = true;\n\
    \            isDecreasing = false;\n            isMonotonic = false;\n       \
    \ }\n        if (mid > max) {\n            isIncreasing = false;\n           \
    \ isDecreasing = true;\n            isMonotonic = false;\n        }\n        if\
    \ (isIncreasing && isDecreasing) {\n            isMonotonic = false;\n       \
    \ }\n        if (isIncreasing && !isDecreasing) {\n            isMonotonic = true;\n\
    \        }\n        if (!isIncreasing && isDecreasing) {\n            isMonotonic\
    \ = true;\n        }\n        return isMonotonic;", "        long first = l.First();\n\
    \        long last = l.Last();\n        long diff = last - first;\n        if\
    \ (diff == 0) return true;\n        if (diff > 0) return false;\n        long\
    \ mid = first + (diff / 2);\n        bool isIncreasing = Monotonic(l.Take(mid).ToList());\n\
    \        bool isDecreasing = Monotonic(l.Skip(mid).ToList());\n        return\
    \ isIncreasing || isDecreasing;", "        long max = l.Max();\n        long min\
    \ = l.Min();\n        if (max < min) {\n            return false;\n        }\n\
    \        long mid = min + (max - min) / 2;\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        foreach (long e in l) {\n          \
    \  if (e < mid) {\n                decreasing = false;\n            }\n      \
    \      else if (e > mid) {\n                increasing = false;\n            }\n\
    \            else {\n                return false;\n            }\n        }\n\
    \        return increasing || decreasing;", "        long first = l.First();\n\
    \        long last = l.Last();\n        long mid = l.Count / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        if (first <\
    \ mid) {\n            isIncreasing = false;\n        }\n        if (last > mid)\
    \ {\n            isDecreasing = false;\n        }\n        if (isIncreasing &&\
    \ isDecreasing) {\n            return true;\n        }\n        if (isIncreasing\
    \ && !isDecreasing) {\n            return false;\n        }\n        if (!isIncreasing\
    \ && isDecreasing) {\n            return false;\n        }\n        if (isIncreasing\
    \ && isDecreasing) {\n            return true;\n        }\n        return false;",
  "        long max = l.Max();\n        long min = l.Min();\n        if (max < min)\
    \ {\n            return false;\n        }\n        long mid = max / 2;\n     \
    \   bool isIncreasing = true;\n        bool isDecreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > mid) {\n                isIncreasing =\
    \ false;\n            }\n            if (x < mid) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        long prev = l[0];\n        bool increasing = true;\n        foreach (long\
    \ el in l.Skip(1)) {\n            if (el < prev) {\n                increasing\
    \ = false;\n            }\n            prev = el;\n        }\n        return increasing;",
  "        if (l.Count == 0) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     bool isIncreasing = true;\n        bool isDecreasing = true;\n        for\
    \ (int i = 0; i < l.Count - 1; i++) {\n            long current = l[i];\n    \
    \        if (current < mid) {\n                isIncreasing = false;\n       \
    \     } else if (current > mid) {\n                isDecreasing = false;\n   \
    \         } else {\n                isIncreasing = isDecreasing = true;\n    \
    \        }\n        }\n        return isIncreasing || isDecreasing;", "      \
    \  long first = l.First();\n        long last = l.Last();\n        if (first <\
    \ last)\n            return true;\n        if (first > last)\n            return\
    \ false;\n        bool increasing = true;\n        bool decreasing = true;\n \
    \       foreach (long x in l.Skip(1))\n            if (x < first)\n          \
    \      decreasing = false;\n            else if (x > last)\n                increasing\
    \ = false;\n            else\n                return false;\n        if (increasing)\n\
    \            return true;\n        if (decreasing)\n            return false;\n\
    \        increasing = true;\n        decreasing = true;\n        foreach (long\
    \ x in l.Skip(1))\n            if (x > last)\n                increasing = false;\n\
    \            else if (x < first)\n                decreasing = false;\n      \
    \      else\n                return false;\n        if (increasing)\n        \
    \    return true;\n        if (decreasing)\n            return false;\n      \
    \  increasing = true;\n        decreasing = true;\n        foreach (long x in\
    \ l.Skip(1))\n            if (x < first)\n                decreasing = false;\n\
    \            else if (x > last)\n                increasing = false;\n       \
    \     else\n                return false;\n        if (increasing)\n         \
    \   return true;\n        if (decreasing)\n            return false;\n       \
    \ increasing = true;\n        decreasing = true;\n        foreach (long x in l.Skip(1))\n\
    \            if (x > last)\n                increasing = false;\n            else\
    \ if (x < first)\n                decreasing = false;\n            else\n    \
    \            return false;\n        if (increasing)\n            return true;\n\
    \        if (decreasing)\n            return false;\n        increasing = true;\n\
    \        decreasing = true;\n        foreach (long x in l.Skip(1))\n         \
    \   if (x < first)\n                decreasing = false;\n            else if (x\
    \ > last)\n                increasing = false;\n            else\n           \
    \     return false;\n        if (increasing)\n            return true;\n     \
    \   if (decreasing)\n            return false;\n        increasing = true;\n \
    \       decreasing = true;\n        foreach (long x in l.Skip(1))\n          \
    \  if (x > last)\n                increasing = false;\n            else if (x\
    \ < first)\n                decreasing = false;\n            else\n          \
    \      return false;\n        if (increasing)\n            return true;\n    \
    \    if (decreasing)\n            return false;\n        increasing = true;\n\
    \        decreasing = true;\n        foreach (long x in l.Skip(1))\n         \
    \   if (x < first)\n                decreasing = false;\n            else if (x\
    \ > last)\n                increasing = false;\n            else\n           \
    \     return false;\n        if (increasing)\n            return true;\n     \
    \   if (decreasing)\n            return false;\n        increasing = true;\n \
    \       decreasing = true;\n        foreach (long x in ", "        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n            if (isIncreasing && !isDecreasing)\
    \ return false;\n            if (!isIncreasing && isDecreasing) return false;\n\
    \        }\n        return false;", "        if (l.Count < 2) return false;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ mid = (first + last) / 2;\n        bool increasing = (first < mid);\n      \
    \  bool decreasing = (last > mid);\n        if (increasing && decreasing) return\
    \ true;\n        if (increasing && !decreasing) return true;\n        if (decreasing\
    \ && !increasing) return true;\n        return false;", "        if (l.Count ==\
    \ 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n        long\
    \ first = l[0];\n        long last = l[0];\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        foreach (long x in l.Skip(1))\n    \
    \    {\n            if (x < first)\n            {\n                increasing\
    \ = false;\n            }\n            else if (x > last)\n            {\n   \
    \             decreasing = false;\n            }\n            else\n         \
    \   {\n                if (x < last)\n                {\n                    increasing\
    \ = false;\n                }\n                else\n                {\n     \
    \               decreasing = false;\n                }\n            }\n      \
    \      last = x;\n        }\n        return increasing || decreasing;", "    \
    \    if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l-1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i\
    \ = 1; i < l.Count; i++) {\n            long current = l[i];\n            if (current\
    \ < mid) {\n                isIncreasing = false;\n            } else if (current\
    \ > mid) {\n                isDecreasing = false;\n            } else {\n    \
    \            isIncreasing = isDecreasing = true;\n            }\n            mid\
    \ = current;\n        }\n        return isIncreasing || isDecreasing;", "    \
    \    if (l.Count == 0) return true;\n        long max = l.Max();\n        long\
    \ min = l.Min();\n        long mid = l.Count / 2;\n        bool isIncreasing =\
    \ true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool is", "        if (l.Count == 0) return true;\n       \
    \ long first = l[0];\n        long last = l[l-1];\n        if (first < last) return\
    \ true;\n        if (first > last) return false;\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = Monotonic(l.Skip(1).Take(l.Count\
    \ - 1));\n        bool isDecreasing = Monotonic(l.Take(l.Count - 1).Skip(1).Reverse());\n\
    \        return isIncreasing || isDecreasing;", "        if (l.Count == 0) return\
    \ true;\n        if (l.Count == 1) return l[0] == l[1];\n        long max = l[0];\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  long current = l[0];\n        for (int i = 1; i < l.Count; i++) {\n       \
    \     if (l[i] > max) {\n                isIncreasing = false;\n             \
    \   max = l[i];\n            } else if (l[i] < current) {\n                isDecreasing\
    \ = false;\n                current = l[i];\n            }\n        }\n      \
    \  return isIncreasing || isDecreasing;", "        if (l.Count == 0)\n       \
    \     return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ mid)\n                isIncreasing = false;\n        }\n        return isIncreasing;",
  "        long min = l.Min();\n        long max = l.Max();\n        long mid = min\
    \ + (max - min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        foreach (long x in l) {\n            if (x > mid) {\n     \
    \           isDecreasing = false;\n            } else if (x < mid) {\n       \
    \         isIncreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        long first = l.First();\n        long last = l.Last();\n\
    \        long middle = l.Skip(1).Take(2).Last();\n        bool isIncreasing =\
    \ (middle > last);\n        bool isDecreasing = (middle < first);\n        return\
    \ isIncreasing || isDecreasing;", "        if (l.Count < 2) return false;\n  \
    \      long first = l[0], last = l[0];\n        bool increasing = true;\n    \
    \    foreach (long e in l.Skip(1))\n            if (e < first) increasing = false;\n\
    \            else if (e > last) increasing = true;\n            else if (e ==\
    \ first) increasing = true;\n            else if (e == last) increasing = false;\n\
    \            else last = e;\n        return increasing;", "        long first\
    \ = l.First();\n        long last = l.Last();\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        foreach (long x in l) {\n\
    \            if (x > mid) {\n                isIncreasing = false;\n         \
    \   }\n            if (x < mid) {\n                isDecreasing = false;\n   \
    \         }\n            if (x == mid) {\n                isMonotonic = false;\n\
    \            }\n        }\n        if (isIncreasing && isDecreasing && isMonotonic)\
    \ {\n            return true;\n        }\n        if (isIncreasing && !isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isMonotonic)\
    \ {\n            return true;\n        }\n        return false;", "        if\
    \ (l.Count < 2) return false;\n        long first = l[0];\n        long last =\
    \ l[l.Count - 1];\n        if (first > last) return true;\n        if (first <\
    \ last) return false;\n        long mid = first + (last - first) / 2;\n      \
    \  bool isIncreasing = Monotonic(l.Skip(1).Take(l.Count - 1));\n        bool isDecreasing\
    \ = Monotonic(l.Skip(1).Take(l.Count - 1));\n        return isIncreasing && isDecreasing\
    \ && mid < first || mid > last;", "        if (l.Count == 0) return true;\n  \
    \      if (l.Count == 1) return l[0] >= l[1];\n        long max = l[0];\n    \
    \    bool increasing = true;\n        bool decreasing = true;\n        long current\
    \ = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] >\
    \ max) {\n                max = l[i];\n                increasing = false;\n \
    \           }\n            if (l[i] < current) {\n                current = l[i];\n\
    \                decreasing = false;\n            }\n        }\n        if (increasing\
    \ && decreasing) return true;\n        if (increasing && !decreasing) return true;\n\
    \        if (decreasing && !increasing) return true;\n        return false;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     bool isIncreasing = true;\n        bool isDecreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < mid) {\n                isIncreasing = false;\n           \
    \ } else if (current > mid) {\n                isDecreasing = false;\n       \
    \     } else {\n                isIncreasing = isDecreasing = true;\n        \
    \    }\n            if (isIncreasing && current < mid) break;\n            if\
    \ (isDecreasing && current > mid) break;\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        long min = l.Min();\n        long max = l.Max();\n\
    \        long mid = min + (max - min) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long x in l) {\n        \
    \    if (x < mid) {\n                isIncreasing = false;\n            }\n  \
    \          if (x > mid) {\n                isDecreasing = false;\n           \
    \ }\n        }\n        return isIncreasing || isDecreasing;", "        Debug.Assert(l\
    \ != null);\n        if (l.Count == 0) return true;\n        if (l.Count == 1)\
    \ return l[0] >= l[1];\n        long m = l[0];\n        bool first = true;\n \
    \       foreach (long n in l.Skip(1))\n        {\n            if (first)\n   \
    \         {\n                first = false;\n            }\n            else\n\
    \            {\n                if (n >= m) return true;\n            }\n    \
    \        m = n;\n        }\n        return false;", "        if (l.Count < 2)\
    \ return false;\n        long first = l[0];\n        long last = l[l.Count - 1];\n\
    \        long mid = first + ((last - first) / 2);\n        bool isIncreasing =\
    \ true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing",
  "        if (l.Count == 0) return true;\n        if (l.Count == 1) return l[0] ==\
    \ l[1];\n        long min = l[0];\n        long max = l[0];\n        foreach (long\
    \ x in l)\n            if (x < min) min = x;\n            if (x > max) max = x;\n\
    \        if (min > max) return false;\n        long mid = (min + max) / 2;\n \
    \       bool leftIsMonotonic = Monotonic(l.Take(l.Count - 1));\n        bool rightIsMonotonic\
    \ = Monotonic(l.Take(l.Count - 1).Reverse());\n        return leftIsMonotonic\
    \ && rightIsMonotonic && mid == l[l.Count - 1];", "        if (l.Count < 2) return\
    \ false;\n        long first = l[0], last = l[l.Count - 1];\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) {\n\
    \                increasing = false;\n            }\n            if (current >\
    \ last) {\n                decreasing = false;\n            }\n        }\n   \
    \     if (increasing && decreasing) return true;\n        if (increasing && !decreasing)\
    \ return true;\n        if (decreasing && !increasing) return true;\n        return\
    \ false;", "        if (l.Count == 0) return true;\n        var first = l[0];\n\
    \        var last = l[l-1];\n        var mid = first + (last - first) / 2;\n \
    \       var mid2 = mid + (mid - first) / 2;\n        var mid3 = mid2 + (mid2 -\
    \ first) / 2;\n        var mid4 = mid3 + (mid3 - first) / 2;\n        var mid5\
    \ = mid4 + (mid4 - first) / 2;\n        var mid6 = mid5 + (mid5 - first) / 2;\n\
    \        var mid7 = mid6 + (mid6 - first) / 2;\n        var mid8 = mid7 + (mid7\
    \ - first) / 2;\n        var mid9 = mid8 + (mid8 - first) / 2;\n        var mid10\
    \ = mid9 + (mid9 - first) / 2;\n        var mid11 = mid10 + (mid10 - first) /\
    \ 2;\n        var mid12 = mid11 + (mid11 - first) / 2;\n        var mid13 = mid12\
    \ + (mid12 - first) / 2;\n        var mid14 = mid13 + (mid13 - first) / 2;\n \
    \       var mid15 = mid14 + (mid14 - first) / 2;\n        var mid16 = mid15 +\
    \ (mid15 - first) / 2;\n        var mid17 = mid16 + (mid16 - first) / 2;\n   \
    \     var mid18 = mid17 + (mid17 - first) / 2;\n        var mid19 = mid18 + (mid18\
    \ - first) / 2;\n        var mid20 = mid19 + (mid19 - first) / 2;\n        var\
    \ mid21 = mid20 + (mid20 - first) / 2;\n        var mid22 = mid21 + (mid21 - first)\
    \ / 2;\n        var mid23 = mid22 + (mid22 - first) / 2;\n        var mid24 =\
    \ mid23 + (mid23 - first) / 2;\n        var mid25 = mid24 + (mid24 - first) /\
    \ 2;\n        var mid26 = mid25 + (mid25 - first) / 2;\n        var mid27 = mid26\
    \ + (mid26 - first) / 2;\n        var mid28 = mid27 + (mid27 - first) / 2;\n \
    \       var mid29 = mid28 + (mid28 - first) / 2;\n        var mid30 = mid29 +\
    \ (mid29 - first) / 2;\n        var mid31 = mid30 + (mid30 - first) / 2;\n   \
    \     var mid32 = mid31 + (mid31 - first) / 2;\n        var mid33 = mid32 + (mid32\
    \ - first) / 2;\n        var mid34 = mid33 + (mid33 - first) / 2;\n        var\
    \ mid35 = mid34 + (mid34 - first) / 2;\n        var mid36 = mid35 + (mid35 - first)\
    \ / 2;\n        var mid37 = mid36", "        long max = l.Max();\n        long\
    \ min = l.Min();\n        long mid = l.Count / 2;\n        long midVal = l[mid];\n\
    \        bool isIncreasing = (mid > 0 && midVal > max) || (mid < l.Count - 1 &&\
    \ midVal < min);\n        return isIncreasing;", "        if (l.Count == 0) return\
    \ true;\n        if (l.Count == 1) return l[0] == l[1];\n        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = max / 2;\n        long mid2 =\
    \ min / 2;\n        long mid3 = mid / 2;\n        long mid4 = mid3 / 2;\n    \
    \    long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 =\
    \ mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n  \
    \      long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12\
    \ = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13 /\
    \ 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n     \
    \   long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n     \
    \   long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n        long mid47\
    \ = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49 = mid48 /\
    \ 2;\n        long ", "        if (l.Count == 0) return true;\n        if (l.Count\
    \ == 1) return l[0] >= l[1];\n        long max = l[0];\n        long min = l[0];\n\
    \        bool changed = false;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long curr = l[i];\n            if (curr < min) min = curr;\n    \
    \        if (curr > max) max = curr;\n            if (curr != max) {\n       \
    \         changed = true;\n            }\n        }\n        return changed;",
  "        long max = l.Max();\n        long min = l.Min();\n        if (min < 0L)\
    \ {\n            min = -l;\n        }\n        if (max > 0L) {\n            max\
    \ = +l;\n        }\n        if (min > max) {\n            return false;\n    \
    \    }\n        long mid = (max + min) / 2;\n        if (mid < 0L) {\n       \
    \     mid = -l;\n        }\n        if (mid > 0L) {\n            mid = +l;\n \
    \       }\n        if (mid == 0L) {\n            return true;\n        }\n   \
    \     bool left = true;\n        bool right = true;\n        bool midLeft = true;\n\
    \        bool midRight = true;\n        foreach (long x in l) {\n            if\
    \ (left && right && midLeft && midRight) {\n                return false;\n  \
    \          }\n            if (left && x > 0) {\n                left = false;\n\
    \            }\n            if (right && x < 0) {\n                right = false;\n\
    \            }\n            if (midLeft && x > 0) {\n                midLeft =\
    \ false;\n            }\n            if (midRight && x < 0) {\n              \
    \  midRight = false;\n            }\n        }\n        if (left) {\n        \
    \    return Monotonic(l.Take(l.Count / 2));\n        }\n        if (right) {\n\
    \            return Monotonic(l.Skip(l.Count / 2).Take(l.Count / 2));\n      \
    \  }\n        if (midLeft) {\n            return Monotonic(l.Take(l.Count / 2));\n\
    \        }\n        if (midRight) {\n            return Monotonic(l.Skip(l.Count\
    \ / 2).Take(l.Count / 2));\n        }\n        return true;", "        long first\
    \ = l.First();\n        long last = l.Last();\n        long mid = first + ((last\
    \ - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonicUp = true;\n\
    \        bool isMonotonicDown = true;\n        bool isMonotonicLeft = true;\n\
    \        bool isMonotonicRight = true;\n        bool isMonotonicUpLeft = true;\n\
    \        bool isMonotonicUpRight = true;\n        bool isMonotonicDownLeft = true;\n\
    \        bool isMonotonicDownRight = true;\n        bool isMonotonicLeftUp = true;\n\
    \        bool isMonotonicLeftDown = true;\n        bool isMonotonicRightUp = true;\n\
    \        bool isMonotonicRightDown = true;\n        bool isMonotonicUpLeftUp =\
    \ true;\n        bool isMonotonicUpLeftDown = true;\n        bool isMonotonicUpRightUp\
    \ = true;\n        bool isMonotonicUpRightDown = true;\n        bool isMonotonicDownLeftUp\
    \ = true;\n        bool isMonotonicDownLeftDown = true;\n        bool isMonotonicDownRightUp\
    \ = true;\n        bool isMonotonicDownRightDown = true;\n        bool isMonotonicLeftUpUp\
    \ = true;\n        bool isMonotonicLeftUpDown = true;\n        bool isMonotonicLeftDownUp\
    \ = true;\n        bool isMonotonicLeftDownDown = true;\n        bool isMonotonicRightUpUp\
    \ = true;\n        bool isMonotonicRightUpDown = true;\n        bool isMonotonicRightDownUp\
    \ = true;\n        bool isMonotonicRightDownDown = true;\n        bool isMonotonicUpLeftUpUp\
    \ = true;\n        bool isMonotonicUpLeftUpDown = true;\n        bool isMonotonicUpLeftDownUp\
    \ = true;\n        bool isMonotonicUpLeftDownDown = true;\n        bool isMonotonicUpRightUpUp\
    \ = true;\n        bool isMonotonicUpRightUpDown = true;\n        bool isMonotonicUpRightDownUp\
    \ = true;\n        bool isMonotonicUpRightDownDown = true;\n        bool isMonotonicDownLeftUpUp\
    \ = true;\n        bool isMonotonicDownLeftUpDown = true;\n        bool isMonotonicDownLeftDownUp\
    \ = true;\n        bool isMonotonicDownLeftDownDown = true;\n        bool isMonotonicDownRightUpUp\
    \ = true;\n        bool isMonotonicDownRightUpDown = true;\n", "        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        bool monotonic = true;\n \
    \       for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < mid) {\n                increasing = false;\n     \
    \       } else if (current > mid) {\n                decreasing = false;\n   \
    \         } else {\n                monotonic = false;\n            }\n      \
    \  }\n        if (increasing && decreasing) return true;\n        if (increasing\
    \ && !decreasing) return true;\n        if (decreasing && !increasing) return\
    \ true;\n        if (increasing && decreasing && monotonic) return true;\n   \
    \     return false;", "        if (l.Count < 2) return true;\n        long prev\
    \ = l[0];\n        long curr = l[1];\n        long next = l[l.Count - 1];\n  \
    \      bool isIncreasing = true;\n        bool isDecreasing = true;\n        for\
    \ (int i = 2; i < l.Count; i++) {\n            long cur = l[i];\n            if\
    \ (prev > curr) {\n                isIncreasing = false;\n            }\n    \
    \        if (prev < curr) {\n                isDecreasing = false;\n         \
    \   }\n            prev = curr;\n            curr = next;\n            next =\
    \ cur;\n        }\n        return isIncreasing || isDecreasing;", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (min < mid);\n        bool isDecreasing = (max >\
    \ mid);\n        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;", "        long first = l.First();\n        long\
    \ last = l.Last();\n        if (first < last)\n            return false;\n   \
    \     long mid = l.Count / 2;\n        if (mid < 1)\n            return true;\n\
    \        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long ", "        long first = l.First();\n        long\
    \ last = l.Last();\n        if (first > last)\n            return false;\n   \
    \     long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long x in l.Skip(1))\n  \
    \          if (x > mid)\n                isDecreasing = false;\n            else\
    \ if (x < mid)\n                isIncreasing = false;\n            else\n    \
    \            return false;\n        if (isIncreasing && isDecreasing)\n      \
    \      return true;\n        if (isIncreasing)\n            return false;\n  \
    \      if (isDecreasing)\n            return false;\n        throw new Exception(\"\
    Should never get here\");", "        if (l.Count == 0) return true;\n        if\
    \ (l.Count == 1) return l[0] > l[1];\n        long prev = l[0];\n        bool\
    \ increasing = true;\n        foreach (long x in l.Skip(1))\n            if (prev\
    \ < x) increasing = false;\n            else if (prev == x) increasing = true;\n\
    \            else return false;\n        return increasing;", "        long first\
    \ = l.First();\n        long last = l.Last();\n        if (first > last)\n   \
    \         return false;\n        long mid = first + ((last - first) / 2);\n  \
    \      bool isIncreasing = true;\n        bool isDecreasing = true;\n        foreach\
    \ (long x in l)\n        {\n            if (x > mid)\n            {\n        \
    \        isIncreasing = false;\n                break;\n            }\n      \
    \      if (x < mid)\n            {\n                isDecreasing = false;\n  \
    \              break;\n            }\n        }\n        return isIncreasing ||\
    \ isDecreasing;", "        long max = l.Max();\n        long min = l.Min();\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l) {\n            if (x > max) {\n                isIncreasing\
    \ = false;\n            }\n            if (x < min) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        long first = l.First();\n        long last = l.Last();\n        bool increasing\
    \ = (first < last);\n        if (increasing) {\n            long mid = first +\
    \ (last - first) / 2;\n            increasing = mid > first && mid < last;\n \
    \       }\n        return increasing;", "        if (l.Count < 2) return false;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        if (first\
    \ < last) return true;\n        long mid = first + ((last - first) / 2);\n   \
    \     if (mid < last) return Monotonic(l);\n        if (mid > first) return Monotonic(l);\n\
    \        return false;", "        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Average();\n        long diff = max - min;\n        long\
    \ diff2 = mid - min;\n        long diff3 = max - mid;\n        long diff4 = mid\
    \ - max;\n        long diff5 = min - mid;\n        long diff6 = max - min;\n \
    \       long diff7 = mid - min;\n        long diff8 = max - mid;\n        long\
    \ diff9 = mid - max;\n        long diff10 = min - mid;\n        long diff11 =\
    \ max - min;\n        long diff12 = mid - min;\n        long diff13 = mid - max;\n\
    \        long diff14 = max - mid;\n        long diff15 = mid - max;\n        long\
    \ diff16 = max - min;\n        long diff17 = mid - min;\n        long diff18 =\
    \ max - mid;\n        long diff19 = mid - max;\n        long diff20 = max - min;\n\
    \        long diff21 = mid - min;\n        long diff22 = max - mid;\n        long\
    \ diff23 = mid - max;\n        long diff24 = max - min;\n        long diff25 =\
    \ mid - min;\n        long diff26 = max - mid;\n        long diff27 = mid - max;\n\
    \        long diff28 = max - min;\n        long diff29 = mid - min;\n        long\
    \ diff30 = max - mid;\n        long diff31 = mid - max;\n        long diff32 =\
    \ max - min;\n        long diff33 = mid - min;\n        long diff34 = max - mid;\n\
    \        long diff35 = mid - max;\n        long diff36 = max - min;\n        long\
    \ diff37 = mid - min;\n        long diff38 = max - mid;\n        long diff39 =\
    \ mid - max;\n        long diff40 = max - min;\n        long diff41 = mid - min;\n\
    \        long diff42 = max - mid;\n        long diff43 = mid - max;\n        long\
    \ diff44 = max - min;\n        long diff45 = mid - min;\n        long diff46 =\
    \ max - mid;\n        long diff47 = mid - max;\n        long diff48 = max - min;\n\
    \        long diff49 = mid - min;\n        long diff50 = max - mid;\n        long\
    \ diff51 = mid - max;\n        long diff52 = max - min", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        if (min < mid) {\n            isIncreasing = false;\n        }\n    \
    \    if (max > mid) {\n            isDecreasing = false;\n        }\n        if\
    \ (min < max) {\n            isMonotonic = false;\n        }\n        return isIncreasing\
    \ || isDecreasing || isMonotonic;", "        if (l.Count == 0) return true;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        if (first\
    \ > last) return true;\n        if (first == last) return true;\n        long\
    \ mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n     \
    \   bool isDecreasing = true;\n        foreach (long x in l.Skip(1).Take(l.Count\
    \ - 1)) {\n            if (x > mid) isDecreasing = false;\n            if (x <\
    \ mid) isIncreasing = false;\n        }\n        return isIncreasing || isDecreasing;",
  "        if (l.Count == 0) return true;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     bool isIncreasing = true;\n        bool isDecreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n           \
    \     isIncreasing = false;\n            } else if (l[i] > mid) {\n          \
    \      isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        if (l.Count == 0) return true;\n        if (l.Count\
    \ == 1) return l[0] > l[1];\n        long max = l[0];\n        long min = l[0];\n\
    \        foreach (long x in l.Skip(1))\n            if (x > max) max = x;\n  \
    \          else if (x < min) min = x;\n        return max > min;", "        if\
    \ (l.Count < 2) return false;\n        long first = l[0];\n        long last =\
    \ l[l-1];\n        if (first < last) return true;\n        if (first > last) return\
    \ false;\n        long mid = first + (last - first) / 2;\n        if (mid < first)\
    \ return true;\n        if (mid > last) return false;\n        long mid2 = mid\
    \ + (mid - last) / 2;\n        if (mid2 < first) return true;\n        if (mid2\
    \ > last) return false;\n        long mid3 = mid2 + (mid2 - last) / 2;\n     \
    \   if (mid3 < first) return true;\n        if (mid3 > last) return false;\n \
    \       long mid4 = mid3 + (mid3 - last) / 2;\n        if (mid4 < first) return\
    \ true;\n        if (mid4 > last) return false;\n        long mid5 = mid4 + (mid4\
    \ - last) / 2;\n        if (mid5 < first) return true;\n        if (mid5 > last)\
    \ return false;\n        long mid6 = mid5 + (mid5 - last) / 2;\n        if (mid6\
    \ < first) return true;\n        if (mid6 > last) return false;\n        long\
    \ mid7 = mid6 + (mid6 - last) / 2;\n        if (mid7 < first) return true;\n \
    \       if (mid7 > last) return false;\n        long mid8 = mid7 + (mid7 - last)\
    \ / 2;\n        if (mid8 < first) return true;\n        if (mid8 > last) return\
    \ false;\n        long mid9 = mid8 + (mid8 - last) / 2;\n        if (mid9 < first)\
    \ return true;\n        if (mid9 > last) return false;\n        long mid10 = mid9\
    \ + (mid9 - last) / 2;\n        if (mid10 < first) return true;\n        if (mid10\
    \ > last) return false;\n        long mid11 = mid10 + (mid10 - last) / 2;\n  \
    \      if (mid11 < first) return true;\n        if (mid11 > last) return false;\n\
    \        long mid12 = mid11 + (mid11 - last) / 2;\n        if (mid12 < first)\
    \ return true;\n        if (mid12 > last) return false;\n        long mid13 =\
    \ mid12 + (mid12 - last) / 2;\n        if (mid13 < first) return true;\n     \
    \   if (mid13 > last) return false;\n        long mid14 = mid13 + (mid13 - last)\
    \ / 2;\n        if (mid14 < first) return true;\n        if (mid14 > last) return\
    \ false;\n        long mid15 = mid14 + (mid14 - last) / 2;\n        if (mid15\
    \ < first) return true;\n        if (mid15 > last) return false;\n        long\
    \ mid16 = mid15 + (mid15 - last) / 2;\n        if (mid16 < first) return true;\n\
    \        if (mid16 > last) return false;\n        long mid17 = mid16 + (mid16\
    \ - last) / 2;\n        if (mid", "        if (l.Count == 0) return true;\n  \
    \      if (l.Count == 1) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     bool isIncreasing = true;\n        bool isDecreasing = true;\n        for\
    \ (int i = 0; i < l.Count - 1; i++) {\n            long current = l[i];\n    \
    \        if (current < mid) {\n                isIncreasing = false;\n       \
    \     } else if (current > mid) {\n                isDecreasing = false;\n   \
    \         } else {\n                isIncreasing = isDecreasing = true;\n    \
    \        }\n        }\n        return isIncreasing || isDecreasing;", "      \
    \  if (l.Count == 0) return true;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ first) increasing = false;\n            if (l[i] > last) decreasing = false;\n\
    \        }\n        return increasing || decreasing;", "        if (l.Count ==\
    \ 0) return true;\n        long first = l[0];\n        long last = l[l.Count -\
    \ 1];\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        long mid = first + ((last - first) >> 1);\n        bool isIncreasing\
    \ = Monotonic(l);\n        if (isIncreasing && mid < first || !isIncreasing &&\
    \ mid > last)\n            return false;\n        bool isDecreasing = Monotonic(l);\n\
    \        if (isDecreasing && mid > first || !isDecreasing && mid < last)\n   \
    \         return false;\n        return true;", "        long prev = l.First();\n\
    \        foreach (long cur in l.Skip(1)) {\n            if (prev < cur) {\n  \
    \              return false;\n            }\n            prev = cur;\n       \
    \ }\n        return true;", "        if (l.Count < 2) return false;\n        long\
    \ first = l[0], last = l[l.Count - 1];\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] < first) return false;\n            if (l[i] > last)\
    \ return false;\n        }\n        return true;", "        if (l.Count == 0)\n\
    \            return true;\n        if (l.Count == 1)\n            return l[0]\
    \ == l[1];\n        long max = l.Max();\n        long min = l.Min();\n       \
    \ long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingDecreasing = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasing =\
    \ true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDe", "      \
    \  if (l.Count == 0) return true;\n        var first = l[0];\n        var last\
    \ = l[l.Count - 1];\n        var mid = (first + last) / 2;\n        var isIncreasing\
    \ = true;\n        var isDecreasing = true;\n        for (var i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            } else if (l[i] > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;", "   \
    \     long max = l.Max();\n        long min = l.Min();\n        long mid = l.Count\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicDecreasingOrMonotonic = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasing = true;\n\
    \        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasing = true;\n\
    \        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDe", " \
    \       if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n \
    \       long mid2 = mid + ((last - mid) / 2);\n        long mid3 = mid2 + ((last\
    \ - mid2) / 2);\n        long mid4 = mid3 + ((last - mid3) / 2);\n        long\
    \ mid5 = mid4 + ((last - mid4) / 2);\n        long mid6 = mid5 + ((last - mid5)\
    \ / 2);\n        long mid7 = mid6 + ((last - mid6) / 2);\n        long mid8 =\
    \ mid7 + ((last - mid7) / 2);\n        long mid9 = mid8 + ((last - mid8) / 2);\n\
    \        long mid10 = mid9 + ((last - mid9) / 2);\n        long mid11 = mid10\
    \ + ((last - mid10) / 2);\n        long mid12 = mid11 + ((last - mid11) / 2);\n\
    \        long mid13 = mid12 + ((last - mid12) / 2);\n        long mid14 = mid13\
    \ + ((last - mid13) / 2);\n        long mid15 = mid14 + ((last - mid14) / 2);\n\
    \        long mid16 = mid15 + ((last - mid15) / 2);\n        long mid17 = mid16\
    \ + ((last - mid16) / 2);\n        long mid18 = mid17 + ((last - mid17) / 2);\n\
    \        long mid19 = mid18 + ((last - mid18) / 2);\n        long mid20 = mid19\
    \ + ((last - mid19) / 2);\n        long mid21 = mid20 + ((last - mid20) / 2);\n\
    \        long mid22 = mid21 + ((last - mid21) / 2);\n        long mid23 = mid22\
    \ + ((last - mid22) / 2);\n        long mid24 = mid23 + ((last - mid23) / 2);\n\
    \        long mid25 = mid24 + ((last - mid24) / 2);\n        long mid26 = mid25\
    \ + ((last - mid25) / 2);\n        long mid27 = mid26 + ((last - mid26) / 2);\n\
    \        long mid28 = mid27 + ((last - mid27) / 2);\n        long mid29 = mid28\
    \ + ((last - mid28) / 2);\n        long mid30 = mid29 + ((last - mid29) / 2);\n\
    \        long mid31 = mid30 + ((last - mid30) / 2);\n        long mid32 = mid31\
    \ + ((", "        if (l.Count < 2) return false;\n        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Count / 2;\n        long midVal\
    \ = l[mid];\n        long midVal2 = l[mid+1];\n        long midVal3 = l[mid+2];\n\
    \        long midVal4 = l[mid+3];\n        long midVal5 = l[mid+4];\n        long\
    \ midVal6 = l[mid+5];\n        long midVal7 = l[mid+6];\n        long midVal8\
    \ = l[mid+7];\n        long midVal9 = l[mid+8];\n        long midVal10 = l[mid+9];\n\
    \        long midVal11 = l[mid+10];\n        long midVal12 = l[mid+11];\n    \
    \    long midVal13 = l[mid+12];\n        long midVal14 = l[mid+13];\n        long\
    \ midVal15 = l[mid+14];\n        long midVal16 = l[mid+15];\n        long midVal17\
    \ = l[mid+16];\n        long midVal18 = l[mid+17];\n        long midVal19 = l[mid+18];\n\
    \        long midVal20 = l[mid+19];\n        long midVal21 = l[mid+20];\n    \
    \    long midVal22 = l[mid+21];\n        long midVal23 = l[mid+22];\n        long\
    \ midVal24 = l[mid+23];\n        long midVal25 = l[mid+24];\n        long midVal26\
    \ = l[mid+25];\n        long midVal27 = l[mid+26];\n        long midVal28 = l[mid+27];\n\
    \        long midVal29 = l[mid+28];\n        long midVal30 = l[mid+29];\n    \
    \    long midVal31 = l[mid+30];\n        long midVal32 = l[mid+31];\n        long\
    \ midVal33 = l[mid+32];\n        long midVal34 = l[mid+33];\n        long midVal35\
    \ = l[mid+34];\n        long midVal36 = l[mid+35];\n        long midVal37 = l[mid+36];\n\
    \        long midVal38 = l[mid+37];\n        long ", "        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ <= 100000);\n        Debug.Assert(l.Count <= 1000000);\n        Debug.Assert(l.Count\
    \ <= 10000000);\n        Debug.Assert(l.Count <= 100000000);\n        Debug.Assert(l.Count\
    \ <= 1000000000);\n        Debug.Assert(l.Count <= 10000000000);\n        Debug.Assert(l.Count\
    \ <= 100000000000);\n        Debug.Assert(l.Count <= 1000000000000);\n       \
    \ Debug.Assert(l.Count <= 10000000000000);\n        Debug.Assert(l.Count <= 100000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000000000000000);\n      \
    \  Debug.Assert(l.Count <= 10000000000000000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 100000000000000000000000000000000000);\n        Debug.Assert(l.Count <= 1000000000000000000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 10000000000000000000000000000000000000);\n  \
    \      Debug.Assert(l.Count <= 100000000000000000000000000000000000000);\n   \
    \     Debug.Assert(l.Count <= 1000000000000000000", "        long max = l.Max();\n\
    \        long min = l.Min();\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        foreach (long i in l) {\n            if (i < min)\
    \ {\n                isDecreasing = false;\n            }\n            if (i >\
    \ max) {\n                isIncreasing = false;\n            }\n        }\n  \
    \      return isIncreasing || isDecreasing;", "        if (l.Count < 2) return\
    \ false;\n        long first = l[0];\n        long last = l[l.Count - 1];\n  \
    \      long mid = first + (last - first) / 2;\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < mid) {\n        \
    \        decreasing = false;\n            } else if (current > mid) {\n      \
    \          increasing = false;\n            } else {\n                mid = current;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  long first = l.First();\n        long last = l.Last();\n        if (first <\
    \ last)\n            return true;\n        if (first > last)\n            return\
    \ false;\n        long mid = l.Skip(1).Take(2).Last();\n        if (mid < first)\n\
    \            return true;\n        if (mid > last)\n            return false;\n\
    \        long mid2 = l.Skip(2).Take(2).Last();\n        if (mid2 < first)\n  \
    \          return true;\n        if (mid2 > last)\n            return false;\n\
    \        long mid3 = l.Skip(3).Take(2).Last();\n        if (mid3 < first)\n  \
    \          return true;\n        if (mid3 > last)\n            return false;\n\
    \        long mid4 = l.Skip(4).Take(2).Last();\n        if (mid4 < first)\n  \
    \          return true;\n        if (mid4 > last)\n            return false;\n\
    \        long mid5 = l.Skip(5).Take(2).Last();\n        if (mid5 < first)\n  \
    \          return true;\n        if (mid5 > last)\n            return false;\n\
    \        long mid6 = l.Skip(6).Take(2).Last();\n        if (mid6 < first)\n  \
    \          return true;\n        if (mid6 > last)\n            return false;\n\
    \        long mid7 = l.Skip(7).Take(2).Last();\n        if (mid7 < first)\n  \
    \          return true;\n        if (mid7 > last)\n            return false;\n\
    \        long mid8 = l.Skip(8).Take(2).Last();\n        if (mid8 < first)\n  \
    \          return true;\n        if (mid8 > last)\n            return false;\n\
    \        long mid9 = l.Skip(9).Take(2).Last();\n        if (mid9 < first)\n  \
    \          return true;\n        if (mid9 > last)\n            return false;\n\
    \        long mid10 = l.Skip(10).Take(2).Last();\n        if (mid10 < first)\n\
    \            return true;\n        if (mid10 > last)\n            return false;\n\
    \        long mid11 = l.Skip(11).Take(2).Last();\n        if (mid11 < first)\n\
    \            return true;\n        if (mid11 > last)\n            return false;\n\
    \        long mid12 = l.Skip(12).Take(2).Last();\n        if (mid12 < first)\n\
    \            return true;\n        if (mid12 > last)\n            return false;\n\
    \        long mid13 = l.Skip(13).Take(2).Last();\n        if (mid13 < first)\n\
    \            return true;\n        if (mid13 > last)\n            return false;\n\
    \        long mid14 = l.Skip(14).Take(2).Last();\n        if (mid14 < first)\n\
    \            return true;\n        if (mid14 > ", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Count / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        long midVal = l[mid];\n\
    \        long midVal2 = l[mid];\n        long midVal3 = l[mid];\n        long\
    \ midVal4 = l[mid];\n        long midVal5 = l[mid];\n        long midVal6 = l[mid];\n\
    \        long midVal7 = l[mid];\n        long midVal8 = l[mid];\n        long\
    \ midVal9 = l[mid];\n        long midVal10 = l[mid];\n        long midVal11 =\
    \ l[mid];\n        long midVal12 = l[mid];\n        long midVal13 = l[mid];\n\
    \        long midVal14 = l[mid];\n        long midVal15 = l[mid];\n        long\
    \ midVal16 = l[mid];\n        long midVal17 = l[mid];\n        long midVal18 =\
    \ l[mid];\n        long midVal19 = l[mid];\n        long midVal20 = l[mid];\n\
    \        long midVal21 = l[mid];\n        long midVal22 = l[mid];\n        long\
    \ midVal23 = l[mid];\n        long midVal24 = l[mid];\n        long midVal25 =\
    \ l[mid];\n        long midVal26 = l[mid];\n        long midVal27 = l[mid];\n\
    \        long midVal28 = l[mid];\n        long midVal29 = l[mid];\n        long\
    \ midVal30 = l[mid];\n        long midVal31 = l[mid];\n        long midVal32 =\
    \ l[mid];\n        long midVal33 = l[mid];\n        long midVal34 = l[mid];\n\
    \        long midVal35 = l[mid];\n        long midVal36 = l[mid];\n        long\
    \ midVal37 = l[mid];\n        long midVal38 = l[mid];\n        long midVal39 =\
    \ l[mid];\n        long midVal40 = l[mid];\n        long midVal41 = l[mid];\n\
    \        long midVal42 = l[mid];\n        long midVal43 = l[mid];\n        long\
    \ midVal44 = l[mid];\n", "        long max = l.Max();\n        long min = l.Min();\n\
    \        if (min < max) {\n            long mid = min + (max - min) / 2;\n   \
    \         bool isIncreasing = l.TakeWhile(x => x <= mid).All(x => x >= mid);\n\
    \            bool isDecreasing = l.TakeWhile(x => x >= mid).All(x => x <= mid);\n\
    \            return isIncreasing || isDecreasing;\n        }\n        return false;",
  "        if (l.Count < 2) return true;\n        var first = l[0];\n        var last\
    \ = l[l-1];\n        if (first < last) return true;\n        if (first > last)\
    \ return false;\n        var mid = l.Count / 2;\n        var midVal = l[mid];\n\
    \        if (midVal < first) return true;\n        if (midVal > last) return false;\n\
    \        var left = new List<long>(l.Take(mid));\n        var right = new List<long>(l.Skip(mid).Take(l.Count\
    \ - mid));\n        return Monotonic(left) && Monotonic(right);", "        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(", " \
    \       if (l.Count == 0) return true;\n        if (l.Count == 1) return l[0]\
    \ == l[1];\n        long max = l[0];\n        bool isIncreasing = true;\n    \
    \    bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] > max) {\n                isIncreasing = false;\n      \
    \          max = l[i];\n            }\n            if (l[i] < max) {\n       \
    \         isDecreasing = false;\n                max = l[i];\n            }\n\
    \        }\n        if (isIncreasing && isDecreasing) return true;\n        if\
    \ (isIncreasing && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing)\
    \ return true;\n        return false;", "        if (l.Count < 2) return true;\n\
    \        long first = l[0], last = l[l.Count - 1];\n        bool increasing =\
    \ true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < first) increasing = false;\n            if\
    \ (current > last) increasing = false;\n        }\n        return increasing;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l-1];\n        if (first < last) return true;\n        if (first >\
    \ last) return false;\n        long mid = first + ((last - first) / 2);\n    \
    \    if (mid < first) return true;\n        if (mid > last) return false;\n  \
    \      long mid2 = mid + ((last - mid) / 2);\n        if (mid2 < first) return\
    \ true;\n        if (mid2 > last) return false;\n        long mid3 = mid2 + ((last\
    \ - mid2) / 2);\n        if (mid3 < first) return true;\n        if (mid3 > last)\
    \ return false;\n        long mid4 = mid3 + ((last - mid3) / 2);\n        if (mid4\
    \ < first) return true;\n        if (mid4 > last) return false;\n        long\
    \ mid5 = mid4 + ((last - mid4) / 2);\n        if (mid5 < first) return true;\n\
    \        if (mid5 > last) return false;\n        long mid6 = mid5 + ((last - mid5)\
    \ / 2);\n        if (mid6 < first) return true;\n        if (mid6 > last) return\
    \ false;\n        long mid7 = mid6 + ((last - mid6) / 2);\n        if (mid7 <\
    \ first) return true;\n        if (mid7 > last) return false;\n        long mid8\
    \ = mid7 + ((last - mid7) / 2);\n        if (mid8 < first) return true;\n    \
    \    if (mid8 > last) return false;\n        long mid9 = mid8 + ((last - mid8)\
    \ / 2);\n        if (mid9 < first) return true;\n        if (mid9 > last) return\
    \ false;\n        long mid10 = mid9 + ((last - mid9) / 2);\n        if (mid10\
    \ < first) return true;\n        if (mid10 > last) return false;\n        long\
    \ mid11 = mid10 + ((last - mid10) / 2);\n        if (mid11 < first) return true;\n\
    \        if (mid11 > last) return false;\n        long mid12 = mid11 + ((last\
    \ - mid11) / 2);\n        if (mid12 < first) return true;\n        if (mid12 >\
    \ last) return false;\n        long mid13 = mid12 + ((last - mid12) / 2);\n  \
    \      if (mid13 < first) return true;\n        if (mid13 > last) return false;\n\
    \        long mid14 = mid13 + ((last - mid13) / 2);\n        if (mid14 < first)\
    \ return true;\n        if (mid14 > last) return false;\n        long mid15 =\
    \ mid14 + ((last - mid14) / 2);\n        if (mid15 < first) return true;\n   \
    \     if (mid15 > last) return false;\n        long mid16 = mid15 + ((last - mid15)\
    \ / 2);\n        if (mid16 < first) return true;\n        if (mid16 > last) return\
    \ false;\n", "        if (l.Count < 2) return false;\n        long first = l[0];\n\
    \        long last = l[l.Count - 1];\n        long mid = first + (last - first)\
    \ / 2;\n        bool increasing = true;\n        bool decreasing = true;\n   \
    \     bool monotonic = true;\n        foreach (long e in l) {\n            if\
    \ (e < mid) {\n                decreasing = false;\n            } else if (e >\
    \ mid) {\n                increasing = false;\n            } else {\n        \
    \        monotonic = false;\n            }\n        }\n        return increasing\
    \ || decreasing || monotonic;", "        long max = l.Max();\n        long min\
    \ = l.Min();\n        if (min > max) {\n            return false;\n        }\n\
    \        long mid = l.Count / 2;\n        long midVal = l[mid];\n        long\
    \ midVal2 = l[mid+1];\n        long midVal3 = l[mid+2];\n        long midVal4\
    \ = l[mid+3];\n        long midVal5 = l[mid+4];\n        long midVal6 = l[mid+5];\n\
    \        long midVal7 = l[mid+6];\n        long midVal8 = l[mid+7];\n        long\
    \ midVal9 = l[mid+8];\n        long midVal10 = l[mid+9];\n        long midVal11\
    \ = l[mid+10];\n        long midVal12 = l[mid+11];\n        long midVal13 = l[mid+12];\n\
    \        long midVal14 = l[mid+13];\n        long midVal15 = l[mid+14];\n    \
    \    long midVal16 = l[mid+15];\n        long midVal17 = l[mid+16];\n        long\
    \ midVal18 = l[mid+17];\n        long midVal19 = l[mid+18];\n        long midVal20\
    \ = l[mid+19];\n        long midVal21 = l[mid+20];\n        long midVal22 = l[mid+21];\n\
    \        long midVal23 = l[mid+22];\n        long midVal24 = l[mid+23];\n    \
    \    long midVal25 = l[mid+24];\n        long midVal26 = l[mid+25];\n        long\
    \ midVal27 = l[mid+26];\n        long midVal28 = l[mid+27];\n        long midVal29\
    \ = l[mid+28];\n        long midVal30 = l[mid+29];\n        long midVal31 = l[mid+30];\n\
    \        long midVal32 = l[mid+31];\n        long midVal33 = l[mid+32];\n    \
    \    long midVal34 = l[mid+33];\n        long midVal35 = l[mid+34];\n        long\
    \ midVal36 = l[mid+35];\n        long midVal37 = l[mid+36];\n        long midVal38\
    \ = l[mid+37];", "        if (l.Count < 2) return false;\n        long prev =\
    \ l[0];\n        long current = l[1];\n        bool isIncreasing = true;\n   \
    \     for (int i = 2; i < l.Count; i++) {\n            long next = l[i];\n   \
    \         if (next < current) {\n                isIncreasing = false;\n     \
    \       }\n            if (next > current) {\n                return false;\n\
    \            }\n            current = next;\n        }\n        return isIncreasing;",
  "        if (l.Count == 0) return true;\n        var first = l[0];\n        var\
    \ last = l[l.Count - 1];\n        if (first < last) return true;\n        if (first\
    \ > last) return false;\n        var mid = l.Count / 2;\n        var midVal =\
    \ l[mid];\n        if (midVal < first) return Monotonic(l.Take(mid).Concat(l.Skip(mid)));\n\
    \        if (midVal > last) return Monotonic(l.Take(mid).Concat(l.Skip(mid).Reverse()));\n\
    \        return Monotonic(l.Take(mid).Concat(l.Skip(mid).Reverse()).Concat(l.Take(mid)));",
  "        long min = l.Min();\n        long max = l.Max();\n        if (min > max)\
    \ {\n            long tmp = min;\n            min = max;\n            max = tmp;\n\
    \        }\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        foreach (long x in l)\n        {\n            if (x < min)\n        \
    \    {\n                decreasing = false;\n            }\n            else if\
    \ (x > max)\n            {\n                increasing = false;\n            }\n\
    \            else\n            {\n                if (x == min)\n            \
    \    {\n                    decreasing = false;\n                }\n         \
    \       else if (x == max)\n                {\n                    increasing\
    \ = false;\n                }\n                else\n                {\n     \
    \               decreasing = true;\n                    increasing = true;\n \
    \               }\n            }\n        }\n        return increasing || decreasing;",
  "        Debug.Assert(l.Count > 0);\n        if (l.Count == 1) {\n            return\
    \ true;\n        }\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     return isIncreasing && isDecreasing;\n            }\n        }\n       \
    \ return isIncreasing && isDecreasing;", "        if (l.Count == 0) return true;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            long current = l[i];\n            if (current\
    \ < first) {\n                decreasing = false;\n            } else if (current\
    \ > last) {\n                increasing = false;\n            } else {\n     \
    \           if (current < last) {\n                    decreasing = false;\n \
    \               } else {\n                    increasing = true;\n           \
    \     }\n            }\n        }\n        return increasing || decreasing;",
  "        long prev = l.First();\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        foreach (long current in l.Skip(1)) {\n      \
    \      if (current < prev) {\n                isIncreasing = false;\n        \
    \    }\n            if (current > prev) {\n                isDecreasing = false;\n\
    \            }\n            prev = current;\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        if (l.Count == 0) return true;\n        long prev\
    \ = l[0];\n        bool first = true;\n        foreach (long x in l.Skip(1))\n\
    \        {\n            if (first)\n            {\n                first = false;\n\
    \                if (prev < x)\n                    return false;\n          \
    \  }\n            else if (prev > x)\n                return false;\n        \
    \    prev = x;\n        }\n        return true;", "        long first = l.First();\n\
    \        long last = l.Last();\n        if (first < last)\n            return\
    \ true;\n        if (first > last)\n            return false;\n        long mid\
    \ = l.Count / 2;\n        long midValue = l.ElementAt(mid);\n        if (midValue\
    \ < first)\n            return Monotonic(l.Take(mid));\n        if (midValue >\
    \ last)\n            return Monotonic(l.Skip(mid).Take(l.Count - mid - 1));\n\
    \        return Monotonic(l.Take(mid).Concat(l.Skip(mid).Take(l.Count - mid -\
    \ 1)));", "        Debug.Assert(l != null);\n        if (l.Count == 0) return\
    \ true;\n        if (l.Count == 1) return l[0] == l[0];\n        long max = l[0];\n\
    \        long min = l[0];\n        foreach (long x in l)\n        {\n        \
    \    if (x > max) max = x;\n            if (x < min) min = x;\n        }\n   \
    \     if (min > max) return false;\n        long mid = min + (max - min) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l)\n        {\n            if (x > mid)\n            {\n\
    \                if (isDecreasing) return false;\n                isDecreasing\
    \ = true;\n            }\n            else if (x < mid)\n            {\n     \
    \           if (isIncreasing) return false;\n                isIncreasing = true;\n\
    \            }\n            else\n            {\n                if (isIncreasing\
    \ && isDecreasing) return true;\n                if (isIncreasing) return true;\n\
    \                if (isDecreasing) return false;\n            }\n        }\n \
    \       return false;", "        if (l.Count < 2) return true;\n        long prev\
    \ = l[0];\n        long current = l[1];\n        long next = 0;\n        bool\
    \ increasing = true;\n        for (int i = 2; i < l.Count; i++) {\n          \
    \  next = l[i];\n            if (current < next) {\n                increasing\
    \ = false;\n            }\n            current = next;\n        }\n        return\
    \ increasing;", "        if (l.Count == 0) return true;\n        long first =\
    \ l[0];\n        long last = l[l.Count - 1];\n        if (first > last) return\
    \ true;\n        if (first == last) return true;\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        long mid = first + (last - first) /\
    \ 2;\n        foreach (long x in l.Skip(1)) {\n            if (x > mid) decreasing\
    \ = false;\n            else if (x < mid) increasing = false;\n            else\
    \ if (x == mid) break;\n            else mid = x;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        foreach (long x in l.Skip(1))\n\
    \        {\n            if (x > mid)\n            {\n                isIncreasing\
    \ = false;\n            }\n            else if (x < mid)\n            {\n    \
    \            isDecreasing = false;\n            }\n            else\n        \
    \    {\n                isMonotonic = false;\n            }\n        }\n     \
    \   return isIncreasing || isDecreasing || isMonotonic;", "        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            } else if (l[i] > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;"]
stop_tokens:
- "\n    }\n"
