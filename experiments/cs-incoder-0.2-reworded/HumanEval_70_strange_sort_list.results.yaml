language: cs
name: HumanEval_70_strange_sort_list
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        foreach\
    \ (long i in lst) {\n            if (i < mid) {\n                temp = i;\n \
    \           } else if (i > mid) {\n                temp = mid;\n            }\
    \ else {\n                temp = mid;\n            }\n            result.Add(temp);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe4d47c3f9f74463b704f51988880935>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe4d47c3f9f74463b704f51988880935>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid49 = mid\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzh93o2dw.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < min) result.Add(min);\n\
    \            if (i > max) result.Add(max);\n            result.Add(i);\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e61795c57ea4cfda9f632d29631cbe9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e61795c57ea4cfda9f632d29631cbe9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long currentValue = minValue;\n\
    \        long currentIndex = minIndex;\n        bool isFirst = true;\n       \
    \ bool isLast = true;\n        bool isMiddle = true;\n        bool isFirstMiddle\
    \ = true;\n        bool isLastMiddle = true;\n        bool isMiddleMiddle = true;\n\
    \        bool isFirstLast = true;\n        bool isLastLast = true;\n        bool\
    \ isMiddleLast = true;\n        bool isFirstMiddleLast = true;\n        bool isLastMiddleLast\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLast\
    \ = true;\n        bool isLastLastLast = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4twvpq39.cs(41,14): error CS0128: A local variable or function named ''isMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(44,14): error CS0128: A local variable or function named ''isMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(46,14): error CS0128: A local variable or function named ''isLastLastMiddle''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(47,14): error CS0128: A local variable or function named ''isMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(48,14): error CS0128: A local variable or function named ''isFirstLastLastMiddle''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(49,14): error CS0128: A local variable or function named ''isLastLastMiddle''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(50,14): error CS0128: A local variable or function named ''isMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(51,14): error CS0128: A local variable or function named ''isFirstLastLastMiddle''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(52,14): error CS0128: A local variable or function named ''isLastLastMiddle''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(53,14): error CS0128: A local variable or function named ''isMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(54,14): error CS0128: A local variable or function named ''isFirstLastLastMiddle''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(55,14): error CS0128: A local variable or function named ''isLastLastMiddle''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(56,14): error CS0128: A local variable or function named ''isMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(57,14): error CS0128: A local variable or function named ''isFirstLastLastMiddle''
    is already defined in this scope

    /tmp/tmp4twvpq39.cs(58,14): error CS0128: A local variable or function named ''isLas'
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long cur = min;\n        long next = max;\n\
    \        while (cur != next) {\n            result.Add(cur);\n            next\
    \ = cur;\n            cur = next;\n            while (cur != min && cur != max)\
    \ {\n                next = cur;\n                cur = next;\n            }\n\
    \            next = cur;\n            cur = next;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7de1a5096ec240c69392d904f4feddff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7de1a5096ec240c69392d904f4feddff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        long nextCurrent = current;\n \
    \       long nextNextMax = nextMax;\n        long nextNextMin = nextMin;\n   \
    \     long nextNextCurrent = nextCurrent;\n        long nextNextNextMax = nextNextMax;\n\
    \        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurrent\
    \ = nextNextCurrent;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurrent\
    \ = nextNextNextCurrent;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurrent\
    \ = nextNextNextNextCurrent;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n      \
    \  long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNext\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw60kl370.cs(53,64): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92dzdmd6.cs(74,17): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long cur = min;\n        bool isFirst = true;\n      \
    \  foreach (long i in lst) {\n            if (isFirst) {\n                result.Add(cur);\n\
    \                isFirst = false;\n            }\n            if (i > cur) {\n\
    \                result.Add(cur);\n                cur = i;\n            } else\
    \ {\n                cur = i;\n            }\n        }\n        result.Add(cur);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7b2ec33fd22464998683b5fd8068355>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7b2ec33fd22464998683b5fd8068355>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long previous\
    \ = min;\n        foreach (long value in lst) {\n            if (value < current)\
    \ {\n                result.Add(previous);\n                previous = current;\n\
    \                current = value;\n            } else if (value > current) {\n\
    \                result.Add(current);\n                current = value;\n    \
    \        } else {\n                result.Add(value);\n            }\n       \
    \ }\n        result.Add(previous);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21a2de1f235345c1acfd915b7f0ef7ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21a2de1f235345c1acfd915b7f0ef7ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long middle = min + (max - min) / 2;\n\
    \        List<long> result = new List<long>();\n        foreach (long n in lst)\
    \ {\n            if (n < middle) result.Add(n);\n            else if (n > middle)\
    \ result.Add(middle);\n            else result.Add(middle);\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0de13944cadd463089584362460c1774>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0de13944cadd463089584362460c1774>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool isFirst = true;\n        foreach (long i in lst) {\n            if\
    \ (isFirst) {\n                isFirst = false;\n                result.Add(i);\n\
    \            } else {\n                if (i > mid) {\n                    result.Add(i);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphrnh83kl.cs(104,32): error CS1026: ) expected

    /tmp/tmphrnh83kl.cs(104,32): error CS1002: ; expected

    /tmp/tmphrnh83kl.cs(106,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmphrnh83kl.cs(118,2): error CS1513: } expected

    '
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        bool first = true;\n        foreach\
    \ (long i in lst) {\n            if (first) {\n                first = false;\n\
    \                result.Add(i);\n            } else {\n                if (current\
    \ > nextMax) {\n                    result.Add(nextMax);\n                   \
    \ nextMax = max;\n                    nextMin = min;\n                } else if\
    \ (current < nextMin) {\n                    result.Add(nextMin);\n          \
    \          nextMax = max;\n                    nextMin = min;\n              \
    \  } else {\n                    result.Add(current);\n                    nextMax\
    \ = max;\n                    nextMin = min;\n                }\n            }\n\
    \            current = i;\n        }\n        result.Add(nextMax);\n        result.Add(nextMin);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd242bcd85a744ae9715fff5957a5308>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd242bcd85a744ae9715fff5957a5308>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            }\n            else if (i > mid) {\n\
    \                temp = mid;\n            }\n            else {\n            \
    \    temp = mid;\n            }\n            result.Add(temp);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long previous\
    \ = min;\n        foreach (long i in lst) {\n            if (i > current) {\n\
    \                result.Add(current);\n                current = previous;\n \
    \           }\n            previous = current;\n            current = i;\n   \
    \     }\n        result.Add(current);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68008dd6488f4fd9a648f8aabcca3e66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68008dd6488f4fd9a648f8aabcca3e66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in lst) {\n            if (i < mid)\n                result.Add(i);\n    \
    \        else if (i > mid)\n                result.Add(mid);\n            else\n\
    \                result.Add(mid);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ea33b53e72c47fd85992d0549467dbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ea33b53e72c47fd85992d0549467dbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        result.Add(mid);\n\
    \        foreach (long num in lst) {\n            if (num < mid)\n           \
    \     result.Add(num);\n            else if (num > mid)\n                result.Add(mid);\n\
    \            else\n                result.Add(num);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c786ef24d61843b3ba947a59467cbe76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c786ef24d61843b3ba947a59467cbe76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        bool isFirst = true;\n   \
    \     foreach (long i in lst) {\n            if (isFirst) {\n                result.Add(i);\n\
    \                isFirst = false;\n            } else {\n                if (i\
    \ < mid) {\n                    result.Add(i);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                } else {\n                    result.Add(mid);\n            \
    \        result.Add(i);\n                    result.Add(max);\n              \
    \      result.Add(min);\n                }\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7d1bf0d3f14e4f3692b13f1a1da90262>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7d1bf0d3f14e4f3692b13f1a1da90262>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      List<long> result = new List<long>();\n        long current = mid;\n  \
    \      while (current != min) {\n            result.Add(current);\n          \
    \  current += 1;\n        }\n        current = mid;\n        while (current !=\
    \ max) {\n            result.Add(current);\n            current -= 1;\n      \
    \  }\n        current = mid;\n        while (current != min) {\n            result.Add(current);\n\
    \            current += 1;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long num in lst) {\n            if (num <\
    \ mid) {\n                temp = num;\n            } else if (num > mid) {\n \
    \               temp = mid;\n            } else {\n                temp = mid;\n\
    \            }\n            result.Add(temp);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b928abc99350487fa831a252bc479ddc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b928abc99350487fa831a252bc479ddc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      foreach (long i in lst) {\n            if (i < mid) {\n               \
    \ result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        long min = lst.Min();\n        long max = lst.Max();\n     \
    \   List<long> result = new List<long>();\n        foreach (long i in lst) {\n\
    \            if (i < min) result.Add(min);\n            if (i > max) result.Add(max);\n\
    \            result.Add(i);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d337c93056af43b7ba4631a4c1027f8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d337c93056af43b7ba4631a4c1027f8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long currentMinValue\
    \ = minValue;\n        long currentMaxValue = maxValue;\n        long currentMinIndex\
    \ = 0;\n        long currentMaxIndex = 0;\n        bool isFirst = true;\n    \
    \    bool isLast = true;\n        bool isMiddle = true;\n        bool isFirstMiddle\
    \ = true;\n        bool isLastMiddle = true;\n        bool isMiddleMiddle = true;\n\
    \        bool isFirstLast = true;\n        bool isLastLast = true;\n        bool\
    \ isMiddleLast = true;\n        bool isFirstMiddleLast = true;\n        bool isLastMiddleLast\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLast\
    \ = true;\n        bool isLastLastLast = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddleMiddle = true;\n        bool isLastLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleMiddle\
    \ = true;\n        bool isLastLastLastMiddleMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddleMiddle = true;\n        bool isLastLastLastMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleMiddle\
    \ = true;\n        bool isLastLastLastMiddleMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddleMiddle = true;\n        bool isLastLastLastMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleMiddle\
    \ = true;\n        bool isLastLastLastMiddleMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddleMiddle = true;\n        bool isLastLastLastMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleMiddle\
    \ = true;\n        bool isLastLastLastMiddleMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddleMiddle = true;\n        bool isLastLastLastMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleMiddle\
    \ = true;\n        bool isLastLastLastMiddleMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddleMiddle = true;\n        bool isLastLastLastMiddleMiddle\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwo4qgx0h.cs(79,40): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        long min = lst.Min();\n        long max = lst.Max();\n     \
    \   List<long> result = new List<long>();\n        long cur = min;\n        long\
    \ next = cur;\n        long curMax = max;\n        long curMin = min;\n      \
    \  long nextMax = curMax;\n        long nextMin = curMin;\n        while (cur\
    \ < next) {\n            result.Add(cur);\n            cur = next;\n         \
    \   next = cur;\n            if (cur < curMax) {\n                cur = cur +\
    \ 1;\n                next = cur;\n            }\n            if (cur > curMin)\
    \ {\n                cur = cur - 1;\n                next = cur;\n           \
    \ }\n            if (cur < nextMax) {\n                cur = cur + 1;\n      \
    \          next = cur;\n            }\n            if (cur > nextMin) {\n    \
    \            cur = cur - 1;\n                next = cur;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2add0c88fa244b5a67e2a0677e5fb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2add0c88fa244b5a67e2a0677e5fb59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        result.Add(mid);\n\
    \        List<long> rest = StrangeSortList(lst.Where(x => x != mid).ToList());\n\
    \        result.AddRange(rest);\n        result.Add(mid);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659798879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid49 = mid\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzh93o2dw.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        bool first\
    \ = true;\n        foreach (long i in lst) {\n            if (first) {\n     \
    \           first = false;\n                current = i;\n            }\n    \
    \        if (current > i) {\n                result.Add(current);\n          \
    \      current = i;\n            }\n        }\n        result.Add(current);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c111c5ce427a41ba8d13e42521a59b5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c111c5ce427a41ba8d13e42521a59b5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        do {\n            result.Add(current);\n\
    \            current = (nextMax + nextMin) / 2;\n            nextMax = current;\n\
    \            nextMin = current;\n        } while (current != max);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659798879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp = mid;\n        foreach (long i in lst) {\n            if (i\
    \ < mid) {\n                result.Add(temp);\n                temp = i;\n   \
    \         }\n            if (i > mid) {\n                result.Add(temp);\n \
    \               temp = i;\n            }\n        }\n        result.Add(temp);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70961ebcad584366beaca9540bf6dd18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70961ebcad584366beaca9540bf6dd18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      foreach (long i in lst) {\n            if (i < mid) {\n               \
    \ result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        long mid2 =\
    \ mid + (max - min) / 2;\n        result.Add(min);\n        result.Add(mid);\n\
    \        result.Add(mid2);\n        result.Add(max);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd95424ffbad4f70a63b4dea5921ae27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd95424ffbad4f70a63b4dea5921ae27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        long temp;\n\
    \        foreach (long i in lst) {\n            if (i < mid)\n               \
    \ temp = i;\n            else if (i > mid)\n                temp = mid;\n    \
    \        else\n                temp = mid;\n            result.Add(temp);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab486cb185ed4751a92de1bfef032aa7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab486cb185ed4751a92de1bfef032aa7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.FindIndex(x\
    \ => x == minValue);\n        long maxIndex = lst.FindIndex(x => x == maxValue);\n\
    \        long minIndex2 = lst.FindIndex(x => x == minValue);\n        long maxIndex2\
    \ = lst.FindIndex(x => x == maxValue);\n        long minIndex3 = lst.FindIndex(x\
    \ => x == minValue);\n        long maxIndex3 = lst.FindIndex(x => x == maxValue);\n\
    \        long minIndex4 = lst.FindIndex(x => x == minValue);\n        long maxIndex4\
    \ = lst.FindIndex(x => x == maxValue);\n        long minIndex5 = lst.FindIndex(x\
    \ => x == minValue);\n        long maxIndex5 = lst.FindIndex(x => x == maxValue);\n\
    \        long minIndex6 = lst.FindIndex(x => x == minValue);\n        long maxIndex6\
    \ = lst.FindIndex(x => x == maxValue);\n        long minIndex7 = lst.FindIndex(x\
    \ => x == minValue);\n        long maxIndex7 = lst.FindIndex(x => x == maxValue);\n\
    \        long minIndex8 = lst.FindIndex(x => x == minValue);\n        long maxIndex8\
    \ = lst.FindIndex(x => x == maxValue);\n        long minIndex9 = lst.FindIndex(x\
    \ => x == minValue);\n        long maxIndex9 = lst.FindIndex(x => x == maxValue);\n\
    \        long minIndex10 = lst.FindIndex(x => x == minValue);\n        long maxIndex10\
    \ = lst.FindIndex(x => x == maxValue);\n        long minIndex11 = lst.FindIndex(x\
    \ => x == minValue);\n        long maxIndex11 = lst.FindIndex(x => x == maxValue);\n\
    \        long minIndex12 = lst.FindIndex(x => x == minValue);\n        long maxIndex12\
    \ = lst.FindIndex(x => x == maxValue);\n        long minIndex13 = lst.FindIndex(x\
    \ => x == minValue);\n        long maxIndex13 = lst.FindIndex(x => x == maxValue);\n\
    \        long minIndex14 = lst.FindIndex(x => x == minValue);\n        long maxIndex14\
    \ = lst.FindIndex(x => x == maxValue);\n        long minIndex15 = lst.FindIndex(x\
    \ => x == minValue);\n        long maxIndex15 = lst.FindIndex(x => x == maxValue);\n\
    \        long minIndex16 = lst.FindIndex(x => x == minValue);\n        long maxIndex16\
    \ = lst.FindIndex(x => x == max\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq9scn9hi.cs(54,54): error CS1026: ) expected

    /tmp/tmpq9scn9hi.cs(54,54): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ lst2 = new List<long>();\n        long min = lst.Min();\n        long max =\
    \ lst.Max();\n        long mid = min + (max - min) / 2;\n        lst2.Add(min);\n\
    \        lst2.Add(mid);\n        lst2.Add(max);\n        lst2.AddRange(lst);\n\
    \        lst2.RemoveAt(0);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - 1);\n        lst2.RemoveAt(lst2.Count\
    \ - 1);\n        lst2.RemoveAt(lst2.Count - \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp95r91mmt.cs(69,35): error CS1525: Invalid expression term ''}''

    /tmp/tmp95r91mmt.cs(69,35): error CS1026: ) expected

    /tmp/tmp95r91mmt.cs(69,35): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long cur = min;\n        long next = max;\n        while (cur < next)\
    \ {\n            result.Add(cur);\n            cur++;\n            next = cur;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <382ddd7db6b14e4fbfcb4a633d7ad032>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <382ddd7db6b14e4fbfcb4a633d7ad032>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long min2 = lst.Min(x => x);\n        long max2 = lst.Max(x => x);\n  \
    \      long mid2 = min2 + (max2 - min2) / 2;\n        long mid3 = min2 + (max2\
    \ - min2) / 3;\n        long mid4 = min2 + (max2 - min2) / 4;\n        long mid5\
    \ = min2 + (max2 - min2) / 5;\n        long mid6 = min2 + (max2 - min2) / 6;\n\
    \        long mid7 = min2 + (max2 - min2) / 7;\n        long mid8 = min2 + (max2\
    \ - min2) / 8;\n        long mid9 = min2 + (max2 - min2) / 9;\n        long mid10\
    \ = min2 + (max2 - min2) / 10;\n        long mid11 = min2 + (max2 - min2) / 11;\n\
    \        long mid12 = min2 + (max2 - min2) / 12;\n        long mid13 = min2 +\
    \ (max2 - min2) / 13;\n        long mid14 = min2 + (max2 - min2) / 14;\n     \
    \   long mid15 = min2 + (max2 - min2) / 15;\n        long mid16 = min2 + (max2\
    \ - min2) / 16;\n        long mid17 = min2 + (max2 - min2) / 17;\n        long\
    \ mid18 = min2 + (max2 - min2) / 18;\n        long mid19 = min2 + (max2 - min2)\
    \ / 19;\n        long mid20 = min2 + (max2 - min2) / 20;\n        long mid21 =\
    \ min2 + (max2 - min2) / 21;\n        long mid22 = min2 + (max2 - min2) / 22;\n\
    \        long mid23 = min2 + (max2 - min2) / 23;\n        long mid24 = min2 +\
    \ (max2 - min2) / 24;\n        long mid25 = min2 + (max2 - min2) / 25;\n     \
    \   long mid26 = min2 + (max2 - min2) / 26;\n        long mid27 = min2 + (max2\
    \ - min2) / 27;\n        long mid28 = min2 + (max2 - min2) / 28;\n        long\
    \ mid29 = min2 + (max2 - min2) / 29;\n        long mid30 = min2 + (max2 - min2)\
    \ / 30;\n        long mid31 = min2 + (max2 - min2) / 31;\n        long mid32 =\
    \ min2 + (max2 - min2) / 32;\n        long mid33 = min2 + (max2 - min2) / 33;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_exes6vj.cs(19,30): error CS0161: ''Problem.StrangeSortList(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMin\
    \ = min;\n        long nextMax = max;\n        bool isFirst = true;\n        bool\
    \ isLast = true;\n        bool isMiddle = true;\n        bool isMiddleMiddle =\
    \ true;\n        bool isMiddleLast = true;\n        bool isLastMiddle = true;\n\
    \        bool isLastLast = true;\n        bool isLastFirst = true;\n        bool\
    \ isFirstMiddle = true;\n        bool isFirstLast = true;\n        bool isFirstMiddleMiddle\
    \ = true;\n        bool isFirstMiddleLast = true;\n        bool isFirstLastMiddle\
    \ = true;\n        bool isFirstLastLast = true;\n        bool isFirstLastFirst\
    \ = true;\n        bool isFirstMiddleMiddleFirst = true;\n        bool isFirstMiddleMiddleLast\
    \ = true;\n        bool isFirstMiddleLastLast = true;\n        bool isFirstLastMiddleMiddle\
    \ = true;\n        bool isFirstLastMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isFirstLastLastLast = true;\n        bool isFirstLastFirstMiddle\
    \ = true;\n        bool isFirstLastFirstLast = true;\n        bool isFirstLastFirstMiddleMiddle\
    \ = true;\n        bool isFirstLastFirstLastMiddle = true;\n        bool isFirstLastFirstLastLast\
    \ = true;\n        bool isFirstLastFirstLastMiddleMiddle = true;\n        bool\
    \ isFirstLastFirstLastLastMiddleMiddle = true;\n        bool isFirstLastFirstLastLastMiddleMiddle\
    \ = true;\n        bool isFirstLastFirstLastLastMiddleMiddle = true;\n       \
    \ bool isFirstLastFirstLastLastMiddleMiddle = true;\n        bool isFirstLastFirstLastLastMiddleMiddle\
    \ = true;\n        bool isFirstLastFirstLastLastMiddleMiddle = true;\n       \
    \ bool isFirstLastFirstLastLastMiddleMiddle = true;\n        bool isFirstLastFirstLastLastMiddleMiddle\
    \ = true;\n        bool isFirstLastFirstLastLastMiddleMiddle = true;\n       \
    \ bool isFirstLastFirstLastLastMiddleMiddle = true;\n        bool isFirstLastFirstLastLastMiddleMiddle\
    \ = true;\n        bool isFirstLastFirstLastLastMiddleMiddle = true;\n       \
    \ bool isFirstLastFirstLastLastMiddleMiddle = true;\n        bool isFirstLastFirstLastLastMiddleMiddle\
    \ = true;\n        bool isFirstLastFirstLastLastMiddleMiddle = true;\n       \
    \ bool isFirstLastFirstLastLastMiddleMiddle = true;\n        bool isFirstLastFirstLastLastMiddleMiddle\
    \ = true;\n        bool isFirstLastFirstLastLastMiddleMiddle = true;\n       \
    \ bool isFirstLastFirstLastLastMiddleMiddle = true;\n        bool isFirstLastFirstLast\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi6udrvv8.cs(73,34): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool swap = false;\n        foreach (long i in lst) {\n            if (i\
    \ < mid) {\n                result.Add(i);\n                swap = true;\n   \
    \         } else if (i > mid) {\n                result.Add(mid);\n          \
    \      swap = true;\n            } else {\n                result.Add(mid);\n\
    \                swap = false;\n            }\n        }\n        if (swap) {\n\
    \            foreach (long i in result) {\n                long temp = i;\n  \
    \              i = lst.IndexOf(i);\n                lst[i] = temp;\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt7tghhwr.cs(40,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    /tmp/tmpt7tghhwr.cs(41,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long mid50 = mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmply6w1ani.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long cur = min;\n        while (cur < max) {\n      \
    \      result.Add(cur);\n            cur++;\n        }\n        foreach (long\
    \ val in lst) {\n            if (val < min)\n                result.Insert(0,\
    \ val);\n            else if (val > max)\n                result.Add(val);\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74d51b3a183740708637902e8960fba9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74d51b3a183740708637902e8960fba9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long curr = min;\n        while (curr\
    \ <= max) {\n            result.Add(curr);\n            curr++;\n        }\n \
    \       foreach (long val in lst) {\n            if (val < min) {\n          \
    \      result.Insert(0, min);\n            }\n            if (val > max) {\n \
    \               result.Add(max);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6896cc49863c4c9386a97c30d2666d9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6896cc49863c4c9386a97c30d2666d9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        long mid2 =\
    \ mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n   \
    \     long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n     \
    \   long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n        long mid47\
    \ = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49 = \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7oh6i5is.cs(73,21): error CS1525: Invalid expression term ''}''

    /tmp/tmp7oh6i5is.cs(73,21): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        bool isFirst = true;\n        bool\
    \ isLast = true;\n        bool isMiddle = true;\n        bool isFirstMiddle =\
    \ true;\n        bool isLastMiddle = true;\n        bool isFirstLast = true;\n\
    \        bool isMiddleMiddle = true;\n        bool isLastLast = true;\n      \
    \  bool isFirstMiddleMiddle = true;\n        bool isLastMiddleMiddle = true;\n\
    \        bool isFirstLastMiddle = true;\n        bool isMiddleLast = true;\n \
    \       bool isLastLast = true;\n        bool isFirstLastLast = true;\n      \
    \  bool isMiddleMiddleLast = true;\n        bool isLastMiddleMiddleLast = true;\n\
    \        bool isFirstMiddleMiddleLast = true;\n        bool isLastMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastMiddleMiddleLast\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastMiddleMiddleLast\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastMiddleMiddleLast\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastMiddleMiddleLast\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvh0lgtd0.cs(38,14): error CS0128: A local variable or function named ''isLastLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(43,14): error CS0128: A local variable or function named ''isLastMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(48,14): error CS0128: A local variable or function named ''isLastMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(49,14): error CS0128: A local variable or function named ''isFirstLastMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(51,14): error CS0128: A local variable or function named ''isLastMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(52,14): error CS0128: A local variable or function named ''isFirstMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(53,14): error CS0128: A local variable or function named ''isLastMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(54,14): error CS0128: A local variable or function named ''isFirstLastMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(55,14): error CS0128: A local variable or function named ''isMiddleMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(56,14): error CS0128: A local variable or function named ''isLastMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(57,14): error CS0128: A local variable or function named ''isFirstMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(58,14): error CS0128: A local variable or function named ''isLastMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(59,14): error CS0128: A local variable or function named ''isFirstLastMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpvh0lgtd0.cs(60,14): error CS0128: A local variable or function named ''isMiddleMiddleMiddleMiddleLast''
    i'
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      foreach (long i in lst) {\n            if (i < mid) {\n               \
    \ result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d1c3556e384497db46ab215eacdd568>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d1c3556e384497db46ab215eacdd568>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        bool isMax = true;\n     \
    \   bool isMin = true;\n        bool isMid = true;\n        bool isAll = true;\n\
    \        bool isAll2 = true;\n        bool isAll3 = true;\n        bool isAll4\
    \ = true;\n        bool isAll5 = true;\n        bool isAll6 = true;\n        bool\
    \ isAll7 = true;\n        bool isAll8 = true;\n        bool isAll9 = true;\n \
    \       bool isAll10 = true;\n        bool isAll11 = true;\n        bool isAll12\
    \ = true;\n        bool isAll13 = true;\n        bool isAll14 = true;\n      \
    \  bool isAll15 = true;\n        bool isAll16 = true;\n        bool isAll17 =\
    \ true;\n        bool isAll18 = true;\n        bool isAll19 = true;\n        bool\
    \ isAll20 = true;\n        bool isAll21 = true;\n        bool isAll22 = true;\n\
    \        bool isAll23 = true;\n        bool isAll24 = true;\n        bool isAll25\
    \ = true;\n        bool isAll26 = true;\n        bool isAll27 = true;\n      \
    \  bool isAll28 = true;\n        bool isAll29 = true;\n        bool isAll30 =\
    \ true;\n        bool isAll31 = true;\n        bool isAll32 = true;\n        bool\
    \ isAll33 = true;\n        bool isAll34 = true;\n        bool isAll35 = true;\n\
    \        bool isAll36 = true;\n        bool isAll37 = true;\n        bool isAll38\
    \ = true;\n        bool isAll39 = true;\n        bool isAll40 = true;\n      \
    \  bool isAll41 = true;\n        bool isAll42 = true;\n        bool isAll43 =\
    \ true;\n        bool isAll44 = true;\n        bool isAll45 = true;\n        bool\
    \ isAll46 = true;\n        bool isAll47 = true;\n        bool isAll48 = true;\n\
    \        bool isAll49 = true;\n        bool isAll50 = true;\n        bool isAll51\
    \ = true;\n        bool isAll52 = true;\n        bool isAll53 = true;\n      \
    \  bool isAll54 = true;\n        bool isAll55 = true;\n        bool isAll56 =\
    \ true;\n        bool isAll57 = true;\n        bool isAll58 = true;\n        bool\
    \ isAll59 = true;\n        bool isAll60 = true;\n        bool isAll61 = true;\n\
    \        bool isAll62 = true;\n        bool \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsn6ifzs9.cs(90,13): error CS1001: Identifier expected

    /tmp/tmpsn6ifzs9.cs(90,13): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        List<long> result = new List<long>();\n        foreach (long\
    \ n in lst) {\n            if (n < mid)\n                result.Add(n);\n    \
    \        else if (n > mid)\n                result.Add(mid);\n            else\n\
    \                result.Add(mid);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60fd9e60b6ef418f9418c19c600df15e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60fd9e60b6ef418f9418c19c600df15e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long cur = min;\n        while (cur < max) {\n      \
    \      result.Add(cur);\n            cur++;\n        }\n        foreach (long\
    \ val in lst) {\n            if (val < min)\n                result.Add(val);\n\
    \            else if (val > max)\n                result.Add(val);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69b84d013b254cd79447925dd35035ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69b84d013b254cd79447925dd35035ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        long nextCurrent = current;\n \
    \       long nextNextMax = nextMax;\n        long nextNextMin = nextMin;\n   \
    \     long nextNextCurrent = nextCurrent;\n        long nextNextNextMax = nextNextMax;\n\
    \        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurrent\
    \ = nextNextCurrent;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurrent\
    \ = nextNextNextCurrent;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurrent\
    \ = nextNextNextNextCurrent;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n      \
    \  long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNext\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpezva_brz.cs(53,30): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long middle = min + (max - min) / 2;\n        long middle2 = middle +\
    \ 1;\n        long middle3 = middle2 + 1;\n        long middle4 = middle3 + 1;\n\
    \        long middle5 = middle4 + 1;\n        long middle6 = middle5 + 1;\n  \
    \      long middle7 = middle6 + 1;\n        long middle8 = middle7 + 1;\n    \
    \    long middle9 = middle8 + 1;\n        long middle10 = middle9 + 1;\n     \
    \   long middle11 = middle10 + 1;\n        long middle12 = middle11 + 1;\n   \
    \     long middle13 = middle12 + 1;\n        long middle14 = middle13 + 1;\n \
    \       long middle15 = middle14 + 1;\n        long middle16 = middle15 + 1;\n\
    \        long middle17 = middle16 + 1;\n        long middle18 = middle17 + 1;\n\
    \        long middle19 = middle18 + 1;\n        long middle20 = middle19 + 1;\n\
    \        long middle21 = middle20 + 1;\n        long middle22 = middle21 + 1;\n\
    \        long middle23 = middle22 + 1;\n        long middle24 = middle23 + 1;\n\
    \        long middle25 = middle24 + 1;\n        long middle26 = middle25 + 1;\n\
    \        long middle27 = middle26 + 1;\n        long middle28 = middle27 + 1;\n\
    \        long middle29 = middle28 + 1;\n        long middle30 = middle29 + 1;\n\
    \        long middle31 = middle30 + 1;\n        long middle32 = middle31 + 1;\n\
    \        long middle33 = middle32 + 1;\n        long middle34 = middle33 + 1;\n\
    \        long middle35 = middle34 + 1;\n        long middle36 = middle35 + 1;\n\
    \        long middle37 = middle36 + 1;\n        long middle38 = middle37 + 1;\n\
    \        long middle39 = middle38 + 1;\n        long middle40 = middle39 + 1;\n\
    \        long middle41 = middle40 + 1;\n        long middle42 = middle41 + 1;\n\
    \        long middle43 = middle42 + 1;\n        long middle44 = middle43 + 1;\n\
    \        long middle45 = middle44 + 1;\n        long middle46 = middle45 + 1;\n\
    \        long middle47 = middle46 + 1;\n        long middle48 = middle47 + 1;\n\
    \        long middle49 = middle48 + 1;\n        long middle50 = middle49 + 1;\n\
    \        long middle51 = middle50 + 1;\n        long middle52 = middle51 + 1;\n\
    \        long middle53 = middle52 + 1;\n        long middle54\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpycecgvrf.cs(77,22): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long temp;\n        foreach (long i in lst) {\n     \
    \       if (i == min)\n                temp = min;\n            else if (i ==\
    \ max)\n                temp = max;\n            else\n                temp =\
    \ i;\n            result.Add(temp);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fca4720243cd41838b976a220acb6427>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fca4720243cd41838b976a220acb6427>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long cur = min;\n        while (cur <= max) {\n            result.Add(cur);\n\
    \            cur++;\n        }\n        foreach (long val in lst) {\n        \
    \    if (val < min) result.Remove(min);\n            if (val > max) result.Remove(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0bff7ccac71d4e36b709c4fd9854b5a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0bff7ccac71d4e36b709c4fd9854b5a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            }\n            else if (i > mid) {\n\
    \                temp = mid;\n            }\n            else {\n            \
    \    temp = mid;\n            }\n            result.Add(temp);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long temp;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i == minIndex) {\n      \
    \          temp = lst[i];\n                lst[i] = lst[maxIndex];\n         \
    \       lst[maxIndex] = temp;\n            } else if (i == maxIndex) {\n     \
    \           temp = lst[i];\n                lst[i] = lst[minIndex];\n        \
    \        lst[minIndex] = temp;\n            }\n            result.Add(lst[i]);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgovv06ln.cs(29,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgovv06ln.cs(30,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgovv06ln.cs(33,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgovv06ln.cs(34,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool isMin = true;\n        bool isMax = true;\n        bool isMid = true;\n\
    \        long temp;\n        foreach (long i in lst) {\n            if (i == mid)\
    \ {\n                isMid = false;\n                isMin = true;\n         \
    \       isMax = true;\n                result.Add(mid);\n                mid =\
    \ min + (max - min) / 2;\n            }\n            if (i == min) {\n       \
    \         isMin = false;\n                isMax = true;\n                isMid\
    \ = true;\n                result.Add(min);\n                min = lst.Min();\n\
    \            }\n            if (i == max) {\n                isMax = false;\n\
    \                isMid = true;\n                isMin = true;\n              \
    \  result.Add(max);\n                max = lst.Max();\n            }\n       \
    \     if (isMid) {\n                temp = i;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07e550a64a6e4d4a84e7980ae778da5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07e550a64a6e4d4a84e7980ae778da5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        List<long> lst2 = new List<long>();\n        lst2.Add(min);\n\
    \        lst2.Add(mid);\n        lst2.Add(max);\n        lst2.AddRange(lst);\n\
    \        lst2.Sort();\n        return lst2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba3b7eabd0e346cfb7c2fa289f084b8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba3b7eabd0e346cfb7c2fa289f084b8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool isMax = true;\n        bool isMin = true;\n        foreach (long i\
    \ in lst) {\n            if (i < mid) {\n                result.Add(i);\n    \
    \            isMin = false;\n            }\n            if (i > mid) {\n     \
    \           result.Add(i);\n                isMax = false;\n            }\n  \
    \      }\n        if (isMax) {\n            result.Add(max);\n        }\n    \
    \    if (isMin) {\n            result.Add(min);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e5e361af32848dba523e3394270040b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e5e361af32848dba523e3394270040b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool isEven = lst.Count() % 2 == 0;\n        bool isOdd = lst.Count() %\
    \ 2 != 0;\n        bool isFirst = true;\n        bool isLast = true;\n       \
    \ bool isMiddle = true;\n        bool isFirstOdd = true;\n        bool isLastOdd\
    \ = true;\n        bool isMiddleOdd = true;\n        bool isFirstEven = true;\n\
    \        bool isLastEven = true;\n        bool isMiddleEven = true;\n        bool\
    \ isFirstOddEven = true;\n        bool isLastOddEven = true;\n        bool isMiddleOddEven\
    \ = true;\n        bool isFirstOddOdd = true;\n        bool isLastOddOdd = true;\n\
    \        bool isMiddleOddOdd = true;\n        bool isFirstEvenOdd = true;\n  \
    \      bool isLastEvenOdd = true;\n        bool isMiddleEvenOdd = true;\n    \
    \    bool isFirstOddEvenOdd = true;\n        bool isLastOddEvenOdd = true;\n \
    \       bool isMiddleOddEvenOdd = true;\n        bool isFirstOddOddOdd = true;\n\
    \        bool isLastOddOddOdd = true;\n        bool isMiddleOddOddOdd = true;\n\
    \        bool isFirstEvenEvenOdd = true;\n        bool isLastEvenEvenOdd = true;\n\
    \        bool isMiddleEvenEvenOdd = true;\n        bool isFirstOddEvenEvenOdd\
    \ = true;\n        bool isLastOddEvenEvenOdd = true;\n        bool isMiddleOddEvenEvenOdd\
    \ = true;\n        bool isFirstOddOddEvenOdd = true;\n        bool isLastOddOddEvenOdd\
    \ = true;\n        bool isMiddleOddOddEvenOdd = true;\n        bool isFirstEvenOddEvenOdd\
    \ = true;\n        bool isLastEvenOddEvenOdd = true;\n        bool isMiddleEvenOddEvenOdd\
    \ = true;\n        bool isFirstOddOddEvenOdd = true;\n        bool isLastOddOddEvenOdd\
    \ = true;\n        bool isMiddleOddOddEvenOdd = true;\n        bool isFirstEvenEvenOddEvenOdd\
    \ = true;\n        bool isLastEvenEvenOddEvenOdd = true;\n        bool isMiddleEvenOddEvenOdd\
    \ = true;\n        bool isFirstOddOddEvenOdd = true;\n        bool \n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmi15nj8.cs(69,13): error CS1001: Identifier expected

    /tmp/tmpfmi15nj8.cs(69,13): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        result.Add(min);\n\
    \        result.Add(mid);\n        result.Add(max);\n        foreach (long i in\
    \ lst) {\n            if (i < mid)\n                result.Add(i);\n         \
    \   else if (i > mid)\n                result.Add(mid);\n            else\n  \
    \              result.Add(max);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc7f02466820418382f049611e3eb976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc7f02466820418382f049611e3eb976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        long minValue = lst.Min();\n        long maxValue = lst.Max();\n\
    \        List<long> result = new List<long>();\n        long currentValue = minValue;\n\
    \        long currentMaxValue = maxValue;\n        bool isFirst = true;\n    \
    \    foreach (long value in lst) {\n            if (isFirst) {\n             \
    \   currentValue = value;\n                currentMaxValue = maxValue;\n     \
    \           isFirst = false;\n            }\n            else if (value < currentValue)\
    \ {\n                result.Add(currentValue);\n                currentValue =\
    \ value;\n                currentMaxValue = maxValue;\n            }\n       \
    \     else if (value > currentMaxValue) {\n                result.Add(currentMaxValue);\n\
    \                currentMaxValue = value;\n            }\n            else {\n\
    \                result.Add(value);\n            }\n        }\n        result.Add(currentMaxValue);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c0af8ec303a49f992073a84f676add4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c0af8ec303a49f992073a84f676add4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        result.Add(mid);\n\
    \        foreach (long i in lst) {\n            if (i < mid)\n               \
    \ result.Add(i);\n            else if (i > mid)\n                result.Add(mid);\n\
    \            else\n                result.Add(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <131aabb586694226b0e5c4e84d8e4398>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <131aabb586694226b0e5c4e84d8e4398>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        long min = lst.Min();\n        long max = lst.Max();\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in lst) {\n            if\
    \ (i < min) {\n                result.Add(min);\n            } else if (i > max)\
    \ {\n                result.Add(max);\n            } else {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5b0e6dfa72c46febaa5c5d5d462749a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5b0e6dfa72c46febaa5c5d5d462749a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long mid = min + (max - min) / 2;\n        foreach (long i in lst) {\n\
    \            if (i < mid) result.Add(i);\n            else if (i > mid) result.Add(mid);\n\
    \            else if (i == mid) result.Add(min);\n            else result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ee0f9088e1642c7a33242b13c15a076>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ee0f9088e1642c7a33242b13c15a076>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long temp;\n        long temp2;\n    \
    \    long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n        long \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqg7_hyr9.cs(107,13): error CS1001: Identifier expected

    /tmp/tmpqg7_hyr9.cs(107,13): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        bool isFirst\
    \ = true;\n        foreach (long i in lst) {\n            if (isFirst) {\n   \
    \             isFirst = false;\n                result.Add(i);\n            }\n\
    \            if (i == mid)\n                result.Add(max);\n            else\n\
    \                result.Add(i);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2aa6a9de60594d53894379c64614dba3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2aa6a9de60594d53894379c64614dba3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      result.Add(mid);\n        result.AddRange(lst);\n        result.Add(mid);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59964af3bb234c30acfc3c4d55034dca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59964af3bb234c30acfc3c4d55034dca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        bool first = true;\n        foreach\
    \ (long num in lst) {\n            if (first) {\n                result.Add(num);\n\
    \                first = false;\n            } else {\n                if (num\
    \ > nextMax) {\n                    result.Add(num);\n                    nextMax\
    \ = num;\n                } else if (num < nextMin) {\n                    result.Add(num);\n\
    \                    nextMin = num;\n                } else {\n              \
    \      result.Add(nextMin);\n                    result.Add(nextMax);\n      \
    \              result.Add(num);\n                    nextMax = num;\n        \
    \            nextMin = num;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54bf72869817472ca47ddc29c09677fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54bf72869817472ca47ddc29c09677fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        result.Add(mid);\n       \
    \ foreach (long i in lst) {\n            if (i > mid) {\n                result.Add(i);\n\
    \            }\n        }\n        result.Add(max);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7cd2bbdcd2014d8ea46cacbf7df0deed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7cd2bbdcd2014d8ea46cacbf7df0deed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        bool isFirst = true;\n        bool\
    \ isLast = true;\n        bool isMiddle = true;\n        bool isMiddleMiddle =\
    \ true;\n        bool isMiddleLast = true;\n        bool isLastLast = true;\n\
    \        bool isLastMiddle = true;\n        bool isLastFirst = true;\n       \
    \ bool isMiddleFirst = true;\n        bool isFirstFirst = true;\n        bool\
    \ isFirstMiddle = true;\n        bool isFirstLast = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isMiddleLastLast\
    \ = true;\n        bool isLastMiddleFirst = true;\n        bool isLastFirstFirst\
    \ = true;\n        bool isLastFirstMiddle = true;\n        bool isLastFirstLast\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isLastMiddleLast\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n        bool isLastMiddleMiddle\
    \ = true;\n        bool isLastLastLast = true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwpiedmux.cs(48,14): error CS0128: A local variable or function named ''isLastMiddleMiddle''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(49,14): error CS0128: A local variable or function named ''isLastLastLast''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(50,14): error CS0128: A local variable or function named ''isLastMiddleMiddle''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(51,14): error CS0128: A local variable or function named ''isLastLastLast''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(52,14): error CS0128: A local variable or function named ''isLastMiddleMiddle''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(53,14): error CS0128: A local variable or function named ''isLastLastLast''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(54,14): error CS0128: A local variable or function named ''isLastMiddleMiddle''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(55,14): error CS0128: A local variable or function named ''isLastLastLast''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(56,14): error CS0128: A local variable or function named ''isLastMiddleMiddle''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(57,14): error CS0128: A local variable or function named ''isLastLastLast''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(58,14): error CS0128: A local variable or function named ''isLastMiddleMiddle''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(59,14): error CS0128: A local variable or function named ''isLastLastLast''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(60,14): error CS0128: A local variable or function named ''isLastMiddleMiddle''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(61,14): error CS0128: A local variable or function named ''isLastLastLast''
    is already defined in this scope

    /tmp/tmpwpiedmux.cs(62,14): error CS0128: A local variable or function named ''isLastMiddleMiddle''
    is already define'
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92dzdmd6.cs(74,17): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long mid50 = mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmply6w1ani.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            }\n            else if (i > mid) {\n\
    \                temp = mid;\n            }\n            else {\n            \
    \    temp = mid;\n            }\n            result.Add(temp);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long currentValue = minValue;\n\
    \        long currentIndex = minIndex;\n        bool isFirst = true;\n       \
    \ bool isLast = true;\n        bool isMiddle = true;\n        while (currentIndex\
    \ < maxIndex) {\n            if (currentValue == maxValue) {\n               \
    \ isLast = false;\n            }\n            if (currentValue == minValue) {\n\
    \                isFirst = false;\n            }\n            if (currentValue\
    \ == lst.ElementAt(currentIndex)) {\n                isMiddle = false;\n     \
    \       }\n            currentValue = lst.ElementAt(currentIndex);\n         \
    \   currentIndex = lst.IndexOf(currentValue);\n            result.Add(currentValue);\n\
    \        }\n        if (isFirst) {\n            result.Insert(0, minValue);\n\
    \        }\n        if (isLast) {\n            result.Add(maxValue);\n       \
    \ }\n        if (isMiddle) {\n            result.Insert(result.Count / 2, minValue);\n\
    \            result.RemoveAt(result.Count / 2);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg494dgdf.cs(37,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpg494dgdf.cs(40,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < min) result.Add(min);\n\
    \            if (i > max) result.Add(max);\n            result.Add(i);\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e61795c57ea4cfda9f632d29631cbe9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e61795c57ea4cfda9f632d29631cbe9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long previous\
    \ = min;\n        long nextMin = min;\n        long nextMax = max;\n        foreach\
    \ (long i in lst) {\n            if (current > max) {\n                result.Add(current);\n\
    \                current = previous;\n                previous = current;\n  \
    \              nextMin = min;\n                nextMax = max;\n            }\n\
    \            if (current < min) {\n                result.Add(current);\n    \
    \            current = nextMin;\n                previous = current;\n       \
    \         nextMin = min;\n                nextMax = max;\n            }\n    \
    \        current = i;\n            previous = current;\n            nextMin =\
    \ min;\n            nextMax = max;\n        }\n        result.Add(current);\n\
    \        result.Add(previous);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d450a95e87f7423a942dc6b5edbb5d57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d450a95e87f7423a942dc6b5edbb5d57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i > max) result.Add(max);\n\
    \            if (i < min) result.Add(min);\n            result.Add(i);\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76b58f1f81bb4b21a41c52d40f17961f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76b58f1f81bb4b21a41c52d40f17961f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      foreach (long i in lst) {\n            if (i < mid) {\n               \
    \ result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            }\n            else if (i > mid) {\n\
    \                temp = mid;\n            }\n            else {\n            \
    \    temp = mid;\n            }\n            result.Add(temp);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long cur = min;\n        while (cur < max) {\n      \
    \      result.Add(cur);\n            cur++;\n        }\n        cur = min;\n \
    \       while (cur < max) {\n            result.Add(cur);\n            cur++;\n\
    \        }\n        cur = min;\n        while (cur < max) {\n            result.Add(cur);\n\
    \            cur++;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1252e19b776242f9a4836d5fe7cda8c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1252e19b776242f9a4836d5fe7cda8c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long temp;\n        foreach (long i in\
    \ lst) {\n            if (i < min) {\n                temp = min;\n          \
    \      min = i;\n            }\n            else if (i > max) {\n            \
    \    temp = max;\n                max = i;\n            }\n            else {\n\
    \                temp = i;\n            }\n            result.Add(temp);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <467b5c23d8994eada4b1416a521ad178>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <467b5c23d8994eada4b1416a521ad178>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        bool isMax = true;\n        bool\
    \ isMin = true;\n        bool isFirst = true;\n        bool isLast = true;\n \
    \       bool isMiddle = true;\n        bool isMiddle2 = true;\n        bool isMiddle3\
    \ = true;\n        bool isMiddle4 = true;\n        bool isMiddle5 = true;\n  \
    \      bool isMiddle6 = true;\n        bool isMiddle7 = true;\n        bool isMiddle8\
    \ = true;\n        bool isMiddle9 = true;\n        bool isMiddle10 = true;\n \
    \       bool isMiddle11 = true;\n        bool isMiddle12 = true;\n        bool\
    \ isMiddle13 = true;\n        bool isMiddle14 = true;\n        bool isMiddle15\
    \ = true;\n        bool isMiddle16 = true;\n        bool isMiddle17 = true;\n\
    \        bool isMiddle18 = true;\n        bool isMiddle19 = true;\n        bool\
    \ isMiddle20 = true;\n        bool isMiddle21 = true;\n        bool isMiddle22\
    \ = true;\n        bool isMiddle23 = true;\n        bool isMiddle24 = true;\n\
    \        bool isMiddle25 = true;\n        bool isMiddle26 = true;\n        bool\
    \ isMiddle27 = true;\n        bool isMiddle28 = true;\n        bool isMiddle29\
    \ = true;\n        bool isMiddle30 = true;\n        bool isMiddle31 = true;\n\
    \        bool isMiddle32 = true;\n        bool isMiddle33 = true;\n        bool\
    \ isMiddle34 = true;\n        bool isMiddle35 = true;\n        bool isMiddle36\
    \ = true;\n        bool isMiddle37 = true;\n        bool isMiddle38 = true;\n\
    \        bool isMiddle39 = true;\n        bool isMiddle40 = true;\n        bool\
    \ isMiddle41 = true;\n        bool isMiddle42 = true;\n        bool isMiddle43\
    \ = true;\n        bool isMiddle44 = true;\n        bool isMiddle45 = true;\n\
    \        bool isMiddle46 = true;\n        bool isMiddle47 = true;\n        bool\
    \ isMiddle48 = true;\n        bool isMiddle49 = true;\n        bool isMiddle50\
    \ = true;\n        bool isMiddle51 = true;\n        bool isMiddle52 = true;\n\
    \        bool isMiddle53 = true;\n        bool isMiddle54 = true;\n        bool\
    \ isMiddle55 = true;\n        bool isMiddle56 = true;\n        bool isMiddle57\
    \ = true;\n        bool isMiddle58 = true;\n        bool isMiddle59 = true;\n\
    \        bool isMiddle60 = true;\n        bool isMiddle61 = true;\n        bool\
    \ is\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppqkkn95t.cs(91,14): error CS1001: Identifier expected

    /tmp/tmppqkkn95t.cs(91,14): error CS1002: ; expected

    /tmp/tmppqkkn95t.cs(91,14): error CS1525: Invalid expression term ''is''

    /tmp/tmppqkkn95t.cs(91,16): error CS1031: Type expected

    /tmp/tmppqkkn95t.cs(91,16): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long temp;\n     \
    \   bool isFirst = true;\n        foreach (long i in lst) {\n            if (isFirst)\
    \ {\n                temp = i;\n                isFirst = false;\n           \
    \ }\n            else {\n                if (i < minValue) {\n               \
    \     temp = minValue;\n                }\n                else if (i > maxValue)\
    \ {\n                    temp = maxValue;\n                }\n               \
    \ else {\n                    temp = i;\n                }\n            }\n  \
    \          result.Add(temp);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39ffe945dd95465c8f4914602d4cbdd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39ffe945dd95465c8f4914602d4cbdd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> res = new\
    \ List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        foreach\
    \ (long i in lst) {\n            if (i < mid) {\n                temp = i;\n \
    \           } else {\n                temp = mid;\n            }\n           \
    \ res.Add(temp);\n        }\n        return res;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b91f41f166948448534e07e14e235b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b91f41f166948448534e07e14e235b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.FindIndex(lst\
    \ => lst == minValue);\n        long maxIndex = lst.FindIndex(lst => lst == maxValue);\n\
    \        long minIndex2 = lst.FindIndex(lst => lst == minValue);\n        long\
    \ maxIndex2 = lst.FindIndex(lst => lst == maxValue);\n        long minIndex3 =\
    \ lst.FindIndex(lst => lst == minValue);\n        long maxIndex3 = lst.FindIndex(lst\
    \ => lst == maxValue);\n        long minIndex4 = lst.FindIndex(lst => lst == minValue);\n\
    \        long maxIndex4 = lst.FindIndex(lst => lst == maxValue);\n        long\
    \ minIndex5 = lst.FindIndex(lst => lst == minValue);\n        long maxIndex5 =\
    \ lst.FindIndex(lst => lst == maxValue);\n        long minIndex6 = lst.FindIndex(lst\
    \ => lst == minValue);\n        long maxIndex6 = lst.FindIndex(lst => lst == maxValue);\n\
    \        long minIndex7 = lst.FindIndex(lst => lst == minValue);\n        long\
    \ maxIndex7 = lst.FindIndex(lst => lst == maxValue);\n        long minIndex8 =\
    \ lst.FindIndex(lst => lst == minValue);\n        long maxIndex8 = lst.FindIndex(lst\
    \ => lst == maxValue);\n        long minIndex9 = lst.FindIndex(lst => lst == minValue);\n\
    \        long maxIndex9 = lst.FindIndex(lst => lst == maxValue);\n        long\
    \ minIndex10 = lst.FindIndex(lst => lst == minValue);\n        long maxIndex10\
    \ = lst.FindIndex(lst => lst == maxValue);\n        long minIndex11 = lst.FindIndex(lst\
    \ => lst == minValue);\n        long maxIndex11 = lst.FindIndex(lst => lst ==\
    \ maxValue);\n        long minIndex12 = lst.FindIndex(lst => lst == minValue);\n\
    \        long maxIndex12 = lst.FindIndex(lst => lst == maxValue);\n        long\
    \ minIndex13 = lst.FindIndex(lst => lst == minValue);\n        long maxIndex13\
    \ = lst.FindIndex(lst => lst == maxValue);\n        long minIndex14 = lst.FindIndex(lst\
    \ => lst == \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd8r98ul0.cs(49,54): error CS1525: Invalid expression term ''}''

    /tmp/tmpd8r98ul0.cs(49,54): error CS1026: ) expected

    /tmp/tmpd8r98ul0.cs(49,54): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long mid50 = mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmply6w1ani.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long min2 = mid - 1;\n        long max2 = mid + 1;\n        long min3 =\
    \ min2 - 1;\n        long max3 = max2 + 1;\n        long min4 = min3 - 1;\n  \
    \      long max4 = max3 + 1;\n        long min5 = min4 - 1;\n        long max5\
    \ = max4 + 1;\n        long min6 = min5 - 1;\n        long max6 = max5 + 1;\n\
    \        long min7 = min6 - 1;\n        long max7 = max6 + 1;\n        long min8\
    \ = min7 - 1;\n        long max8 = max7 + 1;\n        long min9 = min8 - 1;\n\
    \        long max9 = max8 + 1;\n        long min10 = min9 - 1;\n        long max10\
    \ = max9 + 1;\n        long min11 = min10 - 1;\n        long max11 = max10 + 1;\n\
    \        long min12 = min11 - 1;\n        long max12 = max11 + 1;\n        long\
    \ min13 = min12 - 1;\n        long max13 = max12 + 1;\n        long min14 = min13\
    \ - 1;\n        long max14 = max13 + 1;\n        long min15 = min14 - 1;\n   \
    \     long max15 = max14 + 1;\n        long min16 = min15 - 1;\n        long max16\
    \ = max15 + 1;\n        long min17 = min16 - 1;\n        long max17 = max16 +\
    \ 1;\n        long min18 = min17 - 1;\n        long max18 = max17 + 1;\n     \
    \   long min19 = min18 - 1;\n        long max19 = max18 + 1;\n        long min20\
    \ = min19 - 1;\n        long max20 = max19 + 1;\n        long min21 = min20 -\
    \ 1;\n        long max21 = max20 + 1;\n        long min22 = min21 - 1;\n     \
    \   long max22 = max21 + 1;\n        long min23 = min22 - 1;\n        long max23\
    \ = max22 + 1;\n        long min24 = min23 - 1;\n        long max24 = max23 +\
    \ 1;\n        long min25 = min24 - 1;\n        long max25 = max24 + 1;\n     \
    \   long min26 = min25 - 1;\n        long max26 = max25 + 1;\n        long min27\
    \ = min26 - 1;\n        \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdgidu9ba.cs(19,30): error CS0161: ''Problem.StrangeSortList(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool isFirst = true;\n        foreach (long i in lst) {\n            if\
    \ (isFirst) {\n                result.Add(i);\n                isFirst = false;\n\
    \            }\n            if (i < mid) {\n                result.Add(i);\n \
    \           } else if (i > mid) {\n                result.Add(mid);\n        \
    \        result.Add(i);\n                isFirst = true;\n            } else {\n\
    \                result.Add(mid);\n                result.Add(i);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f8e4b44fcf3426e937694030b30397e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f8e4b44fcf3426e937694030b30397e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long currentMinValue\
    \ = minValue;\n        long currentMaxValue = maxValue;\n        long currentMinIndex\
    \ = 0;\n        long currentMaxIndex = 0;\n        bool isFirst = true;\n    \
    \    bool isLast = true;\n        bool isMiddle = true;\n        bool isMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddle = true;\n        bool \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43c5jnvo.cs(74,13): error CS1001: Identifier expected

    /tmp/tmp43c5jnvo.cs(74,13): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long min2 = min;\n        long max2 =\
    \ max;\n        long min3 = min;\n        long max3 = max;\n        long min4\
    \ = min;\n        long max4 = max;\n        long min5 = min;\n        long max5\
    \ = max;\n        long min6 = min;\n        long max6 = max;\n        long min7\
    \ = min;\n        long max7 = max;\n        long min8 = min;\n        long max8\
    \ = max;\n        long min9 = min;\n        long max9 = max;\n        long min10\
    \ = min;\n        long max10 = max;\n        long min11 = min;\n        long max11\
    \ = max;\n        long min12 = min;\n        long max12 = max;\n        long min13\
    \ = min;\n        long max13 = max;\n        long min14 = min;\n        long max14\
    \ = max;\n        long min15 = min;\n        long max15 = max;\n        long min16\
    \ = min;\n        long max16 = max;\n        long min17 = min;\n        long max17\
    \ = max;\n        long min18 = min;\n        long max18 = max;\n        long min19\
    \ = min;\n        long max19 = max;\n        long min20 = min;\n        long max20\
    \ = max;\n        long min21 = min;\n        long max21 = max;\n        long min22\
    \ = min;\n        long max22 = max;\n        long min23 = min;\n        long max23\
    \ = max;\n        long min24 = min;\n        long max24 = max;\n        long min25\
    \ = min;\n        long max25 = max;\n        long min26 = min;\n        long max26\
    \ = max;\n        long min27 = min;\n        long max27 = max;\n        long min28\
    \ = min;\n        long max28 = max;\n        long min29 = min;\n        long max29\
    \ = max;\n        long min30 = min;\n        long max30 = max;\n        long min31\
    \ = min;\n        long max31 = max;\n        long min32 = min;\n        long max32\
    \ = max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp45n3bzgm.cs(19,30): error CS0161: ''Problem.StrangeSortList(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            } else if (i > mid) {\n          \
    \      temp = mid;\n            } else {\n                temp = mid;\n      \
    \      }\n            result.Add(temp);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long currentMinValue\
    \ = minValue;\n        long currentMaxValue = maxValue;\n        long currentMinIndex\
    \ = 0;\n        long currentMaxIndex = 0;\n        bool isFirst = true;\n    \
    \    bool isLast = true;\n        bool isMiddle = true;\n        bool isFirstMiddle\
    \ = true;\n        bool isLastMiddle = true;\n        bool isFirstLast = true;\n\
    \        bool isLastFirst = true;\n        bool isMiddleMiddle = true;\n     \
    \   bool isFirstMiddleMiddle = true;\n        bool isLastMiddleMiddle = true;\n\
    \        bool isFirstLastMiddle = true;\n        bool isMiddleFirst = true;\n\
    \        bool isMiddleLast = true;\n        bool isLastFirst = true;\n       \
    \ bool isLastLast = true;\n        bool isFirstLastLast = true;\n        bool\
    \ isLastMiddleFirst = true;\n        bool isLastMiddleLast = true;\n        bool\
    \ isFirstMiddleLast = true;\n        bool isMiddleFirstLast = true;\n        bool\
    \ isMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleLast = true;\n \
    \       bool isLastMiddleMiddleLast = true;\n        bool isFirstLastMiddleMiddleLast\
    \ = true;\n        bool isMiddleMiddleFirstLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleFirstLast\
    \ = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddle\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkcp3jou6.cs(78,26): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i > max) result.Add(max);\n\
    \            if (i < min) result.Add(min);\n            result.Add(i);\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76b58f1f81bb4b21a41c52d40f17961f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76b58f1f81bb4b21a41c52d40f17961f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long minValue = lst[0];\n\
    \        long maxValue = lst[0];\n        foreach (long value in lst) {\n    \
    \        if (value < minValue) {\n                minValue = value;\n        \
    \    }\n            if (value > maxValue) {\n                maxValue = value;\n\
    \            }\n        }\n        long midValue = minValue;\n        long midValue2\
    \ = maxValue;\n        long midValue3 = minValue;\n        long midValue4 = maxValue;\n\
    \        long midValue5 = minValue;\n        long midValue6 = maxValue;\n    \
    \    long midValue7 = minValue;\n        long midValue8 = maxValue;\n        long\
    \ midValue9 = minValue;\n        long midValue10 = maxValue;\n        long midValue11\
    \ = minValue;\n        long midValue12 = maxValue;\n        long midValue13 =\
    \ minValue;\n        long midValue14 = maxValue;\n        long midValue15 = minValue;\n\
    \        long midValue16 = maxValue;\n        long midValue17 = minValue;\n  \
    \      long midValue18 = maxValue;\n        long midValue19 = minValue;\n    \
    \    long midValue20 = maxValue;\n        long midValue21 = minValue;\n      \
    \  long midValue22 = maxValue;\n        long midValue23 = minValue;\n        long\
    \ midValue24 = maxValue;\n        long midValue25 = minValue;\n        long midValue26\
    \ = maxValue;\n        long midValue27 = minValue;\n        long midValue28 =\
    \ maxValue;\n        long midValue29 = minValue;\n        long midValue30 = maxValue;\n\
    \        long midValue31 = minValue;\n        long midValue32 = maxValue;\n  \
    \      long midValue33 = minValue;\n        long midValue34 = maxValue;\n    \
    \    long midValue35 = minValue;\n        long midValue36 = maxValue;\n      \
    \  long midValue37 = minValue;\n        long midValue38 = maxValue;\n        long\
    \ midValue39 = minValue;\n        long midValue40 = maxValue;\n        long midValue41\
    \ = minValue;\n        long midValue42 = maxValue;\n        long midValue43 =\
    \ minValue;\n        long midValue44 = maxValue;\n        long midValue45 = minValue;\n\
    \        long midValue46 = maxValue;\n        long midValue47 = minValue;\n  \
    \      long midValue48 = maxValue;\n        long midValue49 = minValue;\n    \
    \    long midValue50 = maxValue;\n        long midValue5\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphkuulzuk.cs(84,23): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        bool isFirst = true;\n        bool\
    \ isLast = true;\n        bool isMiddle = true;\n        bool isMiddleMiddle =\
    \ true;\n        bool isMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcojxtez8.cs(68,46): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        long mid2 =\
    \ mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n   \
    \     long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n     \
    \   long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n        long mid47\
    \ = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49 = \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7oh6i5is.cs(73,21): error CS1525: Invalid expression term ''}''

    /tmp/tmp7oh6i5is.cs(73,21): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        long temp;\n\
    \        foreach (long num in lst) {\n            if (num == mid)\n          \
    \      result.Add(num);\n            else if (num < mid)\n                result.Add(num);\n\
    \            else if (num > mid)\n                result.Add(num);\n         \
    \   else if (num == min)\n                result.Add(num);\n            else if\
    \ (num == max)\n                result.Add(num);\n            else if (num < min)\n\
    \                result.Add(num);\n            else if (num > max)\n         \
    \       result.Add(num);\n            else\n                result.Add(num);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41eaa2f17a28498a8f78577846f7ee18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41eaa2f17a28498a8f78577846f7ee18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        long mid2 =\
    \ mid + (max - min) / 2;\n        long mid3 = mid2 + (max - min) / 2;\n      \
    \  long mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4 + (max - min)\
    \ / 2;\n        long mid6 = mid5 + (max - min) / 2;\n        long mid7 = mid6\
    \ + (max - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n        long\
    \ mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max - min) / 2;\n\
    \        long mid11 = mid10 + (max - min) / 2;\n        long mid12 = mid11 + (max\
    \ - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n        long mid14\
    \ = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max - min) / 2;\n\
    \        long mid16 = mid15 + (max - min) / 2;\n        long mid17 = mid16 + (max\
    \ - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n        long mid19\
    \ = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max - min) / 2;\n\
    \        long mid21 = mid20 + (max - min) / 2;\n        long mid22 = mid21 + (max\
    \ - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n        long mid24\
    \ = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max - min) / 2;\n\
    \        long mid26 = mid25 + (max - min) / 2;\n        long mid27 = mid26 + (max\
    \ - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n        long mid29\
    \ = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max - min) / 2;\n\
    \        long mid31 = mid30 + (max - min) / 2;\n        long mid32 = mid31 + (max\
    \ - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n        long mid34\
    \ = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max - min) / 2;\n\
    \        long mid36 = mid35 + (max - min) / 2;\n        long mid37 = mid36 + (max\
    \ - min) / 2;\n        long mid38 = mid37 + (\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6s19om9z.cs(62,31): error CS1525: Invalid expression term ''}''

    /tmp/tmp6s19om9z.cs(62,31): error CS1026: ) expected

    /tmp/tmp6s19om9z.cs(62,31): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long temp;\n        bool swap = false;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                temp = min;\n     \
    \           min = lst[i];\n                lst[i] = temp;\n                swap\
    \ = true;\n            }\n            if (lst[i] > max) {\n                temp\
    \ = max;\n                max = lst[i];\n                lst[i] = temp;\n    \
    \            swap = true;\n            }\n            if (swap) {\n          \
    \      result.Add(lst[i]);\n                swap = false;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9274cdc5cbc4b4888f8333e5e0c0fcd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9274cdc5cbc4b4888f8333e5e0c0fcd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long currentValue\
    \ = minValue;\n        long currentMaxValue = maxValue;\n        long currentMinValue\
    \ = minValue;\n        bool isFirst = true;\n        foreach (long value in lst)\
    \ {\n            if (isFirst) {\n                currentMinValue = value;\n  \
    \              currentMaxValue = value;\n                isFirst = false;\n  \
    \          }\n            else if (value < currentMinValue) {\n              \
    \  currentMinValue = value;\n            }\n            else if (value > currentMaxValue)\
    \ {\n                currentMaxValue = value;\n            }\n        }\n    \
    \    result.Add(currentMinValue);\n        result.Add(currentMaxValue);\n    \
    \    result.Add(currentValue);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59ee3e23893543d0ba7a74291d0c7e21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59ee3e23893543d0ba7a74291d0c7e21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long currentValue\
    \ = minValue;\n        bool isFirst = true;\n        bool isLast = true;\n   \
    \     bool isMiddle = true;\n        bool isMiddleMiddle = true;\n        bool\
    \ isMiddleLast = true;\n        bool isLastMiddle = true;\n        bool isLastLast\
    \ = true;\n        bool isFirstMiddle = true;\n        bool isFirstLast = true;\n\
    \        bool isFirstMiddleMiddle = true;\n        bool isFirstLastMiddle = true;\n\
    \        bool isFirstLastLast = true;\n        bool isLastMiddleMiddle = true;\n\
    \        bool isLastLastMiddle = true;\n        bool isLastLastLast = true;\n\
    \        bool isMiddleMiddleLast = true;\n        bool isMiddleLastLast = true;\n\
    \        bool isMiddleMiddleLastLast = true;\n        bool isMiddleMiddleLastLastLast\
    \ = true;\n        bool isMiddleMiddleLastLastLastLast = true;\n        bool isMiddleMiddleLastLastLastLastLast\
    \ = true;\n        bool isMiddleMiddleLastLastLastLastLastLast = true;\n     \
    \   bool isMiddleMiddleLastLastLastLastLastLastLast = true;\n        bool isMiddleMiddleLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isMiddleMiddleLastLastLastLastLastLastLastLast = true;\n\
    \        bool isMiddleMiddleLastLastLastLastLastLastLastLastLast = true;\n   \
    \     bool isMiddleMiddleLastLastLastLastLastLastLastLastLast = true;\n      \
    \  bool isMiddleMiddleLastLastLastLastLastLastLastLastLast = true;\n        bool\
    \ isMiddleMiddleLastLastLastLastLastLastLastLastLastLast = true;\n        bool\
    \ isMiddleMiddleLastLastLastLastLastLastLastLastLastLastLast = true;\n       \
    \ bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLast = true;\n      \
    \  bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLast = true;\n     \
    \   bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLastLast = true;\n\
    \        bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLastLast = true;\n\
    \        bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLastLastLast =\
    \ true;\n        bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isMiddleMiddleLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isMiddleMiddleLast\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpietx5uz8.cs(63,32): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        bool swap = false;\n        foreach (long i in lst)\
    \ {\n            if (swap) {\n                temp = mid;\n                mid\
    \ = i;\n                i = temp;\n            }\n            if (i == mid) {\n\
    \                swap = true;\n            }\n            result.Add(i);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnlj0w0cu.cs(33,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long cur = min;\n        while (cur < max) {\n            result.Add(cur);\n\
    \            cur += 1;\n        }\n        foreach (long val in lst.Skip(result.Count))\
    \ {\n            result.Add(val);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e700b657e864f50bd1bcd3800ee8572>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e700b657e864f50bd1bcd3800ee8572>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            }\n            else if (i > mid) {\n\
    \                temp = mid;\n            }\n            else {\n            \
    \    temp = mid;\n            }\n            result.Add(temp);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9964957840f64ae2aad949e1824855c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9964957840f64ae2aad949e1824855c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long mid = min + (max - min) / 2;\n        foreach (long i in lst) {\n\
    \            if (i < mid) {\n                result.Add(i);\n            } else\
    \ if (i > mid) {\n                result.Add(mid);\n            } else {\n   \
    \             result.Add(mid);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba5ab9f9adac4320ab0c492e68137244>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba5ab9f9adac4320ab0c492e68137244>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid + (max - min) / 2;\n        long mid3 = mid2 + (max - min)\
    \ / 2;\n        long mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4\
    \ + (max - min) / 2;\n        long mid6 = mid5 + (max - min) / 2;\n        long\
    \ mid7 = mid6 + (max - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n\
    \        long mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max\
    \ - min) / 2;\n        long mid11 = mid10 + (max - min) / 2;\n        long mid12\
    \ = mid11 + (max - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n\
    \        long mid14 = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max\
    \ - min) / 2;\n        long mid16 = mid15 + (max - min) / 2;\n        long mid17\
    \ = mid16 + (max - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n\
    \        long mid19 = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max\
    \ - min) / 2;\n        long mid21 = mid20 + (max - min) / 2;\n        long mid22\
    \ = mid21 + (max - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n\
    \        long mid24 = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max\
    \ - min) / 2;\n        long mid26 = mid25 + (max - min) / 2;\n        long mid27\
    \ = mid26 + (max - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n\
    \        long mid29 = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max\
    \ - min) / 2;\n        long mid31 = mid30 + (max - min) / 2;\n        long mid32\
    \ = mid31 + (max - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n\
    \        long mid34 = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max\
    \ - min) / 2;\n        long mid36 = mid35 + (max - min) / 2;\n        long mid37\
    \ = mid36 + (max - min) / 2;\n        long mid38 = mid37 + (max - min) / 2;\n\
    \        long mid39 = mid\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp93kp1b5q.cs(61,25): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid - 1;\n        long mid3 = mid + 1;\n        long mid4 =\
    \ mid + 2;\n        long mid5 = mid + 3;\n        long mid6 = mid + 4;\n     \
    \   long mid7 = mid + 5;\n        long mid8 = mid + 6;\n        long mid9 = mid\
    \ + 7;\n        long mid10 = mid + 8;\n        long mid11 = mid + 9;\n       \
    \ long mid12 = mid + 10;\n        long mid13 = mid + 11;\n        long mid14 =\
    \ mid + 12;\n        long mid15 = mid + 13;\n        long mid16 = mid + 14;\n\
    \        long mid17 = mid + 15;\n        long mid18 = mid + 16;\n        long\
    \ mid19 = mid + 17;\n        long mid20 = mid + 18;\n        long mid21 = mid\
    \ + 19;\n        long mid22 = mid + 20;\n        long mid23 = mid + 21;\n    \
    \    long mid24 = mid + 22;\n        long mid25 = mid + 23;\n        long mid26\
    \ = mid + 24;\n        long mid27 = mid + 25;\n        long mid28 = mid + 26;\n\
    \        long mid29 = mid + 27;\n        long mid30 = mid + 28;\n        long\
    \ mid31 = mid + 29;\n        long mid32 = mid + 30;\n        long mid33 = mid\
    \ + 31;\n        long mid34 = mid + 32;\n        long mid35 = mid + 33;\n    \
    \    long mid36 = mid + 34;\n        long mid37 = mid + 35;\n        long mid38\
    \ = mid + 36;\n        long mid39 = mid + 37;\n        long mid40 = mid + 38;\n\
    \        long mid41 = mid + 39;\n        long mid42 = mid + 40;\n        long\
    \ mid43 = mid + 41;\n        long mid44 = mid + 42;\n        long mid45 = mid\
    \ + 43;\n        long mid46 = mid + 44;\n        long mid47 = mid + 45;\n    \
    \    long mid48 = mid + 46;\n        long mid49 = mid + 47;\n        long mid50\
    \ = mid + 48;\n        long mid51 = mid + 49;\n        long mid52 = mid + 50;\n\
    \        long mid53 = mid + 51;\n        long mid54 = mid + 52;\n        long\
    \ mid55 = mid + 53;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppsjo7aje.cs(19,30): error CS0161: ''Problem.StrangeSortList(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long mid50 = mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmply6w1ani.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      foreach (long i in lst) {\n            if (i < mid) {\n               \
    \ result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        result.Add(min);\n       \
    \ result.Add(mid);\n        result.Add(max);\n        foreach (long i in lst)\
    \ {\n            if (i < mid) result.Add(i);\n            else if (i > mid) result.Add(mid);\n\
    \            else if (i == mid) result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05432bde85324cd4819d982f080b0818>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05432bde85324cd4819d982f080b0818>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.FindIndex(lst\
    \ => lst == minValue);\n        long maxIndex = lst.FindIndex(lst => lst == maxValue);\n\
    \        long minIndex2 = lst.FindIndex(lst => lst == minValue);\n        long\
    \ maxIndex2 = lst.FindIndex(lst => lst == maxValue);\n        long minIndex3 =\
    \ lst.FindIndex(lst => lst == minValue);\n        long maxIndex3 = lst.FindIndex(lst\
    \ => lst == maxValue);\n        long minIndex4 = lst.FindIndex(lst => lst == minValue);\n\
    \        long maxIndex4 = lst.FindIndex(lst => lst == maxValue);\n        long\
    \ minIndex5 = lst.FindIndex(lst => lst == minValue);\n        long maxIndex5 =\
    \ lst.FindIndex(lst => lst == maxValue);\n        long minIndex6 = lst.FindIndex(lst\
    \ => lst == minValue);\n        long maxIndex6 = lst.FindIndex(lst => lst == maxValue);\n\
    \        long minIndex7 = lst.FindIndex(lst => lst == minValue);\n        long\
    \ maxIndex7 = lst.FindIndex(lst => lst == maxValue);\n        long minIndex8 =\
    \ lst.FindIndex(lst => lst == minValue);\n        long maxIndex8 = lst.FindIndex(lst\
    \ => lst == maxValue);\n        long minIndex9 = lst.FindIndex(lst => lst == minValue);\n\
    \        long maxIndex9 = lst.FindIndex(lst => lst == maxValue);\n        long\
    \ minIndex10 = lst.FindIndex(lst => lst == minValue);\n        long maxIndex10\
    \ = lst.FindIndex(lst => lst == maxValue);\n        long minIndex11 = lst.FindIndex(lst\
    \ => lst == minValue);\n        long maxIndex11 = lst.FindIndex(lst => lst ==\
    \ maxValue);\n        long minIndex12 = lst.FindIndex(lst => lst == minValue);\n\
    \        long maxIndex12 = lst.FindIndex(lst => lst == maxValue);\n        long\
    \ minIndex13 = lst.FindIndex(lst => lst == minValue);\n        long maxIndex13\
    \ = lst.FindIndex(lst => lst == maxValue);\n        long minIndex14 = lst.FindIndex(lst\
    \ => lst == \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd8r98ul0.cs(49,54): error CS1525: Invalid expression term ''}''

    /tmp/tmpd8r98ul0.cs(49,54): error CS1026: ) expected

    /tmp/tmpd8r98ul0.cs(49,54): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        List<long> lst2 = new List<long>();\n        lst2.Add(min);\n\
    \        lst2.Add(mid);\n        lst2.Add(max);\n        lst2.AddRange(lst);\n\
    \        lst2.Remove(max);\n        lst2.Remove(mid);\n        lst2.Remove(min);\n\
    \        lst2.AddRange(lst);\n        return lst2;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e7a56c21dfc4fcea1a00df7439d3cc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e7a56c21dfc4fcea1a00df7439d3cc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ lst2 = new List<long>();\n        long min = lst[0];\n        long max = lst[0];\n\
    \        foreach (long i in lst) {\n            if (i < min) {\n             \
    \   min = i;\n            }\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        long mid = min + ((max - min) / 2);\n\
    \        lst2.Add(min);\n        lst2.Add(mid);\n        lst2.Add(max);\n    \
    \    lst2.AddRange(lst);\n        lst2.RemoveAt(0);\n        lst2.RemoveAt(0);\n\
    \        lst2.RemoveAt(0);\n        return lst2;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1857aaa5b964f57ae2dd5ed1e0a0a81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1857aaa5b964f57ae2dd5ed1e0a0a81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long temp;\n     \
    \   foreach (long value in lst) {\n            if (value < minValue) {\n     \
    \           temp = minValue;\n                minValue = value;\n            \
    \    result.Add(temp);\n            }\n            if (value > maxValue) {\n \
    \               temp = maxValue;\n                maxValue = value;\n        \
    \        result.Add(temp);\n            }\n        }\n        result.Add(minValue);\n\
    \        result.Add(maxValue);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <446564686fa54f68adfe3599b6dd3a1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <446564686fa54f68adfe3599b6dd3a1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long currentMin = min;\n        long currentMax = max;\n\
    \        bool isFirst = true;\n        foreach (long i in lst) {\n           \
    \ if (isFirst) {\n                isFirst = false;\n                result.Add(i);\n\
    \                currentMin = i;\n                currentMax = i;\n          \
    \  } else {\n                if (currentMin > i) {\n                    result.Add(currentMin);\n\
    \                    currentMin = i;\n                } else if (currentMax <\
    \ i) {\n                    result.Add(currentMax);\n                    currentMax\
    \ = i;\n                } else {\n                    result.Add(i);\n       \
    \         }\n            }\n        }\n        result.Add(currentMin);\n     \
    \   result.Add(currentMax);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd0a457d970244a590d3a6a2a08bf761>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd0a457d970244a590d3a6a2a08bf761>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        long min = lst.Min();\n        long max = lst.Max();\n     \
    \   List<long> result = new List<long>();\n        long temp;\n        bool flag\
    \ = true;\n        foreach (long i in lst) {\n            if (flag) {\n      \
    \          temp = i;\n                flag = false;\n            }\n         \
    \   if (temp < min) {\n                temp = min;\n                flag = true;\n\
    \            }\n            if (temp > max) {\n                temp = max;\n \
    \               flag = true;\n            }\n            result.Add(temp);\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwgwp5o__.cs(30,17): error CS0165: Use of unassigned local variable ''temp''

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextValue\
    \ = current;\n        bool isFirst = true;\n        foreach (long value in lst)\
    \ {\n            if (isFirst) {\n                isFirst = false;\n          \
    \      nextValue = value;\n            }\n            if (value < nextValue) {\n\
    \                result.Add(current);\n                current = value;\n    \
    \        } else {\n                current = nextValue;\n                nextValue\
    \ = value;\n            }\n        }\n        result.Add(current);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff02f48c0ac2440581fea53a5283ac6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff02f48c0ac2440581fea53a5283ac6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        bool swap = false;\n        foreach (long i in lst)\
    \ {\n            if (i == mid) {\n                swap = true;\n            }\n\
    \            if (swap) {\n                temp = i;\n                i = mid;\n\
    \                mid = temp;\n            }\n            result.Add(i);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfbxokxns.cs(35,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        bool done = false;\n        while\
    \ (current != nextMax && current != nextMin) {\n            result.Add(current);\n\
    \            current = nextMax;\n            nextMax = nextMin;\n            nextMin\
    \ = current;\n        }\n        if (current == nextMax) {\n            result.Add(current);\n\
    \        }\n        if (current == nextMin) {\n            result.Add(current);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71c5baf640e343a3828d0bdba08a34f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71c5baf640e343a3828d0bdba08a34f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long mid50 = mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmply6w1ani.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long curr = min;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr--;\n        while (curr >= min)\
    \ {\n            result.Add(curr);\n            curr--;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bef77996a4de484cab09f2ac56a7ab47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bef77996a4de484cab09f2ac56a7ab47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long temp;\n        long temp2;\n    \
    \    long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n        long \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqg7_hyr9.cs(107,13): error CS1001: Identifier expected

    /tmp/tmpqg7_hyr9.cs(107,13): error CS1002: ; expected

    '
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      foreach (long i in lst) {\n            if (i < mid) {\n               \
    \ result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid / 3;\n        long mid4 = mid / 4;\n        long mid5 =\
    \ mid / 5;\n        long mid6 = mid / 6;\n        long mid7 = mid / 7;\n     \
    \   long mid8 = mid / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid\
    \ / 10;\n        long mid11 = mid / 11;\n        long mid12 = mid / 12;\n    \
    \    long mid13 = mid / 13;\n        long mid14 = mid / 14;\n        long mid15\
    \ = mid / 15;\n        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n\
    \        long mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long\
    \ mid20 = mid / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid\
    \ / 22;\n        long mid23 = mid / 23;\n        long mid24 = mid / 24;\n    \
    \    long mid25 = mid / 25;\n        long mid26 = mid / 26;\n        long mid27\
    \ = mid / 27;\n        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n\
    \        long mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long\
    \ mid32 = mid / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid\
    \ / 34;\n        long mid35 = mid / 35;\n        long mid36 = mid / 36;\n    \
    \    long mid37 = mid / 37;\n        long mid38 = mid / 38;\n        long mid39\
    \ = mid / 39;\n        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n\
    \        long mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long\
    \ mid44 = mid / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid\
    \ / 46;\n        long mid47 = mid / 47;\n        long mid48 = mid / 48;\n    \
    \    long mid49 = mid / \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1wp0969r.cs(72,27): error CS1525: Invalid expression term ''}''

    /tmp/tmp1wp0969r.cs(72,27): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long minIndex2 = lst.IndexOf(minValue);\n\
    \        long maxIndex2 = lst.IndexOf(maxValue);\n        long minIndex3 = lst.IndexOf(minValue);\n\
    \        long maxIndex3 = lst.IndexOf(maxValue);\n        long minIndex4 = lst.IndexOf(minValue);\n\
    \        long maxIndex4 = lst.IndexOf(maxValue);\n        long minIndex5 = lst.IndexOf(minValue);\n\
    \        long maxIndex5 = lst.IndexOf(maxValue);\n        long minIndex6 = lst.IndexOf(minValue);\n\
    \        long maxIndex6 = lst.IndexOf(maxValue);\n        long minIndex7 = lst.IndexOf(minValue);\n\
    \        long maxIndex7 = lst.IndexOf(maxValue);\n        long minIndex8 = lst.IndexOf(minValue);\n\
    \        long maxIndex8 = lst.IndexOf(maxValue);\n        long minIndex9 = lst.IndexOf(minValue);\n\
    \        long maxIndex9 = lst.IndexOf(maxValue);\n        long minIndex10 = lst.IndexOf(minValue);\n\
    \        long maxIndex10 = lst.IndexOf(maxValue);\n        long minIndex11 = lst.IndexOf(minValue);\n\
    \        long maxIndex11 = lst.IndexOf(maxValue);\n        long minIndex12 = lst.IndexOf(minValue);\n\
    \        long maxIndex12 = lst.IndexOf(maxValue);\n        long minIndex13 = lst.IndexOf(minValue);\n\
    \        long maxIndex13 = lst.IndexOf(maxValue);\n        long minIndex14 = lst.IndexOf(minValue);\n\
    \        long maxIndex14 = lst.IndexOf(maxValue);\n        long minIndex15 = lst.IndexOf(minValue);\n\
    \        long maxIndex15 = lst.IndexOf(maxValue);\n        long minIndex16 = lst.IndexOf(minValue);\n\
    \        long maxIndex16 = lst.IndexOf(maxValue);\n        long minIndex17 = lst.IndexOf(minValue);\n\
    \        long maxIndex17 = lst.IndexOf(maxValue);\n        long minIndex18 = lst.IndexOf(minValue);\n\
    \        long maxIndex18 = lst.IndexOf(maxValue);\n        long minIndex19 = lst.IndexOf(minValue);\n\
    \        long maxIndex19 = lst.IndexOf(maxValue);\n        long minIndex20 = lst.IndexOf(minValue);\n\
    \        long max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpri3qwlp5.cs(62,17): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long currentValue = minValue;\n\
    \        long currentIndex = minIndex;\n        while (currentIndex < maxIndex)\
    \ {\n            result.Add(currentValue);\n            currentValue = lst.ElementAt(currentIndex\
    \ + 1);\n            currentIndex = lst.IndexOf(currentValue);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1z81kegs.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long temp;\n        bool\
    \ isFirst = true;\n        for (int i = minIndex; i <= maxIndex; i++) {\n    \
    \        temp = lst[i];\n            if (isFirst) {\n                result.Add(temp);\n\
    \                isFirst = false;\n            } else {\n                if (temp\
    \ < minValue) {\n                    result.Insert(i, temp);\n               \
    \     isFirst = true;\n                } else if (temp > maxValue) {\n       \
    \             result.Insert(i, temp);\n                    isFirst = true;\n \
    \               } else {\n                    result.Insert(i, temp);\n      \
    \          }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2g_c521y.cs(27,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        long temp;\n\
    \        bool isFirst = true;\n        foreach (long i in lst) {\n           \
    \ if (isFirst) {\n                temp = i;\n                isFirst = false;\n\
    \            }\n            else {\n                if (i > mid) {\n         \
    \           temp = i;\n                    isFirst = true;\n                }\n\
    \                else {\n                    temp = mid;\n                   \
    \ mid = i;\n                }\n            }\n            result.Add(temp);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b3b3b29ec2b4f59ae895a67f59a47ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b3b3b29ec2b4f59ae895a67f59a47ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long minIndex2 = lst.IndexOf(minValue);\n\
    \        long maxIndex2 = lst.IndexOf(maxValue);\n        long minIndex3 = lst.IndexOf(minValue);\n\
    \        long maxIndex3 = lst.IndexOf(maxValue);\n        long minIndex4 = lst.IndexOf(minValue);\n\
    \        long maxIndex4 = lst.IndexOf(maxValue);\n        long minIndex5 = lst.IndexOf(minValue);\n\
    \        long maxIndex5 = lst.IndexOf(maxValue);\n        long minIndex6 = lst.IndexOf(minValue);\n\
    \        long maxIndex6 = lst.IndexOf(maxValue);\n        long minIndex7 = lst.IndexOf(minValue);\n\
    \        long maxIndex7 = lst.IndexOf(maxValue);\n        long minIndex8 = lst.IndexOf(minValue);\n\
    \        long maxIndex8 = lst.IndexOf(maxValue);\n        long minIndex9 = lst.IndexOf(minValue);\n\
    \        long maxIndex9 = lst.IndexOf(maxValue);\n        long minIndex10 = lst.IndexOf(minValue);\n\
    \        long maxIndex10 = lst.IndexOf(maxValue);\n        long minIndex11 = lst.IndexOf(minValue);\n\
    \        long maxIndex11 = lst.IndexOf(maxValue);\n        long minIndex12 = lst.IndexOf(minValue);\n\
    \        long maxIndex12 = lst.IndexOf(maxValue);\n        long minIndex13 = lst.IndexOf(minValue);\n\
    \        long maxIndex13 = lst.IndexOf(maxValue);\n        long minIndex14 = lst.IndexOf(minValue);\n\
    \        long maxIndex14 = lst.IndexOf(maxValue);\n        long minIndex15 = lst.IndexOf(minValue);\n\
    \        long maxIndex15 = lst.IndexOf(maxValue);\n        long minIndex16 = lst.IndexOf(minValue);\n\
    \        long maxIndex16 = lst.IndexOf(maxValue);\n        long minIndex17 = lst.IndexOf(minValue);\n\
    \        long maxIndex17 = lst.IndexOf(maxValue);\n        long minIndex18 = lst.IndexOf(minValue);\n\
    \        long maxIndex18 = lst.IndexOf(maxValue);\n        long minIndex19 = lst.IndexOf(minValue);\n\
    \        long maxIndex19 = lst.IndexOf(maxValue);\n        long minIndex20 = lst.IndexOf(minValue);\n\
    \        long max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpri3qwlp5.cs(62,17): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long curr = min;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        foreach (long val in lst) {\n       \
    \     if (val < min) result.Add(min);\n            if (val > max) result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e52cdf9c854f45269a54f2a0b553dd66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e52cdf9c854f45269a54f2a0b553dd66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool isEven = min % 2 == 0;\n        bool isOdd = max % 2 == 0;\n     \
    \   bool isFirstHalf = isEven && isOdd;\n        bool isSecondHalf = isOdd &&\
    \ isEven;\n        bool isFirstHalfEven = isEven && isFirstHalf;\n        bool\
    \ isSecondHalfEven = isOdd && isSecondHalf;\n        bool isFirstHalfOdd = isOdd\
    \ && isFirstHalf;\n        bool isSecondHalfOdd = isEven && isSecondHalf;\n  \
    \      bool isFirstHalfEvenOdd = isEvenOdd && isFirstHalf;\n        bool isSecondHalfEvenOdd\
    \ = isEvenOdd && isSecondHalf;\n        bool isFirstHalfEvenEvenOdd = isEvenEvenOdd\
    \ && isFirstHalf;\n        bool isSecondHalfEvenEvenOdd = isEvenEvenOdd && isSecondHalf;\n\
    \        bool isFirstHalfEvenEvenEvenEvenOdd = isEvenEvenEvenOdd && isFirstHalf;\n\
    \        bool isSecondHalfEvenEvenEvenEvenOdd = isEvenEvenEvenOdd && isSecondHalf;\n\
    \        bool isFirstHalfEvenEvenEvenEvenEvenEvenOdd = isEvenEvenEvenEvenOdd &&\
    \ isFirstHalf;\n        bool isSecondHalfEvenEvenEvenEvenEvenOdd = isEvenEvenEvenOdd\
    \ && isSecondHalf;\n        bool isFirstHalfEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = isEvenEvenEvenEvenOdd && isFirstHalf;\n        bool isSecondHalfEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = isEvenEvenEvenOdd && isSecondHalf;\n        bool isFirstHalfEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = isEvenEvenEvenEvenOdd && isFirstHalf;\n        bool isSecondHalfEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = isEvenEvenEvenOdd && isSecondHalf;\n        bool isFirstHalfEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = isEvenEvenEvenEvenOdd && isFirstHalf;\n        bool isSecondHalfEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = isEvenEvenEvenOdd && isSecondHalf;\n        bool isFirst\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphdou0hhx.cs(46,21): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long minIndex2 = lst.IndexOf(minValue,\
    \ minIndex + 1);\n        long maxIndex2 = lst.IndexOf(maxValue, maxIndex + 1);\n\
    \        long minIndex3 = lst.IndexOf(minValue, minIndex2 + 1);\n        long\
    \ maxIndex3 = lst.IndexOf(maxValue, maxIndex2 + 1);\n        long minIndex4 =\
    \ lst.IndexOf(minValue, minIndex3 + 1);\n        long maxIndex4 = lst.IndexOf(maxValue,\
    \ maxIndex3 + 1);\n        long minIndex5 = lst.IndexOf(minValue, minIndex4 +\
    \ 1);\n        long maxIndex5 = lst.IndexOf(maxValue, maxIndex4 + 1);\n      \
    \  long minIndex6 = lst.IndexOf(minValue, minIndex5 + 1);\n        long maxIndex6\
    \ = lst.IndexOf(maxValue, maxIndex5 + 1);\n        long minIndex7 = lst.IndexOf(minValue,\
    \ minIndex6 + 1);\n        long maxIndex7 = lst.IndexOf(maxValue, maxIndex6 +\
    \ 1);\n        long minIndex8 = lst.IndexOf(minValue, minIndex7 + 1);\n      \
    \  long maxIndex8 = lst.IndexOf(maxValue, maxIndex7 + 1);\n        long minIndex9\
    \ = lst.IndexOf(minValue, minIndex8 + 1);\n        long maxIndex9 = lst.IndexOf(maxValue,\
    \ maxIndex8 + 1);\n        long minIndex10 = lst.IndexOf(minValue, minIndex9 +\
    \ 1);\n        long maxIndex10 = lst.IndexOf(maxValue, maxIndex9 + 1);\n     \
    \   long minIndex11 = lst.IndexOf(minValue, minIndex10 + 1);\n        long maxIndex11\
    \ = lst.IndexOf(maxValue, maxIndex10 + 1);\n        long minIndex12 = lst.IndexOf(minValue,\
    \ minIndex11 + 1);\n        long maxIndex12 = lst.IndexOf(maxValue, maxIndex11\
    \ + 1);\n        long minIndex13 = lst.IndexOf(minValue, minIndex12 + 1);\n  \
    \      long maxIndex13 = lst.IndexOf(maxValue, maxIndex12 + 1);\n        long\
    \ minIndex14 = lst.IndexOf(minValue, minIndex13 + 1);\n        long maxIndex14\
    \ = lst.IndexOf(maxValue, maxIndex13 + 1);\n        long minIndex15 = lst.IndexOf(minValue,\
    \ minIndex14 + 1);\n        long maxIndex15 = lst.IndexOf(maxValue, maxIndex14\
    \ + 1);\n        long minIndex16 = lst.IndexOf\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pwnpiz4.cs(53,38): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            }\n            else if (i > mid) {\n\
    \                temp = mid;\n            }\n            else {\n            \
    \    temp = mid;\n            }\n            result.Add(temp);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2492cd4b444e492aa1479f603b40152a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long temp;\n        foreach (long i in lst) {\n            if (i < min)\
    \ temp = min;\n            else if (i > max) temp = max;\n            else temp\
    \ = i;\n            result.Add(temp);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5960c5a973474d708947008ca0dbbbc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5960c5a973474d708947008ca0dbbbc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long min2 = mid - 1;\n        long max2 = mid + 1;\n        long min3 =\
    \ min2 - 1;\n        long max3 = max2 + 1;\n        long min4 = min3 - 1;\n  \
    \      long max4 = max3 + 1;\n        long min5 = min4 - 1;\n        long max5\
    \ = max4 + 1;\n        long min6 = min5 - 1;\n        long max6 = max5 + 1;\n\
    \        long min7 = min6 - 1;\n        long max7 = max6 + 1;\n        long min8\
    \ = min7 - 1;\n        long max8 = max7 + 1;\n        long min9 = min8 - 1;\n\
    \        long max9 = max8 + 1;\n        long min10 = min9 - 1;\n        long max10\
    \ = max9 + 1;\n        long min11 = min10 - 1;\n        long max11 = max10 + 1;\n\
    \        long min12 = min11 - 1;\n        long max12 = max11 + 1;\n        long\
    \ min13 = min12 - 1;\n        long max13 = max12 + 1;\n        long min14 = min13\
    \ - 1;\n        long max14 = max13 + 1;\n        long min15 = min14 - 1;\n   \
    \     long max15 = max14 + 1;\n        long min16 = min15 - 1;\n        long max16\
    \ = max15 + 1;\n        long min17 = min16 - 1;\n        long max17 = max16 +\
    \ 1;\n        long min18 = min17 - 1;\n        long max18 = max17 + 1;\n     \
    \   long min19 = min18 - 1;\n        long max19 = max18 + 1;\n        long min20\
    \ = min19 - 1;\n        long max20 = max19 + 1;\n        long min21 = min20 -\
    \ 1;\n        long max21 = max20 + 1;\n        long min22 = min21 - 1;\n     \
    \   long max22 = max21 + 1;\n        long min23 = min22 - 1;\n        long max23\
    \ = max22 + 1;\n        long min24 = min23 - 1;\n        long max24 = max23 +\
    \ 1;\n        long min25 = min24 - 1;\n        long max25 = max24 + 1;\n     \
    \   long min26 = min25 - 1;\n        long max26 = max25 + 1;\n        long min27\
    \ = min26 - 1;\n        long max27 = max26 + 1;\n        long min28 = \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd4wubp31.cs(76,21): error CS1525: Invalid expression term ''}''

    /tmp/tmpd4wubp31.cs(76,21): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        result.Add(mid);\n\
    \        foreach (long i in lst) {\n            if (i > mid)\n               \
    \ result.Add(i);\n            else if (i < mid)\n                result.Add(mid);\n\
    \            else\n                result.Add(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64d24a47f7e24b82a1d052195bc043a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64d24a47f7e24b82a1d052195bc043a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      result.Add(mid);\n        foreach (long i in lst) {\n            if (i\
    \ < mid) {\n                result.Add(i);\n            }\n            if (i >\
    \ mid) {\n                result.Add(mid);\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df92cc15d1c349ca9090f56c52a10572>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df92cc15d1c349ca9090f56c52a10572>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        bool isMin\
    \ = true;\n        bool isMax = true;\n        bool isMid = true;\n        foreach\
    \ (long num in lst) {\n            if (num == mid) {\n                if (isMin)\
    \ {\n                    temp = min;\n                    isMin = false;\n   \
    \             } else {\n                    temp = max;\n                    isMax\
    \ = false;\n                }\n                if (isMax) {\n                \
    \    result.Add(temp);\n                    isMax = true;\n                } else\
    \ {\n                    result.Add(mid);\n                    isMin = true;\n\
    \                }\n            } else if (num == min) {\n                if (isMid)\
    \ {\n                    temp = mid;\n                    isMid = false;\n   \
    \             } else {\n                    temp = min;\n                    isMin\
    \ = true;\n                }\n                if (isMin) {\n                 \
    \   result.Add(temp);\n                    isMin = false;\n                } else\
    \ {\n                    result.Add(min);\n                    isMax = true;\n\
    \                }\n            } else if (num == max) {\n                if (isMid)\
    \ {\n                    temp = mid;\n                    isMid = false;\n   \
    \             } else {\n                    temp = max;\n                    isMax\
    \ = true;\n                }\n                if (isMax) {\n                 \
    \   result.Add(temp);\n                    isMax = false;\n                } else\
    \ {\n                    result.Add(max);\n                    isMin = true;\n\
    \                }\n            } else {\n                if (isMid) {\n     \
    \               temp = mid;\n                    isMid = false;\n            \
    \    } else {\n                    temp = num;\n                    isMin = true;\n\
    \                }\n                if (isMin) {\n                    result.Add(temp);\n\
    \                    isMin = false;\n                } else {\n              \
    \      result.Add(num);\n                    isMax = true;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d415e5241577413d8afdf0b374a3389e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d415e5241577413d8afdf0b374a3389e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92dzdmd6.cs(74,17): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long next\
    \ = max;\n        while (current != next) {\n            result.Add(current);\n\
    \            next = current + 1;\n            current = next;\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd4beef9325147ed9900a8d031be0784>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd4beef9325147ed9900a8d031be0784>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        long min = lst.Min();\n        long max = lst.Max();\n        List<long>\
    \ result = new List<long>();\n        long curr = min;\n        while (curr <\
    \ max) {\n            result.Add(curr);\n            curr++;\n        }\n    \
    \    curr--;\n        while (curr >= min) {\n            result.Add(curr);\n \
    \           curr--;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ba92dfd779a42d993b19ead17e2c4d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ba92dfd779a42d993b19ead17e2c4d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long curr = min;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr++;\n        while (curr < max) {\n\
    \            result.Add(curr);\n            curr++;\n        }\n        curr++;\n\
    \        while (curr < max) {\n            result.Add(curr);\n            curr++;\n\
    \        }\n        curr++;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr++;\n        while (curr < max) {\n\
    \            result.Add(curr);\n            curr++;\n        }\n        curr++;\n\
    \        while (curr < max) {\n            result.Add(curr);\n            curr++;\n\
    \        }\n        curr++;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr++;\n        while (curr < max) {\n\
    \            result.Add(curr);\n            curr++;\n        }\n        curr++;\n\
    \        while (curr < max) {\n            result.Add(curr);\n            curr++;\n\
    \        }\n        curr++;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr++;\n        while (curr < max) {\n\
    \            result.Add(curr);\n            curr++;\n        }\n        curr++;\n\
    \        while (curr < max) {\n            result.Add(curr);\n            curr++;\n\
    \        }\n        curr++;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr++;\n        while (curr < max) {\n\
    \            result.Add(curr);\n            curr++;\n        }\n        curr++;\n\
    \        while (curr < max) {\n            result.Add(curr);\n            curr++;\n\
    \        }\n        curr++;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr++;\n        while (curr < max) {\n\
    \            result.Add(curr);\n            curr++;\n        }\n        curr++;\n\
    \        while (curr < max) {\n            result.Add(curr);\n            curr++;\n\
    \        }\n        curr++;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr++;\n        while (curr < max) {\n\
    \            result.Add(curr);\n            curr++;\n        }\n        curr++;\n\
    \        while (curr < max) {\n            result.Add(curr);\n            curr++;\n\
    \        }\n        curr++;\n        while (curr < max) {\n            result.Add(curr);\n\
    \            curr++;\n        }\n        curr++;\n        while (curr < max) {\n\
    \            result.\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph8u2g06w.cs(136,20): error CS1001: Identifier expected

    /tmp/tmph8u2g06w.cs(136,20): error CS1002: ; expected

    /tmp/tmph8u2g06w.cs(138,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmph8u2g06w.cs(150,2): error CS1513: } expected

    '
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long temp;\n        for (int i = 0; i < lst.Count; i++) {\n         \
    \   temp = lst[i];\n            if (temp < min) result.Add(min);\n           \
    \ else if (temp > max) result.Add(max);\n            else result.Add(temp);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2444549f963147d4930959497b9d7226>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2444549f963147d4930959497b9d7226>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        long min = lst.Min();\n        long max = lst.Max();\n        List<long>\
    \ result = new List<long>();\n        long cur = min;\n        while (cur < max)\
    \ {\n            result.Add(cur);\n            cur++;\n        }\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                result.Add(max);\n\
    \            }\n            if (i < min) {\n                result.Add(min);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afaf18651c0d4237a15e21117bad1ef0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afaf18651c0d4237a15e21117bad1ef0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long temp;\n        for (int i = 0; i < lst.Count; i++) {\n         \
    \   temp = lst[i];\n            if (temp < min) result.Add(min);\n           \
    \ else if (temp > max) result.Add(max);\n            else if (temp == min) result.Add(max);\n\
    \            else if (temp == max) result.Add(min);\n            else result.Add(temp);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a1e2bc7206543f3af6785c522d4083b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a1e2bc7206543f3af6785c522d4083b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long currentValue\
    \ = minValue;\n        bool isFirst = true;\n        bool isLast = true;\n   \
    \     bool isMiddle = true;\n        bool isFirstMiddle = true;\n        bool\
    \ isLastMiddle = true;\n        bool isFirstLast = true;\n        bool isMiddleMiddle\
    \ = true;\n        bool isLastLast = true;\n        bool isFirstLastMiddle = true;\n\
    \        bool isLastFirstMiddle = true;\n        bool isFirstMiddleLast = true;\n\
    \        bool isLastMiddleFirst = true;\n        bool isMiddleFirstLast = true;\n\
    \        bool isLastFirstLast = true;\n        bool isFirstMiddleMiddle = true;\n\
    \        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleLast = true;\n\
    \        bool isLastMiddleFirst = true;\n        bool isMiddleFirstMiddle = true;\n\
    \        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleFirst\
    \ = true;\n        bool isLastFirst\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpktfrp071.cs(83,25): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        List<long> lst2 = new List<long>();\n        lst2.Add(min);\n\
    \        lst2.Add(mid);\n        lst2.Add(max);\n        lst2.AddRange(lst);\n\
    \        lst2.Remove(max);\n        lst2.Remove(min);\n        lst2.Remove(mid);\n\
    \        lst2.Reverse();\n        return lst2;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b247f34d184473fabb97c18dc49d570>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b247f34d184473fabb97c18dc49d570>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long current = min;\n        while (current < max) {\n            result.Add(current);\n\
    \            current++;\n        }\n        current = min;\n        while (current\
    \ > min) {\n            result.Add(current);\n            current--;\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9ebd0ad70e343dfac5b740eff030f15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9ebd0ad70e343dfac5b740eff030f15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long min2 = lst.Min(x => x);\n       \
    \ long max2 = lst.Max(x => x);\n        long min3 = lst.Min(x => x, x => x);\n\
    \        long max3 = lst.Max(x => x, x => x);\n        long min4 = lst.Min(x =>\
    \ x, x => x, x => x);\n        long max4 = lst.Max(x => x, x => x, x => x);\n\
    \        long min5 = lst.Min(x => x, x => x, x => x, x => x);\n        long max5\
    \ = lst.Max(x => x, x => x, x => x, x => x);\n        long min6 = lst.Min(x =>\
    \ x, x => x, x => x, x => x, x => x);\n        long max6 = lst.Max(x => x, x =>\
    \ x, x => x, x => x, x => x);\n        long min7 = lst.Min(x => x, x => x, x =>\
    \ x, x => x, x => x, x => x);\n        long max7 = lst.Max(x => x, x => x, x =>\
    \ x, x => x, x => x, x => x);\n        long min8 = lst.Min(x => x, x => x, x =>\
    \ x, x => x, x => x, x => x, x => x);\n        long max8 = lst.Max(x => x, x =>\
    \ x, x => x, x => x, x => x, x => x, x => x);\n        long min9 = lst.Min(x =>\
    \ x, x => x, x => x, x => x, x => x, x => x, x => x, x => x);\n        long max9\
    \ = lst.Max(x => x, x => x, x => x, x => x, x => x, x => x, x => x, x => x, x\
    \ => x);\n        long min10 = lst.Min(x => x, x => x, x => x, x => x, x => x,\
    \ x => x, x => x, x => x, x => x, x => x, x => x, x => x, x => x, x => x, x =>\
    \ x, x => x, x => x, x => x, x => x, x => x, x => x, x => x, x => x, x => x, x\
    \ => x, x => x, x => x, x => x, x => x, x => x, x => x, x => x, x => x, x => x,\
    \ x => x, x => x, x => x, x => x, x \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo6uuqevv.cs(39,335): error CS1026: ) expected

    /tmp/tmpo6uuqevv.cs(39,335): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        long min = lst.Min();\n        long max = lst.Max();\n     \
    \   long mid = min + (max - min) / 2;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < mid)\n               \
    \ result.Add(i);\n            else if (i > mid)\n                result.Add(mid);\n\
    \            else\n                result.Add(mid);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a05bc8ed933b4cd280deb9335944194d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a05bc8ed933b4cd280deb9335944194d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = 0;\n\
    \        long maxIndex = 0;\n        bool isMax = true;\n        bool isMin =\
    \ true;\n        bool isMaxMin = true;\n        bool isMinMax = true;\n      \
    \  bool isMaxMax = true;\n        bool isMinMaxMax = true;\n        bool isMaxMinMax\
    \ = true;\n        bool isMaxMaxMin = true;\n        bool isMinMaxMaxMin = true;\n\
    \        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n  \
    \      bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n    \
    \    bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n      \
    \  bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n        bool\
    \ isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin\
    \ = true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin =\
    \ true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n\
    \        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n  \
    \      bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n    \
    \    bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n      \
    \  bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n        bool\
    \ isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin\
    \ = true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin =\
    \ true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n\
    \        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n  \
    \      bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n    \
    \    bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n      \
    \  bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n        bool\
    \ isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin\
    \ = true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin =\
    \ true;\n        bool isMaxMinMaxMin = true;\n        bool isMaxMinMaxMin = true;\n\
    \        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxlmu7zq4.cs(35,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(36,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(37,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(38,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(39,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(40,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(41,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(42,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(43,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(44,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(45,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(46,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(47,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(48,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4.cs(49,14): error CS0128: A local variable or function named ''isMaxMinMaxMin''
    is already defined in this scope

    /tmp/tmpxlmu7zq4'
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long current = min;\n        while (current <= max) {\n            result.Add(current);\n\
    \            current += 1;\n        }\n        current = min;\n        while (current\
    \ >= min) {\n            result.Add(current);\n            current -= 1;\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c361cb4cb5f4f898e16b8b18bc7203f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c361cb4cb5f4f898e16b8b18bc7203f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextValue\
    \ = current;\n        bool isFirst = true;\n        bool isLast = true;\n    \
    \    bool isMiddle = true;\n        bool isMiddleMiddle = true;\n        bool\
    \ isMiddleLast = true;\n        bool isLastMiddle = true;\n        bool isLastLast\
    \ = true;\n        bool isFirstMiddle = true;\n        bool isFirstLast = true;\n\
    \        bool isFirstMiddleMiddle = true;\n        bool isFirstMiddleLast = true;\n\
    \        bool isFirstLastMiddle = true;\n        bool isFirstLastLast = true;\n\
    \        bool isFirstMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleLastLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLast = true;\n        bool isFirstLastMiddleMiddleLastLast\
    \ = true;\n        bool isFirstMiddleLastMiddleLastLast = true;\n        bool\
    \ isFirstLastMiddleMiddleLastLastLast = true;\n        bool isFirstMiddleMiddleLastMiddleLastLast\
    \ = true;\n        bool isFirstMiddleMiddleLastMiddleLastLastLast = true;\n  \
    \      bool isFirstLastMiddleMiddleLastMiddleLastLast = true;\n        bool isFirstLastMiddleMiddleLastMiddleLastLastLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLast = true;\n\
    \        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLast = true;\n    \
    \    bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLast = true;\n    \
    \    bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLast = true;\n    \
    \    bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLast = true;\n\
    \        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLast = true;\n\
    \        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLast = true;\n\
    \        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLastLast =\
    \ true;\n        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLastLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isFirstLastMiddleMiddleLastMiddleLastLastLastLastLastLastLastLastLast\
    \ = true;\n        bool isFirstLastMiddle\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpma9aj_9m.cs(65,31): error CS1002: ; expected

    '
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long previous\
    \ = min;\n        foreach (long n in lst) {\n            if (n > max) {\n    \
    \            result.Add(current);\n                current = previous;\n     \
    \           previous = n;\n            } else if (n < min) {\n               \
    \ result.Add(current);\n                current = previous;\n                previous\
    \ = n;\n            } else {\n                current = n;\n            }\n  \
    \      }\n        result.Add(current);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6634d51b477b4576966d8360352c8216>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6634d51b477b4576966d8360352c8216>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> ret = new List<long>();\n \
    \       foreach (long i in lst) {\n            long temp;\n            if (i <\
    \ min) {\n                temp = min;\n                min = i;\n            }\
    \ else if (i > max) {\n                temp = max;\n                max = i;\n\
    \            } else {\n                temp = i;\n            }\n            ret.Add(temp);\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc25d15b276e437eaeb08ed5cf6e72d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc25d15b276e437eaeb08ed5cf6e72d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool isFirst = true;\n        foreach (long i in lst) {\n            if\
    \ (isFirst) {\n                result.Add(i);\n                isFirst = false;\n\
    \            } else {\n                if (i < mid) {\n                    result.Add(i);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(i);\n  \
    \                  result.Add(max);\n                    result.Add(min);\n  \
    \                  result.Add(mid);\n                    result.Add(i);\n    \
    \                result.Add(max);\n                    result.Add(min);\n    \
    \                result.Add(mid);\n                    result.Add(i);\n      \
    \              result.Add(max);\n                    result.Add(min);\n      \
    \              result.Add(mid);\n                    result.Add(i);\n        \
    \            result.Add(max);\n                    result.Add(min);\n        \
    \            result.Add(mid);\n                    result.Add(i);\n          \
    \          result.Add(max);\n                    result.Add(min);\n          \
    \          result.Add(mid);\n                    result.Add(i);\n            \
    \        result.Add(max);\n                    result.Add(min);\n            \
    \        result.Add(mid);\n                    result.Add(i);\n              \
    \      result.Add(max);\n                    result.Add(min);\n              \
    \      result.Add(mid);\n                    result.Add(i);\n                \
    \    result.Add(max);\n                    result.Add(min);\n                \
    \    result.Add(mid);\n                    result.Add(i);\n                  \
    \  result.Add(max);\n                    result.Add(min);\n                  \
    \  result.Add(mid);\n                    result.Add(i);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(i);\n                    result.Add(max);\n  \
    \                  result.Add(min);\n                    result.Add(mid);\n  \
    \                  result.Add(i);\n                    result.Add(max);\n    \
    \                result.Add(min);\n                    result.Add(mid);\n    \
    \                result.Add(i);\n                    result.Add(max);\n      \
    \              result.Add(min);\n                    result.Add(mid);\n      \
    \              result.Add(i);\n                    result.Add(max);\n        \
    \            result.Add(min);\n                    result.Add(mid);\n        \
    \            result.Add(i);\n                    result.Add(max);\n          \
    \          result.Add(min);\n                    result.Add(mid);\n          \
    \          result.Add(i);\n                    result.Add(max);\n            \
    \        result.Add(min);\n                    result.Add(mid);\n            \
    \        result.Add(i);\n                    result.Add(max);\n              \
    \      result.Add(min);\n                    result.Add(mid);\n              \
    \      result.Add(i);\n                    result.Add(max);\n                \
    \    result.Add(min);\n                    result.Add(mid);\n                \
    \    result.Add(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc8l8rvic.cs(107,32): error CS1026: ) expected

    /tmp/tmpc8l8rvic.cs(107,32): error CS1002: ; expected

    /tmp/tmpc8l8rvic.cs(109,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpc8l8rvic.cs(121,2): error CS1513: } expected

    '
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      foreach (long i in lst) {\n            if (i < mid) {\n               \
    \ result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e175a424bff24bbdacfa04e4aa7388a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long mid = min + (max - min) / 2;\n        bool isMax\
    \ = true;\n        foreach (long i in lst) {\n            if (isMax) {\n     \
    \           if (i > mid)\n                    result.Add(i);\n               \
    \ else\n                    result.Add(mid);\n                isMax = false;\n\
    \            } else {\n                if (i < mid)\n                    result.Add(i);\n\
    \                else\n                    result.Add(mid);\n                isMax\
    \ = true;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1e6a1f1424844dfb4142512ff4b5f3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1e6a1f1424844dfb4142512ff4b5f3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            } else if (i > mid) {\n          \
    \      temp = mid;\n            } else {\n                temp = mid;\n      \
    \      }\n            result.Add(temp);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long minValue = lst[0];\n\
    \        long maxValue = lst[0];\n        foreach (long value in lst) {\n    \
    \        if (value < minValue) {\n                minValue = value;\n        \
    \    }\n            if (value > maxValue) {\n                maxValue = value;\n\
    \            }\n        }\n        long temp;\n        while (minValue < maxValue)\
    \ {\n            temp = minValue;\n            minValue = maxValue;\n        \
    \    maxValue = temp;\n        }\n        long temp2;\n        while (maxValue\
    \ > minValue) {\n            temp2 = minValue;\n            minValue = maxValue;\n\
    \            maxValue = temp2;\n        }\n        result.Add(minValue);\n   \
    \     result.Add(maxValue);\n        result.Add(minValue);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a44ec076a9a24645abbfa5b76d972aec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a44ec076a9a24645abbfa5b76d972aec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool swap = false;\n        foreach (long i in lst) {\n            if (i\
    \ < mid) {\n                result.Add(i);\n                swap = true;\n   \
    \         } else if (i > mid) {\n                result.Add(mid);\n          \
    \      swap = true;\n            } else {\n                result.Add(mid);\n\
    \                swap = false;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <663bc91de95f42ddbfd34e0afc5b3e30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <663bc91de95f42ddbfd34e0afc5b3e30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> res = new\
    \ List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid49 = mid\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf5dnxcuw.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            } else if (i > mid) {\n          \
    \      temp = mid;\n            } else {\n                temp = mid;\n      \
    \      }\n            result.Add(temp);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        bool isMin = true;\n        bool isMax = true;\n    \
    \    foreach (long num in lst) {\n            if (isMin) {\n                result.Add(num);\n\
    \                isMin = false;\n            }\n            if (isMax) {\n   \
    \             result.Add(num);\n                isMax = false;\n            }\n\
    \            if (num == min) {\n                isMin = true;\n            }\n\
    \            if (num == max) {\n                isMax = true;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c46f8ba284f64924978ddfb893e2e807>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c46f8ba284f64924978ddfb893e2e807>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        long min = lst.Min();\n        long max = lst.Max();\n        List<long>\
    \ result = new List<long>();\n        long curr = min;\n        while (curr <\
    \ max) {\n            result.Add(curr);\n            curr++;\n        }\n    \
    \    while (curr > min) {\n            result.Add(curr);\n            curr--;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91c9aac680ea49519a09b1cad3d48bed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91c9aac680ea49519a09b1cad3d48bed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.FindIndex(lst\
    \ => lst == minValue);\n        long maxIndex = lst.FindIndex(lst => lst == maxValue);\n\
    \        long minIndex2 = lst.FindIndex(lst => lst == minValue);\n        long\
    \ maxIndex2 = lst.FindIndex(lst => lst == maxValue);\n        if (minIndex ==\
    \ maxIndex && minIndex2 == maxIndex2) {\n            result.Add(minValue);\n \
    \           result.Add(maxValue);\n            return result;\n        }\n   \
    \     if (minIndex == maxIndex && minIndex2 != maxIndex2) {\n            result.Add(minValue);\n\
    \            result.Add(maxValue);\n            result.Add(minValue);\n      \
    \      return result;\n        }\n        if (minIndex != maxIndex && minIndex2\
    \ == maxIndex2) {\n            result.Add(minValue);\n            result.Add(maxValue);\n\
    \            result.Add(maxValue);\n            return result;\n        }\n  \
    \      if (minIndex != maxIndex && minIndex2 != maxIndex2) {\n            result.Add(minValue);\n\
    \            result.Add(maxValue);\n            result.Add(minValue);\n      \
    \      result.Add(maxValue);\n            return result;\n        }\n        if\
    \ (minIndex != maxIndex && minIndex2 == maxIndex2 && maxIndex != minIndex2) {\n\
    \            result.Add(minValue);\n            result.Add(maxValue);\n      \
    \      result.Add(maxValue);\n            result.Add(maxValue);\n            return\
    \ result;\n        }\n        if (minIndex != maxIndex && minIndex2 != maxIndex2\
    \ && maxIndex != minIndex2) {\n            result.Add(minValue);\n           \
    \ result.Add(maxValue);\n            result.Add(minValue);\n            result.Add(maxValue);\n\
    \            result.Add(maxValue);\n            return result;\n        }\n  \
    \      if (minIndex != maxIndex && minIndex2 == maxIndex2 && maxIndex != minIndex2\
    \ && minIndex != maxIndex2) {\n            result.Add(minValue);\n           \
    \ result.Add(maxValue);\n            result.Add(maxValue);\n            result.Add(maxValue);\n\
    \            result.Add(maxValue);\n            return result;\n        }\n  \
    \      if (minIndex != maxIndex && minIndex2 != maxIndex2 && maxIndex != minIndex2\
    \ && minIndex != maxIndex2) {\n            result.Add(minValue);\n           \
    \ result.Add(maxValue);\n            result.Add(minValue);\n            result.Add(maxValue);\n\
    \            result.Add(maxValue);\n            return result;\n        }\n  \
    \      if (minIndex != maxIndex && minIndex2 != maxIndex2 && maxIndex != minIndex2\
    \ && minIndex != maxIndex2) {\n            result.Add(minValue);\n           \
    \ result.Add(maxValue);\n            result.Add(minValue);\n            result.Add(maxValue);\n\
    \            result.Add(maxValue);\n            result.Add(maxValue);\n      \
    \      return result;\n        }\n        if (minIndex != max\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxh33g3eh.cs(91,28): error CS1026: ) expected

    /tmp/tmpxh33g3eh.cs(91,28): error CS1525: Invalid expression term ''}''

    /tmp/tmpxh33g3eh.cs(91,28): error CS1002: ; expected

    '
  timestamp: 1659798877
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        while (current != nextMax) {\n\
    \            result.Add(current);\n            current = nextMin;\n          \
    \  nextMin = nextMax;\n            nextMax = current + 1;\n        }\n       \
    \ result.Add(max);\n        result.Add(min);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659798883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            } else if (i > mid) {\n          \
    \      temp = mid;\n            } else {\n                temp = mid;\n      \
    \      }\n            result.Add(temp);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.IndexOf(minValue);\n\
    \        long maxIndex = lst.IndexOf(maxValue);\n        long temp;\n        do\
    \ {\n            temp = lst.ElementAt(minIndex).CompareTo(lst.ElementAt(maxIndex));\n\
    \            if (temp != 0) {\n                result.Add(lst.ElementAt(minIndex));\n\
    \                minIndex++;\n            } else {\n                result.Add(lst.ElementAt(maxIndex));\n\
    \                maxIndex--;\n            }\n        } while (minIndex < maxIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgo38_6bq.cs(27,34): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo38_6bq.cs(27,68): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo38_6bq.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpgo38_6bq.cs(32,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        long min = lst.Min();\n        long max = lst.Max();\n     \
    \   long mid = min + (max - min) / 2;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < mid) {\n             \
    \   result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6178cd842fef4620aec5664da53745f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6178cd842fef4620aec5664da53745f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long minIndex = lst.FindIndex(lv\
    \ => lv == minValue);\n        long maxIndex = lst.FindIndex(lv => lv == maxValue);\n\
    \        long minIndex2 = lst.FindIndex(lv => lv == minValue);\n        long maxIndex2\
    \ = lst.FindIndex(lv => lv == maxValue);\n        long minIndex3 = lst.FindIndex(lv\
    \ => lv == minValue);\n        long maxIndex3 = lst.FindIndex(lv => lv == maxValue);\n\
    \        long minIndex4 = lst.FindIndex(lv => lv == minValue);\n        long maxIndex4\
    \ = lst.FindIndex(lv => lv == maxValue);\n        long minIndex5 = lst.FindIndex(lv\
    \ => lv == minValue);\n        long maxIndex5 = lst.FindIndex(lv => lv == maxValue);\n\
    \        long minIndex6 = lst.FindIndex(lv => lv == minValue);\n        long maxIndex6\
    \ = lst.FindIndex(lv => lv == maxValue);\n        long minIndex7 = lst.FindIndex(lv\
    \ => lv == minValue);\n        long maxIndex7 = lst.FindIndex(lv => lv == maxValue);\n\
    \        long minIndex8 = lst.FindIndex(lv => lv == minValue);\n        long maxIndex8\
    \ = lst.FindIndex(lv => lv == maxValue);\n        long minIndex9 = lst.FindIndex(lv\
    \ => lv == minValue);\n        long maxIndex9 = lst.FindIndex(lv => lv == maxValue);\n\
    \        long minIndex10 = lst.FindIndex(lv => lv == minValue);\n        long\
    \ maxIndex10 = lst.FindIndex(lv => lv == maxValue);\n        long minIndex11 =\
    \ lst.FindIndex(lv => lv == minValue);\n        long maxIndex11 = lst.FindIndex(lv\
    \ => lv == maxValue);\n        long minIndex12 = lst.FindIndex(lv => lv == minValue);\n\
    \        long maxIndex12 = lst.FindIndex(lv => lv == maxValue);\n        long\
    \ minIndex13 = lst.FindIndex(lv => lv == minValue);\n        long maxIndex13 =\
    \ lst.FindIndex(lv => lv == maxValue);\n        long minIndex14 = lst.FindIndex(lv\
    \ => lv == minValue);\n        long maxIndex14 = lst.FindIndex(lv => lv == maxValue);\n\
    \        long minIndex15 = \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprsicmltx.cs(51,26): error CS1525: Invalid expression term ''}''

    /tmp/tmprsicmltx.cs(51,26): error CS1002: ; expected

    '
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      foreach (long i in lst) {\n            if (i < mid) {\n               \
    \ result.Add(i);\n            } else if (i > mid) {\n                result.Add(mid);\n\
    \            } else {\n                result.Add(mid);\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d1c3556e384497db46ab215eacdd568>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d1c3556e384497db46ab215eacdd568>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = min + (max - min) / 2;\n        long mid3 = min + (max - min)\
    \ / 2;\n        long mid4 = min + (max - min) / 2;\n        long mid5 = min +\
    \ (max - min) / 2;\n        long mid6 = min + (max - min) / 2;\n        long mid7\
    \ = min + (max - min) / 2;\n        long mid8 = min + (max - min) / 2;\n     \
    \   long mid9 = min + (max - min) / 2;\n        long mid10 = min + (max - min)\
    \ / 2;\n        long mid11 = min + (max - min) / 2;\n        long mid12 = min\
    \ + (max - min) / 2;\n        long mid13 = min + (max - min) / 2;\n        long\
    \ mid14 = min + (max - min) / 2;\n        long mid15 = min + (max - min) / 2;\n\
    \        long mid16 = min + (max - min) / 2;\n        long mid17 = min + (max\
    \ - min) / 2;\n        long mid18 = min + (max - min) / 2;\n        long mid19\
    \ = min + (max - min) / 2;\n        long mid20 = min + (max - min) / 2;\n    \
    \    long mid21 = min + (max - min) / 2;\n        long mid22 = min + (max - min)\
    \ / 2;\n        long mid23 = min + (max - min) / 2;\n        long mid24 = min\
    \ + (max - min) / 2;\n        long mid25 = min + (max - min) / 2;\n        long\
    \ mid26 = min + (max - min) / 2;\n        long mid27 = min + (max - min) / 2;\n\
    \        long mid28 = min + (max - min) / 2;\n        long mid29 = min + (max\
    \ - min) / 2;\n        long mid30 = min + (max - min) / 2;\n        long mid31\
    \ = min + (max - min) / 2;\n        long mid32 = min + (max - min) / 2;\n    \
    \    long mid33 = min + (max - min) / 2;\n        long mid34 = min + (max - min)\
    \ / 2;\n        long mid35 = min + (max - min) / 2;\n        long mid36 = min\
    \ + (max - min) / 2;\n        long mid37 = min + (max - min) / 2;\n        long\
    \ mid38 = min + (max - min) / 2;\n        long mid39 = min + (max - min) / 2;\n\
    \        long mid40 = min + (max - min) / 2;\n        long mid41 = min + (max\
    \ - min) / 2;\n        long mid42 = min \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43_uyagm.cs(64,25): error CS1002: ; expected

    '
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        long temp;\n        bool flag = false;\n        foreach (long i in lst)\
    \ {\n            if (flag) {\n                temp = i;\n                flag\
    \ = false;\n            }\n            else if (i == max) {\n                result.Add(temp);\n\
    \                flag = true;\n            }\n            else if (i == min) {\n\
    \                result.Add(temp);\n                flag = true;\n           \
    \ }\n            else {\n                result.Add(i);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp02qkmqst.cs(32,28): error CS0165: Use of unassigned local variable ''temp''

    '
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid49 = mid\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzh93o2dw.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      bool isFirst = true;\n        foreach (long i in lst) {\n            if\
    \ (isFirst) {\n                result.Add(i);\n                isFirst = false;\n\
    \            }\n            if (i < mid) {\n                result.Add(i);\n \
    \           } else if (i > mid) {\n                result.Add(mid);\n        \
    \        result.Add(i);\n                isFirst = true;\n            } else {\n\
    \                result.Add(mid);\n                result.Add(i);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f8e4b44fcf3426e937694030b30397e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f8e4b44fcf3426e937694030b30397e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in lst) {\n            if (i < min)\n\
    \                result.Add(min);\n            else if (i > max)\n           \
    \     result.Add(max);\n            else\n                result.Add(i);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd985aaa663a4965ae6047e54511509f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd985aaa663a4965ae6047e54511509f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long temp;\n     \
    \   foreach (long i in lst) {\n            if (i < minValue) {\n             \
    \   temp = minValue;\n                minValue = i;\n            }\n         \
    \   else if (i > maxValue) {\n                temp = maxValue;\n             \
    \   maxValue = i;\n            }\n            else {\n                temp = i;\n\
    \            }\n            result.Add(temp);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <954a08f97d01470983221e88edc3cf70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <954a08f97d01470983221e88edc3cf70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp = mid;\n        foreach (long i in lst) {\n            if (i\
    \ < mid) {\n                result.Add(temp);\n                temp = i;\n   \
    \         } else if (i > mid) {\n                result.Add(temp);\n         \
    \       temp = i;\n            } else {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccd54dbee6df4d318d4a3e141abfe0ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccd54dbee6df4d318d4a3e141abfe0ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long minValue = lst[0];\n\
    \        long maxValue = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < minValue) {\n                minValue = lst[i];\n\
    \            }\n            if (lst[i] > maxValue) {\n                maxValue\
    \ = lst[i];\n            }\n        }\n        long middle = minValue + (maxValue\
    \ - minValue) / 2;\n        long middle2 = middle + 1;\n        long middle3 =\
    \ middle2 + 1;\n        long middle4 = middle3 + 1;\n        long middle5 = middle4\
    \ + 1;\n        long middle6 = middle5 + 1;\n        long middle7 = middle6 +\
    \ 1;\n        long middle8 = middle7 + 1;\n        long middle9 = middle8 + 1;\n\
    \        long middle10 = middle9 + 1;\n        long middle11 = middle10 + 1;\n\
    \        long middle12 = middle11 + 1;\n        long middle13 = middle12 + 1;\n\
    \        long middle14 = middle13 + 1;\n        long middle15 = middle14 + 1;\n\
    \        long middle16 = middle15 + 1;\n        long middle17 = middle16 + 1;\n\
    \        long middle18 = middle17 + 1;\n        long middle19 = middle18 + 1;\n\
    \        long middle20 = middle19 + 1;\n        long middle21 = middle20 + 1;\n\
    \        long middle22 = middle21 + 1;\n        long middle23 = middle22 + 1;\n\
    \        long middle24 = middle23 + 1;\n        long middle25 = middle24 + 1;\n\
    \        long middle26 = middle25 + 1;\n        long middle27 = middle26 + 1;\n\
    \        long middle28 = middle27 + 1;\n        long middle29 = middle28 + 1;\n\
    \        long middle30 = middle29 + 1;\n        long middle31 = middle30 + 1;\n\
    \        long middle32 = middle31 + 1;\n        long middle33 = middle32 + 1;\n\
    \        long middle34 = middle33 + 1;\n        long middle35 = middle34 + 1;\n\
    \        long middle36 = middle35 + 1;\n        long middle37 = middle36 + 1;\n\
    \        long middle38 = middle37 + 1;\n        long middle39 = middle38 + 1;\n\
    \        long middle40 = middle39 + 1;\n        long middle41 = middle40 + 1;\n\
    \        long middle42 = middle41 + 1;\n        long middle43 = middle42 + 1;\n\
    \        long middle44 = middle43 + 1;\n        long middle45 = middle44 + 1;\n\
    \        long middle46 = middle45 + 1;\n        long middle47 = middle46 + 1;\n\
    \        long middle48 = middle47 + 1;\n        long middle\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa4c4hse1.cs(82,20): error CS1002: ; expected

    '
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        long mid2 =\
    \ mid / 2;\n        long mid3 = mid / 3;\n        long mid4 = mid / 4;\n     \
    \   long mid5 = mid / 5;\n        long mid6 = mid / 6;\n        long mid7 = mid\
    \ / 7;\n        long mid8 = mid / 8;\n        long mid9 = mid / 9;\n        long\
    \ mid10 = mid / 10;\n        long mid11 = mid / 11;\n        long mid12 = mid\
    \ / 12;\n        long mid13 = mid / 13;\n        long mid14 = mid / 14;\n    \
    \    long mid15 = mid / 15;\n        long mid16 = mid / 16;\n        long mid17\
    \ = mid / 17;\n        long mid18 = mid / 18;\n        long mid19 = mid / 19;\n\
    \        long mid20 = mid / 20;\n        long mid21 = mid / 21;\n        long\
    \ mid22 = mid / 22;\n        long mid23 = mid / 23;\n        long mid24 = mid\
    \ / 24;\n        long mid25 = mid / 25;\n        long mid26 = mid / 26;\n    \
    \    long mid27 = mid / 27;\n        long mid28 = mid / 28;\n        long mid29\
    \ = mid / 29;\n        long mid30 = mid / 30;\n        long mid31 = mid / 31;\n\
    \        long mid32 = mid / 32;\n        long mid33 = mid / 33;\n        long\
    \ mid34 = mid / 34;\n        long mid35 = mid / 35;\n        long mid36 = mid\
    \ / 36;\n        long mid37 = mid / 37;\n        long mid38 = mid / 38;\n    \
    \    long mid39 = mid / 39;\n        long mid40 = mid / 40;\n        long mid41\
    \ = mid / 41;\n        long mid42 = mid / 42;\n        long mid43 = mid / 43;\n\
    \        long mid44 = mid / 44;\n        long mid45 = mid / 45;\n        long\
    \ mid46 = mid / 46;\n        long mid47 = mid / 47;\n        long mid48 = mid\
    \ / 48;\n        long mid49 = mid \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg4qyxa51.cs(73,25): error CS1002: ; expected

    '
  timestamp: 1659798877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in lst) {\n            if (i < min)\n\
    \                result.Add(min);\n            else if (i > max)\n           \
    \     result.Add(max);\n            else\n                result.Add(i);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd985aaa663a4965ae6047e54511509f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd985aaa663a4965ae6047e54511509f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + ((max - min) / 2);\n\
    \        long temp;\n        bool isFirst = true;\n        foreach (long i in\
    \ lst) {\n            if (isFirst) {\n                isFirst = false;\n     \
    \           temp = i;\n            } else {\n                if (i == mid) {\n\
    \                    result.Add(temp);\n                    temp = i;\n      \
    \          } else {\n                    result.Add(i);\n                    temp\
    \ = i;\n                }\n            }\n        }\n        result.Add(temp);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvo59cu_y.cs(35,32): error CS0165: Use of unassigned local variable ''temp''

    '
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long next\
    \ = current;\n        while (current != max) {\n            result.Add(current);\n\
    \            current = next;\n            next = current + 1;\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2615bd7eae406aaf81bd40a1a622d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2615bd7eae406aaf81bd40a1a622d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        foreach (long i in lst) {\n            if (i < mid)\
    \ {\n                temp = i;\n            } else if (i > mid) {\n          \
    \      temp = mid;\n            } else {\n                temp = mid;\n      \
    \      }\n            result.Add(temp);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21210b7712384a52a52b843654accdbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        result.Add(mid);\n\
    \        result.AddRange(lst);\n        result.Add(mid);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72d9c09483f14442a484affd9ab6992d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72d9c09483f14442a484affd9ab6992d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long middle = min + (max - min) / 2;\n        long middle2\
    \ = middle + 1;\n        long middle3 = middle + 2;\n        long middle4 = middle\
    \ + 3;\n        long middle5 = middle + 4;\n        long middle6 = middle + 5;\n\
    \        long middle7 = middle + 6;\n        long middle8 = middle + 7;\n    \
    \    long middle9 = middle + 8;\n        long middle10 = middle + 9;\n       \
    \ long middle11 = middle + 10;\n        long middle12 = middle + 11;\n       \
    \ long middle13 = middle + 12;\n        long middle14 = middle + 13;\n       \
    \ long middle15 = middle + 14;\n        long middle16 = middle + 15;\n       \
    \ long middle17 = middle + 16;\n        long middle18 = middle + 17;\n       \
    \ long middle19 = middle + 18;\n        long middle20 = middle + 19;\n       \
    \ long middle21 = middle + 20;\n        long middle22 = middle + 21;\n       \
    \ long middle23 = middle + 22;\n        long middle24 = middle + 23;\n       \
    \ long middle25 = middle + 24;\n        long middle26 = middle + 25;\n       \
    \ long middle27 = middle + 26;\n        long middle28 = middle + 27;\n       \
    \ long middle29 = middle + 28;\n        long middle30 = middle + 29;\n       \
    \ long middle31 = middle + 30;\n        long middle32 = middle + 31;\n       \
    \ long middle33 = middle + 32;\n        long middle34 = middle + 33;\n       \
    \ long middle35 = middle + 34;\n        long middle36 = middle + 35;\n       \
    \ long middle37 = middle + 36;\n        long middle38 = middle + 37;\n       \
    \ long middle39 = middle + 38;\n        long middle40 = middle + 39;\n       \
    \ long middle41 = middle + 40;\n        long middle42 = middle + 41;\n       \
    \ long middle43 = middle + 42;\n        long middle44 = middle + 43;\n       \
    \ long middle45 = middle + 44;\n        long middle46 = middle + 45;\n       \
    \ long middle47 = middle + 46;\n        long middle48 = middle + 47;\n       \
    \ long middle49 = middle + 48;\n        long middle50 = middle + 49;\n       \
    \ long middle5\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2hxk3_rq.cs(75,21): error CS1002: ; expected

    '
  timestamp: 1659798877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        bool first = true;\n        foreach (long i in lst) {\n    \
    \        if (first) {\n                result.Add(current);\n                first\
    \ = false;\n            }\n            if (current < nextMax) {\n            \
    \    result.Add(nextMax);\n                current = nextMax;\n              \
    \  nextMax = i;\n            }\n            else {\n                result.Add(i);\n\
    \                current = i;\n                nextMax = max;\n            }\n\
    \        }\n        result.Add(max);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5adc439b1f24dde886634b3dd8df6f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5adc439b1f24dde886634b3dd8df6f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        List<long> result =\
    \ new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid49 = mid\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzh93o2dw.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659798873
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        bool isFirst = true;\n        foreach (long i in lst) {\n           \
    \ if (isFirst) {\n                result.Add(i);\n                isFirst = false;\n\
    \            }\n            if (i < min) {\n                result.Add(min);\n\
    \                min = i;\n            } else if (i > max) {\n               \
    \ result.Add(max);\n                max = i;\n            } else {\n         \
    \       result.Add(i);\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c627631242a3440f94b8df30cd369d3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c627631242a3440f94b8df30cd369d3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long minValue = lst[0];\n\
    \        long maxValue = lst[0];\n        foreach (long value in lst) {\n    \
    \        if (value < minValue) {\n                minValue = value;\n        \
    \    }\n            if (value > maxValue) {\n                maxValue = value;\n\
    \            }\n        }\n        long temp;\n        while (minValue < maxValue)\
    \ {\n            temp = minValue;\n            minValue = maxValue;\n        \
    \    maxValue = temp;\n        }\n        foreach (long value in lst) {\n    \
    \        if (value < minValue) {\n                result.Add(value);\n       \
    \     }\n            if (value > maxValue) {\n                result.Add(value);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <715cf43922934a1f93d9339d29547759>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <715cf43922934a1f93d9339d29547759>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        while (current != nextMax) {\n\
    \            result.Add(current);\n            nextMax = nextMax + 1;\n      \
    \  }\n        while (current != nextMin) {\n            result.Add(current);\n\
    \            nextMin = nextMin - 1;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659798883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long mid = min + (max - min) / 2;\n        foreach (long\
    \ i in lst) {\n            if (i < mid)\n                result.Add(i);\n    \
    \        else if (i > mid)\n                result.Add(mid);\n            else\n\
    \                result.Add(mid);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a2dba95372249d0a5b2e80985a21ccd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a2dba95372249d0a5b2e80985a21ccd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> ret = new List<long>();\n\
    \        foreach (long i in lst) {\n            long temp;\n            if (i\
    \ < min)\n                temp = min;\n            else if (i > max)\n       \
    \         temp = max;\n            else\n                temp = i;\n         \
    \   ret.Add(temp);\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd6a9c7275814965bfd55e7c14aa3e91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd6a9c7275814965bfd55e7c14aa3e91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long curr = min;\n        while (curr < max) {\n    \
    \        result.Add(curr);\n            curr++;\n        }\n        foreach (long\
    \ val in lst) {\n            if (val < min)\n                result.Remove(val);\n\
    \            else if (val > max)\n                result.Insert(result.Count -\
    \ 1, val);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c08ed59bb8e846a0b3be8b046cf954bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c08ed59bb8e846a0b3be8b046cf954bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        bool swap = false;\n        foreach (long num in lst)\
    \ {\n            if (num < mid) {\n                temp = num;\n             \
    \   num = mid;\n                mid = temp;\n                swap = true;\n  \
    \          }\n            result.Add(num);\n        }\n        if (swap) {\n \
    \           temp = min;\n            min = max;\n            max = temp;\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7lty3ja4.cs(29,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = lst.Min();\n        long maxValue = lst.Max();\n        long currentMinValue\
    \ = minValue;\n        long currentMaxValue = maxValue;\n        long currentMinIndex\
    \ = lst.IndexOf(minValue);\n        long currentMaxIndex = lst.IndexOf(maxValue);\n\
    \        long currentMinIndex2 = lst.IndexOf(minValue, currentMinIndex);\n   \
    \     long currentMaxIndex2 = lst.IndexOf(maxValue, currentMaxIndex);\n      \
    \  bool isFirst = true;\n        bool isLast = true;\n        bool isMiddle =\
    \ true;\n        bool isMiddle2 = true;\n        bool isMiddle3 = true;\n    \
    \    bool isMiddle4 = true;\n        bool isMiddle5 = true;\n        bool isMiddle6\
    \ = true;\n        bool isMiddle7 = true;\n        bool isMiddle8 = true;\n  \
    \      bool isMiddle9 = true;\n        bool isMiddle10 = true;\n        bool isMiddle11\
    \ = true;\n        bool isMiddle12 = true;\n        bool isMiddle13 = true;\n\
    \        bool isMiddle14 = true;\n        bool isMiddle15 = true;\n        bool\
    \ isMiddle16 = true;\n        bool isMiddle17 = true;\n        bool isMiddle18\
    \ = true;\n        bool isMiddle19 = true;\n        bool isMiddle20 = true;\n\
    \        bool isMiddle21 = true;\n        bool isMiddle22 = true;\n        bool\
    \ isMiddle23 = true;\n        bool isMiddle24 = true;\n        bool isMiddle25\
    \ = true;\n        bool isMiddle26 = true;\n        bool isMiddle27 = true;\n\
    \        bool isMiddle28 = true;\n        bool isMiddle29 = true;\n        bool\
    \ isMiddle30 = true;\n        bool isMiddle31 = true;\n        bool isMiddle32\
    \ = true;\n        bool isMiddle33 = true;\n        bool isMiddle34 = true;\n\
    \        bool isMiddle35 = true;\n        bool isMiddle36 = true;\n        bool\
    \ isMiddle37 = true;\n        bool isMiddle38 = true;\n        bool isMiddle39\
    \ = true;\n        bool isMiddle40 = true;\n        bool isMiddle41 = true;\n\
    \        bool isMiddle42 = true;\n        bool isMiddle43 = true;\n        bool\
    \ isMiddle44 = true;\n        bool isMiddle45 = true;\n        bool isMiddle46\
    \ = true;\n        bool isMiddle47 = true;\n        bool isMiddle48 = true;\n\
    \        bool isMiddle49 = true;\n        bool isMiddle50 = true;\n        bool\
    \ isMiddle51 = true;\n        bool isMiddle52 = true;\n        bool isMiddle53\
    \ = true;\n        bool isMiddle54 = true;\n        bool isMiddle55 = true;\n\
    \        bool isMiddle56 = true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpavw_pbb7.cs(27,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpavw_pbb7.cs(28,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpavw_pbb7.cs(29,14): warning CS0219: The variable ''isFirst'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(30,14): warning CS0219: The variable ''isLast'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(31,14): warning CS0219: The variable ''isMiddle'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(32,14): warning CS0219: The variable ''isMiddle2'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(33,14): warning CS0219: The variable ''isMiddle3'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(34,14): warning CS0219: The variable ''isMiddle4'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(35,14): warning CS0219: The variable ''isMiddle5'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(36,14): warning CS0219: The variable ''isMiddle6'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(37,14): warning CS0219: The variable ''isMiddle7'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(38,14): warning CS0219: The variable ''isMiddle8'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(39,14): warning CS0219: The variable ''isMiddle9'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(40,14): warning CS0219: The variable ''isMiddle10'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(41,14): warning CS0219: The variable ''isMiddle11'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(42,14): warning CS0219: The variable ''isMiddle12'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(43,14): warning CS0219: The variable ''isMiddle13'' is assigned
    but its value is never used

    /tmp/tmpavw_pbb7.cs(44,14): warning CS0219: The variable ''isMiddle14'' is assigned
    but its value is never use'
  timestamp: 1659798878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long cur = min;\n        long next = max;\n        while\
    \ (cur != next) {\n            result.Add(cur);\n            next = cur;\n   \
    \         while (next != min && next != max) {\n                next = next *\
    \ 2;\n            }\n            cur = next;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c60b692bbf14475a2173229f4e7772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c60b692bbf14475a2173229f4e7772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        bool swapped;\n        do {\n            swapped =\
    \ false;\n            for (int i = 0; i < lst.Count; i++) {\n                if\
    \ (lst[i] < mid) {\n                    temp = lst[i];\n                    lst[i]\
    \ = mid;\n                    mid = temp;\n                    swapped = true;\n\
    \                }\n            }\n        } while (swapped);\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i] < mid) {\n            \
    \    temp = lst[i];\n                lst[i] = mid;\n                mid = temp;\n\
    \            }\n        }\n        for (int i = 0; i < lst.Count; i++) {\n   \
    \         if (lst[i] < mid) {\n                temp = lst[i];\n              \
    \  lst[i] = mid;\n                mid = temp;\n            }\n        }\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] < mid) {\n\
    \                temp = lst[i];\n                lst[i] = mid;\n             \
    \   mid = temp;\n            }\n        }\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (lst[i] < mid) {\n                temp = lst[i];\n  \
    \              lst[i] = mid;\n                mid = temp;\n            }\n   \
    \     }\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ < mid) {\n                temp = lst[i];\n                lst[i] = mid;\n  \
    \              mid = temp;\n            }\n        }\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (lst[i] < mid) {\n                temp\
    \ = lst[i];\n                lst[i] = mid;\n                mid = temp;\n    \
    \        }\n        }\n        for (int i = 0; i < lst.Count; i++) {\n       \
    \     if (lst[i] < mid) {\n                temp = lst[i];\n                lst[i]\
    \ = mid;\n                mid = temp;\n            }\n        }\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i] < mid) {\n            \
    \    temp = lst[i];\n                lst[i] = mid;\n                mid = temp;\n\
    \            }\n        }\n        for (int i = 0; i < lst.Count; i++) {\n   \
    \         if (lst[i] < mid) {\n                temp = lst[i];\n              \
    \  lst[i] = mid;\n                mid = temp;\n            }\n        }\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] < mid) {\n\
    \                temp = lst[i];\n                lst[i] = mid;\n             \
    \   mid = temp;\n            }\n        }\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (lst[i] < mid) {\n                temp = lst[i];\n  \
    \              lst[i] = mid;\n                mid = temp;\n            }\n   \
    \     }\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ < mid\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnefsvcqk.cs(115,29): error CS1026: ) expected

    /tmp/tmpnefsvcqk.cs(115,29): error CS1525: Invalid expression term ''}''

    /tmp/tmpnefsvcqk.cs(115,29): error CS1002: ; expected

    /tmp/tmpnefsvcqk.cs(117,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpnefsvcqk.cs(129,2): error CS1513: } expected

    '
  timestamp: 1659798878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long nextMax\
    \ = max;\n        long nextMin = min;\n        bool isFirst = true;\n        bool\
    \ isLast = true;\n        bool isMiddle = true;\n        bool isMiddleMiddle =\
    \ true;\n        bool isMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        bool isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool\
    \ isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n     \
    \   bool isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddleMiddle\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcojxtez8.cs(68,46): error CS1002: ; expected

    '
  timestamp: 1659798875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long temp;\n        bool swap = false;\n        foreach (long i in lst)\
    \ {\n            if (swap) {\n                temp = i;\n                i = mid;\n\
    \                mid = temp;\n            }\n            if (i < mid) {\n    \
    \            result.Add(i);\n                swap = true;\n            }\n   \
    \         else {\n                result.Add(mid);\n                swap = false;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa4q6cgza.cs(29,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659798878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        if (lst.Count == 0)\n            return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        List<long> result = new\
    \ List<long>();\n        long temp;\n        bool isFirst = true;\n        foreach\
    \ (long i in lst) {\n            if (isFirst) {\n                temp = i;\n \
    \               isFirst = false;\n            }\n            else {\n        \
    \        if (i < min)\n                    temp = min;\n                else if\
    \ (i > max)\n                    temp = max;\n                else\n         \
    \           temp = i;\n            }\n            result.Add(temp);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,\
    \ (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new\
    \ long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,\
    \ (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L,\
    \ (long)2L, (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,\
    \ (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,\
    \ (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e51b5ea1d904a09a01d1594737ec900>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e51b5ea1d904a09a01d1594737ec900>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L,\
    \ (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n\
    \    // (new List<long>())\n    public static List<long> StrangeSortList(List<long>\
    \ lst) {\n        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        bool first\
    \ = true;\n        foreach (long n in lst) {\n            if (first) {\n     \
    \           first = false;\n                result.Add(n);\n            } else\
    \ {\n                long next = current + n;\n                if (next > max)\
    \ {\n                    result.Add(current);\n                    current = next;\n\
    \                } else {\n                    current = next;\n             \
    \   }\n            }\n        }\n        result.Add(current);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
    \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)5L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
    \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
    \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
    \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
    \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
    \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
    \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f9240430678434b950e6190177d0f15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f9240430678434b950e6190177d0f15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798879
