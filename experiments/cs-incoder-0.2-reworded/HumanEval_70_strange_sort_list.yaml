name: HumanEval_70_strange_sort_list
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given list of integers, return list in strange order.\n    //\
  \ Strange sorting, is when you start with the minimum value,\n    // then maximum\
  \ of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>\
  \ StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n\
  \    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n \
  \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
  \ (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
  \ (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n\
  \    public static List<long> StrangeSortList(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
  \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,\
  \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
  \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
  \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
  \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
  \ (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
  \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
  \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
  \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
  \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count == 0) return lst;\n        List<long> result\
    \ = new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        foreach\
    \ (long i in lst) {\n            if (i < mid) {\n                temp = i;\n \
    \           } else if (i > mid) {\n                temp = mid;\n            }\
    \ else {\n                temp = mid;\n            }\n            result.Add(temp);\n\
    \        }\n        return result;", "        if (lst.Count == 0) return lst;\n\
    \        List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid", "        if (lst.Count == 0) return lst;\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        List<long> result = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < min) result.Add(min);\n\
    \            if (i > max) result.Add(max);\n            result.Add(i);\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long minValue = lst.Min();\n        long maxValue = lst.Max();\n    \
    \    long minIndex = lst.IndexOf(minValue);\n        long maxIndex = lst.IndexOf(maxValue);\n\
    \        long currentValue = minValue;\n        long currentIndex = minIndex;\n\
    \        bool isFirst = true;\n        bool isLast = true;\n        bool isMiddle\
    \ = true;\n        bool isFirstMiddle = true;\n        bool isLastMiddle = true;\n\
    \        bool isMiddleMiddle = true;\n        bool isFirstLast = true;\n     \
    \   bool isLastLast = true;\n        bool isMiddleLast = true;\n        bool isFirstMiddleLast\
    \ = true;\n        bool isLastMiddleLast = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLast = true;\n        bool isLastLastLast =\
    \ true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isLastLastMiddle = true;\n        bool isMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddle\
    \ = true;", "        List<long> result = new List<long>();\n        long min =\
    \ lst.Min();\n        long max = lst.Max();\n        long cur = min;\n       \
    \ long next = max;\n        while (cur != next) {\n            result.Add(cur);\n\
    \            next = cur;\n            cur = next;\n            while (cur != min\
    \ && cur != max) {\n                next = cur;\n                cur = next;\n\
    \            }\n            next = cur;\n            cur = next;\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long min = lst.Min();\n        long max = lst.Max();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        long\
    \ nextCurrent = current;\n        long nextNextMax = nextMax;\n        long nextNextMin\
    \ = nextMin;\n        long nextNextCurrent = nextCurrent;\n        long nextNextNextMax\
    \ = nextNextMax;\n        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurrent\
    \ = nextNextCurrent;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurrent\
    \ = nextNextNextCurrent;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurrent\
    \ = nextNextNextNextCurrent;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n      \
    \  long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNext", "        if\
    \ (lst.Count == 0) {\n            return lst;\n        }\n        List<long> result\
    \ = new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long mid48 = mid47 / 2;\n        long mid", "        if (lst.Count == 0)\n\
    \            return lst;\n        List<long> result = new List<long>();\n    \
    \    long min = lst.Min();\n        long max = lst.Max();\n        long cur =\
    \ min;\n        bool isFirst = true;\n        foreach (long i in lst) {\n    \
    \        if (isFirst) {\n                result.Add(cur);\n                isFirst\
    \ = false;\n            }\n            if (i > cur) {\n                result.Add(cur);\n\
    \                cur = i;\n            } else {\n                cur = i;\n  \
    \          }\n        }\n        result.Add(cur);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        long current = min;\n        long previous\
    \ = min;\n        foreach (long value in lst) {\n            if (value < current)\
    \ {\n                result.Add(previous);\n                previous = current;\n\
    \                current = value;\n            } else if (value > current) {\n\
    \                result.Add(current);\n                current = value;\n    \
    \        } else {\n                result.Add(value);\n            }\n       \
    \ }\n        result.Add(previous);\n        return result;", "        if (lst.Count\
    \ == 0) return lst;\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long middle = min + (max - min) / 2;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in lst) {\n            if (n < middle)\
    \ result.Add(n);\n            else if (n > middle) result.Add(middle);\n     \
    \       else result.Add(middle);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long min = lst.Min();\n    \
    \    long max = lst.Max();\n        long mid = min + (max - min) / 2;\n      \
    \  bool isFirst = true;\n        foreach (long i in lst) {\n            if (isFirst)\
    \ {\n                isFirst = false;\n                result.Add(i);\n      \
    \      } else {\n                if (i > mid) {\n                    result.Add(i);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(mid);\n                    result.Add(max);\n\
    \                    result.Add(min);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                    result.Add(", "        List<long> result = new List<long>();\n\
    \        long min = lst.Min();\n        long max = lst.Max();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        bool\
    \ first = true;\n        foreach (long i in lst) {\n            if (first) {\n\
    \                first = false;\n                result.Add(i);\n            }\
    \ else {\n                if (current > nextMax) {\n                    result.Add(nextMax);\n\
    \                    nextMax = max;\n                    nextMin = min;\n    \
    \            } else if (current < nextMin) {\n                    result.Add(nextMin);\n\
    \                    nextMax = max;\n                    nextMin = min;\n    \
    \            } else {\n                    result.Add(current);\n            \
    \        nextMax = max;\n                    nextMin = min;\n                }\n\
    \            }\n            current = i;\n        }\n        result.Add(nextMax);\n\
    \        result.Add(nextMin);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        foreach\
    \ (long i in lst) {\n            if (i < mid) {\n                temp = i;\n \
    \           }\n            else if (i > mid) {\n                temp = mid;\n\
    \            }\n            else {\n                temp = mid;\n            }\n\
    \            result.Add(temp);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long current = min;\n        long previous = min;\n  \
    \      foreach (long i in lst) {\n            if (i > current) {\n           \
    \     result.Add(current);\n                current = previous;\n            }\n\
    \            previous = current;\n            current = i;\n        }\n      \
    \  result.Add(current);\n        return result;", "        if (lst.Count == 0)\n\
    \            return lst;\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < mid)\n               \
    \ result.Add(i);\n            else if (i > mid)\n                result.Add(mid);\n\
    \            else\n                result.Add(mid);\n        }\n        return\
    \ result;", "        if (lst.Count == 0)\n            return lst;\n        List<long>\
    \ result = new List<long>();\n        long min = lst.Min();\n        long max\
    \ = lst.Max();\n        long mid = min + (max - min) / 2;\n        result.Add(mid);\n\
    \        foreach (long num in lst) {\n            if (num < mid)\n           \
    \     result.Add(num);\n            else if (num > mid)\n                result.Add(mid);\n\
    \            else\n                result.Add(num);\n        }\n        return\
    \ result;", "        if (lst.Count == 0) return lst;\n        List<long> result\
    \ = new List<long>();\n        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        bool isFirst = true;\n   \
    \     foreach (long i in lst) {\n            if (isFirst) {\n                result.Add(i);\n\
    \                isFirst = false;\n            } else {\n                if (i\
    \ < mid) {\n                    result.Add(i);\n                    result.Add(mid);\n\
    \                    result.Add(max);\n                    result.Add(min);\n\
    \                } else {\n                    result.Add(mid);\n            \
    \        result.Add(i);\n                    result.Add(max);\n              \
    \      result.Add(min);\n                }\n            }\n        }\n       \
    \ return result;", "        if (lst.Count == 0) return lst;\n        long min\
    \ = lst.Min();\n        long max = lst.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        List<long> result = new List<long>();\n        long current\
    \ = mid;\n        while (current != min) {\n            result.Add(current);\n\
    \            current += 1;\n        }\n        current = mid;\n        while (current\
    \ != max) {\n            result.Add(current);\n            current -= 1;\n   \
    \     }\n        current = mid;\n        while (current != min) {\n          \
    \  result.Add(current);\n            current += 1;\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long min =\
    \ lst.Min();\n        long max = lst.Max();\n        long mid = min + (max - min)\
    \ / 2;\n        long temp;\n        foreach (long num in lst) {\n            if\
    \ (num < mid) {\n                temp = num;\n            } else if (num > mid)\
    \ {\n                temp = mid;\n            } else {\n                temp =\
    \ mid;\n            }\n            result.Add(temp);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long min =\
    \ lst.Min();\n        long max = lst.Max();\n        long mid = min + (max - min)\
    \ / 2;\n        foreach (long i in lst) {\n            if (i < mid) {\n      \
    \          result.Add(i);\n            } else if (i > mid) {\n               \
    \ result.Add(mid);\n            } else {\n                result.Add(mid);\n \
    \           }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
