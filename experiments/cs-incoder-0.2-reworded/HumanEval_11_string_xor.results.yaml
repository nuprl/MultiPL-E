language: cs
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c) ^ Convert.ToInt32(b[a.IndexOf(c)]));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df60d1b26f344d7dab2e4bdbdce24cf9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df60d1b26f344d7dab2e4bdbdce24cf9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c.ToString()) ^
    Convert.ToInt32(b[b.Length - 1 - Convert.ToInt32(b) - 1]));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x00033] in <c17060e44eae416898890ab45fe4b58c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c17060e44eae416898890ab45fe4b58c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00033] in
    <c17060e44eae416898890ab45fe4b58c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c17060e44eae416898890ab45fe4b58c>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c.ToString()) ^
    Convert.ToInt32(b[b.Length - 1 - Convert.ToInt32(c)]));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x00033] in <eb90ad71c1ba41d3a91cb493ef483720>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <eb90ad71c1ba41d3a91cb493ef483720>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00033] in
    <eb90ad71c1ba41d3a91cb493ef483720>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <eb90ad71c1ba41d3a91cb493ef483720>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c.ToString()) ^
    Convert.ToInt32(b[b.Length - 1 - Convert.ToInt32(c.ToString())]));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb73bf21286e4ad7804e57fa641cab02>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.StringXor (System.String a, System.String b)
    [0x00039] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n  at Problem.Main (System.String[]
    args) [0x00020] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00039] in
    <cb73bf21286e4ad7804e57fa641cab02>:0 \n  at Problem.Main (System.String[] args)
    [0x00020] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d233aa2a5319410db803dea8084385eb>:0
    \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c) ^ Convert.ToInt32(b[a.IndexOf(c)]));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df60d1b26f344d7dab2e4bdbdce24cf9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df60d1b26f344d7dab2e4bdbdce24cf9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, a.IndexOf(c))\n                ^
    Math.Pow(2, b.IndexOf(c)));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysv3t2jw.cs(16,30): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''double'' and ''double''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, a.IndexOf(c))\n                ^
    Math.Pow(2, b.IndexOf(c)));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysv3t2jw.cs(16,30): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''double'' and ''double''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <333fa84cb2a446c895b677a2e408b393>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <333fa84cb2a446c895b677a2e408b393>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <333fa84cb2a446c895b677a2e408b393>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <333fa84cb2a446c895b677a2e408b393>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] ^ b[i]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d233aa2a5319410db803dea8084385eb>:0
    \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee9957536913467ebdca7a95f9965ea6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee9957536913467ebdca7a95f9965ea6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d233aa2a5319410db803dea8084385eb>:0
    \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length - 1], 2), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmzinfz5g.cs(16,114): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] ^ b[i]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c) ^ Convert.ToInt32(b[a.IndexOf(c)]));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df60d1b26f344d7dab2e4bdbdce24cf9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df60d1b26f344d7dab2e4bdbdce24cf9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length - 1], 2));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7f1zr8cl.cs(16,114): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c.ToString()) ^
    Convert.ToInt32(b[b.Length - 1 - Convert.ToInt32(c.ToString())]));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb73bf21286e4ad7804e57fa641cab02>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.StringXor (System.String a, System.String b)
    [0x00039] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n  at Problem.Main (System.String[]
    args) [0x00020] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00039] in
    <cb73bf21286e4ad7804e57fa641cab02>:0 \n  at Problem.Main (System.String[] args)
    [0x00020] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] ^ b[i]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, a.IndexOf(c))\n                ^
    Math.Pow(2, b.IndexOf(c)));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysv3t2jw.cs(16,30): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''double'' and ''double''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <333fa84cb2a446c895b677a2e408b393>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <333fa84cb2a446c895b677a2e408b393>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <333fa84cb2a446c895b677a2e408b393>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <333fa84cb2a446c895b677a2e408b393>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length - 1 - result.Length % b.Length]));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0003c] in <7ff1d9164d384019b8df95f7c7859c19>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7ff1d9164d384019b8df95f7c7859c19>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0003c] in
    <7ff1d9164d384019b8df95f7c7859c19>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7ff1d9164d384019b8df95f7c7859c19>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <d610567149e24032b18182e6b38cf777>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <d610567149e24032b18182e6b38cf777>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <d610567149e24032b18182e6b38cf777>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d610567149e24032b18182e6b38cf777>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c.ToString()) ^
    Convert.ToInt32(b[b.Length - 1 - Convert.ToInt32(b) - 1]));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x00033] in <c17060e44eae416898890ab45fe4b58c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c17060e44eae416898890ab45fe4b58c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00033] in
    <c17060e44eae416898890ab45fe4b58c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c17060e44eae416898890ab45fe4b58c>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((Convert.ToInt32(c) ^
    Convert.ToInt32(b)), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length - 1], 2));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7f1zr8cl.cs(16,114): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((int)c ^ Convert.ToInt32(b[b.Length
    - 1 - b.IndexOf(c)]));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61b00ece5fc1420eab673e9eca494361>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.StringXor (System.String a, System.String b)
    [0x00029] in <61b00ece5fc1420eab673e9eca494361>:0 \n  at Problem.Main (System.String[]
    args) [0x0003f] in <61b00ece5fc1420eab673e9eca494361>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00029] in
    <61b00ece5fc1420eab673e9eca494361>:0 \n  at Problem.Main (System.String[] args)
    [0x0003f] in <61b00ece5fc1420eab673e9eca494361>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, a.IndexOf(c))\n                ^
    Math.Pow(2, b.IndexOf(c)));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysv3t2jw.cs(16,30): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''double'' and ''double''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d233aa2a5319410db803dea8084385eb>:0
    \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((int)((int)c ^ Convert.ToInt32(b)),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a1168715c474a5281d0c4d32d6799f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a1168715c474a5281d0c4d32d6799f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, a.IndexOf(c))\n                ^
    Math.Pow(2, b.IndexOf(c)));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysv3t2jw.cs(16,30): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''double'' and ''double''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((Convert.ToInt32(c) ^
    Convert.ToInt32(b)), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((Convert.ToInt32(c) ^
    Convert.ToInt32(b)), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((Convert.ToInt32(c) ^
    Convert.ToInt32(b)), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((int)c ^ Convert.ToInt32(b[b.Length
    - 1 - b.IndexOf(c)]));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61b00ece5fc1420eab673e9eca494361>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.StringXor (System.String a, System.String b)
    [0x00029] in <61b00ece5fc1420eab673e9eca494361>:0 \n  at Problem.Main (System.String[]
    args) [0x0003f] in <61b00ece5fc1420eab673e9eca494361>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00029] in
    <61b00ece5fc1420eab673e9eca494361>:0 \n  at Problem.Main (System.String[] args)
    [0x0003f] in <61b00ece5fc1420eab673e9eca494361>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <333fa84cb2a446c895b677a2e408b393>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <333fa84cb2a446c895b677a2e408b393>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <333fa84cb2a446c895b677a2e408b393>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <333fa84cb2a446c895b677a2e408b393>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d233aa2a5319410db803dea8084385eb>:0
    \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] ^ b[i]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((int)c ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b195f14f7934812b4cb8257c10b04d4>:0
    \n"
  stdout: ''
  timestamp: 1659793028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c.ToString()) ^
    Convert.ToInt32(b[b.Length - 1 - Convert.ToInt32(c.ToString())]));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb73bf21286e4ad7804e57fa641cab02>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.StringXor (System.String a, System.String b)
    [0x00039] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n  at Problem.Main (System.String[]
    args) [0x00020] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00039] in
    <cb73bf21286e4ad7804e57fa641cab02>:0 \n  at Problem.Main (System.String[] args)
    [0x00020] in <cb73bf21286e4ad7804e57fa641cab02>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, a.IndexOf(c))\n                ^
    Math.Pow(2, b.IndexOf(c)));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysv3t2jw.cs(16,30): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''double'' and ''double''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((int)c ^ Convert.ToInt32(b[b.Length
    - 1 - b.IndexOf(c)]));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61b00ece5fc1420eab673e9eca494361>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.StringXor (System.String a, System.String b)
    [0x00029] in <61b00ece5fc1420eab673e9eca494361>:0 \n  at Problem.Main (System.String[]
    args) [0x0003f] in <61b00ece5fc1420eab673e9eca494361>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00029] in
    <61b00ece5fc1420eab673e9eca494361>:0 \n  at Problem.Main (System.String[] args)
    [0x0003f] in <61b00ece5fc1420eab673e9eca494361>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - result.Length]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d233aa2a5319410db803dea8084385eb>:0
    \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((int)c ^ Convert.ToInt32(b[b.Length
    - 1 - b.IndexOf(c)]));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61b00ece5fc1420eab673e9eca494361>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.StringXor (System.String a, System.String b)
    [0x00029] in <61b00ece5fc1420eab673e9eca494361>:0 \n  at Problem.Main (System.String[]
    args) [0x0003f] in <61b00ece5fc1420eab673e9eca494361>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00029] in
    <61b00ece5fc1420eab673e9eca494361>:0 \n  at Problem.Main (System.String[] args)
    [0x0003f] in <61b00ece5fc1420eab673e9eca494361>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, a.IndexOf(c))\n                ^
    Math.Pow(2, b.IndexOf(c)));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysv3t2jw.cs(16,30): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''double'' and ''double''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(c)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <c29a583e41a341a3aa401a62cb79f6ea>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c29a583e41a341a3aa401a62cb79f6ea>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c.ToString()) ^
    Convert.ToInt32(b[b.Length - 1 - Convert.ToInt32(b) - 1]));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x00033] in <c17060e44eae416898890ab45fe4b58c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c17060e44eae416898890ab45fe4b58c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00033] in
    <c17060e44eae416898890ab45fe4b58c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c17060e44eae416898890ab45fe4b58c>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] ^ b[i]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Convert.ToInt32(c.ToString()) ^
    Convert.ToInt32(b[b.Length - 1 - Convert.ToInt32(b) - 1]));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x00033] in <c17060e44eae416898890ab45fe4b58c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c17060e44eae416898890ab45fe4b58c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x00033] in
    <c17060e44eae416898890ab45fe4b58c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c17060e44eae416898890ab45fe4b58c>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((Convert.ToInt32(c) ^
    Convert.ToInt32(b)), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((Convert.ToInt32(c) ^
    Convert.ToInt32(b)), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString((Convert.ToInt32(c) ^
    Convert.ToInt32(b)), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d991fec5194f2a9285da9bea83163f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, b.IndexOf(c))\n                ^
    Math.Pow(2, a.IndexOf(c)));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxjfiwcqk.cs(16,30): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''double'' and ''double''

    '
  timestamp: 1659793028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b[b.Length
    - 1 - Convert.ToInt32(b) - 1]), 2);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.StringXor (System.String a, System.String
    b) [0x0002d] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.StringXor (System.String a, System.String b) [0x0002d] in
    <7449636bbee04c7b8051f3e1582b55f7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7449636bbee04c7b8051f3e1582b55f7>:0 \n"
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += Convert.ToString(Convert.ToInt32(c) ^ Convert.ToInt32(b),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae7ed2857eff483b974bc8db395921ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(Convert.ToInt32(a[i])
    ^ Convert.ToInt32(b[i]), 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i])
    ^ Convert.ToString(b[i]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_beop5yf.cs(16,23): error CS0019: Operator ''^'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] ^ b[i]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(c ^ b[a.IndexOf(c)]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abfe6a7eb09d4ee7b2c7e248989c461b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        foreach
    (char c in a) {\n            result += (char)(Math.Pow(2, b.IndexOf(c)) - Math.Pow(2,
    a.IndexOf(c)));\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e13f33d94643441ab8301cebc56a5dea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e13f33d94643441ab8301cebc56a5dea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += Convert.ToString(a[i]
    ^ b[i]);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793027
