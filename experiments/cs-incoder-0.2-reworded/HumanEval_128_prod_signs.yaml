name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the list, represented by 1, -1 or 0.\n    // Note: return null\
  \ for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new List<long>(new\
  \ long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new List<long>()))\n\
  \    // null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        foreach (var item in arr)\n            signs.Add(Sign(item));\n\
    \        var product = signs.Aggregate((x, y) => x * y);\n        var magnitude\
    \ = arr.Aggregate((x, y) => Math.Abs(x - y));\n        return product * magnitude;",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long prod = 1;\n        foreach (long i in arr)\n            sum += Math.Abs(i);\n\
    \        foreach (long i in arr)\n            prod *= i;\n        if (sum == 0)\n\
    \            return null;\n        return sum * prod;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr)\n            sum += Math.Abs(i);\n   \
    \     foreach (long i in arr)\n            product *= i;\n        if (sum == 0)\n\
    \            return null;\n        long sign = 1;\n        foreach (long i in\
    \ arr)\n            sign *= i;\n        if (sign == 0)\n            return null;\n\
    \        long result = sign * product;\n        if (result > 0)\n            return\
    \ result;\n        return -result;", "        if (arr.Count == 0) return null;\n\
    \        long product = 1;\n        long sign = 1;\n        long sum = 0;\n  \
    \      foreach (long i in arr) {\n            sign = sign * i;\n            sum\
    \ += sign;\n            product *= sign;\n        }\n        if (sum > 0) return\
    \ sum;\n        if (sum < 0) return -sum;\n        return null;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var n in arr)\n        {\n       \
    \     var sign = n < 0 ? -1 : 1;\n            signs.Add(sign);\n            product\
    \ *= sign;\n        }\n        var result = signs.Sum();\n        return result\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = new List<long>();\n        var product = 1;\n        foreach (var\
    \ item in arr) {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        var result = signs.Sum();\n        if (signs.Count\
    \ > 0)\n            result *= product;\n        return result;", "        if (arr.Count\
    \ == 0) return null;\n        var signs = new List<long>();\n        foreach (var\
    \ item in arr) {\n            signs.Add(Sign(item));\n        }\n        var result\
    \ = signs.Aggregate((a, b) => a * b);\n        return result;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long num in arr) {\n     \
    \       sum += Math.Abs(num);\n            product *= num;\n            sign =\
    \ sign && num > 0;\n        }\n        if (sign)\n            return sum;\n  \
    \      else\n            return -sum;", "        if (arr.Count == 0) return null;\n\
    \        var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToList();\n        return magnitudes.Aggregate((x, y) => x * y\
    \ * product);", "        if (arr.Count == 0) return null;\n        long sum =\
    \ 0;\n        long prod = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            prod *= i;\n     \
    \       sign = sign && i >= 0;\n        }\n        if (sign) return sum;\n   \
    \     return prod;", "        if (arr.Count == 0)\n            return null;\n\
    \        long product = 1;\n        long sign = 1;\n        long sum = 0;\n  \
    \      foreach (long i in arr) {\n            sign = sign * (i < 0 ? -1 : 1);\n\
    \            sum += sign * i;\n            product *= sign;\n        }\n     \
    \   if (sum == 0)\n            return null;\n        return sum;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        foreach (var item in arr)\n            signs.Add(Sign(item));\n     \
    \   var product = signs.Aggregate((a, b) => a * b);\n        var magnitudes =\
    \ arr.Select(x => Math.Abs(x)).ToList();\n        return magnitudes.Aggregate((a,\
    \ b) => a * b) * product;", "        if (arr.Count == 0) return null;\n      \
    \  var signs = arr.Select(x => (int)Math.Sign(x)).ToArray();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToArray();\n        var sum = magnitudes.Aggregate((x, y) => x\
    \ * y);\n        return product.Equals(sum) ? null : sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sum += Math.Abs(i);\n            product *= i;\n            if (sign)\n\
    \                sign = i < 0;\n            else\n                sign = i > 0;\n\
    \        }\n        return sum * product;", "        if (arr.Count == 0)\n   \
    \         return null;\n        long sum = 0;\n        long product = 1;\n   \
    \     bool sign = true;\n        foreach (long i in arr) {\n            sign =\
    \ sign ? 1 : -1;\n            sum += sign * i;\n            product *= sign;\n\
    \        }\n        return sum == 0 ? null : sum * product;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sign = 1;\n        foreach (long num in arr) {\n            product\
    \ *= num;\n            sign *= num;\n        }\n        long magnitude = product;\n\
    \        long sum = 0;\n        while (magnitude > 0) {\n            sum += sign;\n\
    \            magnitude /= 2;\n            sign *= -1;\n        }\n        return\
    \ sum;", "        if (arr.Count == 0) return null;\n        long sign = 1;\n \
    \       long sum = 0;\n        long product = 1;\n        foreach (long i in arr)\
    \ {\n            sign *= i;\n            sum += sign;\n            product *=\
    \ sign;\n        }\n        return sum;", "        if (arr.Count == 0)\n     \
    \       return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var item in arr)\n        {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Sum();\n        if (result != 0)\n            return result * product;\n\
    \        return null;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sign = sign && i > 0;\n      \
    \      sum += Math.Abs(i) * sign;\n            product *= sign;\n        }\n \
    \       return sum == 0 ? null : sum;", "        if (arr.Count == 0)\n       \
    \     return null;\n        long sum = 0;\n        long product = 1;\n       \
    \ bool sign = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign)\n                sign = i >=\
    \ 0;\n            else\n                sign = i < 0;\n        }\n        return\
    \ sum * product;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        foreach (var item in arr)\n    \
    \        signs.Add(Sign(item));\n        var product = signs.Aggregate((a, b)\
    \ => a * b);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        return magnitudes.Aggregate((a, b) => a * b * product);", "        if\
    \ (arr.Count == 0) return null;\n        long product = 1;\n        long sign\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ product *= i;\n            sign *= i;\n            sum += sign;\n        }\n\
    \        if (sum == 0) return null;\n        return sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (result != 0)\n            return result * product;\n        return\
    \ null;", "        if (arr.Count == 0) return null;\n        var signs = arr.Select(x\
    \ => x < 0 ? -1 : (x > 0 ? 1 : 0));\n        var mags = arr.Select(x => Math.Abs(x));\n\
    \        var prod = signs.Aggregate((x, y) => x * y);\n        var result = mags.Aggregate((x,\
    \ y) => x * y);\n        if (result != prod) {\n            return null;\n   \
    \     }\n        return result;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long sum = 0;\n        long product = 1;\n        bool sign =\
    \ true;\n        foreach (long i in arr) {\n            sign = sign && i > 0;\n\
    \            sum += Math.Abs(i);\n            product *= i;\n        }\n     \
    \   if (sign)\n            return sum;\n        else\n            return -sum;",
  "        if (arr.Count == 0) return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var i in arr) {\n            signs.Add(Math.Sign(i));\n\
    \            product *= i;\n        }\n        var magnitude = arr.Sum(i => Math.Abs(i));\n\
    \        var result = signs.Aggregate(product, (current, sign) => current * sign);\n\
    \        if (magnitude != 0) {\n            result *= magnitude;\n        }\n\
    \        return result.IsNull ? null : result;", "        if (arr.Count == 0)\n\
    \            return null;\n        long product = 1;\n        long sum = 0;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sign\
    \ = sign && i > 0;\n            sum += sign * i;\n            product *= sign;\n\
    \        }\n        if (sum == 0)\n            return null;\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToList();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n \
    \       var result = magnitudes.Aggregate((x, y) => x * y);\n        return result.Equals(product)\
    \ ? result : null;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sign = sign && i > 0;\n      \
    \      sum += sign * i;\n            product *= sign;\n        }\n        return\
    \ sum > 0 ? sum : null;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        foreach (var item in arr)\n  \
    \          signs.Add(Sign(item));\n        var product = signs.Aggregate((a, b)\
    \ => a * b);\n        var magnitude = arr.Aggregate((a, b) => Math.Abs(a) * Math.Abs(b));\n\
    \        return product * magnitude;", "        if (arr.Count == 0)\n        \
    \    return null;\n        var signs = new List<long>();\n        var product\
    \ = arr.Sum();\n        foreach (var num in arr) {\n            var sign = num\
    \ < 0 ? -1 : 1;\n            signs.Add(sign * Math.Sign(num));\n            product\
    \ *= sign;\n        }\n        return product;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr)\n        {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (result != 0)\n        {\n            result *= product;\n       \
    \ }\n        return result;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = new List<long>();\n        var product = 1;\n   \
    \     foreach (var i in arr)\n        {\n            signs.Add(Math.Sign(i));\n\
    \            product *= i;\n        }\n        var result = signs.Sum();\n   \
    \     if (result != 0)\n        {\n            result *= product;\n        }\n\
    \        return result;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long prod = 1;\n        bool sign = true;\n  \
    \      foreach (long i in arr) {\n            sum += Math.Abs(i);\n          \
    \  prod *= i;\n            sign = sign && i < 0;\n        }\n        if (sign)\n\
    \            return sum;\n        else\n            return -sum;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long product = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sign = sign && i >= 0;\n            sum += Math.Abs(i)\
    \ * sign;\n            product *= sign;\n        }\n        return sum == 0 ?\
    \ null : sum;", "        if (arr.Count == 0)\n            return null;\n     \
    \   long sum = 0;\n        long product = 1;\n        bool sign = true;\n    \
    \    foreach (long i in arr) {\n            sign = sign && i > 0;\n          \
    \  sum += sign * i;\n            product *= sign;\n        }\n        return sum\
    \ > 0 ? sum : -sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sign = sign ? i : -i;\n      \
    \      sum += sign * Math.Abs(i);\n            product *= sign;\n        }\n \
    \       return sum * product;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long product = 1;\n        long sign = 1;\n        long sum =\
    \ 0;\n        foreach (long i in arr) {\n            product *= i;\n         \
    \   sign *= i;\n            sum += sign;\n        }\n        return sum;", " \
    \       if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            prod *= x;\n            sign *= (x < 0 ? -1 : 1);\n         \
    \   sum += sign * Math.Abs(x);\n        }\n        return sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long product = 1;\n        long sum\
    \ = 0;\n        bool sign = true;\n        foreach (long num in arr) {\n     \
    \       sum += Math.Abs(num);\n            product *= num;\n            sign =\
    \ sign && num > 0;\n        }\n        if (sign)\n            return sum;\n  \
    \      else\n            return -sum;", "        if (arr.Count == 0)\n       \
    \     return null;\n        long prod = 1;\n        long sign = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            prod *= i;\n      \
    \      sign *= i;\n            sum += sign;\n        }\n        if (sum < 0)\n\
    \            return null;\n        return sum;", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        long sum = 0;\n        long\
    \ prod = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n  \
    \          sum += Math.Abs(i);\n            prod *= i;\n            sign = sign\
    \ && i >= 0;\n        }\n        if (sign) {\n            return sum;\n      \
    \  }\n        return prod;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = arr.Select(x => Math.Sign(x)).ToList();\n       \
    \ var mags = arr.Select(x => Math.Abs(x)).ToList();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var result = mags.Aggregate((x, y) => x * y * product);\n\
    \        return result.IsNull ? null : result;", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        long sum = 0;\n        long\
    \ product = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n\
    \            sign = sign && i >= 0;\n            sum += sign * i;\n          \
    \  product *= sign;\n        }\n        return sum * product;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr)\n        {\n       \
    \     signs.Add(item < 0 ? -1 : 1);\n            product *= item;\n        }\n\
    \        var result = signs.Aggregate((a, b) => a * b);\n        return result\
    \ > 0 ? result : -result;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            prod *= i;\n\
    \        }\n        if (sum == 0) {\n            return null;\n        }\n   \
    \     long sign = 1;\n        long signProd = 1;\n        foreach (long i in arr)\
    \ {\n            sign *= i;\n            signProd *= sign;\n        }\n      \
    \  if (signProd == 0) {\n            return null;\n        }\n        return signProd\
    \ * sum;", "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        bool sign = true;\n  \
    \      foreach (long i in arr) {\n            sum += Math.Abs(i);\n          \
    \  prod *= i;\n            sign = sign && i > 0;\n        }\n        if (sign)\
    \ {\n            return sum;\n        }\n        return prod;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sign = 1;\n        foreach (long i in arr) {\n            product\
    \ *= i;\n            sign *= i;\n        }\n        if (product == 0) {\n    \
    \        return null;\n        }\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i) * sign;\n        }\n        return\
    \ sum;", "        if (arr.Count == 0)\n            return null;\n        long\
    \ sum = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sign = sign && i > 0;\n            sum += Math.Abs(i)\
    \ * sign;\n            product *= sign;\n        }\n        return sum > 0 ? sum\
    \ : -sum;", "        if (arr.Count == 0) {\n            return null;\n       \
    \ }\n        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sign = sign && (i < 0);\n    \
    \        sum += Math.Abs(i);\n            product *= i;\n        }\n        if\
    \ (sign) {\n            return sum;\n        } else {\n            return -sum;\n\
    \        }", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        var product = 1;\n        foreach (var item\
    \ in arr) {\n            var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n\
    \            product *= sign;\n        }\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate(product,\
    \ (current, magnitude) => current * magnitude);\n        return signs.Sum(sign\
    \ => sign * result);", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n           \
    \ product *= item;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = signs.Aggregate(product, (current, sign) => current * sign\
    \ * magnitudes[magnitudes.IndexOf(Math.Abs(x))]);\n        return result < 0 ?\
    \ null : result;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToList();\n        return magnitudes.Aggregate((x, y) => x * y\
    \ * product);", "        if (arr.Count == 0)\n            return null;\n     \
    \   long sum = 0;\n        long product = 1;\n        bool sign = true;\n    \
    \    foreach (long i in arr) {\n            sign = sign && i >= 0;\n         \
    \   sum += Math.Abs(i);\n            product *= sign;\n        }\n        return\
    \ sum * product;", "        if (arr.Count == 0) return null;\n        var signs\
    \ = arr.Select(x => Math.Sign(x)).ToArray();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * product);", "        if\
    \ (arr.Count == 0) return null;\n        var signs = new List<long>();\n     \
    \   var product = 1;\n        foreach (var item in arr) {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Sum();\n        if (signs.Count > 0) result *= product;\n        return\
    \ result;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = arr.Select(x => Math.Sign(x)).ToList();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * product);", "        if\
    \ (arr.Count == 0)\n            return null;\n        long product = 1;\n    \
    \    long sum = 0;\n        foreach (long n in arr)\n            sum += Math.Abs(n);\n\
    \        foreach (long n in arr)\n            product *= n;\n        long sign\
    \ = 1;\n        foreach (long n in arr)\n            sign *= (n < 0 ? -1 : 1);\n\
    \        return sign * Math.Abs(sum) * product;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        foreach\
    \ (var i in arr)\n            signs.Add(Sign(i));\n        var sum = 0;\n    \
    \    foreach (var i in signs)\n            sum += i;\n        var product = signs.Aggregate((a,\
    \ b) => a * b); // product of all signs\n        var magnitude = arr.Sum(i =>\
    \ Math.Abs(i));\n        return magnitude * product;", "        if (arr.Count\
    \ == 0) return null;\n        var signs = new List<long>();\n        foreach (var\
    \ item in arr) {\n            signs.Add(Math.Sign(item));\n        }\n       \
    \ var result = signs.Aggregate((a, b) => a * b);\n        if (result > 0) return\
    \ result;\n        if (result < 0) return -result;\n        return null;", " \
    \       if (arr.Count == 0)\n            return null;\n        long product =\
    \ 1;\n        long sign = 1;\n        long sum = 0;\n        foreach (long i in\
    \ arr) {\n            sign = sign * (i < 0 ? -1 : 1);\n            sum += Math.Abs(i)\
    \ * sign;\n            product *= sign;\n        }\n        return sum == 0 ?\
    \ null : sum;", "        if (arr.Count == 0)\n            return null;\n     \
    \   var signs = new List<long>();\n        var product = 1;\n        foreach (var\
    \ i in arr) {\n            signs.Add(i);\n            product *= i;\n        }\n\
    \        if (product == 0)\n            return null;\n        var sum = 0;\n \
    \       foreach (var i in signs) {\n            sum += i;\n        }\n       \
    \ return sum * product;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            sign = sign && i < 0;\n        }\n   \
    \     if (sign) {\n            return sum;\n        } else {\n            return\
    \ -sum;\n        }", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n           \
    \ product *= item;\n        }\n        var magnitude = arr.Sum(x => Math.Abs(x));\n\
    \        return signs.Aggregate(product, (current, sign) => current * sign * magnitude);",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long i\
    \ in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n    \
    \        if (sign)\n                sign = i >= 0;\n            else\n       \
    \         sign = i < 0;\n        }\n        if (sign)\n            return sum;\n\
    \        else\n            return -sum;", "        if (arr.Count == 0)\n     \
    \       return null;\n        long sum = 0;\n        long product = 1;\n     \
    \   bool sign = true;\n        foreach (long i in arr) {\n            sign = sign\
    \ && i > 0;\n            sum += sign * i;\n            product *= sign;\n    \
    \    }\n        return sum > 0 ? sum : null;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr)\n        {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Aggregate((a, b) => a * b);\n        return product == 0 ? null : result;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        var\
    \ signs = new List<long>();\n        foreach (var item in arr) {\n           \
    \ var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n        }\n   \
    \     var product = signs.Aggregate((x, y) => x * y);\n        var magnitude =\
    \ arr.Sum(x => Math.Abs(x));\n        return product.Equals(magnitude) ? null\
    \ : magnitude;", "        if (arr.Count == 0) {\n            return null;\n  \
    \      }\n        long product = 1;\n        long sign = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr) {\n            sign *= i;\n          \
    \  sum += sign;\n            product *= sign;\n        }\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long i\
    \ in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n    \
    \        if (sign)\n                sign = i < 0;\n            else\n        \
    \        sign = i > 0;\n        }\n        return sum * product;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        foreach (var num in arr)\n            signs.Add(num >= 0 ? 1 : -1);\n\
    \        var product = signs.Aggregate((x, y) => x * y);\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x,\
    \ y) => x * y);\n        return product * result;", "        if (arr.Count ==\
    \ 0)\n            return null;\n        var signs = new List<long>();\n      \
    \  foreach (var item in arr)\n            signs.Add(Sign(item));\n        var\
    \ product = signs.Aggregate((x, y) => x * y);\n        var magnitude = arr.Sum(x\
    \ => Math.Abs(x));\n        return product * magnitude;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        if (signs.Count == 0)\n    \
    \        return null;\n        var result = signs.Aggregate((x, y) => x * y);\n\
    \        if (signs.Count > 1)\n            result *= product;\n        return\
    \ result;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        var product = 1;\n        foreach (var num\
    \ in arr)\n        {\n            signs.Add(num < 0 ? 1 : -1);\n            product\
    \ *= num;\n        }\n        var magnitude = arr.Sum(x => Math.Abs(x));\n   \
    \     return signs.Aggregate(product, (current, sign) => current * sign * magnitude);",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = arr.Aggregate((x, y) => x * y);\n     \
    \   foreach (var x in arr)\n            signs.Add(x < 0 ? -1 : 1);\n        var\
    \ result = signs.Aggregate((x, y) => x * product);\n        return result < 0\
    \ ? null : result;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = arr.First();\n \
    \       signs.Add(product);\n        foreach (var num in arr.Skip(1))\n      \
    \      signs.Add(num * product);\n        foreach (var sign in signs)\n      \
    \      if (sign == 0)\n                return null;\n        return signs.Sum();",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var item in arr)\n\
    \        {\n            signs.Add(Math.Sign(item));\n            product *= item;\n\
    \        }\n        if (signs.Count == 0)\n            return null;\n        var\
    \ sum = 0;\n        foreach (var sign in signs)\n        {\n            sum +=\
    \ sign * product;\n        }\n        return sum;", "        if (arr.Count ==\
    \ 0) return null;\n        long sum = 0;\n        long product = 1;\n        bool\
    \ sign = true;\n        foreach (long i in arr) {\n            sign = sign &&\
    \ i > 0;\n            sum += sign * i;\n            product *= sign;\n       \
    \ }\n        return sum == 0 ? null : sum * product;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sign = sign ? i : -i;\n            sum += sign * Math.Abs(i);\n        \
    \    product *= sign;\n        }\n        return sum * product;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sign = 1;\n        foreach (long i in arr) {\n          \
    \  product *= i;\n            sign *= i;\n        }\n        if (product == 0)\
    \ {\n            return null;\n        }\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            sum += sign * i;\n        }\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long n\
    \ in arr) {\n            sign = sign && n < 0;\n            sum += sign * n;\n\
    \            product *= sign;\n        }\n        return sum < 0 ? null : sum\
    \ * product;", "        if (arr.Count == 0) {\n            return null;\n    \
    \    }\n        long sum = 0;\n        long prod = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    prod *= i;\n            if (sign) {\n                sign = i < 0;\n    \
    \        } else {\n                sign = i > 0;\n            }\n        }\n \
    \       if (sign) {\n            return sum;\n        } else {\n            return\
    \ -sum;\n        }", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long prod = 1;\n        bool sign =\
    \ true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            prod *= i;\n            sign = sign && i > 0;\n        }\n      \
    \  if (sign) {\n            return sum;\n        }\n        else {\n         \
    \   return prod;\n        }", "        if (arr.Count == 0)\n            return\
    \ null;\n        long sum = 0;\n        long product = 1;\n        bool sign =\
    \ true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            sign = sign && (i < 0);\n        }\n \
    \       if (sign)\n            return sum;\n        else\n            return -sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = arr.First();\n        signs.Add(1);\n \
    \       foreach (var item in arr.Skip(1))\n            signs.Add(item < 0 ? -1\
    \ : 1);\n        foreach (var item in signs)\n            product *= item;\n \
    \       var result = new long();\n        foreach (var item in signs)\n      \
    \      result += (product * item);\n        return result < 0 ? null : result;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = arr.Aggregate((x, y) => x * y);\n     \
    \   foreach (var x in arr) {\n            var sign = x < 0 ? -1 : 1;\n       \
    \     signs.Add(sign * Math.Sign(x) * Math.Sign(product));\n        }\n      \
    \  return signs.Sum();", "        if (arr.Count == 0) return null;\n        var\
    \ signs = new List<long>();\n        var product = arr.Aggregate((a, b) => a *\
    \ b).Abs();\n        foreach (var item in arr) {\n            var sign = item\
    \ < 0 ? -1 : 1;\n            signs.Add(sign * Math.Sign(product));\n         \
    \   product *= sign;\n        }\n        return signs.Count > 0 ? signs.Sum()\
    \ : null;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = arr.Select(x => (x < 0) ? -1 : 1).ToArray();\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToArray();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        return magnitudes.Aggregate((x, y) => x * product);",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var item in arr)\n\
    \        {\n            var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n\
    \            product *= sign;\n        }\n        var result = signs.Aggregate((a,\
    \ b) => a * b) * product;\n        return result < 0 ? null : result;", "    \
    \    if (arr.Count == 0) return null;\n        long product = 1, sign = 1;\n \
    \       foreach (var item in arr) {\n            product *= item;\n          \
    \  sign *= (item < 0) ? -1 : 1;\n        }\n        return sign * Math.Abs(product);",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        foreach (var item in arr)\n            signs.Add(Sign(item));\n\
    \        var result = signs.Aggregate((a, b) => a * b);\n        if (result <\
    \ 0)\n            return null;\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sum = 0;\n      \
    \  long product = 1;\n        bool sign = true;\n        foreach (long i in arr)\
    \ {\n            sign = sign ? i : -i;\n            sum += sign * Math.Abs(i);\n\
    \            product *= sign;\n        }\n        return sum == 0 ? null : sum\
    \ * product;", "        if (arr.Count == 0) {\n            return null;\n    \
    \    }\n        long product = 1;\n        long sum = 0;\n        bool sign =\
    \ true;\n        foreach (long i in arr) {\n            long magnitude = i;\n\
    \            sum += magnitude;\n            product *= magnitude;\n          \
    \  sign = sign && magnitude > 0;\n        }\n        if (sign) {\n           \
    \ return sum;\n        }\n        return null;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr) {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Sum();\n        if (result != 0)\n            return result * product;\n\
    \        return null;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign) {\n                sign = i\
    \ < 0;\n            } else {\n                sign = i > 0;\n            }\n \
    \       }\n        if (sign) {\n            return sum;\n        } else {\n  \
    \          return -sum;\n        }", "        if (arr.Count == 0)\n          \
    \  return null;\n        var signs = new List<long>();\n        var product =\
    \ 1;\n        foreach (var item in arr)\n        {\n            var sign = item\
    \ < 0 ? -1 : 1;\n            signs.Add(sign);\n            product *= sign;\n\
    \        }\n        var result = signs.Aggregate((a, b) => a * b);\n        return\
    \ result != 0 ? result : null;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = arr.Select(x => Math.Sign(x)).ToList();\n       \
    \ var product = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x, y)\
    \ => x * y);\n        return result.Equals(product) ? result : null;", "     \
    \   if (arr.Count == 0) return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var sum = 0;\n        foreach\
    \ (var sign in signs) {\n            sum += sign * product;\n        }\n     \
    \   return sum;", "        if (arr.Count == 0) return null;\n        var signs\
    \ = new List<long>();\n        foreach (var i in arr) {\n            signs.Add(Sign(i));\n\
    \        }\n        var result = signs.Aggregate((a, b) => a * b);\n        return\
    \ result;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        foreach (var item in arr)\n            signs.Add(Sign(item));\n\
    \        var product = signs.Aggregate((a, b) => a * b);\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((a,\
    \ b) => a * b);\n        return product * result;", "        if (arr.Count ==\
    \ 0)\n            return null;\n        long sum = 0;\n        long product =\
    \ 1;\n        bool sign = true;\n        foreach (long i in arr) {\n         \
    \   sign = sign && (i < 0);\n            sum += Math.Abs(i);\n            product\
    \ *= i;\n        }\n        if (sign)\n            return sum;\n        else\n\
    \            return -sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    product *= i;\n            if (sign)\n                sign = i >= 0;\n  \
    \          else\n                sign = i < 0;\n        }\n        if (sign)\n\
    \            return sum;\n        else\n            return -sum;", "        if\
    \ (arr.Count == 0) return null;\n        long sum = 0;\n        long prod = 1;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sum\
    \ += Math.Abs(i);\n            prod *= i;\n            sign = sign && i < 0;\n\
    \        }\n        if (sign) return sum;\n        return prod;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        result *= product;\n        return result;", "        if (arr.Count ==\
    \ 0)\n            return null;\n        var signs = new List<long>();\n      \
    \  var product = 1;\n        foreach (var item in arr)\n        {\n          \
    \  signs.Add(item < 0 ? -1 : 1);\n            product *= item;\n        }\n  \
    \      var result = signs.Sum();\n        foreach (var item in signs)\n      \
    \      result *= item;\n        return result < 0 ? null : result;", "       \
    \ if (arr.Count == 0)\n            return null;\n        long sum = 0;\n     \
    \   long product = 1;\n        bool sign = true;\n        foreach (long i in arr)\
    \ {\n            sign = sign && i > 0;\n            sum += sign * i;\n       \
    \     product *= sign;\n        }\n        return sum * product;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long product = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sign = sign && i >= 0;\n            sum += Math.Abs(i)\
    \ * sign;\n            product *= sign;\n        }\n        return sum == 0 ?\
    \ null : sum;", "        if (arr.Count == 0)\n            return null;\n     \
    \   long sum = 0;\n        long prod = 1;\n        bool sign = true;\n       \
    \ foreach (long i in arr) {\n            sum += Math.Abs(i);\n            prod\
    \ *= i;\n            sign = sign && (i < 0);\n        }\n        if (sign)\n \
    \           return sum;\n        else\n            return -sum;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long product = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sign = sign && i > 0;\n            sum += Math.Abs(i)\
    \ * sign;\n            product *= sign;\n        }\n        return sum > 0 ? sum\
    \ : null;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        var product = 1;\n        foreach (var item\
    \ in arr)\n        {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        var result = signs.Sum();\n        if (result !=\
    \ 0)\n        {\n            result *= product;\n        }\n        return result;",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long i\
    \ in arr) {\n            sign = sign ? i : -i;\n            sum += sign * Math.Abs(i);\n\
    \            product *= sign;\n        }\n        return sum == 0 ? null : sum\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  long product = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            sign = sign * i;\n            sum += sign;\n\
    \            product *= sign;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sum += Math.Abs(i);\n            product *= i;\n            if (sign)\n\
    \                sign = i >= 0;\n            else\n                sign = !sign;\n\
    \        }\n        if (sign)\n            return sum;\n        else\n       \
    \     return -sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            sum += Math.Abs(num);\n            prod *= num;\n        }\n\
    \        if (sum == 0)\n            return null;\n        return sum * prod;",
  "        if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sum = 0;\n        bool sign = true;\n        foreach (long i in\
    \ arr) {\n            sign = sign && (i >= 0);\n            product *= i;\n  \
    \          sum += sign * i;\n        }\n        if (sign)\n            return\
    \ sum;\n        else\n            return -sum;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = arr.First();\n        signs.Add(1);\n        signs.AddRange(arr.Skip(1).Select(x\
    \ => x * product));\n        signs.Add(-1);\n        signs.AddRange(arr.Take(1).Select(x\
    \ => x * product));\n        return signs.Sum();", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (signs.Count > 0)\n            result *= product;\n        return\
    \ result;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        var product = 1;\n        foreach (var item\
    \ in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n            product *=\
    \ item;\n        }\n        var result = signs.Aggregate((a, b) => a * b);\n \
    \       if (result != product)\n            return null;\n        return result;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = arr.Aggregate((a, b) => a * b);\n     \
    \   foreach (var item in arr) {\n            var sign = item < 0 ? -1 : 1;\n \
    \           signs.Add(sign * Math.Sign(item));\n        }\n        return signs.Aggregate((a,\
    \ b) => a * b);", "        if (arr.Count == 0)\n            return null;\n   \
    \     var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n           \
    \ product *= item;\n        }\n        var result = signs.Aggregate((x, y) =>\
    \ x * y);\n        if (result != 0)\n            return result * product;\n  \
    \      return null;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign) {\n                sign = i\
    \ == 0;\n            } else {\n                sign = i == -1;\n            }\n\
    \        }\n        if (sign) {\n            return sum;\n        } else {\n \
    \           return -sum;\n        }", "        if (arr.Count == 0)\n         \
    \   return null;\n        var signs = new List<long>();\n        var product =\
    \ 1;\n        foreach (var item in arr) {\n            var sign = item < 0 ? -1\
    \ : 1;\n            signs.Add(sign);\n            product *= sign;\n        }\n\
    \        var result = signs.Aggregate(product, (current, sign) => current * sign);\n\
    \        return result < 0 ? null : result;", "        if (arr.Count == 0)\n \
    \           return null;\n        long sum = 0;\n        long prod = 1;\n    \
    \    bool sign = true;\n        foreach (long i in arr) {\n            sum +=\
    \ Math.Abs(i);\n            prod *= i;\n            if (sign)\n              \
    \  sign = i < 0;\n            else\n                sign = !sign;\n        }\n\
    \        return sign == arr.Count ? sum : sum * prod;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr)\n        {\n       \
    \     var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n          \
    \  product *= sign;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate(product, (current, magnitude) => current\
    \ * magnitude);\n        return signs.Aggregate((current, sign) => current * sign\
    \ * result);", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = new List<long>();\n        var product = 1;\n        foreach (var\
    \ item in arr) {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate(product, (current, magnitude) => current\
    \ * magnitude);\n        return signs.Aggregate((current, sign) => current * sign\
    \ * result);", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = arr.Select(x => Math.Sign(x)).ToArray();\n        var product =\
    \ signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToArray();\n        var result = magnitudes.Aggregate((x, y) =>\
    \ x * y);\n        return result * product;", "        if (arr.Count == 0)\n \
    \           return null;\n        long sum = 0;\n        long product = 1;\n \
    \       bool sign = true;\n        foreach (long i in arr) {\n            sum\
    \ += Math.Abs(i);\n            product *= i;\n            sign = sign && i >=\
    \ 0;\n        }\n        if (sign)\n            return sum;\n        else\n  \
    \          return -sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = arr.Sum();\n   \
    \     foreach (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n\
    \            product *= item;\n        }\n        var result = signs.Aggregate((a,\
    \ b) => a * b) * product;\n        return result < 0 ? null : result;", "    \
    \    if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = arr.Sum();\n        foreach (var item in arr)\n       \
    \     signs.Add(Math.Sign(item) * Math.Sign(product));\n        return signs.Sum();",
  "        if (arr.Count == 0) return null;\n        var signs = new List<long>();\n\
    \        var product = arr.Sum();\n        foreach (var n in arr) {\n        \
    \    var sign = n < 0 ? -1 : 1;\n            signs.Add(sign * n);\n          \
    \  product *= sign;\n        }\n        return product;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr)\n        {\n       \
    \     signs.Add(item < 0 ? -1 : 1);\n            product *= item;\n        }\n\
    \        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        var\
    \ result = magnitudes.Aggregate(product, (current, magnitude) => current * magnitude);\n\
    \        return signs.Aggregate(result, (current, sign) => current * sign);",
  "        if (arr.Count == 0) return null;\n        var signs = arr.Select(x => Math.Sign(x)).ToArray();\n\
    \        var mags = arr.Select(x => Math.Abs(x)).ToArray();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var result = mags.Aggregate((x,\
    \ y) => x * y * product);\n        return result.IsNegative() ? null : result;",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long i\
    \ in arr) {\n            sign = sign && i >= 0;\n            sum += sign * i;\n\
    \            product *= sign;\n        }\n        if (sign)\n            return\
    \ sum;\n        else\n            return -sum;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var i in arr)\n        {\n            signs.Add(i);\n\
    \            product *= i;\n        }\n        var sign = signs.Sum();\n     \
    \   if (sign == 0)\n            return null;\n        var result = sign * product;\n\
    \        return result.IsNegative() ? null : result;", "        if (arr.Count\
    \ == 0) return null;\n        long sum = 0;\n        long product = 1;\n     \
    \   bool sign = true;\n        foreach (long n in arr) {\n            sum += sign\
    \ * n;\n            product *= sign;\n            sign *= n < 0;\n        }\n\
    \        return sum < 0 ? null : sum * product;", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        long sum = 0;\n        long\
    \ product = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n\
    \            sign = sign && i > 0;\n            sum += sign * i;\n           \
    \ product *= sign;\n        }\n        return sum == 0 ? null : sum;", "     \
    \   if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sign = 1;\n        foreach (var item in arr)\n            product\
    \ *= item;\n        foreach (var item in arr)\n            sign *= item;\n   \
    \     return sign * product;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = new List<long>();\n        var product = arr.Sum();\n\
    \        foreach (var item in arr) {\n            var sign = item < 0 ? -1 : 1;\n\
    \            signs.Add(sign * Math.Sign(item));\n            product *= sign;\n\
    \        }\n        return signs.Sum();", "        if (arr.Count == 0)\n     \
    \       return null;\n        long sign = 1;\n        long product = 1;\n    \
    \    long sum = 0;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (i == 0)\n                sign = 1;\n\
    \            else if (i == -1)\n                sign = -1;\n            else\n\
    \                sign = 0;\n        }\n        if (sum == 0)\n            return\
    \ null;\n        return sign * Math.Abs(Math.Sqrt(sum / product));", "       \
    \ if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = arr.Sum();\n        foreach (var item in arr) {\n     \
    \       var sign = item < 0 ? -1 : 1;\n            signs.Add(sign * Math.Sign(item));\n\
    \            product *= sign;\n        }\n        if (product == 0)\n        \
    \    return null;\n        return signs.Sum();", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = arr.Select(x => Math.Sign(x)).ToList();\n\
    \        var product = signs.Aggregate((x, y) => x * y);\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x,\
    \ y) => x * y);\n        return result.Equals(product) ? result : null;", "  \
    \      if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long prod = 1;\n        bool sign = true;\n        foreach (long i in\
    \ arr) {\n            sum += Math.Abs(i);\n            prod *= i;\n          \
    \  sign = sign && i < 0;\n        }\n        if (sign)\n            return sum;\n\
    \        else\n            return -sum;", "        if (arr.Count == 0)\n     \
    \       return null;\n        var signs = arr.Select(x => (x < 0L ? -1 : (x >\
    \ 0L ? 1 : 0)).ToArray());\n        var product = signs.Aggregate((x, y) => x\
    \ * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n  \
    \      return magnitudes.Aggregate((x, y) => x * y * product);", "        if (arr.Count\
    \ == 0) return null;\n        long sum = 0;\n        long product = 1;\n     \
    \   bool sign = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign) sign = i >= 0;\n           \
    \ else sign = !sign;\n        }\n        return sign == true ? sum : -sum;", " \
    \       if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long prod = 1;\n        bool sign = true;\n        foreach (long i in\
    \ arr) {\n            sum += Math.Abs(i);\n            prod *= i;\n          \
    \  sign = sign && i < 0;\n        }\n        if (sign)\n            return sum;\n\
    \        else\n            return -sum;", "        if (arr.Count == 0)\n     \
    \       return null;\n        long product = 1;\n        long sign = 1;\n    \
    \    long sum = 0;\n        foreach (long i in arr) {\n            sign = sign\
    \ * i;\n            sum += sign;\n            product *= sign;\n        }\n  \
    \      if (sum == 0)\n            return null;\n        return sum;", "      \
    \  if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToList();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n \
    \       var result = magnitudes.Aggregate((x, y) => x * y * signs.Contains(y));\n\
    \        return result.HasValue ? result.Value : null;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sign = sign ? i : -i;\n            sum += sign * Math.Abs(i);\n        \
    \    product *= sign;\n        }\n        return sum == 0 ? null : sum * product;",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long n\
    \ in arr) {\n            sign = sign && (n < 0);\n            sum += sign * n;\n\
    \            product *= sign;\n        }\n        return sum == 0 ? null : sum\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = new List<long>();\n        var product = arr.Aggregate(1L, (acc,\
    \ x) => acc * x);\n        foreach (var x in arr)\n            signs.Add(Math.Sign(x)\
    \ * Math.Sign(product));\n        return signs.Aggregate((acc, x) => acc + x);",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => (int)Math.Sign(x)).ToArray();\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        var product = signs.Aggregate((x, y) => x * y);\n        var result =\
    \ magnitudes.Aggregate((x, y) => x * y);\n        return result * product;", " \
    \       if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long prod = 1;\n        foreach (long n in arr)\n        {\n        \
    \    sum += Math.Abs(n);\n            prod *= n;\n        }\n        if (sum ==\
    \ 0)\n            return null;\n        return sum * prod;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = arr.Sum();\n        foreach (var item in arr)\n          \
    \  signs.Add(item < 0 ? -1 : 1);\n        var result = signs.Aggregate(product,\
    \ (x, y) => x * y);\n        if (result < 0)\n            return null;\n     \
    \   return result;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long prod = 1;\n        bool sign =\
    \ true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            prod *= i;\n            sign = sign && i > 0;\n        }\n      \
    \  if (sign) {\n            return sum;\n        } else {\n            return\
    \ prod;\n        }", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x, y) =>\
    \ x * y);\n        return result.Equals(product) ? result : null;", "        if\
    \ (arr.Count == 0) return null;\n        long sum = 0;\n        long product =\
    \ 1;\n        bool sign = true;\n        foreach (long i in arr) {\n         \
    \   sum += Math.Abs(i);\n            product *= i;\n            sign = sign &&\
    \ (i < 0);\n        }\n        if (sign) return sum;\n        return null;", " \
    \       if (arr.Count == 0) return null;\n        long product = 1;\n        long\
    \ sign = 1;\n        foreach (long n in arr) {\n            product *= n;\n  \
    \          sign *= n;\n        }\n        if (product == 0) return null;\n   \
    \     long result = sign * product;\n        if (result > 0) return result;\n\
    \        if (result < 0) return -result;\n        return null;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long product = 1;\n        long sum\
    \ = 0;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sign = sign ? i : -i;\n            product *= sign;\n            sum +=\
    \ sign * i;\n        }\n        if (sum == 0)\n            return null;\n    \
    \    return sum * product;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long sign = 1;\n        long product = 1;\n        long sum =\
    \ 0;\n        foreach (long i in arr) {\n            sign *= i;\n            product\
    \ *= i;\n            sum += sign * Math.Abs(i);\n        }\n        return sum\
    \ == 0 ? null : sum * product;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long product = 1;\n        long sign = 1;\n        long sum =\
    \ 0;\n        foreach (long i in arr)\n        {\n            sign *= i;\n   \
    \         sum += sign;\n            product *= sign;\n        }\n        return\
    \ sum;", "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    product *= i;\n            if (sign) {\n                sign = !sign;\n \
    \           } else {\n                sign = true;\n            }\n        }\n\
    \        if (sign) {\n            return sum;\n        } else {\n            return\
    \ -sum;\n        }", "        if (arr.Count == 0) return null;\n        long sum\
    \ = 0;\n        long prod = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            prod *= i;\n     \
    \       sign = sign && i > 0;\n        }\n        if (sign) return sum;\n    \
    \    else return prod;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long prod = 1;\n        bool sign = true;\n  \
    \      foreach (long i in arr) {\n            sum += Math.Abs(i);\n          \
    \  prod *= i;\n            if (sign)\n                sign = i < 0;\n        \
    \    else\n                sign = i > 0;\n        }\n        if (sign)\n     \
    \       return sum;\n        else\n            return -sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long prod =\
    \ 1;\n        bool sign = true;\n        foreach (long i in arr) {\n         \
    \   sum += Math.Abs(i);\n            prod *= i;\n            sign = sign && i\
    \ > 0;\n        }\n        if (sign)\n            return sum;\n        else\n\
    \            return -sum;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long sum = 0;\n        long product = 1;\n       \
    \ bool sign = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign) {\n                sign = i\
    \ == 0;\n            } else {\n                sign = i == -1;\n            }\n\
    \        }\n        return sum * product;", "        if (arr.Count == 0)\n   \
    \         return null;\n        var signs = new List<long>();\n        var product\
    \ = arr.Aggregate((x, y) => x * y);\n        foreach (var x in arr)\n        \
    \    signs.Add(Math.Sign(x) * Math.Sign(product));\n        return signs.Aggregate((x,\
    \ y) => x + y);", "        if (arr.Count == 0)\n            return null;\n   \
    \     long sum = 0;\n        long product = 1;\n        bool sign = true;\n  \
    \      foreach (long n in arr)\n        {\n            sum += Math.Abs(n);\n \
    \           product *= n;\n            sign = sign && (n < 0);\n        }\n  \
    \      if (sign)\n            return sum;\n        else\n            return -sum;",
  "        if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sum = 0;\n        bool sign = true;\n        foreach (long i in\
    \ arr) {\n            sign = sign ? i : -i;\n            product *= sign;\n  \
    \          sum += sign * i;\n        }\n        return sum == 0 ? null : sum;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ sum = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sign = sign && i > 0;\n            sum += sign\
    \ * i;\n            product *= sign;\n        }\n        return sum == 0 ? null\
    \ : sum;", "        if (arr.Count == 0)\n            return null;\n        long\
    \ product = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr)\n        {\n            sign *= i;\n            sum += sign;\n\
    \            product *= sign;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sum = 0;\n      \
    \  long prod = 1;\n        bool sign = true;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            prod *= i;\n            sign\
    \ = sign && i >= 0;\n        }\n        if (sign) {\n            return sum;\n\
    \        } else {\n            return prod;\n        }", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sum += Math.Abs(i);\n            product *= i;\n            sign = sign\
    \ && i >= 0;\n        }\n        if (sign)\n            return sum;\n        else\n\
    \            return -sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x, y) =>\
    \ x * y);\n        return product * result;", "        if (arr.Count == 0) return\
    \ null;\n        long product = 1;\n        long sign = 1;\n        long sum =\
    \ 0;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n   \
    \         product *= i;\n            sign *= i;\n        }\n        if (sum ==\
    \ 0) return null;\n        return sign * Math.Sign(product);", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sign = 1;\n     \
    \   long sum = 0;\n        long product = 1;\n        foreach (long i in arr)\
    \ {\n            sign = sign * i;\n            sum += sign;\n            product\
    \ *= sign;\n        }\n        return sum;", "        if (arr.Count == 0)\n  \
    \          return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var item in arr) {\n            signs.Add(item < 0 ?\
    \ -1 : 1);\n            product *= item;\n        }\n        var result = signs.Aggregate((x,\
    \ y) => x * y);\n        return result * product;", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        long sum = 0;\n        long\
    \ prod = 1;\n        bool sign = true;\n        foreach (long n in arr) {\n  \
    \          sum += Math.Abs(n);\n            prod *= n;\n            sign = sign\
    \ && n < 0;\n        }\n        if (sign) {\n            return sum;\n       \
    \ }\n        return prod;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            int sign = i % 2 == 0 ? 1 : -1;\n   \
    \         product *= sign;\n            sum += sign * i;\n        }\n        return\
    \ sum == 0 ? null : sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x, y) =>\
    \ x * y);\n        return result.Equals(product) ? result : null;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long product = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n  \
    \          if (sign) {\n                sign = i >= 0;\n            } else {\n\
    \                sign = i < 0;\n            }\n        }\n        if (sign) {\n\
    \            return sum;\n        } else {\n            return -sum;\n       \
    \ }", "        if (arr.Count == 0) return null;\n        var signs = new List<long>();\n\
    \        var product = arr.Sum();\n        foreach (var item in arr) {\n     \
    \       signs.Add(Math.Sign(item) * Math.Sign(product));\n            product\
    \ *= Math.Sign(item);\n        }\n        return signs.Sum();", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long prod =\
    \ 1;\n        bool sign = true;\n        foreach (long n in arr)\n        {\n\
    \            sum += Math.Abs(n);\n            prod *= n;\n            sign = sign\
    \ && (n < 0);\n        }\n        if (sign)\n            sum *= -1;\n        return\
    \ sum * prod;", "        if (arr.Count == 0)\n            return null;\n     \
    \   long prod = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            prod *= i;\n            sign *= i;\n        \
    \    sum += sign;\n        }\n        return sum;", "        if (arr.Count ==\
    \ 0) return null;\n        long sum = 0;\n        long product = 1;\n        bool\
    \ sign = true;\n        foreach (long i in arr) {\n            sign = sign ? i\
    \ : -i;\n            sum += sign * Math.Abs(i);\n            product *= sign;\n\
    \        }\n        return sum == 0 ? null : sum * product;", "        if (arr.Count\
    \ == 0) return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var num in arr) {\n            signs.Add(num < 0 ? -1\
    \ : 1);\n            product *= num;\n        }\n        var result = signs.Aggregate((a,\
    \ b) => a * b) * product;\n        return result < 0 ? null : result;", "    \
    \    if (arr.Count == 0)\n            return null;\n        long sum = 0;\n  \
    \      long product = 1;\n        bool sign = true;\n        foreach (long i in\
    \ arr) {\n            sum += Math.Abs(i);\n            product *= i;\n       \
    \     sign = sign && i > 0;\n        }\n        if (sign)\n            return\
    \ sum;\n        else\n            return -sum;", "        if (arr.Count == 0)\
    \ return null;\n        long sign = 1;\n        long product = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            sign *= i;\n        }\n        if (sum\
    \ == 0) return null;\n        return sign * Math.Abs(Math.Sqrt(sum / product));",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long i\
    \ in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n    \
    \        sign = sign && i < 0;\n        }\n        if (sign)\n            return\
    \ sum;\n        else\n            return -sum;", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        long sign = 1;\n        long\
    \ product = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n   \
    \         sign = sign * (i < 0 ? -1 : 1);\n            product = product * i;\n\
    \            sum += sign * Math.Abs(i);\n        }\n        return sum * product;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            sign *= i;\n            sum += sign;\n      \
    \      product *= sign;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sum;", "        if (arr.Count == 0)\n     \
    \       return null;\n        long sum = 0;\n        long product = 1;\n     \
    \   bool sign = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign)\n                sign = i >=\
    \ 0;\n            else\n                sign = !sign;\n        }\n        if (sign)\n\
    \            return sum;\n        else\n            return -sum;", "        if\
    \ (arr.Count == 0) return null;\n        var signs = arr.Select(x => Math.Sign(x)).ToArray();\n\
    \        var product = signs.Aggregate((x, y) => x * y);\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToArray();\n        return magnitudes.Aggregate((x,\
    \ y) => x * y * product);", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sign = sign && i >= 0;\n     \
    \       sum += Math.Abs(i);\n            product *= sign;\n        }\n       \
    \ return sum * product;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        var signs = new List<long>();\n        var product = 1;\n\
    \        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (result != 0) {\n            result *= product;\n        }\n     \
    \   return result;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = arr.Aggregate((x,\
    \ y) => x * y);\n        foreach (var x in arr)\n            signs.Add(x < 0 ?\
    \ -1 : x > 0 ? 1 : 0);\n        return signs.Aggregate((x, y) => x * product);",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            product *= i;\n            sign *= i;\n     \
    \       sum += sign;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long prod = 1;\n        long sign =\
    \ 1;\n        foreach (long num in arr)\n            prod *= num;\n        foreach\
    \ (long num in arr)\n            sign *= num;\n        long mag = prod * sign;\n\
    \        if (mag == 0)\n            return null;\n        long sum = 0;\n    \
    \    foreach (long num in arr)\n            sum += Math.Abs(num) * mag;\n    \
    \    return sum;", "        if (arr.Count == 0) return null;\n        var signs\
    \ = new List<long>();\n        var product = 1;\n        foreach (var i in arr)\
    \ {\n            signs.Add(Math.Sign(i));\n            product *= i;\n       \
    \ }\n        var result = signs.Sum();\n        if (result != 0) return result\
    \ * product;\n        return null;", "        if (arr.Count == 0)\n          \
    \  return null;\n        var signs = new List<long>();\n        var product =\
    \ arr.Sum();\n        foreach (var n in arr)\n            signs.Add(n * Math.Sign(n));\n\
    \        var sign = signs.Aggregate((a, b) => a * b);\n        if (sign == 0)\n\
    \            return null;\n        return product * sign;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sum += Math.Abs(i);\n            product *= i;\n            if (sign)\n\
    \                sign = i >= 0;\n            else\n                sign = i <\
    \ 0;\n        }\n        if (sign)\n            return sum;\n        else\n  \
    \          return -sum;"]
stop_tokens:
- "\n    }\n"
