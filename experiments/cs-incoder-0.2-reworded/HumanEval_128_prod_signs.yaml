name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the list, represented by 1, -1 or 0.\n    // Note: return null\
  \ for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new List<long>(new\
  \ long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new List<long>()))\n\
  \    // null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        foreach (var item in arr)\n            signs.Add(Sign(item));\n\
    \        var product = signs.Aggregate((x, y) => x * y);\n        var magnitude\
    \ = arr.Aggregate((x, y) => Math.Abs(x - y));\n        return product * magnitude;",
  "        if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long prod = 1;\n        foreach (long i in arr)\n            sum += Math.Abs(i);\n\
    \        foreach (long i in arr)\n            prod *= i;\n        if (sum == 0)\n\
    \            return null;\n        return sum * prod;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr)\n            sum += Math.Abs(i);\n   \
    \     foreach (long i in arr)\n            product *= i;\n        if (sum == 0)\n\
    \            return null;\n        long sign = 1;\n        foreach (long i in\
    \ arr)\n            sign *= i;\n        if (sign == 0)\n            return null;\n\
    \        long result = sign * product;\n        if (result > 0)\n            return\
    \ result;\n        return -result;", "        if (arr.Count == 0) return null;\n\
    \        long product = 1;\n        long sign = 1;\n        long sum = 0;\n  \
    \      foreach (long i in arr) {\n            sign = sign * i;\n            sum\
    \ += sign;\n            product *= sign;\n        }\n        if (sum > 0) return\
    \ sum;\n        if (sum < 0) return -sum;\n        return null;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var n in arr)\n        {\n       \
    \     var sign = n < 0 ? -1 : 1;\n            signs.Add(sign);\n            product\
    \ *= sign;\n        }\n        var result = signs.Sum();\n        return result\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = new List<long>();\n        var product = 1;\n        foreach (var\
    \ item in arr) {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        var result = signs.Sum();\n        if (signs.Count\
    \ > 0)\n            result *= product;\n        return result;", "        if (arr.Count\
    \ == 0) return null;\n        var signs = new List<long>();\n        foreach (var\
    \ item in arr) {\n            signs.Add(Sign(item));\n        }\n        var result\
    \ = signs.Aggregate((a, b) => a * b);\n        return result;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long num in arr) {\n     \
    \       sum += Math.Abs(num);\n            product *= num;\n            sign =\
    \ sign && num > 0;\n        }\n        if (sign)\n            return sum;\n  \
    \      else\n            return -sum;", "        if (arr.Count == 0) return null;\n\
    \        var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToList();\n        return magnitudes.Aggregate((x, y) => x * y\
    \ * product);", "        if (arr.Count == 0) return null;\n        long sum =\
    \ 0;\n        long prod = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            prod *= i;\n     \
    \       sign = sign && i >= 0;\n        }\n        if (sign) return sum;\n   \
    \     return prod;", "        if (arr.Count == 0)\n            return null;\n\
    \        long product = 1;\n        long sign = 1;\n        long sum = 0;\n  \
    \      foreach (long i in arr) {\n            sign = sign * (i < 0 ? -1 : 1);\n\
    \            sum += sign * i;\n            product *= sign;\n        }\n     \
    \   if (sum == 0)\n            return null;\n        return sum;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        foreach (var item in arr)\n            signs.Add(Sign(item));\n     \
    \   var product = signs.Aggregate((a, b) => a * b);\n        var magnitudes =\
    \ arr.Select(x => Math.Abs(x)).ToList();\n        return magnitudes.Aggregate((a,\
    \ b) => a * b) * product;", "        if (arr.Count == 0) return null;\n      \
    \  var signs = arr.Select(x => (int)Math.Sign(x)).ToArray();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToArray();\n        var sum = magnitudes.Aggregate((x, y) => x\
    \ * y);\n        return product.Equals(sum) ? null : sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sum += Math.Abs(i);\n            product *= i;\n            if (sign)\n\
    \                sign = i < 0;\n            else\n                sign = i > 0;\n\
    \        }\n        return sum * product;", "        if (arr.Count == 0)\n   \
    \         return null;\n        long sum = 0;\n        long product = 1;\n   \
    \     bool sign = true;\n        foreach (long i in arr) {\n            sign =\
    \ sign ? 1 : -1;\n            sum += sign * i;\n            product *= sign;\n\
    \        }\n        return sum == 0 ? null : sum * product;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sign = 1;\n        foreach (long num in arr) {\n            product\
    \ *= num;\n            sign *= num;\n        }\n        long magnitude = product;\n\
    \        long sum = 0;\n        while (magnitude > 0) {\n            sum += sign;\n\
    \            magnitude /= 2;\n            sign *= -1;\n        }\n        return\
    \ sum;", "        if (arr.Count == 0) return null;\n        long sign = 1;\n \
    \       long sum = 0;\n        long product = 1;\n        foreach (long i in arr)\
    \ {\n            sign *= i;\n            sum += sign;\n            product *=\
    \ sign;\n        }\n        return sum;", "        if (arr.Count == 0)\n     \
    \       return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var item in arr)\n        {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Sum();\n        if (result != 0)\n            return result * product;\n\
    \        return null;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sign = sign && i > 0;\n      \
    \      sum += Math.Abs(i) * sign;\n            product *= sign;\n        }\n \
    \       return sum == 0 ? null : sum;", "        if (arr.Count == 0)\n       \
    \     return null;\n        long sum = 0;\n        long product = 1;\n       \
    \ bool sign = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign)\n                sign = i >=\
    \ 0;\n            else\n                sign = i < 0;\n        }\n        return\
    \ sum * product;"]
stop_tokens:
- "\n    }\n"
