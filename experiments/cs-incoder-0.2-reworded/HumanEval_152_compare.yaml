name: HumanEval_152_compare
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // I think we all remember that feeling when the result of some\
  \ long-awaited\n    // event is finally known. The feelings and thoughts you have\
  \ at that moment are\n    // definitely worth noting down and comparing.\n    //\
  \ Your task is to determine if a person correctly guessed the results of a number\
  \ of matches.\n    // You are given two lists of scores and guesses of equal length,\
  \ where each index shows a match. \n    // Return a list of the same length denoting\
  \ how far off each guess was. If they have guessed correctly,\n    // the value\
  \ is 0, and if not, the value is the absolute difference between the guess and the\
  \ score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new\
  \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>\
  \ Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,\
  \ (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,\
  \ (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,\
  \ (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>\
  \ game, List<long> guess) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
  \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
  \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
  \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,\
  \ (long)1L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long score =\
    \ 0;\n        long guess = 0;\n        long diff = 0;\n        foreach (long g\
    \ in game) {\n            score += g;\n        }\n        foreach (long g in guess)\
    \ {\n            guess += g;\n        }\n        diff = score - guess;\n     \
    \   if (diff < 0) {\n            result.Add(diff);\n        }\n        else {\n\
    \            result.Add(diff);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        long guess = 0;\n        long game = 0;\n        foreach\
    \ (var item in game) {\n            score = item;\n            foreach (var item2\
    \ in guess) {\n                diff = item2 - score;\n                if (diff\
    \ < 0) {\n                    diff = -diff;\n                }\n             \
    \   if (diff == 0) {\n                    result.Add(0);\n                }\n\
    \                else {\n                    result.Add(diff);\n             \
    \   }\n            }\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        game.ForEach(x => result.Add(x - guess[game.IndexOf(x)]));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long score = 0;\n        long guess = 0;\n        long diff = 0;\n     \
    \   bool correct = false;\n        foreach (var item in game) {\n            score\
    \ = item;\n            guess = guess[game.IndexOf(item)]; // get guess from list\
    \ by index\n            diff = guess - score; // get difference between guess\
    \ and score\n            if (diff < 0) {\n                diff = -diff;\n    \
    \        }\n            if (diff == 0) {\n                result.Add(0);\n   \
    \         }\n            else {\n                result.Add(diff);\n         \
    \   }\n            correct = correct || diff == 0;\n        }\n        if (correct)\
    \ {\n            return result;\n        }\n        else {\n            return\
    \ result.Select(x => Math.Abs(x)).ToList();\n        }", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score = 0;\n        long difference\
    \ = 0;\n        foreach (long guess in guess) {\n            score = game.Sum(x\
    \ => x == guess ? 1 : 0);\n            difference = guess - score;\n         \
    \   result.Add(difference);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long diff = 0;\n\
    \        foreach (long g in game) {\n            score += g;\n            foreach\
    \ (long g in guess) {\n                diff += Math.Abs(g - score);\n        \
    \    }\n            result.Add(diff);\n        }\n        return result;", " \
    \       var result = new List<long>(game.Count);\n        foreach (var item in\
    \ game) {\n            int diff = Math.Abs(item - guess[game.IndexOf(item)]);\n\
    \            if (diff != 0) {\n                result.Add(diff);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long diff;\n        long score;\n        long maxScore = game.Max();\n\
    \        long minScore = game.Min();\n        long maxGuess = guess.Max();\n \
    \       long minGuess = guess.Min();\n        long maxDiff = maxScore - maxGuess;\n\
    \        long minDiff = minScore - minGuess;\n        long maxDiffAbs = Math.Abs(maxDiff);\n\
    \        long minDiffAbs = Math.Abs(minDiff);\n        long maxScoreAbs = Math.Abs(maxScore);\n\
    \        long minScoreAbs = Math.Abs(minScore);\n        long maxGuess = Math.Abs(maxGuess);\n\
    \        long minGuess = Math.Abs(minGuess);\n        long maxDiffAbs = Math.Abs(maxDiffAbs);\n\
    \        long minDiffAbs = Math.Abs(minDiffAbs);\n        long maxScoreAbs = Math.Abs(maxScoreAbs);\n\
    \        long minScoreAbs = Math.Abs(minScoreAbs);\n        long maxDiff = maxScore\
    \ - maxGuess;\n        long minDiff = minScore - minGuess;\n        long maxDiffAbs\
    \ = Math.Abs(maxDiff);\n        long minDiffAbs = Math.Abs(minDiff);\n       \
    \ long maxScoreAbs = Math.Abs(maxScore);\n        long minScoreAbs = Math.Abs(minScore);\n\
    \        long maxDiffAbs = Math.Abs(maxDiffAbs);\n        long minDiffAbs = Math.Abs(minDiffAbs);\n\
    \        long maxScore = game.Max();\n        long minScore = game.Min();\n  \
    \      long maxGuess = guess.Max();\n        long minGuess = guess.Min();\n  \
    \      long maxDiff = maxScore - maxGuess;\n        long minDiff = minScore -\
    \ minGuess;\n        long maxDiffAbs = Math.Abs(maxDiff);\n        long minDiffAbs\
    \ = Math.Abs(minDiff);\n        long maxScoreAbs = Math.Abs(maxScore);\n     \
    \   long minScoreAbs = Math.Abs(minScore);\n        long maxDiffAbs = Math.Abs(maxDiffAbs);\n\
    \        long minDiffAbs = Math.Abs(minDiffAbs);\n        long maxScore = game.Max();\n\
    \        long minScore = game.Min();\n        long maxGuess = guess.Max();\n \
    \       long minGuess = ", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += Math.Abs(g - g);\n            }\n            result.Add(diff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        bool correct;\n        long\
    \ diff;\n        foreach (var item in game) {\n            score = item;\n   \
    \         guess = guess[game.IndexOf(item)]; // this line is very important\n\
    \            correct = guess == score;\n            diff = correct ? 0 : Math.Abs(guess\
    \ - score);\n            result.Add(diff);\n        }\n        return result;",
  "        var result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            var gameScore = game[i];\n            var guessScore = guess[i];\n\
    \            var diff = gameScore - guessScore;\n            if (diff > 0) result.Add(diff);\n\
    \            else if (diff < 0) result.Add(-diff);\n            else result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            if (game[i] == guess[i]) {\n               \
    \ score++;\n            } else {\n                diff = game[i] - guess[i];\n\
    \                if (diff > 0) {\n                    result.Add(diff);\n    \
    \            } else {\n                    result.Add(-diff);\n              \
    \  }\n            }\n        }\n        if (score == game.Count) {\n         \
    \   return result;\n        } else {\n            return new List<long>(game.Count);\n\
    \        }", "        List<long> result = new List<long>(game.Count);\n      \
    \  for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n\
    \            long guess = guess[i];\n            long difference = guess - score;\n\
    \            if (difference < 0) {\n                difference = -difference;\n\
    \            }\n            result.Add(difference);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool first = true;\n        foreach (long g in game) {\n            correct\
    \ = false;\n            foreach (long g in guess) {\n                score = g;\n\
    \                guess = g;\n                diff = g - score;\n             \
    \   if (first) {\n                    first = false;\n                } else {\n\
    \                    result.Add(diff);\n                }\n                if\
    \ (diff == 0) {\n                    correct = true;\n                }\n    \
    \        }\n            if (correct) {\n                result.Add(0);\n     \
    \       } else {\n                result.Add(diff);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        for (int\
    \ i = 0; i < game.Count; i++) {\n            score = game[i];\n            guess\
    \ = guess[i];\n            diff = guess - score;\n            if (diff > 0) {\n\
    \                result.Add(diff);\n            } else if (diff < 0) {\n     \
    \           result.Add(-diff);\n            } else {\n                result.Add(0);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in guess) {\n            result.Add(Math.Abs(item\
    \ - game[guess.IndexOf(item)]);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>(game.Count);\n        long score = 0;\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            score\
    \ += g;\n            foreach (long g in guess) {\n                diff += g -\
    \ score;\n            }\n            result.Add(diff);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long diff = 0;\n        foreach (long score in game) {\n            foreach\
    \ (long guess in guess) {\n                if (guess == score) {\n           \
    \         result.Add(0);\n                } else {\n                    diff =\
    \ Math.Abs(guess - score);\n                    result.Add(diff);\n          \
    \      }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ difference = 0;\n        foreach (long guess in guess) {\n            score\
    \ += game[guess];\n            difference += Math.Abs(guess - score);\n      \
    \  }\n        foreach (long guess in guess) {\n            result.Add(Math.Abs(guess\
    \ - score));\n        }\n        return result;", "        List<long> result =\
    \ new List<long>(game.Count);\n        long score;\n        long guess;\n    \
    \    bool correct;\n        for (int i = 0; i < game.Count; i++) {\n         \
    \   score = game[i];\n            guess = guess[i];\n            correct = guess\
    \ == score;\n            if (correct) {\n                result[i] = 0;\n    \
    \        } else {\n                result[i] = Math.Abs(guess - score);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>(game.Count);\n        foreach (long score in game) {\n          \
    \  long guess = guess.FirstOrDefault(x => x == score);\n            if (guess\
    \ == -1L) {\n                result.Add(0);\n            } else {\n          \
    \      result.Add(guess - score);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score;\n\
    \        long guess;\n        bool correct;\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            score = game[i];\n            guess = guess[i];\n      \
    \      correct = guess == score;\n            result.Add(correct ? 0 : Math.Abs(guess\
    \ - score));\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long score = 0;\n        long guess = 0;\n      \
    \  bool correct = false;\n        foreach (long i in game) {\n            if (guess\
    \ == i) {\n                correct = true;\n                score = 0;\n     \
    \       }\n            else if (guess > i) {\n                correct = false;\n\
    \                score = Math.Abs(guess - i);\n            }\n            else\
    \ {\n                correct = true;\n                score = Math.Abs(i - guess);\n\
    \            }\n            result.Add(score);\n        }\n        if (correct)\
    \ {\n            return result;\n        }\n        else {\n            return\
    \ result.OrderByDescending(x => x).ToList();\n        }", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        foreach (long g in game) {\n            score += g;\n   \
    \         foreach (long g in guess) {\n                diff += Math.Abs(g - score);\n\
    \            }\n            result.Add(diff);\n        }\n        return result;",
  "        // TODO: Implement this method\n        List<long> result = new List<long>();\n\
    \        foreach (long score in game) {\n            long guess = guess.FirstOrDefault();\n\
    \            if (guess == score) {\n                result.Add(0);\n         \
    \   } else {\n                result.Add(Math.Abs(guess - score));\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        for (int i = 0; i < game.Count; i++) {\n            score = game[i];\n\
    \            guess = guess[i];\n            diff = guess - score;\n          \
    \  correct = diff < 0L;\n            result.Add(correct ? diff : -diff);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        long diff2;\n\
    \        long diff3;\n        long diff4;\n        long diff5;\n        long diff6;\n\
    \        long diff7;\n        long diff8;\n        long diff9;\n        long diff10;\n\
    \        long diff11;\n        long diff12;\n        long diff13;\n        long\
    \ diff14;\n        long diff15;\n        long diff16;\n        long diff17;\n\
    \        long diff18;\n        long diff19;\n        long diff20;\n        long\
    \ diff21;\n        long diff22;\n        long diff23;\n        long diff24;\n\
    \        long diff25;\n        long diff26;\n        long diff27;\n        long\
    \ diff28;\n        long diff29;\n        long diff30;\n        long diff31;\n\
    \        long diff32;\n        long diff33;\n        long diff34;\n        long\
    \ diff35;\n        long diff36;\n        long diff37;\n        long diff38;\n\
    \        long diff39;\n        long diff40;\n        long diff41;\n        long\
    \ diff42;\n        long diff43;\n        long diff44;\n        long diff45;\n\
    \        long diff46;\n        long diff47;\n        long diff48;\n        long\
    \ diff49;\n        long diff50;\n        long diff51;\n        long diff52;\n\
    \        long diff53;\n        long diff54;\n        long diff55;\n        long\
    \ diff56;\n        long diff57;\n        long diff58;\n        long diff59;\n\
    \        long diff60;\n        long diff61;\n        long diff62;\n        long\
    \ diff63;\n        long diff64;\n        long diff65;\n        long diff66;\n\
    \        long diff67;\n        long diff68;\n        long diff69;\n        long\
    \ diff70;\n        long diff71;\n        long diff72;\n        long diff73;\n\
    \        long diff74;\n        long diff75;\n        long diff76;\n        long\
    \ diff77;\n        long diff78;\n        long diff79;\n        long diff80;\n\
    \        long diff81;\n        long diff82;\n        long diff83;\n        long\
    \ diff84;\n        long diff85;", "        List<long> result = new List<long>(game.Count);\n\
    \        for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n\
    \            long guess = guess[i];\n            long diff = guess - score;\n\
    \            if (diff > 0) {\n                result.Add(diff);\n            }\n\
    \            else {\n                result.Add(-diff);\n            }\n     \
    \   }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool first = true;\n        foreach (var item in game) {\n          \
    \  score = item;\n            guess = guess[game.IndexOf(item)]; // guesses are\
    \ in same order as game\n            diff = guess - score;\n            correct\
    \ = diff < 0L;\n            if (first) {\n                result.Add(diff);\n\
    \                first = false;\n            } else {\n                result.Add(Math.Abs(diff));\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>(game.Count);\n        foreach (var item in game) {\n            var\
    \ guessedCorrectly = guess.Contains(item);\n            var difference = Math.Abs(item\
    \ - guess[guess.IndexOf(item)]);\n            if (guessedCorrectly) {\n      \
    \          result.Add(0);\n            } else {\n                result.Add(difference);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        foreach (long score in game) {\n    \
    \        long difference = score - guess[game.IndexOf(score)];\n            if\
    \ (difference < 0) {\n                difference = -difference;\n            }\n\
    \            result.Add(difference);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long difference = 0;\n        long guess = 0;\n        long game = 0;\n\
    \        foreach (long i in guess) {\n            guess = i;\n            game\
    \ = game[i];\n            difference = Math.Abs(guess - game);\n            if\
    \ (difference == 0) {\n                result.Add(0);\n            } else {\n\
    \                result.Add(difference);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long score = 0;\n        long diff = 0;\n        foreach (long g in game) {\n\
    \            score += g;\n            foreach (long g in guess) {\n          \
    \      diff += Math.Abs(g - score);\n            }\n            result.Add(diff);\n\
    \        }\n        return result;", "        var result = new List<long>(game.Count);\n\
    \        var scores = new List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n\
    \        var correct = new List<long>(game.Count);\n        var wrong = new List<long>(game.Count);\n\
    \        var total = 0;\n        var maxScore = game.Max();\n        var maxGuess\
    \ = guess.Max();\n        foreach (var item in game) {\n            scores.Add(item);\n\
    \        }\n        foreach (var item in guess) {\n            guesses.Add(item);\n\
    \        }\n        foreach (var item in game) {\n            total += item;\n\
    \        }\n        foreach (var item in guess) {\n            total -= item;\n\
    \        }\n        foreach (var item in game) {\n            if (item == maxScore)\
    \ {\n                correct.Add(item);\n            }\n            else {\n \
    \               wrong.Add(item);\n            }\n        }\n        foreach (var\
    \ item in guess) {\n            if (item == maxGuess) {\n                correct.Add(item);\n\
    \            }\n            else {\n                wrong.Add(item);\n       \
    \     }\n        }\n        foreach (var item in game) {\n            if (item\
    \ == maxScore) {\n                correct.Add(item);\n            }\n        \
    \    else {\n                wrong.Add(item);\n            }\n        }\n    \
    \    foreach (var item in guess) {\n            if (item == maxGuess) {\n    \
    \            correct.Add(item);\n            }\n            else {\n         \
    \       wrong.Add(item);\n            }\n        }\n        foreach (var item\
    \ in game) {\n            if (item == maxScore) {\n                correct.Add(item);\n\
    \            }\n            else {\n                wrong.Add(item);\n       \
    \     }\n        }\n        foreach (var item in guess) {\n            if (item\
    \ == maxGuess) {\n                correct.Add(item);\n            }\n        \
    \    else {\n                wrong.Add(item);\n            }\n        }\n    \
    \    foreach (var item in game) {\n            if (item == maxScore) {\n     \
    \           correct.Add(item);\n            }\n            else {\n          \
    \      wrong.Add(item);\n            }\n        }\n        foreach (var item in\
    \ guess) {\n            if (item == maxGuess) {\n                correct.Add(item);\n\
    \            }\n            else {\n                wrong.Add(item);\n       \
    \     }\n        }\n        foreach (var item in game) {\n            if (item\
    \ == maxScore) {\n                correct.Add(item);\n            }\n        \
    \    else {\n                wrong.Add(item);\n            }\n        }\n    \
    \    foreach (var item in guess) {\n            if (item == maxGuess) {\n    \
    \            correct.Add(item);\n            }\n            else {\n         \
    \       wrong.Add(item);\n            }\n        }\n        foreach (var item\
    \ in game) {\n            if (item == max", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long difference = 0;\n        foreach (long\
    \ guess in guess) {\n            score += game[guess];\n            difference\
    \ = Math.Abs(guess - score);\n            result.Add(difference);\n        }\n\
    \        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        bool correct;\n        bool\
    \ found;\n        bool found2;\n        bool found3;\n        bool found4;\n \
    \       bool found5;\n        bool found6;\n        bool found7;\n        bool\
    \ found8;\n        bool found9;\n        bool found10;\n        bool found11;\n\
    \        bool found12;\n        bool found13;\n        bool found14;\n       \
    \ bool found15;\n        bool found16;\n        bool found17;\n        bool found18;\n\
    \        bool found19;\n        bool found20;\n        bool found21;\n       \
    \ bool found22;\n        bool found23;\n        bool found24;\n        bool found25;\n\
    \        bool found26;\n        bool found27;\n        bool found28;\n       \
    \ bool found29;\n        bool found30;\n        bool found31;\n        bool found32;\n\
    \        bool found33;\n        bool found34;\n        bool found35;\n       \
    \ bool found36;\n        bool found37;\n        bool found38;\n        bool found39;\n\
    \        bool found40;\n        bool found41;\n        bool found42;\n       \
    \ bool found43;\n        bool found44;\n        bool found45;\n        bool found46;\n\
    \        bool found47;\n        bool found48;\n        bool found49;\n       \
    \ bool found50;\n        bool found51;\n        bool found52;\n        bool found53;\n\
    \        bool found54;\n        bool found55;\n        bool found56;\n       \
    \ bool found57;\n        bool found58;\n        bool found59;\n        bool found60;\n\
    \        bool found61;\n        bool found62;\n        bool found63;\n       \
    \ bool found64;\n        bool found65;\n        bool found66;\n        bool found67;\n\
    \        bool found68;\n        bool found69;\n        bool found70;\n       \
    \ bool found71;\n        bool found72;\n        bool found73;\n        bool found74;\n\
    \        bool found75;\n        bool found76;\n        bool found77;\n       \
    \ bool found78;\n        bool found79;\n        bool found80;\n        bool found81;\n\
    \        bool found82;\n        bool found83;\n        bool found84;\n", "   \
    \     var result = new List<long>();\n        var correct = new List<long>();\n\
    \        var wrong = new List<long>();\n        var gameScores = new List<long>();\n\
    \        var guessScores = new List<long>();\n        var gameGuesses = new List<long>();\n\
    \        var guessGuesses = new List<long>();\n        var gameScore = 0;\n  \
    \      var guessScore = 0;\n        var gameGuess = 0;\n        var guessGuess\
    \ = 0;\n        var gameScoreDiff = 0;\n        var guessScoreDiff = 0;\n    \
    \    var gameGuessDiff = 0;\n        var guessGuessDiff = 0;\n        var gameScoreDiffDiff\
    \ = 0;\n        var guessScoreDiffDiff = 0;\n        var gameGuessDiffDiff = 0;\n\
    \        var guessGuessDiffDiff = 0;\n        var gameScoreDiffDiffDiff = 0;\n\
    \        var guessScoreDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff =\
    \ 0;\n        var guessGuessDiffDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff\
    \ = 0;\n        var guessGuessDiffDiff = 0;\n        var gameScoreDiffDiffDiffDiff\
    \ = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n        var gameGuessDiffDiffDiff",
  "        // Your code goes here\n        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long guess = 0;\n        long diff = 0;\n  \
    \      foreach (var item in game) {\n            score += item;\n        }\n \
    \       foreach (var item in guess) {\n            guess += item;\n        }\n\
    \        diff = score - guess;\n        if (diff < 0) {\n            foreach (var\
    \ item in game) {\n                result += item;\n            }\n        }\n\
    \        else {\n            foreach (var item in guess) {\n                result\
    \ += item;\n            }\n        }\n        return result;", "        var result\
    \ = new List<long>(game.Count);\n        long score;\n        long guess;\n  \
    \      long diff;\n        bool correct;\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            score = game[i];\n            guess = guess[i];\n      \
    \      correct = guess == score;\n            diff = correct ? 0 : Math.Abs(guess\
    \ - score);\n            result[i] = diff;\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score;\n\
    \        long guess;\n        for (int i = 0; i < game.Count; i++) {\n       \
    \     score = game[i];\n            guess = guess[i];\n            if (guess ==\
    \ score) {\n                result[i] = 0;\n            } else {\n           \
    \     result[i] = Math.Abs(guess - score);\n            }\n        }\n       \
    \ return result;", "        // Your code goes here\n        List<long> result\
    \ = new List<long>();\n        long score = 0;\n        long guess = 0;\n    \
    \    long difference = 0;\n        foreach (var item in game) {\n            score\
    \ = item;\n            foreach (var item2 in guess) {\n                guess =\
    \ item2;\n                difference = Math.Abs(guess - score);\n            \
    \    if (difference == 0) {\n                    result.Add(0);\n            \
    \    } else {\n                    result.Add(difference);\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score = 0;\n        long diff =\
    \ 0;\n        foreach (long g in game) {\n            score += g;\n          \
    \  foreach (long g in guess) {\n                diff += Math.Abs(g - score);\n\
    \            }\n            result.Add(diff);\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long guess = 0;\n        long difference = 0;\n        foreach (var item\
    \ in game) {\n            guess = item.CompareTo(guess[game.IndexOf(item)]);\n\
    \            if (guess == 0) {\n                difference = item.CompareTo(score);\n\
    \            } else {\n                difference = guess - score;\n         \
    \   }\n            result.Add(difference);\n            score = item;\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool correctGuess;\n        bool correctScore;\n        bool correctGuessScore;\n\
    \        bool correctGuessScoreDiff;\n        bool correctGuessScoreDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiff;\n        bool correctGuessScoreDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiff;\n        bool correctGuessScoreDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiff;\n        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n       \
    \ bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n        bool\
    \ correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n\
    \        bool correctGuessScore", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        long diff2 = 0;\n  \
    \      long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n   \
    \     long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n    \
    \    long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n   \
    \     long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n \
    \       long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n\
    \        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n\
    \        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n\
    \        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n\
    \        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n\
    \        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n\
    \        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n\
    \        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n\
    \        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n\
    \        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n\
    \        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n\
    \        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n\
    \        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n\
    \        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n\
    \        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n\
    \        long diff60 = 0;\n        long diff61 = 0;\n        long diff62 = 0;\n\
    \        long diff63 = 0;\n        long diff64 = 0;\n        long diff65 = 0;\n\
    \        long diff66 = 0;\n        long diff67 = 0;\n        long diff68 = 0;\n\
    \        long diff69 = 0;\n        long diff70 = 0;\n        long diff71 = 0;\n\
    \        long diff72 = 0;\n        long diff73 = 0;\n        long diff74 = 0;\n\
    \        long diff75 = 0;\n        long diff76 = 0;\n        long diff77 = 0;\n\
    \        long diff78 = 0;\n        long diff79 = 0;\n        long diff80 = 0;\n\
    \        long diff81 = 0;\n        long diff82 = 0;\n        long diff83 = 0;\n\
    \        ", "        // TODO: Implement this method\n        List<long> result\
    \ = new List<long>(game.Count);\n        foreach (long g in game) {\n        \
    \    long g2 = g;\n            int i = 0;\n            foreach (long g in guess)\
    \ {\n                if (g != g2) {\n                    g2 = g;\n           \
    \         i++;\n                }\n            }\n            result.Add(i);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += g - score;\n            }\n            result.Add(diff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long difference = 0;\n        foreach (long\
    \ guess in guess) {\n            score = game.ElementAt(guess);\n            difference\
    \ = guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long score = 0;\n        long diff = 0;\n        foreach (long g in game) {\n\
    \            score += g;\n            foreach (long g in guess) {\n          \
    \      diff += g - score;\n            }\n            result.Add(diff);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long difference = 0;\n        foreach (long\
    \ guess in guess) {\n            score += game[guess];\n            difference\
    \ += Math.Abs(guess - score);\n        }\n        foreach (long guess in guess)\
    \ {\n            result.Add(Math.Abs(guess - score));\n        }\n        return\
    \ result;", "        var result = new List<long>(game.Count);\n        for (int\
    \ i = 0; i < game.Count; i++) {\n            var diff = game[i] - guess[i];\n\
    \            if (diff > 0) {\n                result.Add(diff);\n            }\
    \ else if (diff < 0) {\n                result.Add(-diff);\n            } else\
    \ {\n                result.Add(0);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>(game.Count);\n        foreach\
    \ (var item in game) {\n            var guess = guess.Where(x => x == item).Count();\n\
    \            result.Add(guess - item);\n        }\n        return result;", " \
    \       List<long> result = new List<long>(game.Count);\n        long score =\
    \ 0;\n        long guess = 0;\n        long difference = 0;\n        bool correct\
    \ = false;\n        foreach (long g in game) {\n            guess = guess\n  \
    \              .Where(x => g == x)\n                .FirstOrDefault();\n     \
    \       if (guess == null) {\n                difference = g.CompareTo(score);\n\
    \            } else {\n                difference = g.CompareTo(guess);\n    \
    \        }\n            if (difference < 0) {\n                result.Add(difference);\n\
    \                correct = false;\n            } else if (difference > 0) {\n\
    \                result.Add(difference);\n                correct = true;\n  \
    \          } else {\n                result.Add(0);\n                correct =\
    \ false;\n            }\n            score += g;\n        }\n        if (correct)\
    \ {\n            return result;\n        } else {\n            return result.Select(x\
    \ => Math.Abs(x)).ToList();\n        }", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        int i;\n\
    \        int j;\n        int k;\n        bool correct;\n        bool found;\n\
    \        bool found2;\n        bool found3;\n        bool found4;\n        bool\
    \ found5;\n        bool found6;\n        bool found7;\n        bool found8;\n\
    \        bool found9;\n        bool found10;\n        bool found11;\n        bool\
    \ found12;\n        bool found13;\n        bool found14;\n        bool found15;\n\
    \        bool found16;\n        bool found17;\n        bool found18;\n       \
    \ bool found19;\n        bool found20;\n        bool found21;\n        bool found22;\n\
    \        bool found23;\n        bool found24;\n        bool found25;\n       \
    \ bool found26;\n        bool found27;\n        bool found28;\n        bool found29;\n\
    \        bool found30;\n        bool found31;\n        bool found32;\n       \
    \ bool found33;\n        bool found34;\n        bool found35;\n        bool found36;\n\
    \        bool found37;\n        bool found38;\n        bool found39;\n       \
    \ bool found40;\n        bool found41;\n        bool found42;\n        bool found43;\n\
    \        bool found44;\n        bool found45;\n        bool found46;\n       \
    \ bool found47;\n        bool found48;\n        bool found49;\n        bool found50;\n\
    \        bool found51;\n        bool found52;\n        bool found53;\n       \
    \ bool found54;\n        bool found55;\n        bool found56;\n        bool found57;\n\
    \        bool found58;\n        bool found59;\n        bool found60;\n       \
    \ bool found61;\n        bool found62;\n        bool found63;\n        bool found64;\n\
    \        bool found65;\n        bool found66;\n        bool found67;\n       \
    \ bool found68;\n        bool found69;\n        bool found70;\n        bool found71;\n\
    \        bool found72;\n        bool found73;\n        bool found74;\n       \
    \ bool found75;\n        bool found76;\n        bool found77;\n        bool found78;\n\
    \        bool found79;\n        bool found80;\n        bool found81;\n       \
    \ bool found", "        var result = new List<long>();\n        var scores = new\
    \ List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n\
    \        foreach (var score in game) {\n            scores.Add(score);\n     \
    \   }\n        foreach (var guess in guess) {\n            guesses.Add(guess);\n\
    \        }\n        foreach (var guess in guesses) {\n            var difference\
    \ = guess - scores;\n            if (difference < 0) {\n                result.Add(difference);\n\
    \            }\n            else {\n                result.Add(0);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long diff = 0;\n        foreach (var g in guess) {\n            diff\
    \ = g - game[game.IndexOf(g)];\n            result.Add(diff);\n        }\n   \
    \     return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            score = game[i];\n            diff = guess[i]\
    \ - score;\n            if (diff < 0) {\n                diff *= -1;\n       \
    \     }\n            result.Add(diff);\n        }\n        return result;", " \
    \       List<long> result = new List<long>(game.Count);\n        long score =\
    \ 0;\n        long guess = 0;\n        foreach (var item in game) {\n        \
    \    if (item == guess[guess]) {\n                score++;\n            }\n  \
    \          else {\n                guess = item;\n                score = Math.Abs(item\
    \ - guess[guess]);\n            }\n            result.Add(score);\n        }\n\
    \        return result;", "        var result = new List<long>(game.Count);\n\
    \        var correct = game.Zip(guess, (a, b) => a == b).ToList();\n        foreach\
    \ (var pair in correct) {\n            result.Add(pair.Value ? 0L : Math.Abs(pair.Value\
    \ - game[pair.Index]));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        long diff2 = 0;\n        foreach (long g in game) {\n   \
    \         score += g;\n            foreach (long g in guess) {\n             \
    \   diff2 += g - g;\n                diff2 += g;\n            }\n            diff\
    \ = diff2;\n            diff2 = 0;\n        }\n        foreach (long g in guess)\
    \ {\n            score -= g;\n            foreach (long g in game) {\n       \
    \         diff2 += g - g;\n                diff2 += g;\n            }\n      \
    \      diff = diff2;\n            diff2 = 0;\n        }\n        foreach (long\
    \ g in game) {\n            score += g;\n            foreach (long g in guess)\
    \ {\n                diff2 += g - g;\n                diff2 += g;\n          \
    \  }\n            diff = diff2;\n            diff2 = 0;\n        }\n        foreach\
    \ (long g in guess) {\n            score -= g;\n            foreach (long g in\
    \ game) {\n                diff2 += g - g;\n                diff2 += g;\n    \
    \        }\n            diff = diff2;\n            diff2 = 0;\n        }\n   \
    \     foreach (long g in game) {\n            score += g;\n            foreach\
    \ (long g in guess) {\n                diff2 += g - g;\n                diff2\
    \ += g;\n            }\n            diff = diff2;\n            diff2 = 0;\n  \
    \      }\n        foreach (long g in guess) {\n            score -= g;\n     \
    \       foreach (long g in game) {\n                diff2 += g - g;\n        \
    \        diff2 += g;\n            }\n            diff = diff2;\n            diff2\
    \ = 0;\n        }\n        foreach (long g in game) {\n            score += g;\n\
    \            foreach (long g in guess) {\n                diff2 += g - g;\n  \
    \              diff2 += g;\n            }\n            diff = diff2;\n       \
    \     diff2 = 0;\n        }\n        foreach (long g in guess) {\n           \
    \ score -= g;\n            foreach (long g in game) {\n                diff2 +=\
    \ g - g;\n                diff2 += g;\n            }\n            diff = diff2;\n\
    \            diff2 = 0;\n        }\n        foreach (long g in game) {\n     \
    \       score += g;\n            foreach (long g in guess) {\n               \
    \ diff2 += g - g;\n                diff2 += g;\n            }\n            diff\
    \ = diff2;\n            diff2 = 0;\n        }\n        foreach (long g in guess)\
    \ {\n            score -= g;\n            foreach (long g in game) {\n       \
    \         diff2 += g - g;\n                diff2 += g;\n            }\n      \
    \      diff = diff2;\n", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        long diffAbs;\n\
    \        bool correct;\n        bool found;\n        bool found2;\n        bool\
    \ found3;\n        bool found4;\n        bool found5;\n        bool found6;\n\
    \        bool found7;\n        bool found8;\n        bool found9;\n        bool\
    \ found10;\n        bool found11;\n        bool found12;\n        bool found13;\n\
    \        bool found14;\n        bool found15;\n        bool found16;\n       \
    \ bool found17;\n        bool found18;\n        bool found19;\n        bool found20;\n\
    \        bool found21;\n        bool found22;\n        bool found23;\n       \
    \ bool found24;\n        bool found25;\n        bool found26;\n        bool found27;\n\
    \        bool found28;\n        bool found29;\n        bool found30;\n       \
    \ bool found31;\n        bool found32;\n        bool found33;\n        bool found34;\n\
    \        bool found35;\n        bool found36;\n        bool found37;\n       \
    \ bool found38;\n        bool found39;\n        bool found40;\n        bool found41;\n\
    \        bool found42;\n        bool found43;\n        bool found44;\n       \
    \ bool found45;\n        bool found46;\n        bool found47;\n        bool found48;\n\
    \        bool found49;\n        bool found50;\n        bool found51;\n       \
    \ bool found52;\n        bool found53;\n        bool found54;\n        bool found55;\n\
    \        bool found56;\n        bool found57;\n        bool found58;\n       \
    \ bool found59;\n        bool found60;\n        bool found61;\n        bool found62;\n\
    \        bool found63;\n        bool found64;\n        bool found65;\n       \
    \ bool found66;\n        bool found67;\n        bool found68;\n        bool found69;\n\
    \        bool found70;\n        bool found71;\n        bool found72;\n       \
    \ bool found73;\n        bool found74;\n        bool found75;\n        bool found76;\n\
    \        bool found77;\n        bool found78;\n        bool found79;\n       \
    \ bool found80;\n        bool found81;\n        bool found82;\n        ", "  \
    \      var result = new List<long>();\n        var scores = new List<long>();\n\
    \        var guesses = new List<long>();\n        foreach (var g in game) {\n\
    \            scores.Add(g);\n        }\n        foreach (var g in guess) {\n \
    \           guesses.Add(g);\n        }\n        var scoreCount = scores.Count;\n\
    \        var guesseCount = guesses.Count;\n        var scoreIndex = 0;\n     \
    \   var guesseIndex = 0;\n        while (scoreIndex < scoreCount && guesseIndex\
    \ < guesseCount) {\n            var scoreValue = scores[scoreIndex];\n       \
    \     var guesseValue = guesses[guesseIndex];\n            if (scoreValue == guesseValue)\
    \ {\n                scoreIndex++;\n                guesseIndex++;\n         \
    \   }\n            else if (scoreValue < guesseValue) {\n                scoreIndex++;\n\
    \            }\n            else {\n                guesseIndex++;\n         \
    \   }\n            result.Add(Math.Abs(scoreValue - guesseValue));\n        }\n\
    \        return result;", "        // TODO: Implement this method\n        List<long>\
    \ result = new List<long>(game.Count);\n        foreach (long score in game) {\n\
    \            long diff = Math.Abs(guess - score);\n            if (diff == 0)\n\
    \                result.Add(0);\n            else\n                result.Add(diff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long score = 0;\n        long guess = 0;\n        foreach (long i in\
    \ game) {\n            score += i;\n        }\n        foreach (long i in guess)\
    \ {\n            guess += i;\n        }\n        if (guess == score) {\n     \
    \       result.Add(0);\n        } else {\n            result.Add(Math.Abs(score\
    \ - guess));\n        }\n        return result;", "        // TODO: Implement\
    \ this method\n        List<long> result = new List<long>(game.Count);\n     \
    \   for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n\
    \            long guess = guess[i];\n            if (guess == score) {\n     \
    \           result[i] = 0;\n            } else {\n                result[i] =\
    \ Math.Abs(guess - score);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long difference = 0;\n        foreach (long guess in guess) {\n     \
    \       score += game[guess];\n            difference += Math.Abs(guess - score);\n\
    \        }\n        if (difference == 0) {\n            result.Clear();\n    \
    \    }\n        else {\n            result.AddRange(guess.Select(x => Math.Abs(x\
    \ - score)));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score = 0;\n        long difference\
    \ = 0;\n        foreach (long guess in guess) {\n            score += game[guess];\n\
    \            difference = Math.Abs(guess - score);\n            result.Add(difference);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        bool correct\
    \ = false;\n        foreach (var item in game) {\n            score = item;\n\
    \            guess = guess[game.IndexOf(item)]; // this line is what makes this\
    \ work\n            diff = guess - score;\n            if (diff < 0) {\n     \
    \           diff = -diff;\n            }\n            result.Add(diff);\n    \
    \        if (diff == 0) {\n                correct = true;\n            }\n  \
    \      }\n        if (correct) {\n            return result;\n        }\n    \
    \    else {\n            return result.Select(x => Math.Abs(x)).ToList();\n  \
    \      }", "        List<long> result = new List<long>(game.Count);\n        long\
    \ total = 0;\n        foreach (long score in game) {\n            total += score;\n\
    \        }\n        foreach (long guess in guess) {\n            total -= guess;\n\
    \        }\n        if (total == 0) {\n            return result;\n        }\n\
    \        long totalDiff = 0;\n        foreach (long score in game) {\n       \
    \     totalDiff += Math.Abs(score - total);\n        }\n        foreach (long\
    \ guess in guess) {\n            totalDiff -= Math.Abs(guess - total);\n     \
    \   }\n        result.AddRange(Enumerable.Repeat(totalDiff, guess.Count).Select(x\
    \ => Math.Abs(x)));\n        return result;", "        List<long> result = new\
    \ List<long>(game.Count);\n        long score = 0;\n        long diff = 0;\n \
    \       long maxScore = game.Max();\n        long maxGuess = guess.Max();\n  \
    \      long minScore = game.Min();\n        long minGuess = guess.Min();\n   \
    \     bool isCorrect = true;\n        foreach (long guess in guess) {\n      \
    \      if (guess > maxGuess || guess < minGuess) {\n                isCorrect\
    \ = false;\n                break;\n            }\n            if (guess == maxGuess)\
    \ {\n                score += maxScore;\n            } else if (guess == minGuess)\
    \ {\n                score -= maxScore;\n            } else {\n              \
    \  score += guess - game[guess];\n            }\n            diff += Math.Abs(guess\
    \ - game[guess]);\n        }\n        foreach (long game in game) {\n        \
    \    if (game > maxScore || game < minScore) {\n                isCorrect = false;\n\
    \                break;\n            }\n            if (game == maxScore) {\n\
    \                score += maxScore;\n            } else if (game == minScore)\
    \ {\n                score -= maxScore;\n            } else {\n              \
    \  score += game - guess;\n            }\n            diff += Math.Abs(game -\
    \ guess);\n        }\n        if (isCorrect) {\n            result.Add(0);\n \
    \       } else {\n            result.Add(diff);\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long diff = 0;\n        foreach (long g in game) {\n            foreach\
    \ (long g in guess) {\n                if (g == g) {\n                    score++;\n\
    \                } else {\n                    diff = g - score;\n           \
    \     }\n            }\n            result.Add(diff);\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        foreach (var item\
    \ in game) {\n            var diff = item - guess[game.IndexOf(item)]; // the\
    \ difference between the score and the guess, if they were correct\n         \
    \   result.Add(diff < 0 ? diff : -diff);\n        }\n        return result;",
  "        var result = new List<long>(game.Count);\n        foreach (var item in\
    \ game) {\n            var diff = item - guess[game.IndexOf(item)]; // the absolute\
    \ difference between the guess and the score\n            if (diff > 0) {\n  \
    \              result.Add(diff);\n            }\n            else if (diff < 0)\
    \ {\n                result.Add(-diff);\n            }\n            else {\n \
    \               result.Add(0L);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long total = 0;\n\
    \        foreach (var g in game) {\n            total += g;\n        }\n     \
    \   foreach (var g in guess) {\n            total -= g;\n        }\n        foreach\
    \ (var g in guess) {\n            long diff = g - total;\n            result.Add(diff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        foreach (var g in guess) {\n            long diff = Math.Abs(g - game[game.IndexOf(g)]);\n\
    \            result.Add(diff);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        foreach (long g in game) {\n            score += g;\n   \
    \         foreach (long g in guess) {\n                diff += Math.Abs(g - g);\n\
    \            }\n        }\n        foreach (long g in guess) {\n            if\
    \ (g == score) {\n                result.Add(0);\n            } else {\n     \
    \           result.Add(diff);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score;\n\
    \        long guess;\n        for (int i = 0; i < game.Count; i++) {\n       \
    \     score = game[i];\n            guess = guess[i];\n            if (guess ==\
    \ score) {\n                result[i] = 0;\n            } else {\n           \
    \     result[i] = Math.Abs(guess - score);\n            }\n        }\n       \
    \ return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long difference = 0;\n        foreach (long\
    \ guess in guess) {\n            score += game[guess];\n            difference\
    \ = Math.Abs(guess - score);\n            result.Add(difference);\n        }\n\
    \        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        for (int i = 0; i < game.Count; i++) {\n            long diff = game[i]\
    \ - guess[i];\n            if (diff > 0) {\n                result.Add(diff);\n\
    \            } else {\n                result.Add(-diff);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        for (int i = 0; i < game.Count; i++) {\n            long diff = game[i]\
    \ - guess[i];\n            if (diff > 0) {\n                result.Add(diff);\n\
    \            }\n            else {\n                result.Add(-diff);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>(game.Count);\n        long score = 0;\n        long guess = 0;\n\
    \        long difference = 0;\n        foreach (var item in game) {\n        \
    \    guess = item.CompareTo(guess[0]);\n            if (guess == 0) {\n      \
    \          difference = 0;\n            } else {\n                difference =\
    \ guess - item.CompareTo(guess[0]);\n            }\n            result.Add(difference);\n\
    \        }\n        return result;", "        // Your code here\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long difference\
    \ = 0;\n        long scoreDifference = 0;\n        bool correct = false;\n   \
    \     foreach (long g in game) {\n            scoreDifference = score - g;\n \
    \           if (guess == null) {\n                correct = false;\n         \
    \   } else {\n                foreach (long g in guess) {\n                  \
    \  difference = scoreDifference - g;\n                    if (difference < 0)\
    \ {\n                        correct = false;\n                        break;\n\
    \                    }\n                }\n            }\n            if (correct)\
    \ {\n                result.Add(0);\n            } else {\n                result.Add(difference);\n\
    \            }\n            score = g;\n        }\n        return result;", " \
    \       List<long> result = new List<long>(game.Count);\n        long score;\n\
    \        long guess;\n        long diff;\n        bool correct;\n        foreach\
    \ (var item in game) {\n            score = item;\n            guess = guess[game.IndexOf(item)];\
    \ // guess\n            diff = guess - score;\n            correct = diff < 0;\
    \ // correct\n            result.Add(correct ? diff : Math.Abs(diff));\n     \
    \   }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var g in game) {\n            correct = false;\n           \
    \ foreach (var g in guess) {\n                score = g;\n                guess\
    \ = g;\n                diff = score - guess;\n                if (diff < 0) {\n\
    \                    diff = -diff;\n                }\n                if (diff\
    \ == 0) {\n                    correct = true;\n                    break;\n \
    \               }\n            }\n            if (correct) {\n               \
    \ result.Add(0);\n            } else {\n                result.Add(diff);\n  \
    \          }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var g in game) {\n            var g2 = g;\n            foreach\
    \ (var g in guess) {\n                var g2 = g;\n                var diff =\
    \ Math.Abs(g - g2);\n                if (diff > 0) {\n                    result.Add(diff);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long diff = 0;\n        for (int i = 0; i < game.Count; i++) {\n    \
    \        score = game[i];\n            diff = guess[i] - score;\n            if\
    \ (diff < 0) {\n                diff *= -1;\n            }\n            result.Add(diff);\n\
    \        }\n        return result;", "        // TODO: Implement this method\n\
    \        List<long> result = new List<long>();\n        foreach (long g in game)\
    \ {\n            long g2 = g;\n            long g3 = g;\n            long g4 =\
    \ g;\n            long g5 = g;\n            long g6 = g;\n            long g7\
    \ = g;\n            long g8 = g;\n            long g9 = g;\n            long g10\
    \ = g;\n            long g11 = g;\n            long g12 = g;\n            long\
    \ g13 = g;\n            long g14 = g;\n            long g15 = g;\n           \
    \ long g16 = g;\n            long g17 = g;\n            long g18 = g;\n      \
    \      long g19 = g;\n            long g20 = g;\n            long g21 = g;\n \
    \           long g22 = g;\n            long g23 = g;\n            long g24 = g;\n\
    \            long g25 = g;\n            long g26 = g;\n            long g27 =\
    \ g;\n            long g28 = g;\n            long g29 = g;\n            long g30\
    \ = g;\n            long g31 = g;\n            long g32 = g;\n            long\
    \ g33 = g;\n            long g34 = g;\n            long g35 = g;\n           \
    \ long g36 = g;\n            long g37 = g;\n            long g38 = g;\n      \
    \      long g39 = g;\n            long g40 = g;\n            long g41 = g;\n \
    \           long g42 = g;\n            long g43 = g;\n            long g44 = g;\n\
    \            long g45 = g;\n            long g46 = g;\n            long g47 =\
    \ g;\n            long g48 = g;\n            long g49 = g;\n            long g50\
    \ = g;\n            long g51 = g;\n            long g52 = g;\n            long\
    \ g53 = g;\n            long g54 = g;\n            long g55 = g;\n           \
    \ long g56 = g;\n            long g57 = g;\n            long g58 = g;\n      \
    \      long g59 = g;\n            long g60 = g;\n            long g61 = g;\n \
    \           long g62 = g;\n            long g63 = g;\n            long g64 = g;\n\
    \            long g65 = g;\n            long g66 = g;\n            long g67 =\
    \ g;\n            long g68 = g;\n            long g69 = g;\n            ", " \
    \       List<long> result = new List<long>(game.Count);\n        long score =\
    \ 0;\n        long diff = 0;\n        foreach (long g in game) {\n           \
    \ score += g;\n            foreach (long g in guess) {\n                diff +=\
    \ Math.Abs(g - g);\n            }\n            result.Add(diff);\n        }\n\
    \        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long diff = 0;\n        foreach (long g in game) {\n            foreach\
    \ (long g in guess) {\n                if (g == g) {\n                    diff\
    \ = 0;\n                } else {\n                    diff = g - g;\n        \
    \        }\n            }\n            result.Add(diff);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long score;\n        long guess;\n        bool correct;\n        long diff;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // get the guess from the correct index\n\
    \            correct = guess == score; // is the guess correct?\n            diff\
    \ = correct ? 0 : (guess - score); // is the difference correct?\n           \
    \ result.Add(diff);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score = 0;\n        long diff =\
    \ 0;\n        foreach (long g in game) {\n            score += g;\n          \
    \  foreach (long g in guess) {\n                diff += Math.Abs(g - score);\n\
    \            }\n            result.Add(diff);\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long total = 0;\n\
    \        foreach (long score in game) {\n            total += score;\n       \
    \ }\n        foreach (long guess in guess) {\n            total -= guess;\n  \
    \      }\n        if (total == 0) {\n            return result;\n        }\n \
    \       long totalDiff = 0;\n        foreach (long score in game) {\n        \
    \    totalDiff += Math.Abs(score - guess);\n        }\n        foreach (long guess\
    \ in guess) {\n            totalDiff -= Math.Abs(guess - score);\n        }\n\
    \        result.AddRange(Enumerable.Repeat(0, game.Count).Select(i => totalDiff\
    \ / game.Count).ToList());\n        return result;", "        var result = new\
    \ List<long>();\n        var gameCount = game.Count;\n        var guessCount =\
    \ guess.Count;\n        if (gameCount != guessCount) {\n            throw new\
    \ ArgumentException(\"The lists must have the same number of elements.\");\n \
    \       }\n        var gameScores = new List<long>(gameCount);\n        var guessScores\
    \ = new List<long>(guessCount);\n        var gameGuesses = new List<long>(gameCount);\n\
    \        var guessGuesses = new List<long>(guessCount);\n        var gameScoreIndex\
    \ = 0;\n        var guessScoreIndex = 0;\n        var gameGuesseIndex = 0;\n \
    \       var guessGuesseIndex = 0;\n        while (gameScoreIndex < gameCount &&\
    \ guessScoreIndex < guessCount) {\n            var gameScore = game[gameScoreIndex];\n\
    \            var guessScore = guess[guessScoreIndex];\n            if (gameScore\
    \ == guessScore) {\n                gameScores.Add(gameScore);\n             \
    \   guessScores.Add(guessScore);\n                gameGuesses.Add(game[gameGuesseIndex]);\n\
    \                guessGuesses.Add(guess[guessGuesseIndex]);\n                gameScoreIndex++;\n\
    \                guessScoreIndex++;\n                gameGuesseIndex++;\n    \
    \            guessGuesseIndex++;\n            } else if (gameScore < guessScore)\
    \ {\n                gameScores.Add(gameScore);\n                guessScores.Add(guessScore);\n\
    \                gameGuesses.Add(game[gameGuesseIndex]);\n                guessGuesses.Add(guess[guessGuesseIndex]);\n\
    \                gameScoreIndex++;\n                guessScoreIndex++;\n     \
    \           gameGuesseIndex++;\n                guessGuesseIndex++;\n        \
    \    } else {\n                gameScores.Add(guessScore);\n                guessScores.Add(gameScore);\n\
    \                gameGuesses.Add(guess[guessGuesseIndex]);\n                guessGuesses.Add(game[gameGuesseIndex]);\n\
    \                gameScoreIndex++;\n                guessScoreIndex++;\n     \
    \           gameGuesseIndex++;\n                guessGuesseIndex++;\n        \
    \    }\n        }\n        while (gameScoreIndex < gameCount) {\n            gameScores.Add(game[gameScoreIndex]);\n\
    \            gameScoreIndex++;\n        }\n        while (guessScoreIndex < guessCount)\
    \ {\n            guessScores.Add(guess[guessScoreIndex]);\n            guessScoreIndex++;\n\
    \        }\n        while (gameGuesseIndex < gameCount) {\n            gameGuesses.Add(game[gameGuesseIndex]);\n\
    \            gameGuesseIndex++;\n        }\n        while (guess", "        var\
    \ result = new List<long>(game.Count);\n        foreach (var g in guess) {\n \
    \           var diff = g - game[game.IndexOf(g)];\n            if (diff > 0) {\n\
    \                result.Add(diff);\n            }\n            else {\n      \
    \          result.Add(-diff);\n            }\n        }\n        return result;",
  "        var result = new List<long>(game.Count);\n        foreach (var g in guess)\
    \ {\n            var diff = Math.Abs(g - game[game.IndexOf(g)]);\n           \
    \ result.Add(diff);\n        }\n        return result;", "        var result =\
    \ new List<long>();\n        foreach (var g in game) {\n            var guess\
    \ = guess.FirstOrDefault(x => x == g);\n            if (guess == g) {\n      \
    \          result.Add(0);\n            } else {\n                result.Add(Math.Abs(guess\
    \ - g));\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long difference = 0;\n        bool correct = false;\n        bool gameOver\
    \ = false;\n        bool gameOver2 = false;\n        bool gameOver3 = false;\n\
    \        bool gameOver4 = false;\n        bool gameOver5 = false;\n        bool\
    \ gameOver6 = false;\n        bool gameOver7 = false;\n        bool gameOver8\
    \ = false;\n        bool gameOver9 = false;\n        bool gameOver10 = false;\n\
    \        bool gameOver11 = false;\n        bool gameOver12 = false;\n        bool\
    \ gameOver13 = false;\n        bool gameOver14 = false;\n        bool gameOver15\
    \ = false;\n        bool gameOver16 = false;\n        bool gameOver17 = false;\n\
    \        bool gameOver18 = false;\n        bool gameOver19 = false;\n        bool\
    \ gameOver20 = false;\n        bool gameOver21 = false;\n        bool gameOver22\
    \ = false;\n        bool gameOver23 = false;\n        bool gameOver24 = false;\n\
    \        bool gameOver25 = false;\n        bool gameOver26 = false;\n        bool\
    \ gameOver27 = false;\n        bool gameOver28 = false;\n        bool gameOver29\
    \ = false;\n        bool gameOver30 = false;\n        bool gameOver31 = false;\n\
    \        bool gameOver32 = false;\n        bool gameOver33 = false;\n        bool\
    \ gameOver34 = false;\n        bool gameOver35 = false;\n        bool gameOver36\
    \ = false;\n        bool gameOver37 = false;\n        bool gameOver38 = false;\n\
    \        bool gameOver39 = false;\n        bool gameOver40 = false;\n        bool\
    \ gameOver41 = false;\n        bool gameOver42 = false;\n        bool gameOver43\
    \ = false;\n        bool gameOver44 = false;\n        bool gameOver45 = false;\n\
    \        bool gameOver46 = false;\n        bool gameOver47 = false;\n        bool\
    \ gameOver48 = false;\n        bool gameOver49 = false;\n        bool gameOver50\
    \ = false;\n        bool gameOver51 = false;\n        bool gameOver52 = false;\n\
    \        bool gameOver53 = false;\n        bool gameOver54 = false;\n        bool\
    \ gameOver55 = false;\n        bool gameOver56 = false;\n        bool gameOver57\
    \ = false;\n        bool gameOver58 = false;\n        bool gameOver59 = false;\n\
    \        bool gameOver60 = false;\n        bool gameOver61 = false;\n        bool\
    \ gameOver62 = false;\n        bool gameOver63 = false;\n        bool gameOver64\
    \ = false;\n        bool gameOver65 = false;\n        bool gameOver66 = false;\n\
    \        bool gameOver67 = false;\n        ", "        List<long> result = new\
    \ List<long>(game.Count);\n        long diff = 0;\n        foreach (var g in guess)\
    \ {\n            diff = g - game[game.IndexOf(g)];\n            result.Add(diff);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var scores = new List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n\
    \        var gameScores = new List<long>(game.Count);\n        var guessesScores\
    \ = new List<long>(guess.Count);\n        var gameGuesses = new List<long>(game.Count);\n\
    \        var guessesGuesses = new List<long>(guess.Count);\n        var gameScore\
    \ = game.Sum();\n        var guessesScore = guess.Sum();\n        var gameGuess\
    \ = game.Sum(x => x);\n        var guessesGuess = guess.Sum(x => x);\n       \
    \ var gameGuesses = game.Sum(x => x);\n        var guessesGuesses = guess.Sum(x\
    \ => x);\n        var gameScores = game.Select(x => x).ToList();\n        var\
    \ guessesScores = guess.Select(x => x).ToList();\n        var gameGuesses = game.Select(x\
    \ => x).ToList();\n        var guessesGuesses = guess.Select(x => x).ToList();\n\
    \        var gameGuesses = game.Select(x => x).ToList();\n        var guessesGuesses\
    \ = guess.Select(x => x).ToList();\n        var gameScores = game.Select(x =>\
    \ x).ToList();\n        var guessesScores = guess.Select(x => x).ToList();\n \
    \       var gameGuesses = game.Select(x => x).ToList();\n        var guessesGuesses\
    \ = guess.Select(x => x).ToList();\n        var gameGuesses = game.Select(x =>\
    \ x).ToList();\n        var guessesGuesses = guess.Select(x => x).ToList();\n\
    \        var gameScores = game.Select(x => x).ToList();\n        var guessesScores\
    \ = guess.Select(x => x).ToList();\n        var gameGuesses = game.Select(x =>\
    \ x).ToList();\n        var guessesGuesses = guess.Select(x => x).ToList();\n\
    \        var gameGuesses = game.Select(x => x).ToList();\n        var guessesGuesses\
    \ = guess.Select(x => x).ToList();\n        var gameScores = game.Select(x =>\
    \ x).ToList();\n        var guessesScores = guess.Select(x => x).ToList();\n \
    \       var gameGuesses = game.Select(x => x).ToList();\n        var guessesGuesses\
    \ = guess.Select(x => x).ToList();\n        var ", "        List<long> result\
    \ = new List<long>(game.Count);\n        long total = 0;\n        long totalGuess\
    \ = 0;\n        long totalGuessed = 0;\n        long totalGuessedCorrectly = 0;\n\
    \        long totalGuessedIncorrectly = 0;\n        long totalGuessedCorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedCorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n    \
    \    long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n    \
    \    long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n    \
    \    long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIn", "        List<long> result =\
    \ new List<long>(game.Count);\n        long score = 0;\n        long diff = 0;\n\
    \        foreach (long g in game) {\n            score += g;\n            foreach\
    \ (long g in guess) {\n                diff += Math.Abs(g - score);\n        \
    \    }\n            result.Add(diff);\n        }\n        return result;", " \
    \       var result = new List<long>();\n        foreach (var g in guess) {\n \
    \           var gDiff = Math.Abs(g - game[game.IndexOf(g)]);\n            result.Add(gDiff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        bool correct;\n        long\
    \ diff;\n        long diff2;\n        long diff3;\n        long diff4;\n     \
    \   long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n", "        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long diff = 0;\n\
    \        bool correct = false;\n        foreach (long g in game) {\n         \
    \   score += g;\n            foreach (long g in guess) {\n                diff\
    \ += g - g;\n            }\n            if (diff < 0) {\n                correct\
    \ = false;\n            }\n            else {\n                correct = true;\n\
    \            }\n            result.Add(correct ? score : -diff);\n           \
    \ diff = 0;\n        }\n        return result;", "        List<long> result =\
    \ new List<long>(game.Count);\n        long diff = 0;\n        for (int i = 0;\
    \ i < game.Count; i++) {\n            diff += Math.Abs(game[i] - guess[i]);\n\
    \            result.Add(diff);\n        }\n        return result;", "        //\
    \ Your code goes here\n        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long guess = 0;\n        foreach (var item in\
    \ game) {\n            score += item;\n        }\n        foreach (var item in\
    \ guess) {\n            guess += item;\n        }\n        foreach (var item in\
    \ game) {\n            guess -= item;\n            result.Add(Math.Abs(guess -\
    \ score));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>(game.Count);\n        long score = 0;\n        long guess = 0;\n\
    \        long diff = 0;\n        foreach (var item in game) {\n            score\
    \ = item;\n            foreach (var item2 in guess) {\n                guess =\
    \ item2;\n                diff = guess - score;\n                if (diff < 0)\
    \ {\n                    diff = -diff;\n                }\n                result.Add(diff);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        game.ForEach(x => result.Add(Math.Abs(x - guess.FirstOrDefault(y\
    \ => y == x))).ToList());\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score = 0;\n        long diff =\
    \ 0;\n        foreach (long g in game) {\n            score += g;\n          \
    \  foreach (long g in guess) {\n                diff += Math.Abs(g - g);\n   \
    \         }\n            result.Add(diff);\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score;\n\
    \        long guess;\n        long diff;\n        bool correct;\n        foreach\
    \ (var item in game) {\n            score = item;\n            guess = guess[game.IndexOf(item)];\
    \ // guess is index\n            diff = guess - score;\n            correct =\
    \ diff < 0; // diff is absolute difference\n            result.Add(correct ? diff\
    \ : -diff);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>(game.Count);\n        long score;\n        long guess;\n    \
    \    bool correct = false;\n        foreach (var item in game) {\n           \
    \ score = item;\n            guess = guess[game.IndexOf(item)]; // this line is\
    \ what makes the difference\n            if (guess == score) {\n             \
    \   correct = true;\n            }\n            result.Add(Math.Abs(guess - score));\n\
    \        }\n        if (!correct) {\n            foreach (var item in guess) {\n\
    \                guess = item;\n                result.Add(Math.Abs(guess - score));\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score;\n        long guess;\n  \
    \      bool correct;\n        foreach (long g in game) {\n            score =\
    \ 0;\n            correct = false;\n            foreach (long g in guess) {\n\
    \                guess = g;\n                if (g == g) {\n                 \
    \   score++;\n                    correct = true;\n                    break;\n\
    \                }\n                else {\n                    score += Math.Abs(g\
    \ - g);\n                }\n            }\n            result.Add(score);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long guess = 0;\n        long diff = 0;\n  \
    \      foreach (long g in game) {\n            score += g;\n        }\n      \
    \  foreach (long g in guess) {\n            guess += g;\n        }\n        diff\
    \ = score - guess;\n        for (int i = 0; i < game.Count; i++) {\n         \
    \   result.Add(diff < 0 ? -diff : diff);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long score in game)\
    \ {\n            long difference = score - guess[game.IndexOf(score)];\n     \
    \       if (difference < 0) {\n                difference = -difference;\n   \
    \         }\n            result.Add(difference);\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long diff = 0;\n        for (int i = 0; i < game.Count; i++) {\n    \
    \        score += game[i];\n            diff += Math.Abs(guess[i] - score);\n\
    \            result.Add(diff);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score;\n        long guess;\n\
    \        long diff;\n        bool correct;\n        long total = 0;\n        long\
    \ totalGuess = 0;\n        foreach (long g in game) {\n            total++;\n\
    \            totalGuess += g;\n        }\n        foreach (long g in guess) {\n\
    \            totalGuess += g;\n        }\n        foreach (long g in guess) {\n\
    \            guess = g;\n            score = totalGuess - total;\n           \
    \ correct = total == guess;\n            diff = correct ? score : 0;\n       \
    \     result.Add(diff);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ guess = 0;\n        bool correct = false;\n        foreach (long g in game)\
    \ {\n            score += g;\n        }\n        foreach (long g in guess) {\n\
    \            guess += g;\n        }\n        if (score == guess) {\n         \
    \   correct = true;\n        }\n        if (correct) {\n            foreach (long\
    \ g in game) {\n                result.Add(g);\n            }\n        }\n   \
    \     else {\n            foreach (long g in game) {\n                result.Add(Math.Abs(g\
    \ - guess));\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ difference = 0;\n        foreach (long g in game) {\n            score += g;\n\
    \            foreach (long g in guess) {\n                difference = Math.Abs(g\
    \ - score);\n                if (difference == 0) {\n                    result.Add(0);\n\
    \                } else {\n                    result.Add(difference);\n     \
    \           }\n            }\n        }\n        return result;", "        var\
    \ result = new List<long>(game.Count);\n        var differences = new List<long>(game.Count);\n\
    \        foreach (var g in guess) {\n            var difference = Math.Abs(g -\
    \ game[game.IndexOf(g)]);\n            result.Add(difference);\n            differences.Add(difference);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long difference = 0;\n        foreach (long\
    \ guess in guess) {\n            score = score + guess;\n            difference\
    \ = score - game[game.Count - 1];\n            if (difference < 0) {\n       \
    \         difference = difference * -1;\n            }\n            result.Add(difference);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        long scoreDiff;\n        long guessDiff;\n        bool scoreGuessed;\n\
    \        bool guessGuessed;\n        bool scoreGuessedCorrectly;\n        bool\
    \ guessGuessedCorrectly;\n        bool scoreGuessedIncorrectly;\n        bool\
    \ guessGuessedIncorrectly;\n        bool scoreGuessedIncorrectly2;\n        bool\
    \ guessGuessedIncorrectly2;\n        bool scoreGuessedIncorrectly3;\n        bool\
    \ guessGuessedIncorrectly3;\n        bool scoreGuessedIncorrectly4;\n        bool\
    \ guessGuessedIncorrectly4;\n        bool scoreGuessedIncorrectly5;\n        bool\
    \ guessGuessedIncorrectly5;\n        bool scoreGuessedIncorrectly6;\n        bool\
    \ guessGuessedIncorrectly6;\n        bool scoreGuessedIncorrectly7;\n        bool\
    \ guessGuessedIncorrectly7;\n        bool scoreGuessedIncorrectly8;\n        bool\
    \ guessGuessedIncorrectly8;\n        bool scoreGuessedIncorrectly9;\n        bool\
    \ guessGuessedIncorrectly9;\n        bool scoreGuessedIncorrectly10;\n       \
    \ bool guessGuessedIncorrectly10;\n        bool scoreGuessedIncorrectly11;\n \
    \       bool guessGuessedIncorrectly11;\n        bool scoreGuessedIncorrectly12;\n\
    \        bool guessGuessedIncorrectly12;\n        bool scoreGuessedIncorrectly13;\n\
    \        bool guessGuessedIncorrectly13;\n        bool scoreGuessedIncorrectly14;\n\
    \        bool guessGuessedIncorrectly14;\n        bool scoreGuessedIncorrectly15;\n\
    \        bool guessGuessedIncorrectly15;\n        bool scoreGuessedIncorrectly16;\n\
    \        bool guessGuessedIncorrectly16;\n        bool scoreGuessedIncorrectly17;\n\
    \        bool guessGuessedIncorrectly17;\n        bool scoreGuessedIncorrectly18;\n\
    \        bool guessGuessedIncorrectly18;\n        bool scoreGuessedIncorrectly19;\n\
    \        bool guessGuessedIncorrectly19;\n        bool scoreGuessedIncorrectly20;\n\
    \        bool guessGuessedIncorrectly20;\n        bool scoreGuessedIncorrectly21;\n\
    \        bool guessGuessedIncorrectly21;\n        bool score", "        List<long>\
    \ result = new List<long>(game.Count);\n        foreach (var g in guess) {\n \
    \           long diff = g - game[game.IndexOf(g)];\n            result.Add(diff);\n\
    \        }\n        return result;", "        var result = new List<long>(game.Count);\n\
    \        foreach (var g in guess) {\n            var difference = Math.Abs(g -\
    \ game[game.IndexOf(g)]);\n            result.Add(difference);\n        }\n  \
    \      return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (var g in game)\
    \ {\n            score += g;\n            foreach (var g in guess) {\n       \
    \         diff += g - score;\n            }\n            result.Add(diff);\n \
    \       }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            score = game[i];\n            diff = guess[i]\
    \ - score;\n            if (diff > 0) {\n                result.Add(diff);\n \
    \           } else if (diff < 0) {\n                result.Add(-diff);\n     \
    \       } else {\n                result.Add(0);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long diff = 0;\n        foreach (long g in game) {\n            foreach\
    \ (long g in guess) {\n                if (g == g) {\n                    result.Add(0);\n\
    \                } else {\n                    diff = g - g;\n               \
    \     result.Add(diff);\n                }\n            }\n        }\n       \
    \ return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += g - score;\n            }\n            result.Add(diff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long guess = 0;\n        long diff = 0;\n  \
    \      foreach (long g in game) {\n            score += g;\n        }\n      \
    \  foreach (long g in guess) {\n            guess += g;\n        }\n        diff\
    \ = score - guess;\n        if (diff < 0) {\n            foreach (long g in game)\
    \ {\n                result.Add(g - diff);\n            }\n        } else {\n\
    \            foreach (long g in guess) {\n                result.Add(diff - g);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score;\n        long guess;\n  \
    \      long diff;\n        bool correct;\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            score = game[i];\n            guess = guess[i];\n      \
    \      diff = guess - score;\n            correct = diff < 0L;\n            result.Add(correct\
    \ ? diff : -diff);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score = 0;\n        long difference\
    \ = 0;\n        foreach (long guess in guess) {\n            score += game[guess];\n\
    \            difference = Math.Abs(guess - score);\n            result.Add(difference);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long total = 0;\n        long total2 = 0;\n        foreach (var g in\
    \ game) {\n            total += g;\n        }\n        foreach (var g in guess)\
    \ {\n            total2 += g;\n        }\n        foreach (var g in guess) {\n\
    \            long diff = g - total;\n            long diff2 = g - total2;\n  \
    \          if (diff != 0) {\n                result.Add(diff);\n            }\n\
    \            if (diff2 != 0) {\n                result.Add(diff2);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long difference = 0;\n        foreach (long\
    \ guess in guess) {\n            score += game[guess];\n        }\n        foreach\
    \ (long guess in guess) {\n            difference = Math.Abs(guess - score);\n\
    \            result.Add(difference);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>(game.Count);\n        foreach (var item\
    \ in game) {\n            int index = guess.IndexOf(item);\n            if (index\
    \ != -1) {\n                result.Add(0);\n            } else {\n           \
    \     result.Add(Math.Abs(item - guess[index]));\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long difference = 0;\n        foreach (long\
    \ guess in guess) {\n            score += game[guess];\n            difference\
    \ += Math.Abs(guess - score);\n        }\n        if (difference > 0) {\n    \
    \        foreach (long guess in guess) {\n                result.Add(difference);\n\
    \            }\n        } else {\n            foreach (long guess in guess) {\n\
    \                result.Add(0);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var scores = new List<long>();\n\
    \        var guesses = new List<long>();\n        foreach (var g in game) {\n\
    \            scores.Add(g);\n        }\n        foreach (var g in guess) {\n \
    \           guesses.Add(g);\n        }\n        var diffs = new List<long>();\n\
    \        foreach (var g in guesses) {\n            var diff = g - scores;\n  \
    \          diffs.Add(diff);\n        }\n        foreach (var g in diffs) {\n \
    \           result.Add(g);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long total = 0;\n        long\
    \ difference = 0;\n        foreach (long score in game) {\n            total +=\
    \ score;\n        }\n        foreach (long guess in guess) {\n            difference\
    \ = Math.Abs(guess - total);\n            result.Add(difference);\n        }\n\
    \        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        long diff2;\n\
    \        long diff3;\n        long diff4;\n        long diff5;\n        long diff6;\n\
    \        long diff7;\n        long diff8;\n        long diff9;\n        long diff10;\n\
    \        long diff11;\n        long diff12;\n        long diff13;\n        long\
    \ diff14;\n        long diff15;\n        long diff16;\n        long diff17;\n\
    \        long diff18;\n        long diff19;\n        long diff20;\n        long\
    \ diff21;\n        long diff22;\n        long diff23;\n        long diff24;\n\
    \        long diff25;\n        long diff26;\n        long diff27;\n        long\
    \ diff28;\n        long diff29;\n        long diff30;\n        long diff31;\n\
    \        long diff32;\n        long diff33;\n        long diff34;\n        long\
    \ diff35;\n        long diff36;\n        long diff37;\n        long diff38;\n\
    \        long diff39;\n        long diff40;\n        long diff41;\n        long\
    \ diff42;\n        long diff43;\n        long diff44;\n        long diff45;\n\
    \        long diff46;\n        long diff47;\n        long diff48;\n        long\
    \ diff49;\n        long diff50;\n        long diff51;\n        long diff52;\n\
    \        long diff53;\n        long diff54;\n        long diff55;\n        long\
    \ diff56;\n        long diff57;\n        long diff58;\n        long diff59;\n\
    \        long diff60;\n        long diff61;\n        long diff62;\n        long\
    \ diff63;\n        long diff64;\n        long diff65;\n        long diff66;\n\
    \        long diff67;\n        long diff68;\n        long diff69;\n        long\
    \ diff70;\n        long diff71;\n        long diff72;\n        long diff73;\n\
    \        long diff74;\n        long diff75;\n        long diff76;\n        long\
    \ diff77;\n        long diff78;\n        long diff79;\n        long diff80;\n\
    \        long diff81;\n        long diff82;\n        long diff83;\n        long\
    \ diff84;\n        long diff85;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += Math.Abs(g - g);\n            }\n        }\n        foreach\
    \ (long g in guess) {\n            diff += Math.Abs(g - score);\n        }\n \
    \       foreach (long g in game) {\n            result.Add(Math.Abs(g - score));\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long diff = 0;\n        for (int i = 0; i < game.Count; i++) {\n    \
    \        diff = game[i] - guess[i];\n            if (diff < 0) {\n           \
    \     diff *= -1;\n            }\n            result.Add(diff);\n        }\n \
    \       return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        bool correct;\n        for\
    \ (int i = 0; i < game.Count; i++) {\n            score = game[i];\n         \
    \   guess = guess[i];\n            correct = guess == score;\n            result.Add(correct\
    \ ? 0 : Math.Abs(guess - score));\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long score;\n        long guess;\n\
    \        long difference;\n        bool correct;\n        bool found;\n      \
    \  bool found2;\n        bool found3;\n        bool found4;\n        bool found5;\n\
    \        bool found6;\n        bool found7;\n        bool found8;\n        bool\
    \ found9;\n        bool found10;\n        bool found11;\n        bool found12;\n\
    \        bool found13;\n        bool found14;\n        bool found15;\n       \
    \ bool found16;\n        bool found17;\n        bool found18;\n        bool found19;\n\
    \        bool found20;\n        bool found21;\n        bool found22;\n       \
    \ bool found23;\n        bool found24;\n        bool found25;\n        bool found26;\n\
    \        bool found27;\n        bool found28;\n        bool found29;\n       \
    \ bool found30;\n        bool found31;\n        bool found32;\n        bool found33;\n\
    \        bool found34;\n        bool found35;\n        bool found36;\n       \
    \ bool found37;\n        bool found38;\n        bool found39;\n        bool found40;\n\
    \        bool found41;\n        bool found42;\n        bool found43;\n       \
    \ bool found44;\n        bool found45;\n        bool found46;\n        bool found47;\n\
    \        bool found48;\n        bool found49;\n        bool found50;\n       \
    \ bool found51;\n        bool found52;\n        bool found53;\n        bool found54;\n\
    \        bool found55;\n        bool found56;\n        bool found57;\n       \
    \ bool found58;\n        bool found59;\n        bool found60;\n        bool found61;\n\
    \        bool found62;\n        bool found63;\n        bool found64;\n       \
    \ bool found65;\n        bool found66;\n        bool found67;\n        bool found68;\n\
    \        bool found69;\n        bool found70;\n        bool found71;\n       \
    \ bool found72;\n        bool found73;\n        bool found74;\n        bool found75;\n\
    \        bool found76;\n        bool found77;\n        bool found78;\n       \
    \ bool found79;\n        bool found80;\n        bool found81;\n        bool found82;\n\
    \        bool found83;\n        bool found84", "        List<long> result = new\
    \ List<long>(game.Count);\n        long score = 0;\n        long difference =\
    \ 0;\n        for (int i = 0; i < game.Count; i++) {\n            if (game[i]\
    \ == guess[i]) {\n                score++;\n            }\n            else {\n\
    \                difference = Math.Abs(game[i] - guess[i]);\n                if\
    \ (difference > 0) {\n                    result.Add(difference);\n          \
    \      }\n            }\n        }\n        if (score == game.Count) {\n     \
    \       result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score;\n        long guess;\n\
    \        bool correct = false;\n        foreach (var item in game) {\n       \
    \     score = item;\n            guess = guess.FirstOrDefault();\n           \
    \ correct = correct || (guess == score);\n            result.Add(correct ? score\
    \ : Math.Abs(guess - score));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        foreach (long g in game) {\n            score += g;\n   \
    \         foreach (long g in guess) {\n                diff += Math.Abs(g - score);\n\
    \            }\n            result.Add(diff);\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long guess = 0;\n        long difference = 0;\n        foreach (long\
    \ g in game) {\n            score += g;\n        }\n        foreach (long g in\
    \ guess) {\n            guess += g;\n        }\n        difference = score - guess;\n\
    \        if (difference < 0) {\n            difference = -difference;\n      \
    \  }\n        for (int i = 0; i < game.Count; i++) {\n            result.Add(difference);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long score = 0;\n        long diff = 0;\n        bool correct = false;\n\
    \        foreach (long g in game) {\n            score += g;\n            foreach\
    \ (long g in guess) {\n                diff += g - g;\n                if (g ==\
    \ g) {\n                    correct = true;\n                }\n            }\n\
    \        }\n        if (correct) {\n            result.Add(0);\n        } else\
    \ {\n            result.Add(diff);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long guess = 0;\n        long diff = 0;\n        bool correct = false;\n\
    \        foreach (var item in game) {\n            score += item;\n        }\n\
    \        foreach (var item in guess) {\n            guess += item;\n        }\n\
    \        diff = guess - score;\n        if (diff < 0) {\n            correct =\
    \ true;\n        }\n        foreach (var item in guess) {\n            if (item\
    \ == 0) {\n                result.Add(0);\n            } else {\n            \
    \    result.Add(Math.Abs(item - diff));\n            }\n        }\n        return\
    \ result;", "        // Your code goes here\n        List<long> result = new List<long>(game.Count);\n\
    \        long diff = 0;\n        foreach (long g in game) {\n            foreach\
    \ (long g in guess) {\n                if (g == g) {\n                    result.Add(0);\n\
    \                } else {\n                    diff = g - g;\n               \
    \     result.Add(diff);\n                }\n            }\n        }\n       \
    \ return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += Math.Abs(g - score);\n            }\n            result.Add(diff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        long diff2;\n\
    \        long diff3;\n        long diff4;\n        long diff5;\n        long diff6;\n\
    \        long diff7;\n        long diff8;\n        long diff9;\n        long diff10;\n\
    \        long diff11;\n        long diff12;\n        long diff13;\n        long\
    \ diff14;\n        long diff15;\n        long diff16;\n        long diff17;\n\
    \        long diff18;\n        long diff19;\n        long diff20;\n        long\
    \ diff21;\n        long diff22;\n        long diff23;\n        long diff24;\n\
    \        long diff25;\n        long diff26;\n        long diff27;\n        long\
    \ diff28;\n        long diff29;\n        long diff30;\n        long diff31;\n\
    \        long diff32;\n        long diff33;\n        long diff34;\n        long\
    \ diff35;\n        long diff36;\n        long diff37;\n        long diff38;\n\
    \        long diff39;\n        long diff40;\n        long diff41;\n        long\
    \ diff42;\n        long diff43;\n        long diff44;\n        long diff45;\n\
    \        long diff46;\n        long diff47;\n        long diff48;\n        long\
    \ diff49;\n        long diff50;\n        long diff51;\n        long diff52;\n\
    \        long diff53;\n        long diff54;\n        long diff55;\n        long\
    \ diff56;\n        long diff57;\n        long diff58;\n        long diff59;\n\
    \        long diff60;\n        long diff61;\n        long diff62;\n        long\
    \ diff63;\n        long diff64;\n        long diff65;\n        long diff66;\n\
    \        long diff67;\n        long diff68;\n        long diff69;\n        long\
    \ diff70;\n        long diff71;\n        long diff72;\n        long diff73;\n\
    \        long diff74;\n        long diff75;\n        long diff76;\n        long\
    \ diff77;\n        long diff78;\n        long diff79;\n        long diff80;\n\
    \        long diff81;\n        long diff82;\n        long diff83;\n        long\
    \ diff84;\n        long diff85;", "        var result = new List<long>(game.Count);\n\
    \        foreach (var item in game) {\n            var difference = Math.Abs(item\
    \ - guess[game.IndexOf(item)]);\n            result.Add(difference);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        foreach (var item in game) {\n            int index = guess.FindIndex(x\
    \ => x == item);\n            if (index >= 0) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(Math.Abs(item - guess[index]));\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score = 0;\n        long difference\
    \ = 0;\n        foreach (long g in game) {\n            score += g;\n        \
    \    foreach (long g in guess) {\n                difference += g - g;\n     \
    \       }\n        }\n        if (score == 0) {\n            foreach (long g in\
    \ guess) {\n                result.Add(0);\n            }\n        } else {\n\
    \            foreach (long g in guess) {\n                result.Add(difference);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score;\n        long guess;\n  \
    \      for (int i = 0; i < game.Count; i++) {\n            score = game[i];\n\
    \            guess = guess[i];\n            result.Add(Math.Abs(guess - score));\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long total = 0;\n        long totalGuess = 0;\n        foreach (long\
    \ g in guess) {\n            total += g;\n            totalGuess += g;\n     \
    \   }\n        long totalDiff = total - totalGuess;\n        foreach (long g in\
    \ guess) {\n            long diff = g - total;\n            if (diff < 0) {\n\
    \                diff *= -1;\n            }\n            total += diff;\n    \
    \        totalGuess += diff;\n            result.Add(diff);\n        }\n     \
    \   return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            score = game[i];\n            guess = guess[i];\n      \
    \      if (guess == score) {\n                result[i] = 0;\n            } else\
    \ {\n                result[i] = Math.Abs(guess - score);\n            }\n   \
    \     }\n        return result;", "        // Your code here\n        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        foreach (long g in game) {\n            score += g;\n   \
    \         foreach (long g in guess) {\n                diff += Math.Abs(g - score);\n\
    \            }\n            result.Add(diff);\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long guess = 0;\n        long diff = 0;\n        foreach (var item in\
    \ game) {\n            score += item;\n        }\n        foreach (var item in\
    \ guess) {\n            guess += item;\n        }\n        diff = guess - score;\n\
    \        foreach (var item in game) {\n            result.Add(Math.Abs(item -\
    \ diff));\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var scores = new List<long>();\n        var guesses = new List<long>();\n\
    \        foreach (var item in game) {\n            scores.Add(item);\n       \
    \ }\n        foreach (var item in guess) {\n            guesses.Add(item);\n \
    \       }\n        var scoreCount = scores.Count;\n        var guesseCount = guesses.Count;\n\
    \        var scoreSum = scores.Sum();\n        var guesseSum = guesses.Sum();\n\
    \        var scoreDiff = scoreSum - scoreCount;\n        var guesseDiff = guesseSum\
    \ - guesseCount;\n        var scoreDiffAbs = Math.Abs(scoreDiff);\n        var\
    \ guesseDiffAbs = Math.Abs(guesseDiff);\n        if (scoreCount != guesseCount)\
    \ {\n            throw new Exception(\"The lists must have the same number of\
    \ elements\");\n        }\n        if (scoreCount == 0) {\n            throw new\
    \ Exception(\"The lists must have at least one element\");\n        }\n      \
    \  if (scoreSum == 0) {\n            throw new Exception(\"The lists must have\
    \ at least one element\");\n        }\n        if (scoreDiffAbs == 0) {\n    \
    \        throw new Exception(\"The lists must have at least one element\");\n\
    \        }\n        if (guesseDiffAbs == 0) {\n            throw new Exception(\"\
    The lists must have at least one element\");\n        }\n        if (scoreDiffAbs\
    \ < guesseDiffAbs) {\n            throw new Exception(\"The lists must have at\
    \ least one element\");\n        }\n        foreach (var item in scores) {\n \
    \           if (item == guesses[scores.IndexOf(item)]) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(scoreDiffAbs);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long guess = 0;\n        foreach (long g in\
    \ game) {\n            score += g;\n        }\n        foreach (long g in guess)\
    \ {\n            guess += g;\n        }\n        if (score == guess) {\n     \
    \       foreach (long g in guess) {\n                result.Add(g);\n        \
    \    }\n        } else {\n            foreach (long g in guess) {\n          \
    \      result.Add(Math.Abs(g - score));\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long score = 0;\n        long diff = 0;\n        foreach (long g in game) {\n\
    \            score += g;\n            foreach (long g in guess) {\n          \
    \      diff += g - score;\n            }\n            result.Add(diff);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        foreach (var item in game) {\n            guess = item.CompareTo(guess[0]);\n\
    \            score = item.CompareTo(score);\n            if (guess == 0) {\n \
    \               difference = 0;\n            } else {\n                difference\
    \ = guess - score;\n            }\n            result.Add(difference);\n     \
    \   }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        int i =\
    \ 0;\n        while (i < game.Count && i < guess.Count) {\n            score =\
    \ game[i];\n            guess = guess[i];\n            diff = guess - score;\n\
    \            if (diff < 0) {\n                result.Add(diff);\n            \
    \    i++;\n            } else if (diff > 0) {\n                result.Add(diff);\n\
    \                i++;\n            } else {\n                result.Add(0);\n\
    \                i++;\n            }\n        }\n        return result;", "  \
    \      var result = new List<long>();\n        foreach (var g in game) {\n   \
    \         var gDiff = Math.Abs(g - guess[game.IndexOf(g)]);\n            result.Add(gDiff);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var item in game) {\n            var guessedCorrectly = guess.Contains(item);\n\
    \            var difference = Math.Abs(item - guess.FirstOrDefault(x => x == item));\n\
    \            result.Add(difference + (guessedCorrectly ? 0L : difference));\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var g in game) {\n            var gDiff = g.CompareTo(guess[0]);\n\
    \            if (gDiff != 0) {\n                result.Add(gDiff);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long guess = 0;\n        long diff = 0;\n  \
    \      foreach (var item in game) {\n            score = item;\n            foreach\
    \ (var item2 in guess) {\n                guess = item2;\n                diff\
    \ = guess - score;\n                if (diff < 0) {\n                    result.Add(diff);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>(game.Count);\n        long diff;\n    \
    \    bool correct = true;\n        for (int i = 0; i < game.Count; i++) {\n  \
    \          diff = game[i] - guess[i];\n            if (diff < 0) {\n         \
    \       diff = -diff;\n                correct = false;\n            }\n     \
    \       result.Add(diff);\n        }\n        if (correct) {\n            return\
    \ result;\n        } else {\n            return result.Select(x => Math.Abs(x)).ToList();\n\
    \        }", "        // Your code goes here\n        List<long> result = new\
    \ List<long>(game.Count);\n        for (int i = 0; i < game.Count; i++) {\n  \
    \          long score = game[i];\n            long guess = guess[i];\n       \
    \     long difference = guess - score;\n            if (difference < 0) {\n  \
    \              difference = difference * -1;\n            }\n            result.Add(difference);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var item in guess) {\n            result.Add(Math.Abs(item -\
    \ game.ElementAt(game.IndexOf(item))));\n        }\n        return result;", " \
    \       var result = new List<long>();\n        foreach (var g in game) {\n  \
    \          foreach (var g in guess) {\n                var diff = g - g;\n   \
    \             if (diff > 0) {\n                    result.Add(diff);\n       \
    \         }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            long score = game[i];\n            long guess = guess[i];\n\
    \            long difference = guess - score;\n            if (difference < 0)\
    \ {\n                difference = -difference;\n            }\n            result.Add(difference);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long score = 0;\n        long difference = 0;\n        long maxScore\
    \ = game.Max();\n        long minScore = game.Min();\n        long maxGuess =\
    \ guess.Max();\n        long minGuess = guess.Min();\n        foreach (long guess\
    \ in guess) {\n            score = game.IndexOf(guess);\n            if (score\
    \ == -1) {\n                difference = maxScore - guess;\n            } else\
    \ {\n                difference = guess - score;\n            }\n            result.Add(difference);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n\
    \            long guess = guess[i];\n            long diff = guess - score;\n\
    \            if (diff > 0) {\n                result.Add(diff);\n            }\
    \ else if (diff < 0) {\n                result.Add(-diff);\n            }\n  \
    \      }\n        return result;", "        var result = new List<long>(game.Count);\n\
    \        for (int i = 0; i < game.Count; i++) {\n            var difference =\
    \ game[i] - guess[i];\n            if (difference > 0) {\n                result.Add(difference);\n\
    \            }\n            else {\n                result.Add(Math.Abs(difference));\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var gameScores = new List<long>(game.Count);\n      \
    \  var guesses = new List<long>(guess.Count);\n        game.ForEach(x => gameScores.Add(x));\n\
    \        guess.ForEach(x => guesses.Add(x));\n        gameScores.Sort();\n   \
    \     guesses.Sort();\n        var gameScoreIndex = 0;\n        var guesseIndex\
    \ = 0;\n        while (gameScoreIndex < gameScores.Count && guesseIndex < guesses.Count)\
    \ {\n            var gameScore = gameScores[gameScoreIndex];\n            var\
    \ guess = guesses[guesseIndex];\n            if (gameScore == guess) {\n     \
    \           result.Add(0);\n                gameScoreIndex++;\n              \
    \  guesseIndex++;\n            } else if (gameScore > guess) {\n             \
    \   result.Add(gameScore - guess);\n                gameScoreIndex++;\n      \
    \      } else {\n                result.Add(guess - gameScore);\n            \
    \    guesseIndex++;\n            }\n        }\n        return result;", "    \
    \    var result = new List<long>();\n        var scores = new List<long>(game.Count);\n\
    \        var guesses = new List<long>(guess.Count);\n        var scoreIndex =\
    \ 0;\n        var guesseIndex = 0;\n        while (scoreIndex < game.Count &&\
    \ guesseIndex < guess.Count) {\n            scores[scoreIndex] = game[scoreIndex];\n\
    \            guesses[guesseIndex] = guess[guesseIndex];\n            scoreIndex++;\n\
    \            guesseIndex++;\n        }\n        if (scoreIndex == game.Count)\
    \ {\n            while (guesseIndex < guess.Count) {\n                result.Add(0);\n\
    \                guesseIndex++;\n            }\n            return result;\n \
    \       }\n        if (guesseIndex == guess.Count) {\n            while (scoreIndex\
    \ < game.Count) {\n                result.Add(0);\n                scoreIndex++;\n\
    \            }\n            return result;\n        }\n        var scoreDifference\
    \ = scores[scoreIndex] - guesses[guesseIndex];\n        var guesseDifference =\
    \ guesses[guesseIndex] - scores[scoreIndex];\n        if (scoreDifference == guesseDifference)\
    \ {\n            result.Add(0);\n        } else {\n            result.Add(Math.Abs(scoreDifference\
    \ - guesseDifference));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        foreach\
    \ (long g in game) {\n            score += g;\n        }\n        foreach (long\
    \ g in guess) {\n            score -= g;\n        }\n        if (score == 0) {\n\
    \            foreach (long g in guess) {\n                result.Add(0);\n   \
    \         }\n        } else {\n            foreach (long g in guess) {\n     \
    \           result.Add(Math.Abs(g - score));\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        ", "  \
    \      List<long> result = new List<long>(game.Count);\n        for (int i = 0;\
    \ i < game.Count; i++) {\n            long diff = game[i] - guess[i];\n      \
    \      if (diff > 0) {\n                result.Add(diff);\n            } else\
    \ {\n                result.Add(-diff);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long score = 0;\n        long diff = 0;\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            score = game[i];\n            diff = guess[i] - score;\n\
    \            if (diff > 0) {\n                result.Add(diff);\n            }\
    \ else {\n                result.Add(-diff);\n            }\n        }\n     \
    \   return result;", "        var result = new List<long>();\n        foreach\
    \ (var item in game) {\n            var diff = item - guess[game.IndexOf(item)];\
    \ // the difference between the score and the guess\n            if (diff != 0)\
    \ {\n                result.Add(diff);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>(game.Count);\n        foreach\
    \ (var g in guess) {\n            var diff = g - game[game.IndexOf(g)];\n    \
    \        result.Add(diff);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score;\n        long guess;\n\
    \        long diff;\n        long diffAbs;\n        bool correct;\n        bool\
    \ correctGuess = false;\n        bool correctScore = false;\n        bool correctGuesses\
    \ = false;\n        bool correctScores = false;\n        bool correctGuesse =\
    \ false;\n        bool correctScoreGuesse = false;\n        bool correctScoreGuesses\
    \ = false;\n        bool correctGuesseGuess = false;\n        bool correctScoreGuesseGuess\
    \ = false;\n        bool correctGuesseScoreGuess = false;\n        bool correctGuesseGuesseGuess\
    \ = false;\n        bool correctScoreGuesseGuesseGuess = false;\n        bool\
    \ correctGuesseScoreGuesseGuess = false;\n        bool correctGuesseGuesseScoreGuess\
    \ = false;\n        bool correctScoreGuesseGuesseGuesseGuess = false;\n      \
    \  bool correctGuesseScoreGuesseGuesseGuess = false;\n        bool correctGuesseGuesseScoreGuesseGuess\
    \ = false;\n        bool correctScoreGuesseGuesseGuesseGuesseGuess = false;\n\
    \        bool correctGuesseScoreGuesseGuesseGuesseGuess = false;\n        bool\
    \ correctGuesseGuesseScoreGuesseGuesseGuess = false;\n        bool correctScoreGuesseGuesseGuesseGuesseGuesses\
    \ = false;\n        bool correctGuesseScoreGuesseGuesseGuesseGuesses = false;\n\
    \        bool correctGuesseGuesseScoreGuesseGuesseGuesses = false;\n        bool\
    \ correctScoreGuesseGuesseGuesseGuesseGuesses = false;\n        bool correctGuesseScoreGuesseGuesseGuesseGuesses\
    \ = false;\n        bool correctGuesseGuesseScoreGuesseGuesseGuesses = false;\n\
    \        bool correctScoreGuesseGuesseGuesseGuesseGuesses = false;\n        bool\
    \ correctGuesseScoreGuesseGuesseGuesseGuesses = false;\n        bool correctGuesseGuesseScoreGuesseGuesseGuesses\
    \ = false;\n        bool correctScoreGuesse", "        List<long> result = new\
    \ List<long>(game.Count);\n        long score = 0;\n        long difference =\
    \ 0;\n        foreach (long guess in guess) {\n            score = game.Sum(x\
    \ => x == guess ? 1 : 0);\n            difference = guess - score;\n         \
    \   result.Add(difference);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long diff = 0;\n        foreach (long g in game) {\n            score\
    \ += g;\n        }\n        foreach (long g in guess) {\n            guess +=\
    \ g;\n        }\n        diff = score - guess;\n        if (diff < 0) {\n    \
    \        diff = -diff;\n        }\n        result.Add(diff);\n        return result;",
  "        // Your code goes here\n        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long difference = 0;\n        for(int i = 0;\
    \ i < game.Count; i++) {\n            score += game[i];\n            difference\
    \ = game[i] - guess[i];\n            if(difference < 0) {\n                difference\
    \ = -difference;\n            }\n            result.Add(difference);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        bool correct = false;\n        foreach (long g in game) {\n         \
    \   guess = guess\n                .Where(x => g == x)\n                .FirstOrDefault();\n\
    \            if (guess == null) {\n                difference = g.Abs();\n   \
    \         } else {\n                difference = g.Abs() - guess.Abs();\n    \
    \        }\n            if (difference < 0) {\n                difference = difference\
    \ * -1;\n            }\n            if (difference == 0) {\n                correct\
    \ = true;\n            }\n            score += difference;\n            result.Add(score);\n\
    \        }\n        if (correct) {\n            return result;\n        } else\
    \ {\n            return result.Where(x => x < 0).ToList();\n        }", "    \
    \    List<long> result = new List<long>();\n        long score = 0;\n        long\
    \ guess = 0;\n        foreach (long i in guess) {\n            score += i;\n \
    \       }\n        foreach (long i in game) {\n            guess += i;\n     \
    \   }\n        if (guess == score) {\n            result.Add(0);\n        }\n\
    \        else {\n            result.Add(Math.Abs(guess - score));\n        }\n\
    \        return result;", "        // Your code goes here\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long difference\
    \ = 0;\n        for (int i = 0; i < game.Count; i++) {\n            score = game[i];\n\
    \            difference = guess[i] - score;\n            if (difference < 0) {\n\
    \                difference = -difference;\n            }\n            result.Add(difference);\n\
    \        }\n        return result;", "        // Your code goes here\n       \
    \ var result = game.Zip(guess, (x, y) => x - y).ToList();\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        foreach (long\
    \ score in game) {\n            long guess = guess.FirstOrDefault(x => x == score);\n\
    \            if (guess == -1) {\n                result.Add(0);\n            }\
    \ else {\n                result.Add(Math.Abs(guess - score));\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long total = 0;\n        long totalGuess = 0;\n        long totalGuessed\
    \ = 0;\n        long totalGuessedCorrectly = 0;\n        long totalGuessedIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyCorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedCorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyCorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n    \
    \    long totalGuessedIncorrectlyIncorrectlyIncorrectlyCorrectly = 0;\n      \
    \  long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectly = 0;\n      \
    \  long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyCorrectly = 0;\n\
    \        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long total", "        List<long> result = new List<long>(game.Count);\n\
    \        for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n\
    \            long guess = guess[i];\n            long difference = Math.Abs(guess\
    \ - score);\n            if (guess == score) {\n                result[i] = difference;\n\
    \            } else {\n                result[i] = difference;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += Math.Abs(g - g);\n            }\n        }\n        if (diff\
    \ == 0) {\n            foreach (long g in guess) {\n                result.Add(0);\n\
    \            }\n        } else {\n            foreach (long g in guess) {\n  \
    \              result.Add(Math.Abs(g - score));\n            }\n        }\n  \
    \      return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            foreach (long g in guess) {\n                diff = g - g;\n\
    \                if (diff > 0) {\n                    score += diff;\n       \
    \         }\n            }\n            result.Add(score);\n            score\
    \ = 0;\n        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long total = 0;\n        long totalGuess = 0;\n        long totalGuessed\
    \ = 0;\n        long totalGuessedCorrectly = 0;\n        long totalGuessedIncorrectly\
    \ = 0;\n        long totalGuessedCorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedCorrectlyIncorrectlyIncorrectly = 0;\n      \
    \  long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n    \
    \    long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n    \
    \    long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIn",
  "        var result = new List<long>(game.Count);\n        foreach (var item in\
    \ game) {\n            var diff = item - guess[game.IndexOf(item)]; // the absolute\
    \ difference between the guess and the score\n            if (diff > 0) {\n  \
    \              result.Add(diff);\n            }\n            else {\n        \
    \        result.Add(-diff);\n            }\n        }\n        return result;",
  "        var result = new List<long>(game.Count);\n        foreach (var item in\
    \ game) {\n            var guess = guess.Where(x => x == item).ToList();\n   \
    \         if (guess.Count == 0) {\n                result.Add(0);\n          \
    \  }\n            else {\n                var difference = guess.Min() - item;\n\
    \                result.Add(difference);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long score = 0;\n        long guess = 0;\n        foreach (long g in game) {\n\
    \            score += g;\n        }\n        foreach (long g in guess) {\n   \
    \         guess += g;\n        }\n        if (score == guess) {\n            foreach\
    \ (long g in guess) {\n                result.Add(g - score);\n            }\n\
    \        }\n        else {\n            foreach (long g in guess) {\n        \
    \        result.Add(Math.Abs(g - score));\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
