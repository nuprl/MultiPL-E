name: HumanEval_152_compare
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // I think we all remember that feeling when the result of some\
  \ long-awaited\n    // event is finally known. The feelings and thoughts you have\
  \ at that moment are\n    // definitely worth noting down and comparing.\n    //\
  \ Your task is to determine if a person correctly guessed the results of a number\
  \ of matches.\n    // You are given two lists of scores and guesses of equal length,\
  \ where each index shows a match. \n    // Return a list of the same length denoting\
  \ how far off each guess was. If they have guessed correctly,\n    // the value\
  \ is 0, and if not, the value is the absolute difference between the guess and the\
  \ score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new\
  \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>\
  \ Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,\
  \ (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,\
  \ (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,\
  \ (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>\
  \ game, List<long> guess) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
  \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
  \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
  \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,\
  \ (long)1L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long score =\
    \ 0;\n        long guess = 0;\n        long diff = 0;\n        foreach (long g\
    \ in game) {\n            score += g;\n        }\n        foreach (long g in guess)\
    \ {\n            guess += g;\n        }\n        diff = score - guess;\n     \
    \   if (diff < 0) {\n            result.Add(diff);\n        }\n        else {\n\
    \            result.Add(diff);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ diff = 0;\n        long guess = 0;\n        long game = 0;\n        foreach\
    \ (var item in game) {\n            score = item;\n            foreach (var item2\
    \ in guess) {\n                diff = item2 - score;\n                if (diff\
    \ < 0) {\n                    diff = -diff;\n                }\n             \
    \   if (diff == 0) {\n                    result.Add(0);\n                }\n\
    \                else {\n                    result.Add(diff);\n             \
    \   }\n            }\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        game.ForEach(x => result.Add(x - guess[game.IndexOf(x)]));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long score = 0;\n        long guess = 0;\n        long diff = 0;\n     \
    \   bool correct = false;\n        foreach (var item in game) {\n            score\
    \ = item;\n            guess = guess[game.IndexOf(item)]; // get guess from list\
    \ by index\n            diff = guess - score; // get difference between guess\
    \ and score\n            if (diff < 0) {\n                diff = -diff;\n    \
    \        }\n            if (diff == 0) {\n                result.Add(0);\n   \
    \         }\n            else {\n                result.Add(diff);\n         \
    \   }\n            correct = correct || diff == 0;\n        }\n        if (correct)\
    \ {\n            return result;\n        }\n        else {\n            return\
    \ result.Select(x => Math.Abs(x)).ToList();\n        }", "        List<long> result\
    \ = new List<long>(game.Count);\n        long score = 0;\n        long difference\
    \ = 0;\n        foreach (long guess in guess) {\n            score = game.Sum(x\
    \ => x == guess ? 1 : 0);\n            difference = guess - score;\n         \
    \   result.Add(difference);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long diff = 0;\n\
    \        foreach (long g in game) {\n            score += g;\n            foreach\
    \ (long g in guess) {\n                diff += Math.Abs(g - score);\n        \
    \    }\n            result.Add(diff);\n        }\n        return result;", " \
    \       var result = new List<long>(game.Count);\n        foreach (var item in\
    \ game) {\n            int diff = Math.Abs(item - guess[game.IndexOf(item)]);\n\
    \            if (diff != 0) {\n                result.Add(diff);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long diff;\n        long score;\n        long maxScore = game.Max();\n\
    \        long minScore = game.Min();\n        long maxGuess = guess.Max();\n \
    \       long minGuess = guess.Min();\n        long maxDiff = maxScore - maxGuess;\n\
    \        long minDiff = minScore - minGuess;\n        long maxDiffAbs = Math.Abs(maxDiff);\n\
    \        long minDiffAbs = Math.Abs(minDiff);\n        long maxScoreAbs = Math.Abs(maxScore);\n\
    \        long minScoreAbs = Math.Abs(minScore);\n        long maxGuess = Math.Abs(maxGuess);\n\
    \        long minGuess = Math.Abs(minGuess);\n        long maxDiffAbs = Math.Abs(maxDiffAbs);\n\
    \        long minDiffAbs = Math.Abs(minDiffAbs);\n        long maxScoreAbs = Math.Abs(maxScoreAbs);\n\
    \        long minScoreAbs = Math.Abs(minScoreAbs);\n        long maxDiff = maxScore\
    \ - maxGuess;\n        long minDiff = minScore - minGuess;\n        long maxDiffAbs\
    \ = Math.Abs(maxDiff);\n        long minDiffAbs = Math.Abs(minDiff);\n       \
    \ long maxScoreAbs = Math.Abs(maxScore);\n        long minScoreAbs = Math.Abs(minScore);\n\
    \        long maxDiffAbs = Math.Abs(maxDiffAbs);\n        long minDiffAbs = Math.Abs(minDiffAbs);\n\
    \        long maxScore = game.Max();\n        long minScore = game.Min();\n  \
    \      long maxGuess = guess.Max();\n        long minGuess = guess.Min();\n  \
    \      long maxDiff = maxScore - maxGuess;\n        long minDiff = minScore -\
    \ minGuess;\n        long maxDiffAbs = Math.Abs(maxDiff);\n        long minDiffAbs\
    \ = Math.Abs(minDiff);\n        long maxScoreAbs = Math.Abs(maxScore);\n     \
    \   long minScoreAbs = Math.Abs(minScore);\n        long maxDiffAbs = Math.Abs(maxDiffAbs);\n\
    \        long minDiffAbs = Math.Abs(minDiffAbs);\n        long maxScore = game.Max();\n\
    \        long minScore = game.Min();\n        long maxGuess = guess.Max();\n \
    \       long minGuess = ", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += Math.Abs(g - g);\n            }\n            result.Add(diff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        bool correct;\n        long\
    \ diff;\n        foreach (var item in game) {\n            score = item;\n   \
    \         guess = guess[game.IndexOf(item)]; // this line is very important\n\
    \            correct = guess == score;\n            diff = correct ? 0 : Math.Abs(guess\
    \ - score);\n            result.Add(diff);\n        }\n        return result;",
  "        var result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            var gameScore = game[i];\n            var guessScore = guess[i];\n\
    \            var diff = gameScore - guessScore;\n            if (diff > 0) result.Add(diff);\n\
    \            else if (diff < 0) result.Add(-diff);\n            else result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        for (int i = 0; i <\
    \ game.Count; i++) {\n            if (game[i] == guess[i]) {\n               \
    \ score++;\n            } else {\n                diff = game[i] - guess[i];\n\
    \                if (diff > 0) {\n                    result.Add(diff);\n    \
    \            } else {\n                    result.Add(-diff);\n              \
    \  }\n            }\n        }\n        if (score == game.Count) {\n         \
    \   return result;\n        } else {\n            return new List<long>(game.Count);\n\
    \        }", "        List<long> result = new List<long>(game.Count);\n      \
    \  for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n\
    \            long guess = guess[i];\n            long difference = guess - score;\n\
    \            if (difference < 0) {\n                difference = -difference;\n\
    \            }\n            result.Add(difference);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool first = true;\n        foreach (long g in game) {\n            correct\
    \ = false;\n            foreach (long g in guess) {\n                score = g;\n\
    \                guess = g;\n                diff = g - score;\n             \
    \   if (first) {\n                    first = false;\n                } else {\n\
    \                    result.Add(diff);\n                }\n                if\
    \ (diff == 0) {\n                    correct = true;\n                }\n    \
    \        }\n            if (correct) {\n                result.Add(0);\n     \
    \       } else {\n                result.Add(diff);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        for (int\
    \ i = 0; i < game.Count; i++) {\n            score = game[i];\n            guess\
    \ = guess[i];\n            diff = guess - score;\n            if (diff > 0) {\n\
    \                result.Add(diff);\n            } else if (diff < 0) {\n     \
    \           result.Add(-diff);\n            } else {\n                result.Add(0);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in guess) {\n            result.Add(Math.Abs(item\
    \ - game[guess.IndexOf(item)]);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>(game.Count);\n        long score = 0;\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            score\
    \ += g;\n            foreach (long g in guess) {\n                diff += g -\
    \ score;\n            }\n            result.Add(diff);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(game.Count);\n       \
    \ long diff = 0;\n        foreach (long score in game) {\n            foreach\
    \ (long guess in guess) {\n                if (guess == score) {\n           \
    \         result.Add(0);\n                } else {\n                    diff =\
    \ Math.Abs(guess - score);\n                    result.Add(diff);\n          \
    \      }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ difference = 0;\n        foreach (long guess in guess) {\n            score\
    \ += game[guess];\n            difference += Math.Abs(guess - score);\n      \
    \  }\n        foreach (long guess in guess) {\n            result.Add(Math.Abs(guess\
    \ - score));\n        }\n        return result;", "        List<long> result =\
    \ new List<long>(game.Count);\n        long score;\n        long guess;\n    \
    \    bool correct;\n        for (int i = 0; i < game.Count; i++) {\n         \
    \   score = game[i];\n            guess = guess[i];\n            correct = guess\
    \ == score;\n            if (correct) {\n                result[i] = 0;\n    \
    \        } else {\n                result[i] = Math.Abs(guess - score);\n    \
    \        }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
