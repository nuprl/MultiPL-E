name: HumanEval_61_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"\
  (\"))\n    // (false)\n    // >>> CorrectBracketing((\"()\"))\n    // (true)\n \
  \   // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n    // >>> CorrectBracketing((\"\
  )(()\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        string openingBrackets = brackets.Replace(\"(\", \"(\").Replace(\"\
    )\", \")\");\n        string closingBrackets = brackets.Replace(\"(\", \"\").Replace(\"\
    )\", \"\");\n        return openingBrackets.Replace(closingBrackets, \"\") ==\
    \ \"\";", "        bool result = true;\n        foreach (char c in brackets) {\n\
    \            if (c == '(') {\n                result = result && CorrectBracketing(brackets.Substring(0,\
    \ brackets.IndexOf(c)));\n            } else if (c == ')') {\n               \
    \ result = result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1));\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '(') {\n\
    \                if (!brackets.Contains(\")\"))\n                    result =\
    \ false;\n            }\n            if (c == '[') {\n                if (!brackets.Contains(\"\
    ]\"))\n                    result = false;\n            }\n            if (c ==\
    \ '{') {\n                if (!brackets.Contains(\"}\"))\n                   \
    \ result = false;\n            }\n            if (c == '<') {\n              \
    \  if (!brackets.Contains(\">\"))\n                    result = false;\n     \
    \       }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         if (brackets.IndexOf('(', brackets.IndexOf(c) + 1) < 0) {\n        \
    \            result = false;\n                    break;\n                }\n\
    \            } else if (c == ')') {\n                if (brackets.IndexOf('(',\
    \ brackets.IndexOf(c) - 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        if (brackets == null)\n            return false;\n      \
    \  var openingBrackets = new Stack<char>();\n        var closingBrackets = new\
    \ Stack<char>();\n        foreach (var c in brackets) {\n            if (c ==\
    \ '(')\n                openingBrackets.Push(c);\n            else if (c == ')')\n\
    \                closingBrackets.Push(c);\n            else if (openingBrackets.Count\
    \ > 0 && closingBrackets.Count > 0 && openingBrackets.Peek() == closingBrackets.Peek())\n\
    \                return false;\n        }\n        return openingBrackets.Count\
    \ == closingBrackets.Count;", "        bool result = true;\n        foreach (char\
    \ c in brackets) {\n            if (c != '(' && c != ')') {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;",
  "        Stack<char> stack = new Stack<char>();\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                stack.Push(c);\n           \
    \ } else if (c == ')') {\n                if (stack.Count == 0) {\n          \
    \          return false;\n                }\n                char top = stack.Pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.Count == 0;", " \
    \       Stack<char> stack = new Stack<char>();\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                stack.push('(');\n         \
    \   } else if (c == ')') {\n                if (stack.Count == 0)\n          \
    \          return false;\n                char top = stack.Pop();\n          \
    \      if (top != '(')\n                    return false;\n            } else\
    \ {\n                if (stack.Count != 0)\n                    return false;\n\
    \                stack.Push(c);\n            }\n        }\n        return stack.Count\
    \ == 0;", "        bool result = true;\n        foreach (char c in brackets) {\n\
    \            if (c == '(') {\n                result = result && CorrectBracketing(brackets.Substring(0,\
    \ brackets.IndexOf(c)));\n            } else if (c == ')') {\n               \
    \ result = result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1));\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '(') {\n\
    \                if (brackets.IndexOf('(', brackets.IndexOf(c) + 1) < 0) {\n \
    \                   result = false;\n                    break;\n            \
    \    }\n            }\n            if (c == ')') {\n                if (brackets.IndexOf('(',\
    \ brackets.IndexOf(c) - 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        bool result = true;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                result = result && CorrectBracketing(brackets.Substring(0,\
    \ brackets.IndexOf(c)));\n            }\n            if (c == ')') {\n       \
    \         result = result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1));\n            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '(') {\n                openingBrackets +=\
    \ c;\n            } else if (c == ')') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets[i] != closingBrackets[i]) {\n      \
    \          return false;\n            }\n        }\n        return true;", " \
    \       Stack<char> stack = new Stack<char>();\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                stack.Push(c);\n           \
    \ } else if (c == ')') {\n                if (stack.Count > 0) {\n           \
    \         char top = stack.Pop();\n                    if (top != '(') return\
    \ false;\n                }\n            } else {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top != '(') return false;\n                }\n                stack.Clear();\n\
    \            }\n        }\n        return stack.Count == 0;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            switch (c)\
    \ {\n                case '(':\n                    openingBrackets += c;\n  \
    \                  break;\n                case ')':\n                    closingBrackets\
    \ += c;\n                    break;\n                default:\n              \
    \      result = false;\n                    break;\n            }\n        }\n\
    \        if (openingBrackets.Length != closingBrackets.Length) {\n           \
    \ result = false;\n        }\n        return result;", "        if (brackets ==\
    \ null)\n            return false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '(')\n         \
    \       stack.push('(');\n            else if (c == ')')\n                while\
    \ (stack.Count > 0 && stack.Peek() != '(')\n                    stack.pop();\n\
    \            else if (c == '[' || c == ']')\n                stack.push('[');\n\
    \            else if (c == ']')\n                while (stack.Count > 0 && stack.Peek()\
    \ != ']')\n                    stack.pop();\n            else if (c == '{' ||\
    \ c == '}')\n                stack.push('{');\n            else if (c == '}')\n\
    \                while (stack.Count > 0 && stack.Peek() != '}')\n            \
    \        stack.pop();\n            else\n                return false;\n     \
    \   }\n        return stack.Count == 0;", "        bool result = true;\n     \
    \   foreach (char c in brackets) {\n            if (c == '(') {\n            \
    \    result = result && CorrectBracketing(brackets.Substring(0, brackets.IndexOf(c)\
    \ + 1));\n            }\n            if (c == ')') {\n                result =\
    \ result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c) + 1, brackets.Length\
    \ - brackets.IndexOf(c) - 1));\n            }\n        }\n        return result;",
  "        string openingBrackets = \"\";\n        string closingBrackets = \"\";\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         openingBrackets += c;\n            } else if (c == ')') {\n        \
    \        closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ Stack<char> openingBracketStack = new Stack<char>();\n        Stack<char> closingBracketStack\
    \ = new Stack<char>();\n        foreach (char c in openingBrackets) {\n      \
    \      if (c == '(') {\n                openingBracketStack.Push(c);\n       \
    \     } else if (c == ')') {\n                closingBracketStack.Pop();\n   \
    \         }\n        }\n        if (openingBracketStack.Count != closingBracketStack.Count)\
    \ {\n            return false;\n        }\n        foreach (char c in openingBrackets)\
    \ {\n            if (c != closingBrackets[openingBracketStack.Pop()]) {\n    \
    \            return false;\n            }\n        }\n        return true;", " \
    \       bool result = true;\n        foreach (char c in brackets) {\n        \
    \    if (c == '(') {\n                result = result && CorrectBracketing(brackets.Substring(0,\
    \ brackets.IndexOf(c)));\n            }\n            if (c == ')') {\n       \
    \         result = result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1));\n            }\n        }\n        return result;", "        Stack<char>\
    \ stack = new Stack<char>();\n        foreach (char c in brackets) {\n       \
    \     if (c == '(') {\n                stack.Push(c);\n            } else if (c\
    \ == ')') {\n                if (stack.Count == 0) {\n                    return\
    \ false;\n                }\n                char top = stack.Pop();\n       \
    \         if (top != '(') {\n                    return false;\n             \
    \   }\n            }\n        }\n        return stack.Count == 0;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c !=\
    \ '(' && c != ')') {\n                result = false;\n            }\n       \
    \ }\n        return result;"]
stop_tokens:
- "\n    }\n"
