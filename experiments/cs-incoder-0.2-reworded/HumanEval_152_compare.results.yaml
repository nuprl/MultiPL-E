language: cs
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long guess = 0;\n        long diff = 0;\n        foreach (long
    g in game) {\n            score += g;\n        }\n        foreach (long g in guess)
    {\n            guess += g;\n        }\n        diff = score - guess;\n        if
    (diff < 0) {\n            result.Add(diff);\n        }\n        else {\n            result.Add(diff);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzx1uy0w6.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzx1uy0w6.cs(29,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        long guess = 0;\n        long
    game = 0;\n        foreach (var item in game) {\n            score = item;\n            foreach
    (var item2 in guess) {\n                diff = item2 - score;\n                if
    (diff < 0) {\n                    diff = -diff;\n                }\n                if
    (diff == 0) {\n                    result.Add(0);\n                }\n                else
    {\n                    result.Add(diff);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz7u3ez3f.cs(22,44): error CS0841: Cannot use local variable ''game'' before
    it is declared

    /tmp/tmpz7u3ez3f.cs(22,44): error CS1503: Argument 1: cannot convert from ''method
    group'' to ''int''

    /tmp/tmpz7u3ez3f.cs(25,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpz7u3ez3f.cs(26,14): error CS0136: A local or parameter named ''game''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpz7u3ez3f.cs(27,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpz7u3ez3f.cs(29,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797606
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        game.ForEach(x
    => result.Add(x - guess[game.IndexOf(x)]));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e4057eafc0b4c7594942a3ac0f7b192>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e4057eafc0b4c7594942a3ac0f7b192>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long guess = 0;\n        long diff = 0;\n        bool correct
    = false;\n        foreach (var item in game) {\n            score = item;\n            guess
    = guess[game.IndexOf(item)]; // get guess from list by index\n            diff
    = guess - score; // get difference between guess and score\n            if (diff
    < 0) {\n                diff = -diff;\n            }\n            if (diff ==
    0) {\n                result.Add(0);\n            }\n            else {\n                result.Add(diff);\n
    \           }\n            correct = correct || diff == 0;\n        }\n        if
    (correct) {\n            return result;\n        }\n        else {\n            return
    result.Select(x => Math.Abs(x)).ToList();\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp38d2uiw6.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp38d2uiw6.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score = game.Sum(x => x == guess ? 1 : 0);\n            difference
    = guess - score;\n            result.Add(difference);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphb7vopb_.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long diff = 0;\n        foreach (long g in game) {\n            score
    += g;\n            foreach (long g in guess) {\n                diff += Math.Abs(g
    - score);\n            }\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp99crrug_.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            int diff = Math.Abs(item - guess[game.IndexOf(item)]);\n
    \           if (diff != 0) {\n                result.Add(diff);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt_nnb33g.cs(24,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff;\n        long score;\n        long maxScore = game.Max();\n
    \       long minScore = game.Min();\n        long maxGuess = guess.Max();\n        long
    minGuess = guess.Min();\n        long maxDiff = maxScore - maxGuess;\n        long
    minDiff = minScore - minGuess;\n        long maxDiffAbs = Math.Abs(maxDiff);\n
    \       long minDiffAbs = Math.Abs(minDiff);\n        long maxScoreAbs = Math.Abs(maxScore);\n
    \       long minScoreAbs = Math.Abs(minScore);\n        long maxGuess = Math.Abs(maxGuess);\n
    \       long minGuess = Math.Abs(minGuess);\n        long maxDiffAbs = Math.Abs(maxDiffAbs);\n
    \       long minDiffAbs = Math.Abs(minDiffAbs);\n        long maxScoreAbs = Math.Abs(maxScoreAbs);\n
    \       long minScoreAbs = Math.Abs(minScoreAbs);\n        long maxDiff = maxScore
    - maxGuess;\n        long minDiff = minScore - minGuess;\n        long maxDiffAbs
    = Math.Abs(maxDiff);\n        long minDiffAbs = Math.Abs(minDiff);\n        long
    maxScoreAbs = Math.Abs(maxScore);\n        long minScoreAbs = Math.Abs(minScore);\n
    \       long maxDiffAbs = Math.Abs(maxDiffAbs);\n        long minDiffAbs = Math.Abs(minDiffAbs);\n
    \       long maxScore = game.Max();\n        long minScore = game.Min();\n        long
    maxGuess = guess.Max();\n        long minGuess = guess.Min();\n        long maxDiff
    = maxScore - maxGuess;\n        long minDiff = minScore - minGuess;\n        long
    maxDiffAbs = Math.Abs(maxDiff);\n        long minDiffAbs = Math.Abs(minDiff);\n
    \       long maxScoreAbs = Math.Abs(maxScore);\n        long minScoreAbs = Math.Abs(minScore);\n
    \       long maxDiffAbs = Math.Abs(maxDiffAbs);\n        long minDiffAbs = Math.Abs(minDiffAbs);\n
    \       long maxScore = game.Max();\n        long minScore = game.Min();\n        long
    maxGuess = guess.Max();\n        long minGuess = \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl06kk0c7.cs(64,24): error CS1525: Invalid expression term ''}''

    /tmp/tmpl06kk0c7.cs(64,24): error CS1002: ; expected

    '
  timestamp: 1659797605
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - g);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ocxfn43.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct;\n        long
    diff;\n        foreach (var item in game) {\n            score = item;\n            guess
    = guess[game.IndexOf(item)]; // this line is very important\n            correct
    = guess == score;\n            diff = correct ? 0 : Math.Abs(guess - score);\n
    \           result.Add(diff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpce7u_mx9.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpce7u_mx9.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpce7u_mx9.cs(29,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            var gameScore = game[i];\n
    \           var guessScore = guess[i];\n            var diff = gameScore - guessScore;\n
    \           if (diff > 0) result.Add(diff);\n            else if (diff < 0) result.Add(-diff);\n
    \           else result.Add(0);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed47ef01ab042bea7fd427b5beebc76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed47ef01ab042bea7fd427b5beebc76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797606
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        for (int i = 0; i < game.Count;
    i++) {\n            if (game[i] == guess[i]) {\n                score++;\n            }
    else {\n                diff = game[i] - guess[i];\n                if (diff >
    0) {\n                    result.Add(diff);\n                } else {\n                    result.Add(-diff);\n
    \               }\n            }\n        }\n        if (score == game.Count)
    {\n            return result;\n        } else {\n            return new List<long>(game.Count);\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4aa8fe948f8f42fda51b6dc56da3ad12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4aa8fe948f8f42fda51b6dc56da3ad12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n
    \           long guess = guess[i];\n            long difference = guess - score;\n
    \           if (difference < 0) {\n                difference = -difference;\n
    \           }\n            result.Add(difference);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1hbhxpjb.cs(25,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp1hbhxpjb.cs(25,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp1hbhxpjb.cs(25,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       bool first = true;\n        foreach (long g in game) {\n            correct
    = false;\n            foreach (long g in guess) {\n                score = g;\n
    \               guess = g;\n                diff = g - score;\n                if
    (first) {\n                    first = false;\n                } else {\n                    result.Add(diff);\n
    \               }\n                if (diff == 0) {\n                    correct
    = true;\n                }\n            }\n            if (correct) {\n                result.Add(0);\n
    \           } else {\n                result.Add(diff);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl273hv8p.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpl273hv8p.cs(30,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpl273hv8p.cs(30,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpl273hv8p.cs(30,32): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpl273hv8p.cs(46,28): error CS0165: Use of unassigned local variable ''diff''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        for (int
    i = 0; i < game.Count; i++) {\n            score = game[i];\n            guess
    = guess[i];\n            diff = guess - score;\n            if (diff > 0) {\n
    \               result.Add(diff);\n            } else if (diff < 0) {\n                result.Add(-diff);\n
    \           } else {\n                result.Add(0);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwbvcjyjq.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpwbvcjyjq.cs(28,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpwbvcjyjq.cs(28,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var item in guess) {\n            result.Add(Math.Abs(item - game[guess.IndexOf(item)]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzi4yl495.cs(24,66): error CS1026: ) expected

    '
  timestamp: 1659797605
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += g - score;\n            }\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp994b4kzb.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff = 0;\n        foreach (long score in game) {\n            foreach
    (long guess in guess) {\n                if (guess == score) {\n                    result.Add(0);\n
    \               } else {\n                    diff = Math.Abs(guess - score);\n
    \                   result.Add(diff);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwlrndtp.cs(25,27): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n            difference += Math.Abs(guess
    - score);\n        }\n        foreach (long guess in guess) {\n            result.Add(Math.Abs(guess
    - score));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiuo2qiv4.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiuo2qiv4.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpiuo2qiv4.cs(29,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct;\n        for (int
    i = 0; i < game.Count; i++) {\n            score = game[i];\n            guess
    = guess[i];\n            correct = guess == score;\n            if (correct) {\n
    \               result[i] = 0;\n            } else {\n                result[i]
    = Math.Abs(guess - score);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ps43mzx.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7ps43mzx.cs(28,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp7ps43mzx.cs(28,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       foreach (long score in game) {\n            long guess = guess.FirstOrDefault(x
    => x == score);\n            if (guess == -1L) {\n                result.Add(0);\n
    \           } else {\n                result.Add(guess - score);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3mnfc8l.cs(24,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpx3mnfc8l.cs(24,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpx3mnfc8l.cs(24,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct;\n        for (int
    i = 0; i < game.Count; i++) {\n            score = game[i];\n            guess
    = guess[i];\n            correct = guess == score;\n            result.Add(correct
    ? 0 : Math.Abs(guess - score));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9utf9ok8.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9utf9ok8.cs(28,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp9utf9ok8.cs(28,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long guess = 0;\n        bool correct = false;\n        foreach
    (long i in game) {\n            if (guess == i) {\n                correct = true;\n
    \               score = 0;\n            }\n            else if (guess > i) {\n
    \               correct = false;\n                score = Math.Abs(guess - i);\n
    \           }\n            else {\n                correct = true;\n                score
    = Math.Abs(i - guess);\n            }\n            result.Add(score);\n        }\n
    \       if (correct) {\n            return result;\n        }\n        else {\n
    \           return result.OrderByDescending(x => x).ToList();\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvj0av6f.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - score);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3j2xove.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>
    result = new List<long>();\n        foreach (long score in game) {\n            long
    guess = guess.FirstOrDefault();\n            if (guess == score) {\n                result.Add(0);\n
    \           } else {\n                result.Add(Math.Abs(guess - score));\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnp826j7r.cs(25,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpnp826j7r.cs(25,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpnp826j7r.cs(25,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       for (int i = 0; i < game.Count; i++) {\n            score = game[i];\n
    \           guess = guess[i];\n            diff = guess - score;\n            correct
    = diff < 0L;\n            result.Add(correct ? diff : -diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6di_v1wu.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6di_v1wu.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6di_v1wu.cs(29,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        long diff2;\n
    \       long diff3;\n        long diff4;\n        long diff5;\n        long diff6;\n
    \       long diff7;\n        long diff8;\n        long diff9;\n        long diff10;\n
    \       long diff11;\n        long diff12;\n        long diff13;\n        long
    diff14;\n        long diff15;\n        long diff16;\n        long diff17;\n        long
    diff18;\n        long diff19;\n        long diff20;\n        long diff21;\n        long
    diff22;\n        long diff23;\n        long diff24;\n        long diff25;\n        long
    diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n        long
    diff30;\n        long diff31;\n        long diff32;\n        long diff33;\n        long
    diff34;\n        long diff35;\n        long diff36;\n        long diff37;\n        long
    diff38;\n        long diff39;\n        long diff40;\n        long diff41;\n        long
    diff42;\n        long diff43;\n        long diff44;\n        long diff45;\n        long
    diff46;\n        long diff47;\n        long diff48;\n        long diff49;\n        long
    diff50;\n        long diff51;\n        long diff52;\n        long diff53;\n        long
    diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n        long
    diff58;\n        long diff59;\n        long diff60;\n        long diff61;\n        long
    diff62;\n        long diff63;\n        long diff64;\n        long diff65;\n        long
    diff66;\n        long diff67;\n        long diff68;\n        long diff69;\n        long
    diff70;\n        long diff71;\n        long diff72;\n        long diff73;\n        long
    diff74;\n        long diff75;\n        long diff76;\n        long diff77;\n        long
    diff78;\n        long diff79;\n        long diff80;\n        long diff81;\n        long
    diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqo7p4zqx.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqo7p4zqx.cs(23,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(24,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(25,14): warning CS0168: The variable ''diff'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(26,14): warning CS0168: The variable ''diff2'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(27,14): warning CS0168: The variable ''diff3'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(28,14): warning CS0168: The variable ''diff4'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(29,14): warning CS0168: The variable ''diff5'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(30,14): warning CS0168: The variable ''diff6'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(31,14): warning CS0168: The variable ''diff7'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(32,14): warning CS0168: The variable ''diff8'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(33,14): warning CS0168: The variable ''diff9'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(34,14): warning CS0168: The variable ''diff10'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(35,14): warning CS0168: The variable ''diff11'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(36,14): warning CS0168: The variable ''diff12'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(37,14): warning CS0168: The variable ''diff13'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(38,14): warning CS0168: The variable ''diff14'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(39,14): warning CS0168: The variable ''diff15'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(40,14): warning CS0168: The variable ''diff16'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(41,14): warning CS0168: The variable ''diff17'
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n
    \           long guess = guess[i];\n            long diff = guess - score;\n            if
    (diff > 0) {\n                result.Add(diff);\n            }\n            else
    {\n                result.Add(-diff);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdm_fgknp.cs(25,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpdm_fgknp.cs(25,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdm_fgknp.cs(25,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       bool first = true;\n        foreach (var item in game) {\n            score
    = item;\n            guess = guess[game.IndexOf(item)]; // guesses are in same
    order as game\n            diff = guess - score;\n            correct = diff <
    0L;\n            if (first) {\n                result.Add(diff);\n                first
    = false;\n            } else {\n                result.Add(Math.Abs(diff));\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2fqwnmm3.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp2fqwnmm3.cs(30,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp2fqwnmm3.cs(30,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            var guessedCorrectly = guess.Contains(item);\n
    \           var difference = Math.Abs(item - guess[guess.IndexOf(item)]);\n            if
    (guessedCorrectly) {\n                result.Add(0);\n            } else {\n                result.Add(difference);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00031] in <29d5ecdcf453412192bd547ebd2dbf78>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <29d5ecdcf453412192bd547ebd2dbf78>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00031] in <29d5ecdcf453412192bd547ebd2dbf78>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <29d5ecdcf453412192bd547ebd2dbf78>:0
    \n"
  stdout: ''
  timestamp: 1659797607
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       foreach (long score in game) {\n            long difference = score -
    guess[game.IndexOf(score)];\n            if (difference < 0) {\n                difference
    = -difference;\n            }\n            result.Add(difference);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4275bcb367a4422cbb6207f0494b606f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4275bcb367a4422cbb6207f0494b606f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        long guess = 0;\n
    \       long game = 0;\n        foreach (long i in guess) {\n            guess
    = i;\n            game = game[i];\n            difference = Math.Abs(guess - game);\n
    \           if (difference == 0) {\n                result.Add(0);\n            }
    else {\n                result.Add(difference);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb1uuvoul.cs(22,44): error CS0841: Cannot use local variable ''game'' before
    it is declared

    /tmp/tmpb1uuvoul.cs(22,44): error CS1503: Argument 1: cannot convert from ''method
    group'' to ''int''

    /tmp/tmpb1uuvoul.cs(25,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpb1uuvoul.cs(26,14): error CS0136: A local or parameter named ''game''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpb1uuvoul.cs(27,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpb1uuvoul.cs(29,20): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpb1uuvoul.cs(23,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - score);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3j2xove.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       var scores = new List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n
    \       var correct = new List<long>(game.Count);\n        var wrong = new List<long>(game.Count);\n
    \       var total = 0;\n        var maxScore = game.Max();\n        var maxGuess
    = guess.Max();\n        foreach (var item in game) {\n            scores.Add(item);\n
    \       }\n        foreach (var item in guess) {\n            guesses.Add(item);\n
    \       }\n        foreach (var item in game) {\n            total += item;\n
    \       }\n        foreach (var item in guess) {\n            total -= item;\n
    \       }\n        foreach (var item in game) {\n            if (item == maxScore)
    {\n                correct.Add(item);\n            }\n            else {\n                wrong.Add(item);\n
    \           }\n        }\n        foreach (var item in guess) {\n            if
    (item == maxGuess) {\n                correct.Add(item);\n            }\n            else
    {\n                wrong.Add(item);\n            }\n        }\n        foreach
    (var item in game) {\n            if (item == maxScore) {\n                correct.Add(item);\n
    \           }\n            else {\n                wrong.Add(item);\n            }\n
    \       }\n        foreach (var item in guess) {\n            if (item == maxGuess)
    {\n                correct.Add(item);\n            }\n            else {\n                wrong.Add(item);\n
    \           }\n        }\n        foreach (var item in game) {\n            if
    (item == maxScore) {\n                correct.Add(item);\n            }\n            else
    {\n                wrong.Add(item);\n            }\n        }\n        foreach
    (var item in guess) {\n            if (item == maxGuess) {\n                correct.Add(item);\n
    \           }\n            else {\n                wrong.Add(item);\n            }\n
    \       }\n        foreach (var item in game) {\n            if (item == maxScore)
    {\n                correct.Add(item);\n            }\n            else {\n                wrong.Add(item);\n
    \           }\n        }\n        foreach (var item in guess) {\n            if
    (item == maxGuess) {\n                correct.Add(item);\n            }\n            else
    {\n                wrong.Add(item);\n            }\n        }\n        foreach
    (var item in game) {\n            if (item == maxScore) {\n                correct.Add(item);\n
    \           }\n            else {\n                wrong.Add(item);\n            }\n
    \       }\n        foreach (var item in guess) {\n            if (item == maxGuess)
    {\n                correct.Add(item);\n            }\n            else {\n                wrong.Add(item);\n
    \           }\n        }\n        foreach (var item in game) {\n            if
    (item == max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvue3v3jb.cs(123,28): error CS1026: ) expected

    /tmp/tmpvue3v3jb.cs(123,28): error CS1525: Invalid expression term ''}''

    /tmp/tmpvue3v3jb.cs(123,28): error CS1002: ; expected

    /tmp/tmpvue3v3jb.cs(125,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvue3v3jb.cs(132,2): error CS1513: } expected

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n            difference = Math.Abs(guess
    - score);\n            result.Add(difference);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf2qhq1gl.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpf2qhq1gl.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct;\n        bool
    found;\n        bool found2;\n        bool found3;\n        bool found4;\n        bool
    found5;\n        bool found6;\n        bool found7;\n        bool found8;\n        bool
    found9;\n        bool found10;\n        bool found11;\n        bool found12;\n
    \       bool found13;\n        bool found14;\n        bool found15;\n        bool
    found16;\n        bool found17;\n        bool found18;\n        bool found19;\n
    \       bool found20;\n        bool found21;\n        bool found22;\n        bool
    found23;\n        bool found24;\n        bool found25;\n        bool found26;\n
    \       bool found27;\n        bool found28;\n        bool found29;\n        bool
    found30;\n        bool found31;\n        bool found32;\n        bool found33;\n
    \       bool found34;\n        bool found35;\n        bool found36;\n        bool
    found37;\n        bool found38;\n        bool found39;\n        bool found40;\n
    \       bool found41;\n        bool found42;\n        bool found43;\n        bool
    found44;\n        bool found45;\n        bool found46;\n        bool found47;\n
    \       bool found48;\n        bool found49;\n        bool found50;\n        bool
    found51;\n        bool found52;\n        bool found53;\n        bool found54;\n
    \       bool found55;\n        bool found56;\n        bool found57;\n        bool
    found58;\n        bool found59;\n        bool found60;\n        bool found61;\n
    \       bool found62;\n        bool found63;\n        bool found64;\n        bool
    found65;\n        bool found66;\n        bool found67;\n        bool found68;\n
    \       bool found69;\n        bool found70;\n        bool found71;\n        bool
    found72;\n        bool found73;\n        bool found74;\n        bool found75;\n
    \       bool found76;\n        bool found77;\n        bool found78;\n        bool
    found79;\n        bool found80;\n        bool found81;\n        bool found82;\n
    \       bool found83;\n        bool found84;\n\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4lzt8pej.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4lzt8pej.cs(23,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(24,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(25,14): warning CS0168: The variable ''correct'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(26,14): warning CS0168: The variable ''found'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(27,14): warning CS0168: The variable ''found2'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(28,14): warning CS0168: The variable ''found3'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(29,14): warning CS0168: The variable ''found4'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(30,14): warning CS0168: The variable ''found5'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(31,14): warning CS0168: The variable ''found6'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(32,14): warning CS0168: The variable ''found7'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(33,14): warning CS0168: The variable ''found8'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(34,14): warning CS0168: The variable ''found9'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(35,14): warning CS0168: The variable ''found10'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(36,14): warning CS0168: The variable ''found11'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(37,14): warning CS0168: The variable ''found12'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(38,14): warning CS0168: The variable ''found13'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(39,14): warning CS0168: The variable ''found14'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(40,14): warning CS0168: The variable ''found15'' is declared
    but never used

    /tmp/tmp4lzt8pej.cs(41,14): warning CS0168: The '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    correct = new List<long>();\n        var wrong = new List<long>();\n        var
    gameScores = new List<long>();\n        var guessScores = new List<long>();\n
    \       var gameGuesses = new List<long>();\n        var guessGuesses = new List<long>();\n
    \       var gameScore = 0;\n        var guessScore = 0;\n        var gameGuess
    = 0;\n        var guessGuess = 0;\n        var gameScoreDiff = 0;\n        var
    guessScoreDiff = 0;\n        var gameGuessDiff = 0;\n        var guessGuessDiff
    = 0;\n        var gameScoreDiffDiff = 0;\n        var guessScoreDiffDiff = 0;\n
    \       var gameGuessDiffDiff = 0;\n        var guessGuessDiffDiff = 0;\n        var
    gameScoreDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiff = 0;\n        var
    gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiffDiff = 0;\n        var
    gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff = 0;\n
    \       var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiffDiff = 0;\n
    \       var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiffDiff
    = 0;\n        var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiffDiff
    = 0;\n        var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiff =
    0;\n        var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiff =
    0;\n        var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiff =
    0;\n        var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiff =
    0;\n        var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiff =
    0;\n        var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff = 0;\n        var guessGuessDiffDiff =
    0;\n        var gameScoreDiffDiffDiffDiff = 0;\n        var guessScoreDiffDiffDiffDiff
    = 0;\n        var gameGuessDiffDiffDiff\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsobq0vb8.cs(83,34): error CS1002: ; expected

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code goes here\n        List<long>
    result = new List<long>(game.Count);\n        long score = 0;\n        long guess
    = 0;\n        long diff = 0;\n        foreach (var item in game) {\n            score
    += item;\n        }\n        foreach (var item in guess) {\n            guess
    += item;\n        }\n        diff = score - guess;\n        if (diff < 0) {\n
    \           foreach (var item in game) {\n                result += item;\n            }\n
    \       }\n        else {\n            foreach (var item in guess) {\n                result
    += item;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6vmx8psk.cs(25,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6vmx8psk.cs(30,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp6vmx8psk.cs(36,17): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''List<long>'' and ''long''

    /tmp/tmp6vmx8psk.cs(40,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       for (int i = 0; i < game.Count; i++) {\n            score = game[i];\n
    \           guess = guess[i];\n            correct = guess == score;\n            diff
    = correct ? 0 : Math.Abs(guess - score);\n            result[i] = diff;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppr2ynxsu.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmppr2ynxsu.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmppr2ynxsu.cs(29,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        for (int i = 0; i < game.Count;
    i++) {\n            score = game[i];\n            guess = guess[i];\n            if
    (guess == score) {\n                result[i] = 0;\n            } else {\n                result[i]
    = Math.Abs(guess - score);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphgvlbubv.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphgvlbubv.cs(27,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmphgvlbubv.cs(27,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code goes here\n        List<long>
    result = new List<long>();\n        long score = 0;\n        long guess = 0;\n
    \       long difference = 0;\n        foreach (var item in game) {\n            score
    = item;\n            foreach (var item2 in guess) {\n                guess = item2;\n
    \               difference = Math.Abs(guess - score);\n                if (difference
    == 0) {\n                    result.Add(0);\n                } else {\n                    result.Add(difference);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgugurq51.cs(25,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgugurq51.cs(29,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - score);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3j2xove.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n
    \       foreach (var item in game) {\n            guess = item.CompareTo(guess[game.IndexOf(item)]);\n
    \           if (guess == 0) {\n                difference = item.CompareTo(score);\n
    \           } else {\n                difference = guess - score;\n            }\n
    \           result.Add(difference);\n            score = item;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxwyoztfc.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpxwyoztfc.cs(27,36): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score;\n        long guess;\n        long diff;\n        bool correct;\n        bool
    correctGuess;\n        bool correctScore;\n        bool correctGuessScore;\n        bool
    correctGuessScoreDiff;\n        bool correctGuessScoreDiffDiff;\n        bool
    correctGuessScoreDiffDiffDiff;\n        bool correctGuessScoreDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiff;\n        bool correctGuessScoreDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiff;\n        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n        bool
    correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n        bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScoreDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff;\n
    \       bool correctGuessScore\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps6acbzs0.cs(54,31): error CS1002: ; expected

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long
    diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6
    = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n
    \       long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n
    \       long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n
    \       long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n
    \       long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n
    \       long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n
    \       long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n
    \       long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n
    \       long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n
    \       long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n
    \       long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n
    \       long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n
    \       long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n
    \       long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n
    \       long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n
    \       long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n
    \       long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n
    \       long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n
    \       long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n
    \       long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n
    \       long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n
    \       long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n
    \       long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n
    \       long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n
    \       long diff82 = 0;\n        long diff83 = 0;\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpty3odw9l.cs(23,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(24,14): warning CS0219: The variable ''diff'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(25,14): warning CS0219: The variable ''diff2'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(26,14): warning CS0219: The variable ''diff3'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(27,14): warning CS0219: The variable ''diff4'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(28,14): warning CS0219: The variable ''diff5'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(29,14): warning CS0219: The variable ''diff6'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(30,14): warning CS0219: The variable ''diff7'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(31,14): warning CS0219: The variable ''diff8'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(32,14): warning CS0219: The variable ''diff9'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(33,14): warning CS0219: The variable ''diff10'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(34,14): warning CS0219: The variable ''diff11'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(35,14): warning CS0219: The variable ''diff12'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(36,14): warning CS0219: The variable ''diff13'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(37,14): warning CS0219: The variable ''diff14'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(38,14): warning CS0219: The variable ''diff15'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(39,14): warning CS0219: The variable ''diff16'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(40,14): warning CS0219: The variable ''diff17'' is assigned
    but its value is never used

    /tmp/tmpty3odw9l.cs(41,1'
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>
    result = new List<long>(game.Count);\n        foreach (long g in game) {\n            long
    g2 = g;\n            int i = 0;\n            foreach (long g in guess) {\n                if
    (g != g2) {\n                    g2 = g;\n                    i++;\n                }\n
    \           }\n            result.Add(i);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4z6471pj.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += g - score;\n            }\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp994b4kzb.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score = game.ElementAt(guess);\n            difference
    = guess - score;\n            result.Add(difference);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2kb6eyl9.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp2kb6eyl9.cs(26,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += g - score;\n            }\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp994b4kzb.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n            difference += Math.Abs(guess
    - score);\n        }\n        foreach (long guess in guess) {\n            result.Add(Math.Abs(guess
    - score));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiuo2qiv4.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiuo2qiv4.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpiuo2qiv4.cs(29,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            var diff = game[i]
    - guess[i];\n            if (diff > 0) {\n                result.Add(diff);\n
    \           } else if (diff < 0) {\n                result.Add(-diff);\n            }
    else {\n                result.Add(0);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04b0be586c8644ae8d9bce02b474b884>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04b0be586c8644ae8d9bce02b474b884>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            var guess = guess.Where(x =>
    x == item).Count();\n            result.Add(guess - item);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2zxiv6_g.cs(24,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp2zxiv6_g.cs(24,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    /tmp/tmp2zxiv6_g.cs(24,25): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n
    \       bool correct = false;\n        foreach (long g in game) {\n            guess
    = guess\n                .Where(x => g == x)\n                .FirstOrDefault();\n
    \           if (guess == null) {\n                difference = g.CompareTo(score);\n
    \           } else {\n                difference = g.CompareTo(guess);\n            }\n
    \           if (difference < 0) {\n                result.Add(difference);\n                correct
    = false;\n            } else if (difference > 0) {\n                result.Add(difference);\n
    \               correct = true;\n            } else {\n                result.Add(0);\n
    \               correct = false;\n            }\n            score += g;\n        }\n
    \       if (correct) {\n            return result;\n        } else {\n            return
    result.Select(x => Math.Abs(x)).ToList();\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe2do2i90.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpe2do2i90.cs(29,18): error CS1061: ''long'' does not contain a definition
    for ''Where'' and no accessible extension method ''Where'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpe2do2i90.cs(31,17): warning CS0472: The result of the expression is always
    ''false'' since a value of type ''long'' is never equal to ''null'' of type ''long?''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        int i;\n
    \       int j;\n        int k;\n        bool correct;\n        bool found;\n        bool
    found2;\n        bool found3;\n        bool found4;\n        bool found5;\n        bool
    found6;\n        bool found7;\n        bool found8;\n        bool found9;\n        bool
    found10;\n        bool found11;\n        bool found12;\n        bool found13;\n
    \       bool found14;\n        bool found15;\n        bool found16;\n        bool
    found17;\n        bool found18;\n        bool found19;\n        bool found20;\n
    \       bool found21;\n        bool found22;\n        bool found23;\n        bool
    found24;\n        bool found25;\n        bool found26;\n        bool found27;\n
    \       bool found28;\n        bool found29;\n        bool found30;\n        bool
    found31;\n        bool found32;\n        bool found33;\n        bool found34;\n
    \       bool found35;\n        bool found36;\n        bool found37;\n        bool
    found38;\n        bool found39;\n        bool found40;\n        bool found41;\n
    \       bool found42;\n        bool found43;\n        bool found44;\n        bool
    found45;\n        bool found46;\n        bool found47;\n        bool found48;\n
    \       bool found49;\n        bool found50;\n        bool found51;\n        bool
    found52;\n        bool found53;\n        bool found54;\n        bool found55;\n
    \       bool found56;\n        bool found57;\n        bool found58;\n        bool
    found59;\n        bool found60;\n        bool found61;\n        bool found62;\n
    \       bool found63;\n        bool found64;\n        bool found65;\n        bool
    found66;\n        bool found67;\n        bool found68;\n        bool found69;\n
    \       bool found70;\n        bool found71;\n        bool found72;\n        bool
    found73;\n        bool found74;\n        bool found75;\n        bool found76;\n
    \       bool found77;\n        bool found78;\n        bool found79;\n        bool
    found80;\n        bool found81;\n        bool found\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphkx119lq.cs(111,19): error CS1002: ; expected

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    scores = new List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n
    \       foreach (var score in game) {\n            scores.Add(score);\n        }\n
    \       foreach (var guess in guess) {\n            guesses.Add(guess);\n        }\n
    \       foreach (var guess in guesses) {\n            var difference = guess -
    scores;\n            if (difference < 0) {\n                result.Add(difference);\n
    \           }\n            else {\n                result.Add(0);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_g9bgpt.cs(28,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpd_g9bgpt.cs(31,22): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpd_g9bgpt.cs(32,30): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff = 0;\n        foreach (var g in guess) {\n            diff =
    g - game[game.IndexOf(g)];\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x0002c] in <eaa5bb522ddf4a46bdb1a80d8f5ac805>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <eaa5bb522ddf4a46bdb1a80d8f5ac805>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x0002c] in <eaa5bb522ddf4a46bdb1a80d8f5ac805>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <eaa5bb522ddf4a46bdb1a80d8f5ac805>:0
    \n"
  stdout: ''
  timestamp: 1659797607
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        for (int i = 0; i < game.Count;
    i++) {\n            score = game[i];\n            diff = guess[i] - score;\n            if
    (diff < 0) {\n                diff *= -1;\n            }\n            result.Add(diff);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786bede635034773a62fc4641a684fed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786bede635034773a62fc4641a684fed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        foreach (var item in
    game) {\n            if (item == guess[guess]) {\n                score++;\n            }\n
    \           else {\n                guess = item;\n                score = Math.Abs(item
    - guess[guess]);\n            }\n            result.Add(score);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6a140d1k.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6a140d1k.cs(26,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6a140d1k.cs(31,41): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       var correct = game.Zip(guess, (a, b) => a == b).ToList();\n        foreach
    (var pair in correct) {\n            result.Add(pair.Value ? 0L : Math.Abs(pair.Value
    - game[pair.Index]));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwmedzje1.cs(25,29): error CS1061: ''bool'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''bool'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwmedzje1.cs(25,56): error CS1061: ''bool'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''bool'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwmedzje1.cs(25,74): error CS1061: ''bool'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''bool'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        long diff2 = 0;\n        foreach
    (long g in game) {\n            score += g;\n            foreach (long g in guess)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in guess) {\n            score -= g;\n            foreach (long g in game)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in game) {\n            score += g;\n            foreach (long g in guess)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in guess) {\n            score -= g;\n            foreach (long g in game)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in game) {\n            score += g;\n            foreach (long g in guess)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in guess) {\n            score -= g;\n            foreach (long g in game)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in game) {\n            score += g;\n            foreach (long g in guess)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in guess) {\n            score -= g;\n            foreach (long g in game)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in game) {\n            score += g;\n            foreach (long g in guess)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n            diff2 = 0;\n        }\n        foreach
    (long g in guess) {\n            score -= g;\n            foreach (long g in game)
    {\n                diff2 += g - g;\n                diff2 += g;\n            }\n
    \           diff = diff2;\n\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsaqkw_hd.cs(116,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpsaqkw_hd.cs(123,2): error CS1513: } expected

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        long diffAbs;\n
    \       bool correct;\n        bool found;\n        bool found2;\n        bool
    found3;\n        bool found4;\n        bool found5;\n        bool found6;\n        bool
    found7;\n        bool found8;\n        bool found9;\n        bool found10;\n        bool
    found11;\n        bool found12;\n        bool found13;\n        bool found14;\n
    \       bool found15;\n        bool found16;\n        bool found17;\n        bool
    found18;\n        bool found19;\n        bool found20;\n        bool found21;\n
    \       bool found22;\n        bool found23;\n        bool found24;\n        bool
    found25;\n        bool found26;\n        bool found27;\n        bool found28;\n
    \       bool found29;\n        bool found30;\n        bool found31;\n        bool
    found32;\n        bool found33;\n        bool found34;\n        bool found35;\n
    \       bool found36;\n        bool found37;\n        bool found38;\n        bool
    found39;\n        bool found40;\n        bool found41;\n        bool found42;\n
    \       bool found43;\n        bool found44;\n        bool found45;\n        bool
    found46;\n        bool found47;\n        bool found48;\n        bool found49;\n
    \       bool found50;\n        bool found51;\n        bool found52;\n        bool
    found53;\n        bool found54;\n        bool found55;\n        bool found56;\n
    \       bool found57;\n        bool found58;\n        bool found59;\n        bool
    found60;\n        bool found61;\n        bool found62;\n        bool found63;\n
    \       bool found64;\n        bool found65;\n        bool found66;\n        bool
    found67;\n        bool found68;\n        bool found69;\n        bool found70;\n
    \       bool found71;\n        bool found72;\n        bool found73;\n        bool
    found74;\n        bool found75;\n        bool found76;\n        bool found77;\n
    \       bool found78;\n        bool found79;\n        bool found80;\n        bool
    found81;\n        bool found82;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt37d6ci0.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpt37d6ci0.cs(23,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(24,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(25,14): warning CS0168: The variable ''diff'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(26,14): warning CS0168: The variable ''diffAbs'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(27,14): warning CS0168: The variable ''correct'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(28,14): warning CS0168: The variable ''found'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(29,14): warning CS0168: The variable ''found2'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(30,14): warning CS0168: The variable ''found3'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(31,14): warning CS0168: The variable ''found4'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(32,14): warning CS0168: The variable ''found5'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(33,14): warning CS0168: The variable ''found6'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(34,14): warning CS0168: The variable ''found7'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(35,14): warning CS0168: The variable ''found8'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(36,14): warning CS0168: The variable ''found9'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(37,14): warning CS0168: The variable ''found10'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(38,14): warning CS0168: The variable ''found11'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(39,14): warning CS0168: The variable ''found12'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(40,14): warning CS0168: The variable ''found13'' is declared
    but never used

    /tmp/tmpt37d6ci0.cs(41,14): warning CS0168: The var'
  timestamp: 1659797607
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    scores = new List<long>();\n        var guesses = new List<long>();\n        foreach
    (var g in game) {\n            scores.Add(g);\n        }\n        foreach (var
    g in guess) {\n            guesses.Add(g);\n        }\n        var scoreCount
    = scores.Count;\n        var guesseCount = guesses.Count;\n        var scoreIndex
    = 0;\n        var guesseIndex = 0;\n        while (scoreIndex < scoreCount &&
    guesseIndex < guesseCount) {\n            var scoreValue = scores[scoreIndex];\n
    \           var guesseValue = guesses[guesseIndex];\n            if (scoreValue
    == guesseValue) {\n                scoreIndex++;\n                guesseIndex++;\n
    \           }\n            else if (scoreValue < guesseValue) {\n                scoreIndex++;\n
    \           }\n            else {\n                guesseIndex++;\n            }\n
    \           result.Add(Math.Abs(scoreValue - guesseValue));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4720a8a113554e9aa17ae43fcdf4f506>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4720a8a113554e9aa17ae43fcdf4f506>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>
    result = new List<long>(game.Count);\n        foreach (long score in game) {\n
    \           long diff = Math.Abs(guess - score);\n            if (diff == 0)\n
    \               result.Add(0);\n            else\n                result.Add(diff);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprr_zvap4.cs(25,34): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''long''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long guess = 0;\n        foreach (long i in game) {\n            score
    += i;\n        }\n        foreach (long i in guess) {\n            guess += i;\n
    \       }\n        if (guess == score) {\n            result.Add(0);\n        }
    else {\n            result.Add(Math.Abs(score - guess));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2y7jq3tu.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp2y7jq3tu.cs(28,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>
    result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;
    i++) {\n            long score = game[i];\n            long guess = guess[i];\n
    \           if (guess == score) {\n                result[i] = 0;\n            }
    else {\n                result[i] = Math.Abs(guess - score);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp23lfevup.cs(26,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp23lfevup.cs(26,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp23lfevup.cs(26,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n            difference += Math.Abs(guess
    - score);\n        }\n        if (difference == 0) {\n            result.Clear();\n
    \       }\n        else {\n            result.AddRange(guess.Select(x => Math.Abs(x
    - score)));\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoywtov_2.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpoywtov_2.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n            difference = Math.Abs(guess
    - score);\n            result.Add(difference);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf2qhq1gl.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpf2qhq1gl.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct
    = false;\n        foreach (var item in game) {\n            score = item;\n            guess
    = guess[game.IndexOf(item)]; // this line is what makes this work\n            diff
    = guess - score;\n            if (diff < 0) {\n                diff = -diff;\n
    \           }\n            result.Add(diff);\n            if (diff == 0) {\n                correct
    = true;\n            }\n        }\n        if (correct) {\n            return
    result;\n        }\n        else {\n            return result.Select(x => Math.Abs(x)).ToList();\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprvuwza9x.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmprvuwza9x.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmprvuwza9x.cs(29,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        foreach (long score in game) {\n            total
    += score;\n        }\n        foreach (long guess in guess) {\n            total
    -= guess;\n        }\n        if (total == 0) {\n            return result;\n
    \       }\n        long totalDiff = 0;\n        foreach (long score in game) {\n
    \           totalDiff += Math.Abs(score - total);\n        }\n        foreach
    (long guess in guess) {\n            totalDiff -= Math.Abs(guess - total);\n        }\n
    \       result.AddRange(Enumerable.Repeat(totalDiff, guess.Count).Select(x =>
    Math.Abs(x)));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqwvbh023.cs(27,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqwvbh023.cs(37,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        long maxScore = game.Max();\n
    \       long maxGuess = guess.Max();\n        long minScore = game.Min();\n        long
    minGuess = guess.Min();\n        bool isCorrect = true;\n        foreach (long
    guess in guess) {\n            if (guess > maxGuess || guess < minGuess) {\n                isCorrect
    = false;\n                break;\n            }\n            if (guess == maxGuess)
    {\n                score += maxScore;\n            } else if (guess == minGuess)
    {\n                score -= maxScore;\n            } else {\n                score
    += guess - game[guess];\n            }\n            diff += Math.Abs(guess - game[guess]);\n
    \       }\n        foreach (long game in game) {\n            if (game > maxScore
    || game < minScore) {\n                isCorrect = false;\n                break;\n
    \           }\n            if (game == maxScore) {\n                score += maxScore;\n
    \           } else if (game == minScore) {\n                score -= maxScore;\n
    \           } else {\n                score += game - guess;\n            }\n
    \           diff += Math.Abs(game - guess);\n        }\n        if (isCorrect)
    {\n            result.Add(0);\n        } else {\n            result.Add(diff);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdxu841nu.cs(30,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpdxu841nu.cs(40,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdxu841nu.cs(42,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdxu841nu.cs(44,23): error CS0136: A local or parameter named ''game''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpdxu841nu.cs(54,26): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    /tmp/tmpdxu841nu.cs(56,30): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            foreach (long g in guess) {\n                if (g == g) {\n                    score++;\n
    \               } else {\n                    diff = g - score;\n                }\n
    \           }\n            result.Add(diff);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr2_q6jaa.cs(26,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpr2_q6jaa.cs(27,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659797607
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var item in game) {\n            var diff = item - guess[game.IndexOf(item)];
    // the difference between the score and the guess, if they were correct\n            result.Add(diff
    < 0 ? diff : -diff);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97f69f24ebc947b8a480cdb3228ab811>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97f69f24ebc947b8a480cdb3228ab811>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797608
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            var diff = item - guess[game.IndexOf(item)];
    // the absolute difference between the guess and the score\n            if (diff
    > 0) {\n                result.Add(diff);\n            }\n            else if
    (diff < 0) {\n                result.Add(-diff);\n            }\n            else
    {\n                result.Add(0L);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea0a147a0e294315be73ff532f729b75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea0a147a0e294315be73ff532f729b75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797608
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        foreach (var g in game) {\n            total
    += g;\n        }\n        foreach (var g in guess) {\n            total -= g;\n
    \       }\n        foreach (var g in guess) {\n            long diff = g - total;\n
    \           result.Add(diff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d21b9088618544658cd6980fe793a43a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d21b9088618544658cd6980fe793a43a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       foreach (var g in guess) {\n            long diff = Math.Abs(g - game[game.IndexOf(g)]);\n
    \           result.Add(diff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00029] in <ea00bf6f3bbd4734ae351f9cc82b9bbf>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <ea00bf6f3bbd4734ae351f9cc82b9bbf>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00029] in <ea00bf6f3bbd4734ae351f9cc82b9bbf>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <ea00bf6f3bbd4734ae351f9cc82b9bbf>:0
    \n"
  stdout: ''
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - g);\n            }\n        }\n        foreach (long g in guess)
    {\n            if (g == score) {\n                result.Add(0);\n            }
    else {\n                result.Add(diff);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq4sc_cc1.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        for (int i = 0; i < game.Count;
    i++) {\n            score = game[i];\n            guess = guess[i];\n            if
    (guess == score) {\n                result[i] = 0;\n            } else {\n                result[i]
    = Math.Abs(guess - score);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphgvlbubv.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphgvlbubv.cs(27,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmphgvlbubv.cs(27,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n            difference = Math.Abs(guess
    - score);\n            result.Add(difference);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf2qhq1gl.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpf2qhq1gl.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797607
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            long diff = game[i]
    - guess[i];\n            if (diff > 0) {\n                result.Add(diff);\n
    \           } else {\n                result.Add(-diff);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5e06dbe2571499fb01e340c5d4a209e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5e06dbe2571499fb01e340c5d4a209e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797608
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            long diff = game[i]
    - guess[i];\n            if (diff > 0) {\n                result.Add(diff);\n
    \           }\n            else {\n                result.Add(-diff);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9abfa3d6d904c86813560a4c8d7d742>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9abfa3d6d904c86813560a4c8d7d742>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n
    \       foreach (var item in game) {\n            guess = item.CompareTo(guess[0]);\n
    \           if (guess == 0) {\n                difference = 0;\n            }
    else {\n                difference = guess - item.CompareTo(guess[0]);\n            }\n
    \           result.Add(difference);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp13q_m3tc.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp13q_m3tc.cs(27,36): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp13q_m3tc.cs(31,53): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp13q_m3tc.cs(23,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code here\n        List<long> result
    = new List<long>();\n        long score = 0;\n        long difference = 0;\n        long
    scoreDifference = 0;\n        bool correct = false;\n        foreach (long g in
    game) {\n            scoreDifference = score - g;\n            if (guess == null)
    {\n                correct = false;\n            } else {\n                foreach
    (long g in guess) {\n                    difference = scoreDifference - g;\n                    if
    (difference < 0) {\n                        correct = false;\n                        break;\n
    \                   }\n                }\n            }\n            if (correct)
    {\n                result.Add(0);\n            } else {\n                result.Add(difference);\n
    \           }\n            score = g;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuqtltmya.cs(33,31): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       foreach (var item in game) {\n            score = item;\n            guess
    = guess[game.IndexOf(item)]; // guess\n            diff = guess - score;\n            correct
    = diff < 0; // correct\n            result.Add(correct ? diff : Math.Abs(diff));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy9rai2my.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpy9rai2my.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpy9rai2my.cs(29,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       foreach (var g in game) {\n            correct = false;\n            foreach
    (var g in guess) {\n                score = g;\n                guess = g;\n                diff
    = score - guess;\n                if (diff < 0) {\n                    diff =
    -diff;\n                }\n                if (diff == 0) {\n                    correct
    = true;\n                    break;\n                }\n            }\n            if
    (correct) {\n                result.Add(0);\n            } else {\n                result.Add(diff);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2xl82yz0.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp2xl82yz0.cs(29,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp2xl82yz0.cs(29,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp2xl82yz0.cs(29,31): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmp2xl82yz0.cs(44,28): error CS0165: Use of unassigned local variable ''diff''

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var g in game) {\n            var g2 = g;\n            foreach (var g in guess)
    {\n                var g2 = g;\n                var diff = Math.Abs(g - g2);\n
    \               if (diff > 0) {\n                    result.Add(diff);\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzl9mv_e6.cs(25,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpzl9mv_e6.cs(26,21): error CS0136: A local or parameter named ''g2'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797608
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        for (int i = 0; i < game.Count;
    i++) {\n            score = game[i];\n            diff = guess[i] - score;\n            if
    (diff < 0) {\n                diff *= -1;\n            }\n            result.Add(diff);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786bede635034773a62fc4641a684fed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786bede635034773a62fc4641a684fed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>
    result = new List<long>();\n        foreach (long g in game) {\n            long
    g2 = g;\n            long g3 = g;\n            long g4 = g;\n            long
    g5 = g;\n            long g6 = g;\n            long g7 = g;\n            long
    g8 = g;\n            long g9 = g;\n            long g10 = g;\n            long
    g11 = g;\n            long g12 = g;\n            long g13 = g;\n            long
    g14 = g;\n            long g15 = g;\n            long g16 = g;\n            long
    g17 = g;\n            long g18 = g;\n            long g19 = g;\n            long
    g20 = g;\n            long g21 = g;\n            long g22 = g;\n            long
    g23 = g;\n            long g24 = g;\n            long g25 = g;\n            long
    g26 = g;\n            long g27 = g;\n            long g28 = g;\n            long
    g29 = g;\n            long g30 = g;\n            long g31 = g;\n            long
    g32 = g;\n            long g33 = g;\n            long g34 = g;\n            long
    g35 = g;\n            long g36 = g;\n            long g37 = g;\n            long
    g38 = g;\n            long g39 = g;\n            long g40 = g;\n            long
    g41 = g;\n            long g42 = g;\n            long g43 = g;\n            long
    g44 = g;\n            long g45 = g;\n            long g46 = g;\n            long
    g47 = g;\n            long g48 = g;\n            long g49 = g;\n            long
    g50 = g;\n            long g51 = g;\n            long g52 = g;\n            long
    g53 = g;\n            long g54 = g;\n            long g55 = g;\n            long
    g56 = g;\n            long g57 = g;\n            long g58 = g;\n            long
    g59 = g;\n            long g60 = g;\n            long g61 = g;\n            long
    g62 = g;\n            long g63 = g;\n            long g64 = g;\n            long
    g65 = g;\n            long g66 = g;\n            long g67 = g;\n            long
    g68 = g;\n            long g69 = g;\n            \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpld0wfvct.cs(95,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpld0wfvct.cs(102,2): error CS1513: } expected

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - g);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ocxfn43.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff = 0;\n        foreach (long g in game) {\n            foreach
    (long g in guess) {\n                if (g == g) {\n                    diff =
    0;\n                } else {\n                    diff = g - g;\n                }\n
    \           }\n            result.Add(diff);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprrofbgsf.cs(25,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmprrofbgsf.cs(26,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct;\n        long
    diff;\n        foreach (var item in game) {\n            score = item;\n            guess
    = guess[game.IndexOf(item)]; // get the guess from the correct index\n            correct
    = guess == score; // is the guess correct?\n            diff = correct ? 0 : (guess
    - score); // is the difference correct?\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ckvihkp.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3ckvihkp.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp3ckvihkp.cs(29,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - score);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3j2xove.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        foreach (long score in game) {\n            total
    += score;\n        }\n        foreach (long guess in guess) {\n            total
    -= guess;\n        }\n        if (total == 0) {\n            return result;\n
    \       }\n        long totalDiff = 0;\n        foreach (long score in game) {\n
    \           totalDiff += Math.Abs(score - guess);\n        }\n        foreach
    (long guess in guess) {\n            totalDiff -= Math.Abs(guess - score);\n        }\n
    \       result.AddRange(Enumerable.Repeat(0, game.Count).Select(i => totalDiff
    / game.Count).ToList());\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphzhjshy6.cs(27,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphzhjshy6.cs(35,35): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    /tmp/tmphzhjshy6.cs(37,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphzhjshy6.cs(38,43): error CS0103: The name ''score'' does not exist in
    the current context

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    gameCount = game.Count;\n        var guessCount = guess.Count;\n        if (gameCount
    != guessCount) {\n            throw new ArgumentException(\"The lists must have
    the same number of elements.\");\n        }\n        var gameScores = new List<long>(gameCount);\n
    \       var guessScores = new List<long>(guessCount);\n        var gameGuesses
    = new List<long>(gameCount);\n        var guessGuesses = new List<long>(guessCount);\n
    \       var gameScoreIndex = 0;\n        var guessScoreIndex = 0;\n        var
    gameGuesseIndex = 0;\n        var guessGuesseIndex = 0;\n        while (gameScoreIndex
    < gameCount && guessScoreIndex < guessCount) {\n            var gameScore = game[gameScoreIndex];\n
    \           var guessScore = guess[guessScoreIndex];\n            if (gameScore
    == guessScore) {\n                gameScores.Add(gameScore);\n                guessScores.Add(guessScore);\n
    \               gameGuesses.Add(game[gameGuesseIndex]);\n                guessGuesses.Add(guess[guessGuesseIndex]);\n
    \               gameScoreIndex++;\n                guessScoreIndex++;\n                gameGuesseIndex++;\n
    \               guessGuesseIndex++;\n            } else if (gameScore < guessScore)
    {\n                gameScores.Add(gameScore);\n                guessScores.Add(guessScore);\n
    \               gameGuesses.Add(game[gameGuesseIndex]);\n                guessGuesses.Add(guess[guessGuesseIndex]);\n
    \               gameScoreIndex++;\n                guessScoreIndex++;\n                gameGuesseIndex++;\n
    \               guessGuesseIndex++;\n            } else {\n                gameScores.Add(guessScore);\n
    \               guessScores.Add(gameScore);\n                gameGuesses.Add(guess[guessGuesseIndex]);\n
    \               guessGuesses.Add(game[gameGuesseIndex]);\n                gameScoreIndex++;\n
    \               guessScoreIndex++;\n                gameGuesseIndex++;\n                guessGuesseIndex++;\n
    \           }\n        }\n        while (gameScoreIndex < gameCount) {\n            gameScores.Add(game[gameScoreIndex]);\n
    \           gameScoreIndex++;\n        }\n        while (guessScoreIndex < guessCount)
    {\n            guessScores.Add(guess[guessScoreIndex]);\n            guessScoreIndex++;\n
    \       }\n        while (gameGuesseIndex < gameCount) {\n            gameGuesses.Add(game[gameGuesseIndex]);\n
    \           gameGuesseIndex++;\n        }\n        while (guess\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph3n1cj2s.cs(80,21): error CS1026: ) expected

    /tmp/tmph3n1cj2s.cs(80,21): error CS1525: Invalid expression term ''}''

    /tmp/tmph3n1cj2s.cs(80,21): error CS1002: ; expected

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var g in guess) {\n            var diff = g - game[game.IndexOf(g)];\n
    \           if (diff > 0) {\n                result.Add(diff);\n            }\n
    \           else {\n                result.Add(-diff);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00029] in <61fbc3a36b774a2eb7949f56cac0d433>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <61fbc3a36b774a2eb7949f56cac0d433>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00029] in <61fbc3a36b774a2eb7949f56cac0d433>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <61fbc3a36b774a2eb7949f56cac0d433>:0
    \n"
  stdout: ''
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var g in guess) {\n            var diff = Math.Abs(g - game[game.IndexOf(g)]);\n
    \           result.Add(diff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00029] in <5819b04e883a438395c95f8f98a38ea2>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <5819b04e883a438395c95f8f98a38ea2>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00029] in <5819b04e883a438395c95f8f98a38ea2>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <5819b04e883a438395c95f8f98a38ea2>:0
    \n"
  stdout: ''
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var g in game) {\n            var guess = guess.FirstOrDefault(x => x == g);\n
    \           if (guess == g) {\n                result.Add(0);\n            } else
    {\n                result.Add(Math.Abs(guess - g));\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoc07vqbh.cs(24,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpoc07vqbh.cs(24,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long guess = 0;\n        long difference = 0;\n        bool
    correct = false;\n        bool gameOver = false;\n        bool gameOver2 = false;\n
    \       bool gameOver3 = false;\n        bool gameOver4 = false;\n        bool
    gameOver5 = false;\n        bool gameOver6 = false;\n        bool gameOver7 =
    false;\n        bool gameOver8 = false;\n        bool gameOver9 = false;\n        bool
    gameOver10 = false;\n        bool gameOver11 = false;\n        bool gameOver12
    = false;\n        bool gameOver13 = false;\n        bool gameOver14 = false;\n
    \       bool gameOver15 = false;\n        bool gameOver16 = false;\n        bool
    gameOver17 = false;\n        bool gameOver18 = false;\n        bool gameOver19
    = false;\n        bool gameOver20 = false;\n        bool gameOver21 = false;\n
    \       bool gameOver22 = false;\n        bool gameOver23 = false;\n        bool
    gameOver24 = false;\n        bool gameOver25 = false;\n        bool gameOver26
    = false;\n        bool gameOver27 = false;\n        bool gameOver28 = false;\n
    \       bool gameOver29 = false;\n        bool gameOver30 = false;\n        bool
    gameOver31 = false;\n        bool gameOver32 = false;\n        bool gameOver33
    = false;\n        bool gameOver34 = false;\n        bool gameOver35 = false;\n
    \       bool gameOver36 = false;\n        bool gameOver37 = false;\n        bool
    gameOver38 = false;\n        bool gameOver39 = false;\n        bool gameOver40
    = false;\n        bool gameOver41 = false;\n        bool gameOver42 = false;\n
    \       bool gameOver43 = false;\n        bool gameOver44 = false;\n        bool
    gameOver45 = false;\n        bool gameOver46 = false;\n        bool gameOver47
    = false;\n        bool gameOver48 = false;\n        bool gameOver49 = false;\n
    \       bool gameOver50 = false;\n        bool gameOver51 = false;\n        bool
    gameOver52 = false;\n        bool gameOver53 = false;\n        bool gameOver54
    = false;\n        bool gameOver55 = false;\n        bool gameOver56 = false;\n
    \       bool gameOver57 = false;\n        bool gameOver58 = false;\n        bool
    gameOver59 = false;\n        bool gameOver60 = false;\n        bool gameOver61
    = false;\n        bool gameOver62 = false;\n        bool gameOver63 = false;\n
    \       bool gameOver64 = false;\n        bool gameOver65 = false;\n        bool
    gameOver66 = false;\n        bool gameOver67 = false;\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7shvmaz4.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7shvmaz4.cs(23,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(24,14): warning CS0219: The variable ''guess'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(25,14): warning CS0219: The variable ''difference'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(26,14): warning CS0219: The variable ''correct'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(27,14): warning CS0219: The variable ''gameOver'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(28,14): warning CS0219: The variable ''gameOver2'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(29,14): warning CS0219: The variable ''gameOver3'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(30,14): warning CS0219: The variable ''gameOver4'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(31,14): warning CS0219: The variable ''gameOver5'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(32,14): warning CS0219: The variable ''gameOver6'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(33,14): warning CS0219: The variable ''gameOver7'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(34,14): warning CS0219: The variable ''gameOver8'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(35,14): warning CS0219: The variable ''gameOver9'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(36,14): warning CS0219: The variable ''gameOver10'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(37,14): warning CS0219: The variable ''gameOver11'' is assigned
    but its value is never used

    /tmp/tmp7shvmaz4.cs(38,14): warning CS0219: The variable ''gameOver12'' is assigned
    but its value is '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff = 0;\n        foreach (var g in guess) {\n            diff =
    g - game[game.IndexOf(g)];\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x0002c] in <eaa5bb522ddf4a46bdb1a80d8f5ac805>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <eaa5bb522ddf4a46bdb1a80d8f5ac805>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x0002c] in <eaa5bb522ddf4a46bdb1a80d8f5ac805>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <eaa5bb522ddf4a46bdb1a80d8f5ac805>:0
    \n"
  stdout: ''
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    scores = new List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n
    \       var gameScores = new List<long>(game.Count);\n        var guessesScores
    = new List<long>(guess.Count);\n        var gameGuesses = new List<long>(game.Count);\n
    \       var guessesGuesses = new List<long>(guess.Count);\n        var gameScore
    = game.Sum();\n        var guessesScore = guess.Sum();\n        var gameGuess
    = game.Sum(x => x);\n        var guessesGuess = guess.Sum(x => x);\n        var
    gameGuesses = game.Sum(x => x);\n        var guessesGuesses = guess.Sum(x => x);\n
    \       var gameScores = game.Select(x => x).ToList();\n        var guessesScores
    = guess.Select(x => x).ToList();\n        var gameGuesses = game.Select(x => x).ToList();\n
    \       var guessesGuesses = guess.Select(x => x).ToList();\n        var gameGuesses
    = game.Select(x => x).ToList();\n        var guessesGuesses = guess.Select(x =>
    x).ToList();\n        var gameScores = game.Select(x => x).ToList();\n        var
    guessesScores = guess.Select(x => x).ToList();\n        var gameGuesses = game.Select(x
    => x).ToList();\n        var guessesGuesses = guess.Select(x => x).ToList();\n
    \       var gameGuesses = game.Select(x => x).ToList();\n        var guessesGuesses
    = guess.Select(x => x).ToList();\n        var gameScores = game.Select(x => x).ToList();\n
    \       var guessesScores = guess.Select(x => x).ToList();\n        var gameGuesses
    = game.Select(x => x).ToList();\n        var guessesGuesses = guess.Select(x =>
    x).ToList();\n        var gameGuesses = game.Select(x => x).ToList();\n        var
    guessesGuesses = guess.Select(x => x).ToList();\n        var gameScores = game.Select(x
    => x).ToList();\n        var guessesScores = guess.Select(x => x).ToList();\n
    \       var gameGuesses = game.Select(x => x).ToList();\n        var guessesGuesses
    = guess.Select(x => x).ToList();\n        var \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmxgzvd_r.cs(57,12): error CS1002: ; expected

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        long totalGuess = 0;\n        long totalGuessed
    = 0;\n        long totalGuessedCorrectly = 0;\n        long totalGuessedIncorrectly
    = 0;\n        long totalGuessedCorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedCorrectlyIncorrectlyIncorrectly = 0;\n        long
    totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long
    totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long
    totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIn\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdgr3_7rl.cs(64,39): error CS1002: ; expected

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - score);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3j2xove.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var g in guess) {\n            var gDiff = Math.Abs(g - game[game.IndexOf(g)]);\n
    \           result.Add(gDiff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00023] in <8d57422a1cb848cf82866a82bde34636>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <8d57422a1cb848cf82866a82bde34636>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00023] in <8d57422a1cb848cf82866a82bde34636>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <8d57422a1cb848cf82866a82bde34636>:0
    \n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct;\n        long
    diff;\n        long diff2;\n        long diff3;\n        long diff4;\n        long
    diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n        long
    diff9;\n        long diff10;\n        long diff11;\n        long diff12;\n        long
    diff13;\n        long diff14;\n        long diff15;\n        long diff16;\n        long
    diff17;\n        long diff18;\n        long diff19;\n        long diff20;\n        long
    diff21;\n        long diff22;\n        long diff23;\n        long diff24;\n        long
    diff25;\n        long diff26;\n        long diff27;\n        long diff28;\n        long
    diff29;\n        long diff30;\n        long diff31;\n        long diff32;\n        long
    diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n        long
    diff37;\n        long diff38;\n        long diff39;\n        long diff40;\n        long
    diff41;\n        long diff42;\n        long diff43;\n        long diff44;\n        long
    diff45;\n        long diff46;\n        long diff47;\n        long diff48;\n        long
    diff49;\n        long diff50;\n        long diff51;\n        long diff52;\n        long
    diff53;\n        long diff54;\n        long diff55;\n        long diff56;\n        long
    diff57;\n        long diff58;\n        long diff59;\n        long diff60;\n        long
    diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n        long
    diff65;\n        long diff66;\n        long diff67;\n        long diff68;\n        long
    diff69;\n        long diff70;\n        long diff71;\n        long diff72;\n        long
    diff73;\n        long diff74;\n        long diff75;\n        long diff76;\n        long
    diff77;\n        long diff78;\n        long diff79;\n        long diff80;\n        long
    diff81;\n        long diff82;\n        long diff83;\n        long diff84;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjt7i7dxb.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpjt7i7dxb.cs(23,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(24,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(25,14): warning CS0168: The variable ''correct'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(26,14): warning CS0168: The variable ''diff'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(27,14): warning CS0168: The variable ''diff2'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(28,14): warning CS0168: The variable ''diff3'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(29,14): warning CS0168: The variable ''diff4'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(30,14): warning CS0168: The variable ''diff5'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(31,14): warning CS0168: The variable ''diff6'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(32,14): warning CS0168: The variable ''diff7'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(33,14): warning CS0168: The variable ''diff8'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(34,14): warning CS0168: The variable ''diff9'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(35,14): warning CS0168: The variable ''diff10'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(36,14): warning CS0168: The variable ''diff11'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(37,14): warning CS0168: The variable ''diff12'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(38,14): warning CS0168: The variable ''diff13'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(39,14): warning CS0168: The variable ''diff14'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(40,14): warning CS0168: The variable ''diff15'' is declared
    but never used

    /tmp/tmpjt7i7dxb.cs(41,14): warning CS0168: The variable ''diff1'
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long diff = 0;\n        bool correct = false;\n        foreach
    (long g in game) {\n            score += g;\n            foreach (long g in guess)
    {\n                diff += g - g;\n            }\n            if (diff < 0) {\n
    \               correct = false;\n            }\n            else {\n                correct
    = true;\n            }\n            result.Add(correct ? score : -diff);\n            diff
    = 0;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4_3g13sk.cs(28,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797608
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff = 0;\n        for (int i = 0; i < game.Count; i++) {\n            diff
    += Math.Abs(game[i] - guess[i]);\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ceb39a1e65fb4d85b6b019859f42eb43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ceb39a1e65fb4d85b6b019859f42eb43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code goes here\n        List<long>
    result = new List<long>(game.Count);\n        long score = 0;\n        long guess
    = 0;\n        foreach (var item in game) {\n            score += item;\n        }\n
    \       foreach (var item in guess) {\n            guess += item;\n        }\n
    \       foreach (var item in game) {\n            guess -= item;\n            result.Add(Math.Abs(guess
    - score));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgttkw0c5.cs(25,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgttkw0c5.cs(29,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n        foreach
    (var item in game) {\n            score = item;\n            foreach (var item2
    in guess) {\n                guess = item2;\n                diff = guess - score;\n
    \               if (diff < 0) {\n                    diff = -diff;\n                }\n
    \               result.Add(diff);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8rwc1h73.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8rwc1h73.cs(28,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        game.ForEach(x
    => result.Add(Math.Abs(x - guess.FirstOrDefault(y => y == x))).ToList());\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk750lgey.cs(23,86): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - g);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ocxfn43.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       foreach (var item in game) {\n            score = item;\n            guess
    = guess[game.IndexOf(item)]; // guess is index\n            diff = guess - score;\n
    \           correct = diff < 0; // diff is absolute difference\n            result.Add(correct
    ? diff : -diff);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuefi92bw.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpuefi92bw.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpuefi92bw.cs(29,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct = false;\n        foreach
    (var item in game) {\n            score = item;\n            guess = guess[game.IndexOf(item)];
    // this line is what makes the difference\n            if (guess == score) {\n
    \               correct = true;\n            }\n            result.Add(Math.Abs(guess
    - score));\n        }\n        if (!correct) {\n            foreach (var item
    in guess) {\n                guess = item;\n                result.Add(Math.Abs(guess
    - score));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5w51btn3.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp5w51btn3.cs(28,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp5w51btn3.cs(35,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp5w51btn3.cs(28,21): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmp5w51btn3.cs(37,45): error CS0165: Use of unassigned local variable ''score''

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct;\n        foreach
    (long g in game) {\n            score = 0;\n            correct = false;\n            foreach
    (long g in guess) {\n                guess = g;\n                if (g == g) {\n
    \                   score++;\n                    correct = true;\n                    break;\n
    \               }\n                else {\n                    score += Math.Abs(g
    - g);\n                }\n            }\n            result.Add(score);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv4z8m9as.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpv4z8m9as.cs(29,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpv4z8m9as.cs(29,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpv4z8m9as.cs(31,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpv4z8m9as.cs(29,32): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpv4z8m9as.cs(25,14): warning CS0219: The variable ''correct'' is assigned
    but its value is never used

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n        foreach
    (long g in game) {\n            score += g;\n        }\n        foreach (long
    g in guess) {\n            guess += g;\n        }\n        diff = score - guess;\n
    \       for (int i = 0; i < game.Count; i++) {\n            result.Add(diff <
    0 ? -diff : diff);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiiez8y7l.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiiez8y7l.cs(29,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797609
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        foreach
    (long score in game) {\n            long difference = score - guess[game.IndexOf(score)];\n
    \           if (difference < 0) {\n                difference = -difference;\n
    \           }\n            result.Add(difference);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f82f115052f1449f9ae7b08cc924cdd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f82f115052f1449f9ae7b08cc924cdd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797609
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        for (int i = 0; i < game.Count;
    i++) {\n            score += game[i];\n            diff += Math.Abs(guess[i] -
    score);\n            result.Add(diff);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97d07f781b6944e4a851a0187006a93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97d07f781b6944e4a851a0187006a93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       long total = 0;\n        long totalGuess = 0;\n        foreach (long g
    in game) {\n            total++;\n            totalGuess += g;\n        }\n        foreach
    (long g in guess) {\n            totalGuess += g;\n        }\n        foreach
    (long g in guess) {\n            guess = g;\n            score = totalGuess -
    total;\n            correct = total == guess;\n            diff = correct ? score
    : 0;\n            result.Add(diff);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg0vxj39m.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpg0vxj39m.cs(33,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpg0vxj39m.cs(36,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpg0vxj39m.cs(33,28): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        bool correct = false;\n
    \       foreach (long g in game) {\n            score += g;\n        }\n        foreach
    (long g in guess) {\n            guess += g;\n        }\n        if (score ==
    guess) {\n            correct = true;\n        }\n        if (correct) {\n            foreach
    (long g in game) {\n                result.Add(g);\n            }\n        }\n
    \       else {\n            foreach (long g in game) {\n                result.Add(Math.Abs(g
    - guess));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3c16vlzz.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3c16vlzz.cs(29,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long g
    in game) {\n            score += g;\n            foreach (long g in guess) {\n
    \               difference = Math.Abs(g - score);\n                if (difference
    == 0) {\n                    result.Add(0);\n                } else {\n                    result.Add(difference);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxor9mj2v.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       var differences = new List<long>(game.Count);\n        foreach (var g
    in guess) {\n            var difference = Math.Abs(g - game[game.IndexOf(g)]);\n
    \           result.Add(difference);\n            differences.Add(difference);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00035] in <53a82dd5d25e43e08e1e35c287d766b4>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <53a82dd5d25e43e08e1e35c287d766b4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00035] in <53a82dd5d25e43e08e1e35c287d766b4>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <53a82dd5d25e43e08e1e35c287d766b4>:0
    \n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score = score + guess;\n            difference = score
    - game[game.Count - 1];\n            if (difference < 0) {\n                difference
    = difference * -1;\n            }\n            result.Add(difference);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxvuwto4s.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       long scoreDiff;\n        long guessDiff;\n        bool scoreGuessed;\n
    \       bool guessGuessed;\n        bool scoreGuessedCorrectly;\n        bool
    guessGuessedCorrectly;\n        bool scoreGuessedIncorrectly;\n        bool guessGuessedIncorrectly;\n
    \       bool scoreGuessedIncorrectly2;\n        bool guessGuessedIncorrectly2;\n
    \       bool scoreGuessedIncorrectly3;\n        bool guessGuessedIncorrectly3;\n
    \       bool scoreGuessedIncorrectly4;\n        bool guessGuessedIncorrectly4;\n
    \       bool scoreGuessedIncorrectly5;\n        bool guessGuessedIncorrectly5;\n
    \       bool scoreGuessedIncorrectly6;\n        bool guessGuessedIncorrectly6;\n
    \       bool scoreGuessedIncorrectly7;\n        bool guessGuessedIncorrectly7;\n
    \       bool scoreGuessedIncorrectly8;\n        bool guessGuessedIncorrectly8;\n
    \       bool scoreGuessedIncorrectly9;\n        bool guessGuessedIncorrectly9;\n
    \       bool scoreGuessedIncorrectly10;\n        bool guessGuessedIncorrectly10;\n
    \       bool scoreGuessedIncorrectly11;\n        bool guessGuessedIncorrectly11;\n
    \       bool scoreGuessedIncorrectly12;\n        bool guessGuessedIncorrectly12;\n
    \       bool scoreGuessedIncorrectly13;\n        bool guessGuessedIncorrectly13;\n
    \       bool scoreGuessedIncorrectly14;\n        bool guessGuessedIncorrectly14;\n
    \       bool scoreGuessedIncorrectly15;\n        bool guessGuessedIncorrectly15;\n
    \       bool scoreGuessedIncorrectly16;\n        bool guessGuessedIncorrectly16;\n
    \       bool scoreGuessedIncorrectly17;\n        bool guessGuessedIncorrectly17;\n
    \       bool scoreGuessedIncorrectly18;\n        bool guessGuessedIncorrectly18;\n
    \       bool scoreGuessedIncorrectly19;\n        bool guessGuessedIncorrectly19;\n
    \       bool scoreGuessedIncorrectly20;\n        bool guessGuessedIncorrectly20;\n
    \       bool scoreGuessedIncorrectly21;\n        bool guessGuessedIncorrectly21;\n
    \       bool score\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn7gbwbzn.cs(75,19): error CS1002: ; expected

    '
  timestamp: 1659797608
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       foreach (var g in guess) {\n            long diff = g - game[game.IndexOf(g)];\n
    \           result.Add(diff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00029] in <6b0e2316ca12479bab87d451c39e9493>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <6b0e2316ca12479bab87d451c39e9493>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00029] in <6b0e2316ca12479bab87d451c39e9493>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <6b0e2316ca12479bab87d451c39e9493>:0
    \n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var g in guess) {\n            var difference = Math.Abs(g -
    game[game.IndexOf(g)]);\n            result.Add(difference);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00029] in <481da15f881942ee9cc8dabf926b0b72>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <481da15f881942ee9cc8dabf926b0b72>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00029] in <481da15f881942ee9cc8dabf926b0b72>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <481da15f881942ee9cc8dabf926b0b72>:0
    \n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (var g in game)
    {\n            score += g;\n            foreach (var g in guess) {\n                diff
    += g - score;\n            }\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9av1sf5m.cs(27,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797609
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        for (int i = 0; i < game.Count;
    i++) {\n            score = game[i];\n            diff = guess[i] - score;\n            if
    (diff > 0) {\n                result.Add(diff);\n            } else if (diff <
    0) {\n                result.Add(-diff);\n            } else {\n                result.Add(0);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd8c01e0aad4491c8fc7459ef1cd40e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd8c01e0aad4491c8fc7459ef1cd40e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff = 0;\n        foreach (long g in game) {\n            foreach
    (long g in guess) {\n                if (g == g) {\n                    result.Add(0);\n
    \               } else {\n                    diff = g - g;\n                    result.Add(diff);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc0y92u0g.cs(25,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpc0y92u0g.cs(26,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += g - score;\n            }\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp994b4kzb.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n        foreach
    (long g in game) {\n            score += g;\n        }\n        foreach (long
    g in guess) {\n            guess += g;\n        }\n        diff = score - guess;\n
    \       if (diff < 0) {\n            foreach (long g in game) {\n                result.Add(g
    - diff);\n            }\n        } else {\n            foreach (long g in guess)
    {\n                result.Add(diff - g);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiykc_k48.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiykc_k48.cs(29,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpiykc_k48.cs(38,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       for (int i = 0; i < game.Count; i++) {\n            score = game[i];\n
    \           guess = guess[i];\n            diff = guess - score;\n            correct
    = diff < 0L;\n            result.Add(correct ? diff : -diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6di_v1wu.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6di_v1wu.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp6di_v1wu.cs(29,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n            difference = Math.Abs(guess
    - score);\n            result.Add(difference);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf2qhq1gl.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpf2qhq1gl.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797607
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        long total2 = 0;\n        foreach (var g in game)
    {\n            total += g;\n        }\n        foreach (var g in guess) {\n            total2
    += g;\n        }\n        foreach (var g in guess) {\n            long diff =
    g - total;\n            long diff2 = g - total2;\n            if (diff != 0) {\n
    \               result.Add(diff);\n            }\n            if (diff2 != 0)
    {\n                result.Add(diff2);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc09f9c82fe94a459c6b3f429be467f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc09f9c82fe94a459c6b3f429be467f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n        }\n        foreach (long
    guess in guess) {\n            difference = Math.Abs(guess - score);\n            result.Add(difference);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx0g866qd.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpx0g866qd.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpx0g866qd.cs(28,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            int index = guess.IndexOf(item);\n
    \           if (index != -1) {\n                result.Add(0);\n            }
    else {\n                result.Add(Math.Abs(item - guess[index]));\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00043] in <dcc562d24bef454b995ae79ed78bc8e6>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <dcc562d24bef454b995ae79ed78bc8e6>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00043] in <dcc562d24bef454b995ae79ed78bc8e6>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <dcc562d24bef454b995ae79ed78bc8e6>:0
    \n"
  stdout: ''
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score += game[guess];\n            difference += Math.Abs(guess
    - score);\n        }\n        if (difference > 0) {\n            foreach (long
    guess in guess) {\n                result.Add(difference);\n            }\n        }
    else {\n            foreach (long guess in guess) {\n                result.Add(0);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5mr37gt4.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp5mr37gt4.cs(26,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5mr37gt4.cs(30,27): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp5mr37gt4.cs(34,27): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    scores = new List<long>();\n        var guesses = new List<long>();\n        foreach
    (var g in game) {\n            scores.Add(g);\n        }\n        foreach (var
    g in guess) {\n            guesses.Add(g);\n        }\n        var diffs = new
    List<long>();\n        foreach (var g in guesses) {\n            var diff = g
    - scores;\n            diffs.Add(diff);\n        }\n        foreach (var g in
    diffs) {\n            result.Add(g);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzlcy3jim.cs(33,24): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        long difference = 0;\n        foreach (long score
    in game) {\n            total += score;\n        }\n        foreach (long guess
    in guess) {\n            difference = Math.Abs(guess - total);\n            result.Add(difference);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf868_umt.cs(28,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        long diff2;\n
    \       long diff3;\n        long diff4;\n        long diff5;\n        long diff6;\n
    \       long diff7;\n        long diff8;\n        long diff9;\n        long diff10;\n
    \       long diff11;\n        long diff12;\n        long diff13;\n        long
    diff14;\n        long diff15;\n        long diff16;\n        long diff17;\n        long
    diff18;\n        long diff19;\n        long diff20;\n        long diff21;\n        long
    diff22;\n        long diff23;\n        long diff24;\n        long diff25;\n        long
    diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n        long
    diff30;\n        long diff31;\n        long diff32;\n        long diff33;\n        long
    diff34;\n        long diff35;\n        long diff36;\n        long diff37;\n        long
    diff38;\n        long diff39;\n        long diff40;\n        long diff41;\n        long
    diff42;\n        long diff43;\n        long diff44;\n        long diff45;\n        long
    diff46;\n        long diff47;\n        long diff48;\n        long diff49;\n        long
    diff50;\n        long diff51;\n        long diff52;\n        long diff53;\n        long
    diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n        long
    diff58;\n        long diff59;\n        long diff60;\n        long diff61;\n        long
    diff62;\n        long diff63;\n        long diff64;\n        long diff65;\n        long
    diff66;\n        long diff67;\n        long diff68;\n        long diff69;\n        long
    diff70;\n        long diff71;\n        long diff72;\n        long diff73;\n        long
    diff74;\n        long diff75;\n        long diff76;\n        long diff77;\n        long
    diff78;\n        long diff79;\n        long diff80;\n        long diff81;\n        long
    diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqo7p4zqx.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqo7p4zqx.cs(23,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(24,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(25,14): warning CS0168: The variable ''diff'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(26,14): warning CS0168: The variable ''diff2'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(27,14): warning CS0168: The variable ''diff3'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(28,14): warning CS0168: The variable ''diff4'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(29,14): warning CS0168: The variable ''diff5'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(30,14): warning CS0168: The variable ''diff6'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(31,14): warning CS0168: The variable ''diff7'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(32,14): warning CS0168: The variable ''diff8'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(33,14): warning CS0168: The variable ''diff9'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(34,14): warning CS0168: The variable ''diff10'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(35,14): warning CS0168: The variable ''diff11'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(36,14): warning CS0168: The variable ''diff12'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(37,14): warning CS0168: The variable ''diff13'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(38,14): warning CS0168: The variable ''diff14'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(39,14): warning CS0168: The variable ''diff15'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(40,14): warning CS0168: The variable ''diff16'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(41,14): warning CS0168: The variable ''diff17'
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - g);\n            }\n        }\n        foreach (long g in guess)
    {\n            diff += Math.Abs(g - score);\n        }\n        foreach (long
    g in game) {\n            result.Add(Math.Abs(g - score));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw5gc5uyp.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797609
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff = 0;\n        for (int i = 0; i < game.Count; i++) {\n            diff
    = game[i] - guess[i];\n            if (diff < 0) {\n                diff *= -1;\n
    \           }\n            result.Add(diff);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d31bfa64cec46a4b40e410399b6705a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d31bfa64cec46a4b40e410399b6705a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct;\n        for (int
    i = 0; i < game.Count; i++) {\n            score = game[i];\n            guess
    = guess[i];\n            correct = guess == score;\n            result.Add(correct
    ? 0 : Math.Abs(guess - score));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9utf9ok8.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9utf9ok8.cs(28,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp9utf9ok8.cs(28,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score;\n        long guess;\n        long difference;\n        bool correct;\n
    \       bool found;\n        bool found2;\n        bool found3;\n        bool
    found4;\n        bool found5;\n        bool found6;\n        bool found7;\n        bool
    found8;\n        bool found9;\n        bool found10;\n        bool found11;\n
    \       bool found12;\n        bool found13;\n        bool found14;\n        bool
    found15;\n        bool found16;\n        bool found17;\n        bool found18;\n
    \       bool found19;\n        bool found20;\n        bool found21;\n        bool
    found22;\n        bool found23;\n        bool found24;\n        bool found25;\n
    \       bool found26;\n        bool found27;\n        bool found28;\n        bool
    found29;\n        bool found30;\n        bool found31;\n        bool found32;\n
    \       bool found33;\n        bool found34;\n        bool found35;\n        bool
    found36;\n        bool found37;\n        bool found38;\n        bool found39;\n
    \       bool found40;\n        bool found41;\n        bool found42;\n        bool
    found43;\n        bool found44;\n        bool found45;\n        bool found46;\n
    \       bool found47;\n        bool found48;\n        bool found49;\n        bool
    found50;\n        bool found51;\n        bool found52;\n        bool found53;\n
    \       bool found54;\n        bool found55;\n        bool found56;\n        bool
    found57;\n        bool found58;\n        bool found59;\n        bool found60;\n
    \       bool found61;\n        bool found62;\n        bool found63;\n        bool
    found64;\n        bool found65;\n        bool found66;\n        bool found67;\n
    \       bool found68;\n        bool found69;\n        bool found70;\n        bool
    found71;\n        bool found72;\n        bool found73;\n        bool found74;\n
    \       bool found75;\n        bool found76;\n        bool found77;\n        bool
    found78;\n        bool found79;\n        bool found80;\n        bool found81;\n
    \       bool found82;\n        bool found83;\n        bool found84\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo9f25dqq.cs(110,21): error CS1002: ; expected

    '
  timestamp: 1659797609
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        for (int i = 0;
    i < game.Count; i++) {\n            if (game[i] == guess[i]) {\n                score++;\n
    \           }\n            else {\n                difference = Math.Abs(game[i]
    - guess[i]);\n                if (difference > 0) {\n                    result.Add(difference);\n
    \               }\n            }\n        }\n        if (score == game.Count)
    {\n            result.Add(0);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a37a73283d354129a269d4dd6d107ccb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a37a73283d354129a269d4dd6d107ccb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        bool correct = false;\n        foreach
    (var item in game) {\n            score = item;\n            guess = guess.FirstOrDefault();\n
    \           correct = correct || (guess == score);\n            result.Add(correct
    ? score : Math.Abs(guess - score));\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphc3kzv8c.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphc3kzv8c.cs(28,27): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmphc3kzv8c.cs(28,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - score);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3j2xove.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n
    \       foreach (long g in game) {\n            score += g;\n        }\n        foreach
    (long g in guess) {\n            guess += g;\n        }\n        difference =
    score - guess;\n        if (difference < 0) {\n            difference = -difference;\n
    \       }\n        for (int i = 0; i < game.Count; i++) {\n            result.Add(difference);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpab2hp4fu.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpab2hp4fu.cs(29,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long diff = 0;\n        bool correct = false;\n        foreach
    (long g in game) {\n            score += g;\n            foreach (long g in guess)
    {\n                diff += g - g;\n                if (g == g) {\n                    correct
    = true;\n                }\n            }\n        }\n        if (correct) {\n
    \           result.Add(0);\n        } else {\n            result.Add(diff);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7xf0v4kh.cs(28,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp7xf0v4kh.cs(30,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659797609
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n        bool
    correct = false;\n        foreach (var item in game) {\n            score += item;\n
    \       }\n        foreach (var item in guess) {\n            guess += item;\n
    \       }\n        diff = guess - score;\n        if (diff < 0) {\n            correct
    = true;\n        }\n        foreach (var item in guess) {\n            if (item
    == 0) {\n                result.Add(0);\n            } else {\n                result.Add(Math.Abs(item
    - diff));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb1thy_o8.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpb1thy_o8.cs(30,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpb1thy_o8.cs(37,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpb1thy_o8.cs(26,14): warning CS0219: The variable ''correct'' is assigned
    but its value is never used

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code goes here\n        List<long>
    result = new List<long>(game.Count);\n        long diff = 0;\n        foreach
    (long g in game) {\n            foreach (long g in guess) {\n                if
    (g == g) {\n                    result.Add(0);\n                } else {\n                    diff
    = g - g;\n                    result.Add(diff);\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7q23ltg0.cs(26,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp7q23ltg0.cs(27,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - score);\n            }\n            result.Add(diff);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3j2xove.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        long diff2;\n
    \       long diff3;\n        long diff4;\n        long diff5;\n        long diff6;\n
    \       long diff7;\n        long diff8;\n        long diff9;\n        long diff10;\n
    \       long diff11;\n        long diff12;\n        long diff13;\n        long
    diff14;\n        long diff15;\n        long diff16;\n        long diff17;\n        long
    diff18;\n        long diff19;\n        long diff20;\n        long diff21;\n        long
    diff22;\n        long diff23;\n        long diff24;\n        long diff25;\n        long
    diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n        long
    diff30;\n        long diff31;\n        long diff32;\n        long diff33;\n        long
    diff34;\n        long diff35;\n        long diff36;\n        long diff37;\n        long
    diff38;\n        long diff39;\n        long diff40;\n        long diff41;\n        long
    diff42;\n        long diff43;\n        long diff44;\n        long diff45;\n        long
    diff46;\n        long diff47;\n        long diff48;\n        long diff49;\n        long
    diff50;\n        long diff51;\n        long diff52;\n        long diff53;\n        long
    diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n        long
    diff58;\n        long diff59;\n        long diff60;\n        long diff61;\n        long
    diff62;\n        long diff63;\n        long diff64;\n        long diff65;\n        long
    diff66;\n        long diff67;\n        long diff68;\n        long diff69;\n        long
    diff70;\n        long diff71;\n        long diff72;\n        long diff73;\n        long
    diff74;\n        long diff75;\n        long diff76;\n        long diff77;\n        long
    diff78;\n        long diff79;\n        long diff80;\n        long diff81;\n        long
    diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqo7p4zqx.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqo7p4zqx.cs(23,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(24,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(25,14): warning CS0168: The variable ''diff'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(26,14): warning CS0168: The variable ''diff2'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(27,14): warning CS0168: The variable ''diff3'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(28,14): warning CS0168: The variable ''diff4'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(29,14): warning CS0168: The variable ''diff5'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(30,14): warning CS0168: The variable ''diff6'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(31,14): warning CS0168: The variable ''diff7'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(32,14): warning CS0168: The variable ''diff8'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(33,14): warning CS0168: The variable ''diff9'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(34,14): warning CS0168: The variable ''diff10'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(35,14): warning CS0168: The variable ''diff11'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(36,14): warning CS0168: The variable ''diff12'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(37,14): warning CS0168: The variable ''diff13'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(38,14): warning CS0168: The variable ''diff14'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(39,14): warning CS0168: The variable ''diff15'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(40,14): warning CS0168: The variable ''diff16'' is declared
    but never used

    /tmp/tmpqo7p4zqx.cs(41,14): warning CS0168: The variable ''diff17'
  timestamp: 1659797607
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            var difference = Math.Abs(item
    - guess[game.IndexOf(item)]);\n            result.Add(difference);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d87e9c99248646f7a5c78c81d268facb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d87e9c99248646f7a5c78c81d268facb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            int index = guess.FindIndex(x
    => x == item);\n            if (index >= 0) {\n                result.Add(0);\n
    \           } else {\n                result.Add(Math.Abs(item - guess[index]));\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00059] in <6ee4fb118a2141418a65b86a62194ad1>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <6ee4fb118a2141418a65b86a62194ad1>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00059] in <6ee4fb118a2141418a65b86a62194ad1>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <6ee4fb118a2141418a65b86a62194ad1>:0
    \n"
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long g
    in game) {\n            score += g;\n            foreach (long g in guess) {\n
    \               difference += g - g;\n            }\n        }\n        if (score
    == 0) {\n            foreach (long g in guess) {\n                result.Add(0);\n
    \           }\n        } else {\n            foreach (long g in guess) {\n                result.Add(difference);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxhbttiyo.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        for (int i = 0; i < game.Count;
    i++) {\n            score = game[i];\n            guess = guess[i];\n            result.Add(Math.Abs(guess
    - score));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdi4tv8qk.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpdi4tv8qk.cs(27,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpdi4tv8qk.cs(27,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797610
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        long totalGuess = 0;\n        foreach (long g
    in guess) {\n            total += g;\n            totalGuess += g;\n        }\n
    \       long totalDiff = total - totalGuess;\n        foreach (long g in guess)
    {\n            long diff = g - total;\n            if (diff < 0) {\n                diff
    *= -1;\n            }\n            total += diff;\n            totalGuess += diff;\n
    \           result.Add(diff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3de8cd0e415d4ee09341e9a0beb711ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3de8cd0e415d4ee09341e9a0beb711ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        for (int i = 0; i < game.Count;
    i++) {\n            score = game[i];\n            guess = guess[i];\n            if
    (guess == score) {\n                result[i] = 0;\n            } else {\n                result[i]
    = Math.Abs(guess - score);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphgvlbubv.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphgvlbubv.cs(27,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmphgvlbubv.cs(27,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797607
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code here\n        List<long> result
    = new List<long>(game.Count);\n        long score = 0;\n        long diff = 0;\n
    \       foreach (long g in game) {\n            score += g;\n            foreach
    (long g in guess) {\n                diff += Math.Abs(g - score);\n            }\n
    \           result.Add(diff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp5j0d_u6.cs(28,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n        foreach
    (var item in game) {\n            score += item;\n        }\n        foreach (var
    item in guess) {\n            guess += item;\n        }\n        diff = guess
    - score;\n        foreach (var item in game) {\n            result.Add(Math.Abs(item
    - diff));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa8nhunfb.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpa8nhunfb.cs(29,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    scores = new List<long>();\n        var guesses = new List<long>();\n        foreach
    (var item in game) {\n            scores.Add(item);\n        }\n        foreach
    (var item in guess) {\n            guesses.Add(item);\n        }\n        var
    scoreCount = scores.Count;\n        var guesseCount = guesses.Count;\n        var
    scoreSum = scores.Sum();\n        var guesseSum = guesses.Sum();\n        var
    scoreDiff = scoreSum - scoreCount;\n        var guesseDiff = guesseSum - guesseCount;\n
    \       var scoreDiffAbs = Math.Abs(scoreDiff);\n        var guesseDiffAbs = Math.Abs(guesseDiff);\n
    \       if (scoreCount != guesseCount) {\n            throw new Exception(\"The
    lists must have the same number of elements\");\n        }\n        if (scoreCount
    == 0) {\n            throw new Exception(\"The lists must have at least one element\");\n
    \       }\n        if (scoreSum == 0) {\n            throw new Exception(\"The
    lists must have at least one element\");\n        }\n        if (scoreDiffAbs
    == 0) {\n            throw new Exception(\"The lists must have at least one element\");\n
    \       }\n        if (guesseDiffAbs == 0) {\n            throw new Exception(\"The
    lists must have at least one element\");\n        }\n        if (scoreDiffAbs
    < guesseDiffAbs) {\n            throw new Exception(\"The lists must have at least
    one element\");\n        }\n        foreach (var item in scores) {\n            if
    (item == guesses[scores.IndexOf(item)]) {\n                result.Add(0);\n            }
    else {\n                result.Add(scoreDiffAbs);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07f7b3a5308b4ee9854fb017114ba333>:0
    \n\nUnhandled Exception:\nSystem.Exception: The lists must have at least one element\n
    \ at Problem.Compare (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00102] in <07f7b3a5308b4ee9854fb017114ba333>:0 \n  at Problem.Main (System.String[]
    args) [0x00068] in <07f7b3a5308b4ee9854fb017114ba333>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.Exception: The lists must have at least one element\n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00102] in <07f7b3a5308b4ee9854fb017114ba333>:0 \n  at Problem.Main (System.String[]
    args) [0x00068] in <07f7b3a5308b4ee9854fb017114ba333>:0 \n"
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        foreach (long g in game)
    {\n            score += g;\n        }\n        foreach (long g in guess) {\n            guess
    += g;\n        }\n        if (score == guess) {\n            foreach (long g in
    guess) {\n                result.Add(g);\n            }\n        } else {\n            foreach
    (long g in guess) {\n                result.Add(Math.Abs(g - score));\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb1o65id3.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpb1o65id3.cs(28,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpb1o65id3.cs(32,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpb1o65id3.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += g - score;\n            }\n            result.Add(diff);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp994b4kzb.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n
    \       foreach (var item in game) {\n            guess = item.CompareTo(guess[0]);\n
    \           score = item.CompareTo(score);\n            if (guess == 0) {\n                difference
    = 0;\n            } else {\n                difference = guess - score;\n            }\n
    \           result.Add(difference);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1til7nga.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp1til7nga.cs(27,36): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        int i =
    0;\n        while (i < game.Count && i < guess.Count) {\n            score = game[i];\n
    \           guess = guess[i];\n            diff = guess - score;\n            if
    (diff < 0) {\n                result.Add(diff);\n                i++;\n            }
    else if (diff > 0) {\n                result.Add(diff);\n                i++;\n
    \           } else {\n                result.Add(0);\n                i++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8w4rum60.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8w4rum60.cs(27,34): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmp8w4rum60.cs(29,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp8w4rum60.cs(27,38): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797610
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var g in game) {\n            var gDiff = Math.Abs(g - guess[game.IndexOf(g)]);\n
    \           result.Add(gDiff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8653a9738bfe4755b34dce70be6c75b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8653a9738bfe4755b34dce70be6c75b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797610
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var item in game) {\n            var guessedCorrectly = guess.Contains(item);\n
    \           var difference = Math.Abs(item - guess.FirstOrDefault(x => x == item));\n
    \           result.Add(difference + (guessedCorrectly ? 0L : difference));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f65f4cb38e84a8488ece2a349cf5143>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f65f4cb38e84a8488ece2a349cf5143>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797610
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var g in game) {\n            var gDiff = g.CompareTo(guess[0]);\n            if
    (gDiff != 0) {\n                result.Add(gDiff);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cc6c15bd4cb4a71b8f986e74da5e5bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cc6c15bd4cb4a71b8f986e74da5e5bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n        foreach
    (var item in game) {\n            score = item;\n            foreach (var item2
    in guess) {\n                guess = item2;\n                diff = guess - score;\n
    \               if (diff < 0) {\n                    result.Add(diff);\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ole8t83.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3ole8t83.cs(28,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797610
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long diff;\n        bool correct = true;\n        for (int i = 0; i <
    game.Count; i++) {\n            diff = game[i] - guess[i];\n            if (diff
    < 0) {\n                diff = -diff;\n                correct = false;\n            }\n
    \           result.Add(diff);\n        }\n        if (correct) {\n            return
    result;\n        } else {\n            return result.Select(x => Math.Abs(x)).ToList();\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc5b7d26dd91449c8af21cb81517bd38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc5b7d26dd91449c8af21cb81517bd38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code goes here\n        List<long>
    result = new List<long>(game.Count);\n        for (int i = 0; i < game.Count;
    i++) {\n            long score = game[i];\n            long guess = guess[i];\n
    \           long difference = guess - score;\n            if (difference < 0)
    {\n                difference = difference * -1;\n            }\n            result.Add(difference);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpontn4tg8.cs(26,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpontn4tg8.cs(26,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpontn4tg8.cs(26,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var item in guess) {\n            result.Add(Math.Abs(item - game.ElementAt(game.IndexOf(item))));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ElementAt[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Int32 index) [0x00031]
    in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00024] in <defd1aeddf094fec940cbf62479d1833>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <defd1aeddf094fec940cbf62479d1833>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ElementAt[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Int32 index) [0x00031]
    in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00024] in <defd1aeddf094fec940cbf62479d1833>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <defd1aeddf094fec940cbf62479d1833>:0
    \n"
  stdout: ''
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var g in game) {\n            foreach (var g in guess) {\n                var
    diff = g - g;\n                if (diff > 0) {\n                    result.Add(diff);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj9lwtba1.cs(24,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n
    \           long guess = guess[i];\n            long difference = guess - score;\n
    \           if (difference < 0) {\n                difference = -difference;\n
    \           }\n            result.Add(difference);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1hbhxpjb.cs(25,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp1hbhxpjb.cs(25,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp1hbhxpjb.cs(25,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long difference = 0;\n        long maxScore = game.Max();\n
    \       long minScore = game.Min();\n        long maxGuess = guess.Max();\n        long
    minGuess = guess.Min();\n        foreach (long guess in guess) {\n            score
    = game.IndexOf(guess);\n            if (score == -1) {\n                difference
    = maxScore - guess;\n            } else {\n                difference = guess
    - score;\n            }\n            result.Add(difference);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2_14d2m7.cs(29,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n
    \           long guess = guess[i];\n            long diff = guess - score;\n            if
    (diff > 0) {\n                result.Add(diff);\n            } else if (diff <
    0) {\n                result.Add(-diff);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_b3h5eaz.cs(25,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp_b3h5eaz.cs(25,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp_b3h5eaz.cs(25,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797610
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            var difference = game[i]
    - guess[i];\n            if (difference > 0) {\n                result.Add(difference);\n
    \           }\n            else {\n                result.Add(Math.Abs(difference));\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d874f5ccb4434890b4960ef890ca1008>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d874f5ccb4434890b4960ef890ca1008>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    gameScores = new List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n
    \       game.ForEach(x => gameScores.Add(x));\n        guess.ForEach(x => guesses.Add(x));\n
    \       gameScores.Sort();\n        guesses.Sort();\n        var gameScoreIndex
    = 0;\n        var guesseIndex = 0;\n        while (gameScoreIndex < gameScores.Count
    && guesseIndex < guesses.Count) {\n            var gameScore = gameScores[gameScoreIndex];\n
    \           var guess = guesses[guesseIndex];\n            if (gameScore == guess)
    {\n                result.Add(0);\n                gameScoreIndex++;\n                guesseIndex++;\n
    \           } else if (gameScore > guess) {\n                result.Add(gameScore
    - guess);\n                gameScoreIndex++;\n            } else {\n                result.Add(guess
    - gameScore);\n                guesseIndex++;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo37wpbkv.cs(33,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        var
    scores = new List<long>(game.Count);\n        var guesses = new List<long>(guess.Count);\n
    \       var scoreIndex = 0;\n        var guesseIndex = 0;\n        while (scoreIndex
    < game.Count && guesseIndex < guess.Count) {\n            scores[scoreIndex] =
    game[scoreIndex];\n            guesses[guesseIndex] = guess[guesseIndex];\n            scoreIndex++;\n
    \           guesseIndex++;\n        }\n        if (scoreIndex == game.Count) {\n
    \           while (guesseIndex < guess.Count) {\n                result.Add(0);\n
    \               guesseIndex++;\n            }\n            return result;\n        }\n
    \       if (guesseIndex == guess.Count) {\n            while (scoreIndex < game.Count)
    {\n                result.Add(0);\n                scoreIndex++;\n            }\n
    \           return result;\n        }\n        var scoreDifference = scores[scoreIndex]
    - guesses[guesseIndex];\n        var guesseDifference = guesses[guesseIndex] -
    scores[scoreIndex];\n        if (scoreDifference == guesseDifference) {\n            result.Add(0);\n
    \       } else {\n            result.Add(Math.Abs(scoreDifference - guesseDifference));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].set_Item (System.Int32
    index, T value) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00030] in <80eed260f998475cad43ca8d33929a7f>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <80eed260f998475cad43ca8d33929a7f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].set_Item (System.Int32 index, T value)
    [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00030] in <80eed260f998475cad43ca8d33929a7f>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <80eed260f998475cad43ca8d33929a7f>:0
    \n"
  stdout: ''
  timestamp: 1659797611
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        foreach (long g in game) {\n            score
    += g;\n        }\n        foreach (long g in guess) {\n            score -= g;\n
    \       }\n        if (score == 0) {\n            foreach (long g in guess) {\n
    \               result.Add(0);\n            }\n        } else {\n            foreach
    (long g in guess) {\n                result.Add(Math.Abs(g - score));\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d5dc21b367745e0aa7206142cc7f29b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d5dc21b367745e0aa7206142cc7f29b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n
    \       bool found;\n        bool found2;\n        bool found3;\n        bool
    found4;\n        bool found5;\n        bool found6;\n        bool found7;\n        bool
    found8;\n        bool found9;\n        bool found10;\n        bool found11;\n
    \       bool found12;\n        bool found13;\n        bool found14;\n        bool
    found15;\n        bool found16;\n        bool found17;\n        bool found18;\n
    \       bool found19;\n        bool found20;\n        bool found21;\n        bool
    found22;\n        bool found23;\n        bool found24;\n        bool found25;\n
    \       bool found26;\n        bool found27;\n        bool found28;\n        bool
    found29;\n        bool found30;\n        bool found31;\n        bool found32;\n
    \       bool found33;\n        bool found34;\n        bool found35;\n        bool
    found36;\n        bool found37;\n        bool found38;\n        bool found39;\n
    \       bool found40;\n        bool found41;\n        bool found42;\n        bool
    found43;\n        bool found44;\n        bool found45;\n        bool found46;\n
    \       bool found47;\n        bool found48;\n        bool found49;\n        bool
    found50;\n        bool found51;\n        bool found52;\n        bool found53;\n
    \       bool found54;\n        bool found55;\n        bool found56;\n        bool
    found57;\n        bool found58;\n        bool found59;\n        bool found60;\n
    \       bool found61;\n        bool found62;\n        bool found63;\n        bool
    found64;\n        bool found65;\n        bool found66;\n        bool found67;\n
    \       bool found68;\n        bool found69;\n        bool found70;\n        bool
    found71;\n        bool found72;\n        bool found73;\n        bool found74;\n
    \       bool found75;\n        bool found76;\n        bool found77;\n        bool
    found78;\n        bool found79;\n        bool found80;\n        bool found81;\n
    \       bool found82;\n        bool found83;\n        \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqpkv2ngk.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqpkv2ngk.cs(23,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(24,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(25,14): warning CS0168: The variable ''diff'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(26,14): warning CS0168: The variable ''correct'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(27,14): warning CS0168: The variable ''found'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(28,14): warning CS0168: The variable ''found2'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(29,14): warning CS0168: The variable ''found3'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(30,14): warning CS0168: The variable ''found4'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(31,14): warning CS0168: The variable ''found5'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(32,14): warning CS0168: The variable ''found6'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(33,14): warning CS0168: The variable ''found7'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(34,14): warning CS0168: The variable ''found8'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(35,14): warning CS0168: The variable ''found9'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(36,14): warning CS0168: The variable ''found10'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(37,14): warning CS0168: The variable ''found11'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(38,14): warning CS0168: The variable ''found12'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(39,14): warning CS0168: The variable ''found13'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(40,14): warning CS0168: The variable ''found14'' is declared
    but never used

    /tmp/tmpqpkv2ngk.cs(41,14): warning CS0168: The var'
  timestamp: 1659797611
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            long diff = game[i]
    - guess[i];\n            if (diff > 0) {\n                result.Add(diff);\n
    \           } else {\n                result.Add(-diff);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5e06dbe2571499fb01e340c5d4a209e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5e06dbe2571499fb01e340c5d4a209e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797608
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        for (int i = 0; i < game.Count;
    i++) {\n            score = game[i];\n            diff = guess[i] - score;\n            if
    (diff > 0) {\n                result.Add(diff);\n            } else {\n                result.Add(-diff);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86bad6fa9c224f8f81aadd2792391fcc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86bad6fa9c224f8f81aadd2792391fcc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797611
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>();\n        foreach
    (var item in game) {\n            var diff = item - guess[game.IndexOf(item)];
    // the difference between the score and the guess\n            if (diff != 0)
    {\n                result.Add(diff);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2d070069edc4ba594e123c68454e709>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2d070069edc4ba594e123c68454e709>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var g in guess) {\n            var diff = g - game[game.IndexOf(g)];\n
    \           result.Add(diff);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare
    (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]
    guess) [0x00029] in <c3ca57d47ca24f60b51e2e35b69fa5ec>:0 \n  at Problem.Main (System.String[]
    args) [0x0002d] in <c3ca57d47ca24f60b51e2e35b69fa5ec>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]
    game, System.Collections.Generic.List`1[T] guess) [0x00029] in <c3ca57d47ca24f60b51e2e35b69fa5ec>:0
    \n  at Problem.Main (System.String[] args) [0x0002d] in <c3ca57d47ca24f60b51e2e35b69fa5ec>:0
    \n"
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score;\n        long guess;\n        long diff;\n        long diffAbs;\n
    \       bool correct;\n        bool correctGuess = false;\n        bool correctScore
    = false;\n        bool correctGuesses = false;\n        bool correctScores = false;\n
    \       bool correctGuesse = false;\n        bool correctScoreGuesse = false;\n
    \       bool correctScoreGuesses = false;\n        bool correctGuesseGuess = false;\n
    \       bool correctScoreGuesseGuess = false;\n        bool correctGuesseScoreGuess
    = false;\n        bool correctGuesseGuesseGuess = false;\n        bool correctScoreGuesseGuesseGuess
    = false;\n        bool correctGuesseScoreGuesseGuess = false;\n        bool correctGuesseGuesseScoreGuess
    = false;\n        bool correctScoreGuesseGuesseGuesseGuess = false;\n        bool
    correctGuesseScoreGuesseGuesseGuess = false;\n        bool correctGuesseGuesseScoreGuesseGuess
    = false;\n        bool correctScoreGuesseGuesseGuesseGuesseGuess = false;\n        bool
    correctGuesseScoreGuesseGuesseGuesseGuess = false;\n        bool correctGuesseGuesseScoreGuesseGuesseGuess
    = false;\n        bool correctScoreGuesseGuesseGuesseGuesseGuesses = false;\n
    \       bool correctGuesseScoreGuesseGuesseGuesseGuesses = false;\n        bool
    correctGuesseGuesseScoreGuesseGuesseGuesses = false;\n        bool correctScoreGuesseGuesseGuesseGuesseGuesses
    = false;\n        bool correctGuesseScoreGuesseGuesseGuesseGuesses = false;\n
    \       bool correctGuesseGuesseScoreGuesseGuesseGuesses = false;\n        bool
    correctScoreGuesseGuesseGuesseGuesseGuesses = false;\n        bool correctGuesseScoreGuesseGuesseGuesseGuesses
    = false;\n        bool correctGuesseGuesseScoreGuesseGuesseGuesses = false;\n
    \       bool correctScoreGuesse\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9vxze9tr.cs(57,32): error CS1002: ; expected

    '
  timestamp: 1659797610
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess
    in guess) {\n            score = game.Sum(x => x == guess ? 1 : 0);\n            difference
    = guess - score;\n            result.Add(difference);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphb7vopb_.cs(25,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659797606
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long guess = 0;\n        long diff = 0;\n        foreach (long
    g in game) {\n            score += g;\n        }\n        foreach (long g in guess)
    {\n            guess += g;\n        }\n        diff = score - guess;\n        if
    (diff < 0) {\n            diff = -diff;\n        }\n        result.Add(diff);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphtvz8ajl.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphtvz8ajl.cs(29,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797611
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code goes here\n        List<long>
    result = new List<long>(game.Count);\n        long score = 0;\n        long difference
    = 0;\n        for(int i = 0; i < game.Count; i++) {\n            score += game[i];\n
    \           difference = game[i] - guess[i];\n            if(difference < 0) {\n
    \               difference = -difference;\n            }\n            result.Add(difference);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d20e0345cb15473d9934a46524ee2914>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d20e0345cb15473d9934a46524ee2914>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n
    \       bool correct = false;\n        foreach (long g in game) {\n            guess
    = guess\n                .Where(x => g == x)\n                .FirstOrDefault();\n
    \           if (guess == null) {\n                difference = g.Abs();\n            }
    else {\n                difference = g.Abs() - guess.Abs();\n            }\n            if
    (difference < 0) {\n                difference = difference * -1;\n            }\n
    \           if (difference == 0) {\n                correct = true;\n            }\n
    \           score += difference;\n            result.Add(score);\n        }\n
    \       if (correct) {\n            return result;\n        } else {\n            return
    result.Where(x => x < 0).ToList();\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaw9xmlmr.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpaw9xmlmr.cs(29,18): error CS1061: ''long'' does not contain a definition
    for ''Where'' and no accessible extension method ''Where'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpaw9xmlmr.cs(32,32): error CS1061: ''long'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpaw9xmlmr.cs(34,32): error CS1061: ''long'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpaw9xmlmr.cs(34,46): error CS1061: ''long'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpaw9xmlmr.cs(31,17): warning CS0472: The result of the expression is always
    ''false'' since a value of type ''long'' is never equal to ''null'' of type ''long?''

    '
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>();\n        long
    score = 0;\n        long guess = 0;\n        foreach (long i in guess) {\n            score
    += i;\n        }\n        foreach (long i in game) {\n            guess += i;\n
    \       }\n        if (guess == score) {\n            result.Add(0);\n        }\n
    \       else {\n            result.Add(Math.Abs(guess - score));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbe0oqus.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpmbe0oqus.cs(25,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797611
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code goes here\n        List<long>
    result = new List<long>();\n        long score = 0;\n        long difference =
    0;\n        for (int i = 0; i < game.Count; i++) {\n            score = game[i];\n
    \           difference = guess[i] - score;\n            if (difference < 0) {\n
    \               difference = -difference;\n            }\n            result.Add(difference);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452591139991448d8b1bb33a8294baaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452591139991448d8b1bb33a8294baaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797611
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        // Your code goes here\n        var result
    = game.Zip(guess, (x, y) => x - y).ToList();\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b08291869594c2b83f7ef57bf995683>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b08291869594c2b83f7ef57bf995683>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       foreach (long score in game) {\n            long guess = guess.FirstOrDefault(x
    => x == score);\n            if (guess == -1) {\n                result.Add(0);\n
    \           } else {\n                result.Add(Math.Abs(guess - score));\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ag5ny4h.cs(24,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9ag5ny4h.cs(24,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp9ag5ny4h.cs(24,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        long totalGuess = 0;\n        long totalGuessed
    = 0;\n        long totalGuessedCorrectly = 0;\n        long totalGuessedIncorrectly
    = 0;\n        long totalGuessedIncorrectlyCorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedCorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyCorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long
    totalGuessedIncorrectlyIncorrectlyIncorrectlyCorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyCorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long total\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9re0yon5.cs(55,19): error CS1002: ; expected

    '
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       for (int i = 0; i < game.Count; i++) {\n            long score = game[i];\n
    \           long guess = guess[i];\n            long difference = Math.Abs(guess
    - score);\n            if (guess == score) {\n                result[i] = difference;\n
    \           } else {\n                result[i] = difference;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),
    (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),
    (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,
    (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvnbeggrx.cs(25,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpvnbeggrx.cs(25,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpvnbeggrx.cs(25,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            score += g;\n            foreach (long g in guess) {\n                diff
    += Math.Abs(g - g);\n            }\n        }\n        if (diff == 0) {\n            foreach
    (long g in guess) {\n                result.Add(0);\n            }\n        }
    else {\n            foreach (long g in guess) {\n                result.Add(Math.Abs(g
    - score));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6xxtk_ve.cs(27,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)
    {\n            foreach (long g in guess) {\n                diff = g - g;\n                if
    (diff > 0) {\n                    score += diff;\n                }\n            }\n
    \           result.Add(score);\n            score = 0;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzkgmfuxo.cs(26,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long total = 0;\n        long totalGuess = 0;\n        long totalGuessed
    = 0;\n        long totalGuessedCorrectly = 0;\n        long totalGuessedIncorrectly
    = 0;\n        long totalGuessedCorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedCorrectlyIncorrectlyIncorrectly = 0;\n        long
    totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long
    totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long
    totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly
    = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIn\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdgr3_7rl.cs(64,39): error CS1002: ; expected

    '
  timestamp: 1659797608
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            var diff = item - guess[game.IndexOf(item)];
    // the absolute difference between the guess and the score\n            if (diff
    > 0) {\n                result.Add(diff);\n            }\n            else {\n
    \               result.Add(-diff);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0baecdaaa94466d87d653c445063ea2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0baecdaaa94466d87d653c445063ea2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        var result = new List<long>(game.Count);\n
    \       foreach (var item in game) {\n            var guess = guess.Where(x =>
    x == item).ToList();\n            if (guess.Count == 0) {\n                result.Add(0);\n
    \           }\n            else {\n                var difference = guess.Min()
    - item;\n                result.Add(difference);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),
    (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwcwhm8e.cs(24,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzwcwhm8e.cs(24,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    /tmp/tmpzwcwhm8e.cs(25,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659797611
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // I think we all remember that feeling when the result of some
    long-awaited\n    // event is finally known. The feelings and thoughts you have
    at that moment are\n    // definitely worth noting down and comparing.\n    //
    Your task is to determine if a person correctly guessed the results of a number
    of matches.\n    // You are given two lists of scores and guesses of equal length,
    where each index shows a match. \n    // Return a list of the same length denoting
    how far off each guess was. If they have guessed correctly,\n    // the value
    is 0, and if not, the value is the absolute difference between the guess and the
    score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new
    long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>
    Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,
    (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,
    (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,
    (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>
    game, List<long> guess) {\n        List<long> result = new List<long>(game.Count);\n
    \       long score = 0;\n        long guess = 0;\n        foreach (long g in game)
    {\n            score += g;\n        }\n        foreach (long g in guess) {\n            guess
    += g;\n        }\n        if (score == guess) {\n            foreach (long g in
    guess) {\n                result.Add(g - score);\n            }\n        }\n        else
    {\n            foreach (long g in guess) {\n                result.Add(Math.Abs(g
    - score));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n
    \   Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,
    (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9q_pz7bi.cs(24,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9q_pz7bi.cs(28,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp9q_pz7bi.cs(32,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp9q_pz7bi.cs(37,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659797611
