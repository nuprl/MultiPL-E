name: HumanEval_20_find_closest_elements
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a supplied list of numbers (of length at least two) select\
  \ and return two that are the closest to each\n    // other and return them in order\
  \ (smaller number, larger number).\n    // >>> FindClosestElements((new List<float>(new\
  \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n\
  \    // (Tuple.Create(2.0f, 2.2f))\n    // >>> FindClosestElements((new List<float>(new\
  \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n\
  \    // (Tuple.Create(2.0f, 2.0f))\n    public static Tuple<float, float> FindClosestElements(List<float>\
  \ numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindClosestElements((new\
  \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f,\
  \ (float)2.2f}))).Equals((Tuple.Create(3.9f, 4.0f))));\n    Debug.Assert(FindClosestElements((new\
  \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))).Equals((Tuple.Create(5.0f,\
  \ 5.9f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(2.0f,\
  \ 2.2f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))).Equals((Tuple.Create(2.0f,\
  \ 2.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.1f,\
  \ (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))).Equals((Tuple.Create(2.2f,\
  \ 3.1f))));\n    }\n\n}\n"
completions: ["        float smallestDifference = float.MaxValue;\n        float largestDifference\
    \ = float.MinValue;\n        float smallestElement = float.MaxValue;\n       \
    \ float largestElement = float.MinValue;\n        float smallestDifferenceSquare\
    \ = float.MaxValue;\n        float largestDifferenceSquare = float.MinValue;\n\
    \        float smallestElementSquare = float.MaxValue;\n        float largestElementSquare\
    \ = float.MinValue;\n        foreach (float number in numbers) {\n           \
    \ float difference = number - smallestElement;\n            float differenceSquare\
    \ = difference * difference;\n            if (difference < smallestDifference)\
    \ {\n                smallestDifference = difference;\n                smallestElement\
    \ = number;\n            }\n            if (differenceSquare < smallestDifferenceSquare)\
    \ {\n                smallestDifferenceSquare = differenceSquare;\n          \
    \      smallestElementSquare = number;\n            }\n            float difference2\
    \ = number - largestElement;\n            float differenceSquare2 = difference2\
    \ * difference2;\n            if (difference2 < largestDifference) {\n       \
    \         largestDifference = difference2;\n                largestElement = number;\n\
    \            }\n            if (differenceSquare2 < largestDifferenceSquare) {\n\
    \                largestDifferenceSquare = differenceSquare2;\n              \
    \  largestElementSquare = number;\n            }\n        }\n        return new\
    \ Tuple<float, float>(smallestElement, largestElement);", "        if (numbers.Count\
    \ < 2) {\n            return null;\n        }\n        float smallest = numbers[0];\n\
    \        float largest = numbers[0];\n        float smallestIndex = -1;\n    \
    \    float largestIndex = -1;\n        for (int i = 1; i < numbers.Count; i++)\
    \ {\n            float current = numbers[i];\n            if (current < smallest)\
    \ {\n                smallest = current;\n                smallestIndex = i;\n\
    \            }\n            if (current > largest) {\n                largest\
    \ = current;\n                largestIndex = i;\n            }\n        }\n  \
    \      if (smallestIndex == -1) {\n            return null;\n        }\n     \
    \   if (largestIndex == -1) {\n            return new Tuple<float, float>(smallest,\
    \ numbers[smallestIndex]);\n        }\n        return new Tuple<float, float>(smallest,\
    \ largest);", "        float smallest = numbers[0];\n        float largest = numbers[0];\n\
    \        float smallest2 = numbers[0];\n        float largest2 = numbers[0];\n\
    \        float smallest3 = numbers[0];\n        float largest3 = numbers[0];\n\
    \        float smallest4 = numbers[0];\n        float largest4 = numbers[0];\n\
    \        float smallest5 = numbers[0];\n        float largest5 = numbers[0];\n\
    \        float smallest6 = numbers[0];\n        float largest6 = numbers[0];\n\
    \        float smallest7 = numbers[0];\n        float largest7 = numbers[0];\n\
    \        float smallest8 = numbers[0];\n        float largest8 = numbers[0];\n\
    \        float smallest9 = numbers[0];\n        float largest9 = numbers[0];\n\
    \        float smallest10 = numbers[0];\n        float largest10 = numbers[0];\n\
    \        float smallest11 = numbers[0];\n        float largest11 = numbers[0];\n\
    \        float smallest12 = numbers[0];\n        float largest12 = numbers[0];\n\
    \        float smallest13 = numbers[0];\n        float largest13 = numbers[0];\n\
    \        float smallest14 = numbers[0];\n        float largest14 = numbers[0];\n\
    \        float smallest15 = numbers[0];\n        float largest15 = numbers[0];\n\
    \        float smallest16 = numbers[0];\n        float largest16 = numbers[0];\n\
    \        float smallest17 = numbers[0];\n        float largest17 = numbers[0];\n\
    \        float smallest18 = numbers[0];\n        float largest18 = numbers[0];\n\
    \        float smallest19 = numbers[0];\n        float largest19 = numbers[0];\n\
    \        float smallest20 = numbers[0];\n        float largest20 = numbers[0];\n\
    \        float smallest21 = numbers[0];\n        float largest21 = numbers[0];\n\
    \        float smallest22 = numbers[0];\n        float largest22 = numbers[0];\n\
    \        float smallest23 = numbers[0];\n        float largest23 = numbers[0];\n\
    \        float smallest24 = numbers[0];\n        float largest24 = numbers[0];\n\
    \        float smallest25 = numbers[0];\n        float largest25 = numbers[0];\n\
    \        float smallest26 = numbers[0];\n        float largest26 = numbers[0];\n\
    \        float smallest27 = numbers[0];\n        float largest27 = numbers[0];\n\
    \        float smallest28 = numbers[0];\n        float largest28 = numbers[0];\n\
    \        float smallest29 = numbers[0];\n        float largest29 = numbers[0];\n\
    \        float smallest30 = numbers[0];\n        float largest30 = ", "      \
    \  float smallestDifference = float.MaxValue;\n        float smallestDifferenceIndex\
    \ = -1;\n        float largestDifference = float.MinValue;\n        float largestDifferenceIndex\
    \ = -1;\n        float smallestNumber = float.MaxValue;\n        float largestNumber\
    \ = float.MinValue;\n        float smallestNumberIndex = -1;\n        float largestNumberIndex\
    \ = -1;\n        float smallestDistance = float.MaxValue;\n        float largestDistance\
    \ = float.MinValue;\n        float smallestDistanceIndex = -1;\n        float\
    \ largestDistanceIndex = -1;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            float number = numbers[i];\n            float difference = number\
    \ - smallestNumber;\n            if (difference < smallestDifference) {\n    \
    \            smallestDifference = difference;\n                smallestDifferenceIndex\
    \ = i;\n            }\n            float difference = number - largestNumber;\n\
    \            if (difference > largestDifference) {\n                largestDifference\
    \ = difference;\n                largestDifferenceIndex = i;\n            }\n\
    \            float distance = MathHelper.Distance(number, smallestNumber);\n \
    \           if (distance < smallestDistance) {\n                smallestDistance\
    \ = distance;\n                smallestDistanceIndex = i;\n            }\n   \
    \         distance = MathHelper.Distance(number, largestNumber);\n           \
    \ if (distance > largestDistance) {\n                largestDistance = distance;\n\
    \                largestDistanceIndex = i;\n            }\n            float difference2\
    \ = number - smallestNumber;\n            if (difference2 < smallestDifference)\
    \ {\n                smallestDifference = difference2;\n                smallestDifferenceIndex\
    \ = i;\n            }\n            float difference2 = number - largestNumber;\n\
    \            if (difference2 > largestDifference) {\n                largestDifference\
    \ = difference2;\n                largestDifferenceIndex = i;\n            }\n\
    \            float distance2 = MathHelper.Distance(number, smallestNumber);\n\
    \            if (distance2 < smallestDistance) {\n                smallestDistance\
    \ = distance2;\n                smallestDistanceIndex = i;\n            }\n  \
    \          distance2 = MathHelper.Distance(number, largestNumber);\n         \
    \   if (distance2 > largestDistance) {\n                largestDistance = distance2;\n\
    \                largestDistanceIndex = i;\n            }\n            float difference3\
    \ = number - smallestNumber;\n            if (difference3 < smallestDifference)\
    \ {\n                smallestDifference = difference3;\n                smallestDifferenceIndex\
    \ = i;\n            }\n            float difference3 = number - largestNumber;\n\
    \            if (difference3 > largestDifference) {\n                largestDifference\
    \ = difference3;\n                largestDifferenceIndex = i;\n            }\n\
    \            float distance3 = MathHelper.Distance(number, smallestNumber);\n\
    \            if (distance", "        float smallestDifference = float.MaxValue;\n\
    \        float largestDifference = float.MinValue;\n        float smallestDifferenceIndex\
    \ = -1;\n        float largestDifferenceIndex = -1;\n        for (int i = 0; i\
    \ < numbers.Count - 1; i++) {\n            float difference = numbers[i + 1] -\
    \ numbers[i];\n            if (difference < smallestDifference) {\n          \
    \      smallestDifference = difference;\n                smallestDifferenceIndex\
    \ = i;\n            }\n            if (difference > largestDifference) {\n   \
    \             largestDifference = difference;\n                largestDifferenceIndex\
    \ = i;\n            }\n        }\n        if (smallestDifferenceIndex == -1) {\n\
    \            return new Tuple<float, float>(float.MaxValue, float.MinValue);\n\
    \        }\n        return new Tuple<float, float>(numbers[smallestDifferenceIndex],\
    \ numbers[largestDifferenceIndex]);", "        float smallestDifference = float.MaxValue;\n\
    \        float smallestDifferenceIndex = 0;\n        float largestDifference =\
    \ float.MinValue;\n        float largestDifferenceIndex = 0;\n        float smallestNumber\
    \ = float.MaxValue;\n        float largestNumber = float.MinValue;\n        float\
    \ smallestNumberIndex = 0;\n        float largestNumberIndex = 0;\n        float\
    \ smallestNumber2 = float.MaxValue;\n        float largestNumber2 = float.MinValue;\n\
    \        float smallestNumber2Index = 0;\n        float largestNumber2Index =\
    \ 0;\n        float smallestNumber3 = float.MaxValue;\n        float largestNumber3\
    \ = float.MinValue;\n        float smallestNumber3Index = 0;\n        float largestNumber3Index\
    \ = 0;\n        float smallestNumber4 = float.MaxValue;\n        float largestNumber4\
    \ = float.MinValue;\n        float smallestNumber4Index = 0;\n        float largestNumber4Index\
    \ = 0;\n        float smallestNumber5 = float.MaxValue;\n        float largestNumber5\
    \ = float.MinValue;\n        float smallestNumber5Index = 0;\n        float largestNumber5Index\
    \ = 0;\n        float smallestNumber6 = float.MaxValue;\n        float largestNumber6\
    \ = float.MinValue;\n        float smallestNumber6Index = 0;\n        float largestNumber6Index\
    \ = 0;\n        float smallestNumber7 = float.MaxValue;\n        float largestNumber7\
    \ = float.MinValue;\n        float smallestNumber7Index = 0;\n        float largestNumber7Index\
    \ = 0;\n        float smallestNumber8 = float.MaxValue;\n        float largestNumber8\
    \ = float.MinValue;\n        float smallestNumber8Index = 0;\n        float largestNumber8Index\
    \ = 0;\n        float smallestNumber9 = float.MaxValue;\n        float largestNumber9\
    \ = float.MinValue;\n        float smallestNumber9Index = 0;\n        float largestNumber9Index\
    \ = 0;\n        float smallestNumber10 = float.MaxValue;\n        float largestNumber10\
    \ = float.MinValue;\n        float smallestNumber10Index = 0;\n        float largestNumber10Index\
    \ = 0;\n        float smallestNumber11 = float.MaxValue;\n        float largestNumber11\
    \ = float.MinValue;\n        float smallestNumber11Index = 0;\n        float largestNumber11Index\
    \ = 0;\n        float smallestNumber12 = float.MaxValue;\n        float largestNumber12\
    \ = float.MinValue;\n        float smallestNumber12Index = 0;\n        float largestNumber12Index",
  "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"Must\
    \ have at least two numbers to compare.\");\n        }\n\n        float smallestDifference\
    \ = float.MaxValue;\n        float largestDifference = float.MinValue;\n     \
    \   float smallestElement = float.MaxValue;\n        float largestElement = float.MinValue;\n\
    \n        float smallestElement2 = float.MaxValue;\n        float largestElement2\
    \ = float.MinValue;\n\n        float smallestElement3 = float.MaxValue;\n    \
    \    float largestElement3 = float.MinValue;\n\n        float smallestElement4\
    \ = float.MaxValue;\n        float largestElement4 = float.MinValue;\n\n     \
    \   float smallestElement5 = float.MaxValue;\n        float largestElement5 =\
    \ float.MinValue;\n\n        float smallestElement6 = float.MaxValue;\n      \
    \  float largestElement6 = float.MinValue;\n\n        float smallestElement7 =\
    \ float.MaxValue;\n        float largestElement7 = float.MinValue;\n\n       \
    \ float smallestElement8 = float.MaxValue;\n        float largestElement8 = float.MinValue;\n\
    \n        float smallestElement9 = float.MaxValue;\n        float largestElement9\
    \ = float.MinValue;\n\n        float smallestElement10 = float.MaxValue;\n   \
    \     float largestElement10 = float.MinValue;\n\n        float smallestElement11\
    \ = float.MaxValue;\n        float largestElement11 = float.MinValue;\n\n    \
    \    float smallestElement12 = float.MaxValue;\n        float largestElement12\
    \ = float.MinValue;\n\n        float smallestElement13 = float.MaxValue;\n   \
    \     float largestElement13 = float.MinValue;\n\n        float smallestElement14\
    \ = float.MaxValue;\n        float largestElement14 = float.MinValue;\n\n    \
    \    float smallestElement15 = float.MaxValue;\n        float largestElement15\
    \ = float.MinValue;\n\n        float smallestElement16 = float.MaxValue;\n   \
    \     float largestElement16 = float.MinValue;\n\n        float smallestElement17\
    \ = float.MaxValue;\n        float largestElement17 = float.MinValue;\n\n    \
    \    float smallestElement18 = float.MaxValue;\n        float largestElement18\
    \ = float.MinValue;\n\n        float smallestElement19 = float.MaxValue;\n   \
    \     float largestElement19 = float.MinValue;\n\n        float smallestElement20\
    \ = float.MaxValue;\n        float largestElement20 = float.MinValue;\n\n    \
    \    float smallestElement21 = float.MaxValue;\n        ", "        float smallestDifference\
    \ = float.MaxValue;\n        float largestDifference = float.MinValue;\n     \
    \   float smallestDifferenceIndex = -1;\n        float largestDifferenceIndex\
    \ = -1;\n        for (int i = 0; i < numbers.Count - 1; i++) {\n            float\
    \ difference = numbers[i + 1] - numbers[i];\n            if (difference < smallestDifference)\
    \ {\n                smallestDifference = difference;\n                smallestDifferenceIndex\
    \ = i;\n            }\n            if (difference > largestDifference) {\n   \
    \             largestDifference = difference;\n                largestDifferenceIndex\
    \ = i;\n            }\n        }\n        if (smallestDifferenceIndex == -1) {\n\
    \            return new Tuple<float, float>(float.MaxValue, float.MinValue);\n\
    \        }\n        return new Tuple<float, float>(numbers[smallestDifferenceIndex],\
    \ numbers[largestDifferenceIndex]);", "        float smallestDifference = float.MaxValue;\n\
    \        float smallestDifferenceIndex = 0;\n        float smallestDifferenceValue\
    \ = numbers[0];\n        float smallestDifferenceValueIndex = numbers[0];\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            float difference\
    \ = numbers[i] - numbers[i - 1];\n            if (difference < smallestDifference)\
    \ {\n                smallestDifference = difference;\n                smallestDifferenceIndex\
    \ = i;\n                smallestDifferenceValue = numbers[i];\n              \
    \  smallestDifferenceValueIndex = numbers[i - 1];\n            }\n        }\n\
    \        return new Tuple<float, float>(smallestDifferenceValue, smallestDifferenceValueIndex);",
  "        float smallestDifference = float.MaxValue;\n        float smallestDifference2\
    \ = float.MaxValue;\n        float smallestDifference3 = float.MaxValue;\n   \
    \     float smallestDifference4 = float.MaxValue;\n        float smallestDifference5\
    \ = float.MaxValue;\n        float smallestDifference6 = float.MaxValue;\n   \
    \     float smallestDifference7 = float.MaxValue;\n        float smallestDifference8\
    \ = float.MaxValue;\n        float smallestDifference9 = float.MaxValue;\n   \
    \     float smallestDifference10 = float.MaxValue;\n        float smallestDifference11\
    \ = float.MaxValue;\n        float smallestDifference12 = float.MaxValue;\n  \
    \      float smallestDifference13 = float.MaxValue;\n        float smallestDifference14\
    \ = float.MaxValue;\n        float smallestDifference15 = float.MaxValue;\n  \
    \      float smallestDifference16 = float.MaxValue;\n        float smallestDifference17\
    \ = float.MaxValue;\n        float smallestDifference18 = float.MaxValue;\n  \
    \      float smallestDifference19 = float.MaxValue;\n        float smallestDifference20\
    \ = float.MaxValue;\n        float smallestDifference21 = float.MaxValue;\n  \
    \      float smallestDifference22 = float.MaxValue;\n        float smallestDifference23\
    \ = float.MaxValue;\n        float smallestDifference24 = float.MaxValue;\n  \
    \      float smallestDifference25 = float.MaxValue;\n        float smallestDifference26\
    \ = float.MaxValue;\n        float smallestDifference27 = float.MaxValue;\n  \
    \      float smallestDifference28 = float.MaxValue;\n        float smallestDifference29\
    \ = float.MaxValue;\n        float smallestDifference30 = float.MaxValue;\n  \
    \      float smallestDifference31 = float.MaxValue;\n        float smallestDifference32\
    \ = float.MaxValue;\n        float smallestDifference33 = float.MaxValue;\n  \
    \      float smallestDifference34 = float.MaxValue;\n        float smallestDifference35\
    \ = float.MaxValue;\n        float smallestDifference36 = float.MaxValue;\n  \
    \      float smallestDifference37 = float.MaxValue;\n        float smallestDifference38\
    \ = float.MaxValue;\n        float smallestDifference39 = float.MaxValue;\n  \
    \      float smallestDifference40 = float.MaxValue;\n        float smallestDifference41\
    \ = float.MaxValue;\n        float smallestDifference42 = float.MaxValue;\n  \
    \      float smallestDifference43 = float.MaxValue;\n        float smallestDifference44\
    \ = float", "        float smallest = numbers.Min();\n        float largest =\
    \ numbers.Max();\n        float midpoint = smallest + (largest - smallest) / 2;\n\
    \        float midpoint2 = smallest + (largest - smallest) / 2;\n        float\
    \ midpoint3 = smallest + (largest - smallest) / 2;\n        float midpoint4 =\
    \ smallest + (largest - smallest) / 2;\n        float midpoint5 = smallest + (largest\
    \ - smallest) / 2;\n        float midpoint6 = smallest + (largest - smallest)\
    \ / 2;\n        float midpoint7 = smallest + (largest - smallest) / 2;\n     \
    \   float midpoint8 = smallest + (largest - smallest) / 2;\n        float midpoint9\
    \ = smallest + (largest - smallest) / 2;\n        float midpoint10 = smallest\
    \ + (largest - smallest) / 2;\n        float midpoint11 = smallest + (largest\
    \ - smallest) / 2;\n        float midpoint12 = smallest + (largest - smallest)\
    \ / 2;\n        float midpoint13 = smallest + (largest - smallest) / 2;\n    \
    \    float midpoint14 = smallest + (largest - smallest) / 2;\n        float midpoint15\
    \ = smallest + (largest - smallest) / 2;\n        float midpoint16 = smallest\
    \ + (largest - smallest) / 2;\n        float midpoint17 = smallest + (largest\
    \ - smallest) / 2;\n        float midpoint18 = smallest + (largest - smallest)\
    \ / 2;\n        float midpoint19 = smallest + (largest - smallest) / 2;\n    \
    \    float midpoint20 = smallest + (largest - smallest) / 2;\n        float midpoint21\
    \ = smallest + (largest - smallest) / 2;\n        float midpoint22 = smallest\
    \ + (largest - smallest) / 2;\n        float midpoint23 = smallest + (largest\
    \ - smallest) / 2;\n        float midpoint24 = smallest + (largest - smallest)\
    \ / 2;\n        float midpoint25 = smallest + (largest - smallest) / 2;\n    \
    \    float midpoint26 = smallest + (largest - smallest) / 2;\n        float midpoint27\
    \ = smallest + (largest - smallest) / 2;\n        float midpoint28 = smallest\
    \ + (largest - smallest) / 2;\n        float midpoint29 = smallest + (largest\
    \ - smallest) / 2;\n        float midpoint30 = smallest + (largest - smallest)\
    \ / 2;\n        float midpoint31 = smallest + (largest - smallest) / 2;\n    \
    \    float midpoint32 = smallest + (largest - smallest) / 2;\n        float midpoint33\
    \ = smallest + (largest - smallest) / 2;\n        float midpoint34 = smallest\
    \ + (largest - smallest) / ", "        float smallestDifference = float.MaxValue;\n\
    \        float smallestDifferenceIndex = -1;\n        float largestDifference\
    \ = float.MinValue;\n        float largestDifferenceIndex = -1;\n        float\
    \ smallestElement = float.MaxValue;\n        float largestElement = float.MinValue;\n\
    \        float smallestElementIndex = -1;\n        float largestElementIndex =\
    \ -1;\n        foreach (float number in numbers) {\n            float difference\
    \ = number - smallestElement;\n            if (difference < smallestDifference)\
    \ {\n                smallestDifference = difference;\n                smallestDifferenceIndex\
    \ = numbers.IndexOf(number);\n            }\n            float difference = number\
    \ - largestElement;\n            if (difference > largestDifference) {\n     \
    \           largestDifference = difference;\n                largestDifferenceIndex\
    \ = numbers.IndexOf(number);\n            }\n            float difference = number\
    \ - smallestElement;\n            if (difference < smallestDifference) {\n   \
    \             smallestElement = number;\n                smallestElementIndex\
    \ = numbers.IndexOf(number);\n            }\n            float difference = number\
    \ - largestElement;\n            if (difference > largestDifference) {\n     \
    \           largestElement = number;\n                largestElementIndex = numbers.IndexOf(number);\n\
    \            }\n        }\n        return new Tuple<float, float>(smallestElement,\
    \ largestElement);", "        float smallest = numbers.Min();\n        float largest\
    \ = numbers.Max();\n        float midpoint = smallest + (largest - smallest) /\
    \ 2;\n        float difference = midpoint - numbers.Min();\n        float smallestDifference\
    \ = difference - numbers.Min();\n        float largestDifference = difference\
    \ - numbers.Max();\n        if (smallestDifference < largestDifference) {\n  \
    \          return new Tuple<float, float>(numbers.Min(), midpoint);\n        }\
    \ else {\n            return new Tuple<float, float>(midpoint, numbers.Max());\n\
    \        }", "        float smallestDifference = float.MaxValue;\n        float\
    \ smallestDifferenceIndex = -1;\n        float largestDifference = float.MinValue;\n\
    \        float largestDifferenceIndex = -1;\n        for (int i = 0; i < numbers.Count\
    \ - 1; i++) {\n            float difference = numbers[i + 1] - numbers[i];\n \
    \           if (difference < smallestDifference) {\n                smallestDifference\
    \ = difference;\n                smallestDifferenceIndex = i;\n            }\n\
    \            if (difference > largestDifference) {\n                largestDifference\
    \ = difference;\n                largestDifferenceIndex = i;\n            }\n\
    \        }\n        if (smallestDifferenceIndex == -1) {\n            return new\
    \ Tuple<float, float>(float.NaN, float.NaN);\n        }\n        return new Tuple<float,\
    \ float>(numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]);",
  "        float smallestDifference = float.MaxValue;\n        float smallestDifferenceIndex\
    \ = 0;\n        float largestDifference = float.MinValue;\n        float largestDifferenceIndex\
    \ = 0;\n        float smallestDifferenceValue = float.MaxValue;\n        float\
    \ largestDifferenceValue = float.MinValue;\n        float smallestDifferenceValueIndex\
    \ = -1;\n        float largestDifferenceValueIndex = -1;\n        float smallestDifferenceValueValue\
    \ = float.MaxValue;\n        float largestDifferenceValueValue = float.MinValue;\n\
    \        float smallestDifferenceValueValueIndex = -1;\n        float largestDifferenceValueValueIndex\
    \ = -1;\n        float smallestDifferenceValueValueValue = float.MaxValue;\n \
    \       float largestDifferenceValueValueValue = float.MinValue;\n        float\
    \ smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallestDifferenceValueValueIndex = 0;\n        float largestDifferenceValueValueIndex\
    \ = 0;\n        float smallestDifferenceValueValueValue = 0;\n        float largestDifferenceValueValueValue\
    \ = 0;\n        float smallest", "        float smallestDifference = float.MaxValue;\n\
    \        float smallestDifferenceIndex = 0;\n        float largestDifference =\
    \ float.MinValue;\n        float largestDifferenceIndex = 0;\n        float smallestDifferenceValue\
    \ = float.MaxValue;\n        float smallestDifferenceValueIndex = 0;\n       \
    \ float largestDifferenceValue = float.MinValue;\n        float largestDifferenceValueIndex\
    \ = 0;\n        float smallestDifferenceDifference = float.MaxValue;\n       \
    \ float smallestDifferenceDifferenceIndex = 0;\n        float largestDifferenceDifference\
    \ = float.MinValue;\n        float largestDifferenceDifferenceIndex = 0;\n   \
    \     for (int i = 0; i < numbers.Count - 1; i++) {\n            float difference\
    \ = numbers[i + 1] - numbers[i];\n            if (difference < smallestDifference)\
    \ {\n                smallestDifference = difference;\n                smallestDifferenceIndex\
    \ = i;\n            }\n            if (difference > largestDifference) {\n   \
    \             largestDifference = difference;\n                largestDifferenceIndex\
    \ = i;\n            }\n            if (difference < smallestDifferenceValue) {\n\
    \                smallestDifferenceValue = difference;\n                smallestDifferenceValueIndex\
    \ = i;\n            }\n            if (difference > largestDifferenceValue) {\n\
    \                largestDifferenceValue = difference;\n                largestDifferenceValueIndex\
    \ = i;\n            }\n            if (difference < smallestDifferenceDifference)\
    \ {\n                smallestDifferenceDifference = difference;\n            \
    \    smallestDifferenceDifferenceIndex = i;\n            }\n            if (difference\
    \ > largestDifferenceDifference) {\n                largestDifferenceDifference\
    \ = difference;\n                largestDifferenceDifferenceIndex = i;\n     \
    \       }\n        }\n        if (smallestDifferenceIndex == largestDifferenceIndex)\
    \ {\n            return new Tuple<float, float>(numbers[smallestDifferenceIndex],\
    \ numbers[smallestDifferenceIndex]);\n        }\n        if (smallestDifferenceIndex\
    \ == largestDifferenceValueIndex) {\n            return new Tuple<float, float>(numbers[smallestDifferenceValueIndex],\
    \ numbers[largestDifferenceValueIndex]);\n        }\n        if (smallestDifferenceValueIndex\
    \ == largestDifferenceIndex) {\n            return new Tuple<float, float>(numbers[smallestDifferenceValueIndex],\
    \ numbers[largestDifferenceIndex]);\n        }\n        if (smallestDifferenceValueIndex\
    \ == largestDifferenceValueIndex) {\n            return new Tuple<float, float>(numbers[smallestDifferenceIndex],\
    \ numbers[largestDifferenceIndex]);\n        }\n        return new Tuple<float,\
    \ float>(numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]);",
  "        float smallestDifference = float.MaxValue;\n        float smallestDifferenceIndex\
    \ = 0;\n        float largestDifference = float.MinValue;\n        float largestDifferenceIndex\
    \ = 0;\n        for (int i = 0; i < numbers.Count - 1; i++) {\n            float\
    \ difference = numbers[i + 1] - numbers[i];\n            if (difference < smallestDifference)\
    \ {\n                smallestDifference = difference;\n                smallestDifferenceIndex\
    \ = i;\n            }\n            if (difference > largestDifference) {\n   \
    \             largestDifference = difference;\n                largestDifferenceIndex\
    \ = i;\n            }\n        }\n        if (smallestDifference == float.MaxValue)\
    \ {\n            return new Tuple<float, float>(numbers[smallestDifferenceIndex],\
    \ numbers[largestDifferenceIndex]);\n        }\n        return new Tuple<float,\
    \ float>(numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]);",
  "        float smallest = numbers.Min();\n        float largest = numbers.Max();\n\
    \        float midpoint = (smallest + largest) / 2;\n        float difference\
    \ = midpoint - numbers.Min();\n        float difference2 = midpoint - numbers.Max();\n\
    \        if (difference < difference2) {\n            return new Tuple<float,\
    \ float>(smallest, midpoint);\n        } else {\n            return new Tuple<float,\
    \ float>(midpoint, largest);\n        }", "        float smallestDifference =\
    \ float.MaxValue;\n        float smallestDifferenceIndex = 0;\n        float smallestDifferenceValue\
    \ = numbers[0];\n        float smallestDifferenceValueIndex = numbers[0];\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            float difference\
    \ = numbers[i] - numbers[i - 1];\n            if (difference < smallestDifference)\
    \ {\n                smallestDifference = difference;\n                smallestDifferenceIndex\
    \ = i;\n                smallestDifferenceValue = numbers[i];\n              \
    \  smallestDifferenceValueIndex = numbers[i - 1];\n            }\n        }\n\
    \        return new Tuple<float, float>(smallestDifferenceValue, smallestDifferenceValueIndex);",
  "        float smallestDifference = float.MaxValue;\n        float smallestDifferenceIndex\
    \ = 0;\n        float largestDifference = float.MinValue;\n        float largestDifferenceIndex\
    \ = 0;\n        float smallestDifferenceValue = numbers.First();\n        float\
    \ largestDifferenceValue = numbers.Last();\n        for (int i = 0; i < numbers.Count\
    \ - 1; i++) {\n            float difference = numbers[i + 1] - numbers[i];\n \
    \           if (difference < smallestDifference) {\n                smallestDifference\
    \ = difference;\n                smallestDifferenceIndex = i;\n            }\n\
    \            if (difference > largestDifference) {\n                largestDifference\
    \ = difference;\n                largestDifferenceIndex = i;\n            }\n\
    \        }\n        return Tuple.Create(numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]);"]
stop_tokens:
- "\n    }\n"
