name: HumanEval_42_incr_list
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list with elements incremented by 1.\n    // >>> IncrList((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)4L}))\n    // >>> IncrList((new List<long>(new\
  \ long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L,\
  \ (long)123L})))\n    // (new List<long>(new long[]{(long)6L, (long)4L, (long)6L,\
  \ (long)3L, (long)4L, (long)4L, (long)10L, (long)1L, (long)124L}))\n    public static\
  \ List<long> IncrList(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IncrList((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(IncrList((new List<long>(new\
  \ long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
  \ (long)3L, (long)2L}))));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)5L,\
  \ (long)2L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).Equals((new\
  \ List<long>(new long[]{(long)6L, (long)3L, (long)6L, (long)3L, (long)4L, (long)4L,\
  \ (long)10L, (long)1L, (long)124L}))));\n    }\n\n}\n"
completions: ["        l.Sort();\n        List<long> result = new List<long>();\n\
    \        long last = 0;\n        foreach (long i in l) {\n            if (i ==\
    \ last) {\n                result.Add(i);\n            } else {\n            \
    \    result.Add(last + 1);\n            }\n            last = i;\n        }\n\
    \        return result;", "        l.Sort();\n        List<long> result = new\
    \ List<long>();\n        long last = 0;\n        long current = 1;\n        foreach\
    \ (long x in l) {\n            if (last < x) {\n                result.Add(last);\n\
    \                current = 1;\n            }\n            current = current *\
    \ x;\n            last = x;\n        }\n        result.Add(last);\n        return\
    \ result;", "        List<long> ret = new List<long>();\n        foreach (long\
    \ x in l) {\n            ret.Add(x + 1);\n        }\n        return ret;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            result.Add(i + 1);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>(l);\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            result.Add(l[i] + 1);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l) {\n\
    \            result.Add(x + 1);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (long x in l) {\n   \
    \         result.Add(x + 1);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l) {\n            result.Add(i\
    \ + 1);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            result.Add(i + 1);\n\
    \        }\n        return result;", "        l.Sort();\n        List<long> result\
    \ = new List<long>();\n        long prev = 0;\n        long curr = 1;\n      \
    \  long next = 1;\n        foreach (long x in l) {\n            if (x == prev)\
    \ {\n                result.Add(curr);\n                curr = next;\n       \
    \         next++;\n            } else {\n                result.Add(x);\n    \
    \            prev = x;\n                curr = next;\n                next++;\n\
    \            }\n        }\n        result.Add(curr);\n        return result;",
  "        List<long> result = new List<long>();\n        long prev = 0;\n       \
    \ foreach (long x in l) {\n            long y = x + 1;\n            if (prev !=\
    \ y) {\n                result.Add(y);\n                prev = y;\n          \
    \  }\n        }\n        return result;", "        List<long> ret = new List<long>();\n\
    \        foreach (long x in l) {\n            ret.Add(x + 1);\n        }\n   \
    \     return ret;", "        List<long> result = new List<long>(l);\n        for\
    \ (int i = 0; i < l.Count; i++) {\n            result.Add(l[i] + 1);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            result.Add(i + 1);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long prev = 0;\n        foreach (long n in l) {\n            prev = n;\n\
    \            result.Add(prev + 1);\n        }\n        return result;", "    \
    \    List<long> ret = new List<long>();\n        foreach (long i in l) {\n   \
    \         ret.Add(i + 1);\n        }\n        return ret;", "        List<long>\
    \ ret = new List<long>();\n        foreach (long x in l) {\n            ret.Add(x\
    \ + 1);\n        }\n        return ret;", "        List<long> r = new List<long>(l);\n\
    \        r.ForEach(x => x++);\n        return r;", "        List<long> ret = new\
    \ List<long>();\n        foreach (long i in l) {\n            ret.Add(i + 1);\n\
    \        }\n        return ret;", "        List<long> result = new List<long>(l);\n\
    \        long current = 1;\n        long next = 1;\n        long last = 0;\n \
    \       foreach (long x in l) {\n            if (current != x) {\n           \
    \     result.Add(last);\n                current = x;\n                next =\
    \ 1;\n            }\n            else {\n                next++;\n           \
    \ }\n            last = x;\n        }\n        result.Add(last);\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
