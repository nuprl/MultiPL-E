language: cs
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n                isSorted
    = false;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] < last) {\n                return false;\n            }\n            if
    (lst[i] == last) {\n                found = true;\n            }\n            last
    = lst[i];\n        }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2fa471750d0478c8b9cae7887552fe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2fa471750d0478c8b9cae7887552fe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n                isSorted
    = false;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] > last)
    {\n                isSorted = false;\n                break;\n            }\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] > last)
    {\n                isSorted = false;\n                break;\n            }\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            if
    (lst[i] > lastValue)\n                isSorted = true;\n            lastValue
    = lst[i];\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <956cf76e43a8493ab7f3d3cc205aa1f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <956cf76e43a8493ab7f3d3cc205aa1f1>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            if (lst[i] == lastValue) {\n                isSorted
    = true;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9cde75740ab42d2b436bd759a1c399f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9cde75740ab42d2b436bd759a1c399f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = lst[0];\n        bool sorted = false;\n        foreach
    (long i in lst) {\n            if (i > last) {\n                sorted = true;\n
    \               break;\n            }\n            last = i;\n        }\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed11bae2a7ca45449f4efdc73c4192b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed11bae2a7ca45449f4efdc73c4192b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           else\n                lastValue = lst[i];\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85b110e20bec4587af3bce51593cf03c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85b110e20bec4587af3bce51593cf03c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] < last) {\n                return false;\n            }\n            if
    (lst[i] == last) {\n                found = true;\n            }\n            last
    = lst[i];\n        }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2fa471750d0478c8b9cae7887552fe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2fa471750d0478c8b9cae7887552fe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n
    \               isSorted = false;\n            if (lst[i] > last)\n                isSorted
    = false;\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prevVal = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prevVal) {\n                isSorted
    = false;\n                break;\n            }\n            prevVal = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <49db519580a942cb9a69afe05671018c>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <49db519580a942cb9a69afe05671018c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <49db519580a942cb9a69afe05671018c>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <49db519580a942cb9a69afe05671018c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else
    if (lst[i] > lastValue)\n                isSorted = false;\n            lastValue
    = lst[i];\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <548a1c63b1294ffa8fe360439cbe4bf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <548a1c63b1294ffa8fe360439cbe4bf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        bool isSorted = true;\n        foreach
    (long num in lst) {\n            if (num < prev) {\n                isSorted =
    false;\n                break;\n            }\n            prev = num;\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d763036c61be4672b2d91d095cbb6fd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d763036c61be4672b2d91d095cbb6fd3>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2) return
    false;\n        long first = lst[0];\n        long last = lst[lst.Count - 1];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < first) {\n                isSorted = false;\n                break;\n
    \           }\n            if (lst[i] > last) {\n                isSorted = false;\n
    \               break;\n            }\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d83f0dd66703480ab2731c7a6f437670>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d83f0dd66703480ab2731c7a6f437670>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Add(item))\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        bool sorted = false;\n        foreach
    (long n in lst) {\n            if (prev > n) {\n                sorted = false;\n
    \               break;\n            }\n            prev = n;\n        }\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <baa3ccaf7b304cdea81be21c1fe3eb5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <baa3ccaf7b304cdea81be21c1fe3eb5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long num in lst) {\n            if
    (num == last)\n                continue;\n            if (first)\n                first
    = false;\n            else\n                return false;\n            last =
    num;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bee624b433204705bac20b8013238c77>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bee624b433204705bac20b8013238c77>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool flag = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] < last) {\n                flag = false;\n                break;\n            }\n
    \           last = lst[i];\n        }\n        return flag;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73ebf0def8f84ebea0eb63d161d22cff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73ebf0def8f84ebea0eb63d161d22cff>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            if (lst[i] == lastValue) {\n                isSorted
    = true;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9cde75740ab42d2b436bd759a1c399f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9cde75740ab42d2b436bd759a1c399f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Add(item))\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long i in lst) {\n            if
    (first && i == last)\n                return false;\n            if (first &&
    i != last)\n                return false;\n            first = false;\n            last
    = i;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f154ab7214cb40a2b9ef88001212b143>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f154ab7214cb40a2b9ef88001212b143>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed744e2997ab4fbea8df4e411b71fc66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed744e2997ab4fbea8df4e411b71fc66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] < last) {\n                return false;\n            }\n            if
    (lst[i] == last) {\n                found = true;\n            }\n            last
    = lst[i];\n        }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2fa471750d0478c8b9cae7887552fe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2fa471750d0478c8b9cae7887552fe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                return false;\n            }\n
    \           isSorted = true;\n            last = lst[i];\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3aba7d2d322d46df800021fa713377bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3aba7d2d322d46df800021fa713377bd>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool first = true;\n        foreach (long num in lst) {\n            if
    (first && num == last) return false;\n            if (num < last) return false;\n
    \           last = num;\n            first = false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04cb2d1729d94e8e9ce584ff173652c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04cb2d1729d94e8e9ce584ff173652c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            lastValue = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool first = true;\n        foreach (long num in lst) {\n            if
    (first && num == last) return false;\n            if (num < last) return false;\n
    \           last = num;\n            first = false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04cb2d1729d94e8e9ce584ff173652c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04cb2d1729d94e8e9ce584ff173652c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            if (lst[i] == lastValue) {\n                isSorted
    = true;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9cde75740ab42d2b436bd759a1c399f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9cde75740ab42d2b436bd759a1c399f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n
    \               isSorted = false;\n            if (lst[i] > last)\n                isSorted
    = false;\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] > last)
    {\n                isSorted = false;\n                break;\n            }\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2) return
    false;\n        var seen = new HashSet<long>();\n        foreach (var item in
    lst) {\n            if (seen.Contains(item)) return false;\n            seen.Add(item);\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4fff18062474b3c811b6d848d8d9c26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4fff18062474b3c811b6d848d8d9c26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n
    \               break;\n            }\n            lastValue = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4689e3146794806b30d12630a114c0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4689e3146794806b30d12630a114c0b>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n
    \               isSorted = false;\n            if (lst[i] > last)\n                isSorted
    = false;\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2) return
    false;\n        if (lst.Count == 2) return lst.First() == lst.Last();\n        long
    first = lst.First();\n        long last = lst.Last();\n        bool isAscending
    = true;\n        long lastValue = last;\n        foreach (long value in lst) {\n
    \           if (value > lastValue) {\n                isAscending = false;\n                break;\n
    \           }\n            lastValue = value;\n        }\n        return isAscending;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07952e7708314ca18680db3f392ce388>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07952e7708314ca18680db3f392ce388>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            isSorted = true;\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prev
    = 0;\n        bool isSorted = true;\n        foreach (long num in lst) {\n            if
    (num < prev)\n                isSorted = false;\n            prev = num;\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05ed4ff7bd04454b8f6922cd151f52b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05ed4ff7bd04454b8f6922cd151f52b5>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long num in lst) {\n            if
    (first && num == last)\n                continue;\n            first = false;\n
    \           if (num < last)\n                return false;\n            last =
    num;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f451388349a42cdbedb756bc70cadf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f451388349a42cdbedb756bc70cadf6>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                return false;\n            }\n
    \           isSorted = true;\n            last = lst[i];\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b36d81fe96c4e179679895775b1789b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b36d81fe96c4e179679895775b1789b>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        long curr = lst[0];\n        bool isSorted
    = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]
    < curr) {\n                isSorted = false;\n                break;\n            }\n
    \           if (lst[i] == prev) {\n                isSorted = false;\n                break;\n
    \           }\n            prev = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00358cc5fd364fa593ba5da205a1e372>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00358cc5fd364fa593ba5da205a1e372>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            isSorted = true;\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Add(item))\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        bool isSorted = true;\n        foreach
    (long num in lst) {\n            if (prev > num) {\n                isSorted =
    false;\n                break;\n            }\n            prev = num;\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81be2f5c52f649a5aefc9c0e4803e683>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81be2f5c52f649a5aefc9c0e4803e683>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n
    \       foreach (var x in lst) {\n            if (seen.Add(x)) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <176bc47ee7c04eb2b673905ec695cc75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <176bc47ee7c04eb2b673905ec695cc75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool isSorted = true;\n        long lastValue = lst[0];\n        foreach
    (long value in lst) {\n            if (value > lastValue) {\n                isSorted
    = false;\n                break;\n            }\n            lastValue = value;\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6be8aa8c3b93461093dce1434555a3a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6be8aa8c3b93461093dce1434555a3a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst.Last();\n        bool isSorted = true;\n
    \       foreach (long value in lst) {\n            if (value < lastValue) {\n
    \               isSorted = false;\n                break;\n            }\n            lastValue
    = value;\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22ff01de35c84e448b4a941125927aa4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22ff01de35c84e448b4a941125927aa4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prevVal = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prevVal) {\n                isSorted
    = false;\n                break;\n            }\n            prevVal = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <49db519580a942cb9a69afe05671018c>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <49db519580a942cb9a69afe05671018c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <49db519580a942cb9a69afe05671018c>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <49db519580a942cb9a69afe05671018c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n
    \       foreach (var x in lst) {\n            if (seen.Contains(x)) return false;\n
    \           seen.Add(x);\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5acbc53625af4be9a870bce926b57638>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5acbc53625af4be9a870bce926b57638>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Add(item))\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Contains(item))\n
    \               return false;\n            seen.Add(item);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b26c2a555164d919539ad9a422b87f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b26c2a555164d919539ad9a422b87f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                return false;\n            }\n
    \           if (lst[i] == last) {\n                found = true;\n            }\n
    \           last = lst[i];\n        }\n        return found;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f619933dc9545af9e785604bddc487e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f619933dc9545af9e785604bddc487e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            lastValue = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n
    \       foreach (var item in lst) {\n            if (seen.Add(item)) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8035618481c74ca7a5e18f27c086b45e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8035618481c74ca7a5e18f27c086b45e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last)\n                isSorted = false;\n            last
    = lst[i];\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <972e92fce24445d0a05cea0c3b7a435d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <972e92fce24445d0a05cea0c3b7a435d>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2 &&
    lst.Distinct().Count() > 1) return false;\n        long last = lst[0];\n        bool
    isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            isSorted = true;\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56c5151ccbc6412494fc711a2e5c49a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56c5151ccbc6412494fc711a2e5c49a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            if (lst[i] == last) {\n                isSorted
    = true;\n                break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7074b09e480e43b9888502e4966f3188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7074b09e480e43b9888502e4966f3188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool found = false;\n        foreach (long num in lst) {\n
    \           if (num == last)\n                found = true;\n            else\n
    \               found = false;\n            if (found)\n                return
    false;\n            last = num;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eef812ceb2024ef2b842b67d13fdf2e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eef812ceb2024ef2b842b67d13fdf2e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Contains(item))\n
    \               return false;\n            seen.Add(item);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b26c2a555164d919539ad9a422b87f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b26c2a555164d919539ad9a422b87f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var seen
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (seen.Add(item))\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818229bb8a374580b8e3cd873aa81a59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n                isSorted
    = false;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var hashSet = new HashSet<long>(lst);\n
    \       if (hashSet.Count != lst.Count) return false;\n        var sortedList
    = lst.OrderBy(x => x).ToList();\n        if (sortedList.Count != lst.Count) return
    false;\n        foreach (var item in sortedList) {\n            if (hashSet.Contains(item))
    return false;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a22ffbdeb7ef41c3949bd7263fc63399>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a22ffbdeb7ef41c3949bd7263fc63399>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] > last)
    {\n                isSorted = false;\n                break;\n            }\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool first = true;\n        foreach (long num in lst) {\n            if
    (first && num == last) return true;\n            if (num < last) return false;\n
    \           last = num;\n            first = false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bd6ff8066f947acad55032348267974>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bd6ff8066f947acad55032348267974>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long prev = 0;\n        bool
    isSorted = true;\n        foreach (long num in lst) {\n            if (num < prev)
    {\n                isSorted = false;\n                break;\n            }\n
    \           prev = num;\n        }\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f18fe3c48de84a43b083d91479917ae2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f18fe3c48de84a43b083d91479917ae2>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prev
    = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] == prev)\n
    \               continue;\n            prev = lst[i];\n            curr = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c49df657512c49749ec94f03c91e3e46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c49df657512c49749ec94f03c91e3e46>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prev
    = 0;\n        long current = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < current) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] == current)
    {\n                if (prev != lst[i - 1]) {\n                    isSorted = false;\n
    \                   break;\n                }\n            }\n            prev
    = current;\n            current = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62d2d4952aec46c4aaaa28420e6af9ca>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last)\n                return false;\n            else\n
    \               last = lst[i];\n        }\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75bb70521ed4a6fb02c5af8e3ec8135>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75bb70521ed4a6fb02c5af8e3ec8135>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            isSorted = true;\n            last
    = lst[i];\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78d2817c224b02b76d37943c6b1bc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78d2817c224b02b76d37943c6b1bc9>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n
    \       foreach (var item in lst) {\n            if (seen.Contains(item)) return
    false;\n            seen.Add(item);\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0d8d6ca46a941be994ee132d1133693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0d8d6ca46a941be994ee132d1133693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                return false;\n            }\n
    \           if (lst[i] == last) {\n                found = true;\n            }\n
    \           last = lst[i];\n        }\n        return found;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f619933dc9545af9e785604bddc487e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f619933dc9545af9e785604bddc487e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] != last) {\n                found = true;\n                break;\n            }\n
    \       }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943b24228f0841cfabd440c7e537df2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943b24228f0841cfabd440c7e537df2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] > last)
    {\n                isSorted = false;\n                break;\n            }\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool first = true;\n        foreach (long value in lst) {\n
    \           if (first)\n                first = false;\n            else\n                if
    (lastValue == value)\n                    return false;\n            lastValue
    = value;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <938915edaf7a4bd495c5fbbaa64d2ba6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <938915edaf7a4bd495c5fbbaa64d2ba6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n
    \               isSorted = false;\n            if (lst[i] > last)\n                isSorted
    = false;\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n                isSorted
    = false;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var hash = new HashSet<long>();\n
    \       foreach (var item in lst) {\n            if (hash.Contains(item)) return
    false;\n            hash.Add(item);\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47ef6e3d20564ac99f9747ec6d924e2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47ef6e3d20564ac99f9747ec6d924e2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var hash
    = new HashSet<long>();\n        foreach (var item in lst) {\n            if (hash.Contains(item))\n
    \               return false;\n            hash.Add(item);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e79df04c4e88432e8313640be192122f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e79df04c4e88432e8313640be192122f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            isSorted = true;\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n
    \       foreach (var item in lst) {\n            if (seen.Add(item)) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30774f5d6bb248049bbf01babf5fa8fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30774f5d6bb248049bbf01babf5fa8fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) isSorted = false;\n            lastValue =
    lst[i];\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c86ef215b397416994832c51659d6dec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c86ef215b397416994832c51659d6dec>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool found = false;\n        foreach (long num in lst) {\n            if
    (num == last) return false;\n            if (num < last) found = true;\n            last
    = num;\n        }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc873a661adf42c4a74d06db61242d71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc873a661adf42c4a74d06db61242d71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] != last) {\n                found = true;\n                break;\n            }\n
    \       }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943b24228f0841cfabd440c7e537df2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943b24228f0841cfabd440c7e537df2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            lastValue = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] != last) {\n                found = true;\n                break;\n
    \           }\n        }\n        return found;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e91cf99c59d4330a0d331a7384a5284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e91cf99c59d4330a0d331a7384a5284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            lastValue = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1230c9d0974f73ab019bf61ee065ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1230c9d0974f73ab019bf61ee065ff>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] > last)
    {\n                isSorted = false;\n                break;\n            }\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var hash = new HashSet<long>();\n
    \       foreach (var item in lst) {\n            if (hash.Contains(item)) return
    false;\n            hash.Add(item);\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47ef6e3d20564ac99f9747ec6d924e2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47ef6e3d20564ac99f9747ec6d924e2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2 &&
    lst.Distinct().Count() > 1) return false;\n        long first = lst[0];\n        long
    last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for (int i
    = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] > last)
    {\n                isSorted = false;\n                break;\n            }\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3def6d3c411345fbb573a33ec97951bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3def6d3c411345fbb573a33ec97951bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool first = true;\n        foreach (long value in lst) {\n            if
    (first) {\n                first = false;\n                if (lastValue == value)
    return false;\n            } else {\n                if (lastValue == value) return
    false;\n            }\n            lastValue = value;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8efc9e92afd4b398da3b234fa1d78f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8efc9e92afd4b398da3b234fa1d78f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1230c9d0974f73ab019bf61ee065ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1230c9d0974f73ab019bf61ee065ff>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2 &&
    lst.Distinct().Count() > 1) return false;\n        long last = lst.Last();\n        long
    first = lst.First();\n        if (last < first) return true;\n        if (last
    > first) return false;\n        long mid = first + (last - first) / 2;\n        bool
    isSorted = true;\n        foreach (long num in lst) {\n            if (num < mid)
    isSorted = false;\n            if (num > mid) isSorted = false;\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9546c5bce1b4cd8a7e4feed51f0b6da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9546c5bce1b4cd8a7e4feed51f0b6da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            isSorted = true;\n            last
    = lst[i];\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78d2817c224b02b76d37943c6b1bc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78d2817c224b02b76d37943c6b1bc9>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prevVal
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < prevVal)\n                isSorted = false;\n
    \           prevVal = lst[i];\n        }\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe26bd7c1dd64105aa79382fbc193fd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe26bd7c1dd64105aa79382fbc193fd7>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2) return
    false;\n        long first = lst[0];\n        long last = lst[lst.Count - 1];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < first) {\n                isSorted = false;\n                break;\n
    \           }\n            if (lst[i] > last) {\n                isSorted = false;\n
    \               break;\n            }\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d83f0dd66703480ab2731c7a6f437670>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d83f0dd66703480ab2731c7a6f437670>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n
    \       foreach (var item in lst) {\n            if (seen.Contains(item)) return
    false;\n            seen.Add(item);\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0d8d6ca46a941be994ee132d1133693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0d8d6ca46a941be994ee132d1133693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool first = true;\n        foreach (long num in lst) {\n            if
    (first) {\n                first = false;\n                if (num == last) return
    true;\n            } else {\n                if (num != last) return false;\n
    \           }\n            last = num;\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e83dff8910ff40f2a79a29371450ab0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e83dff8910ff40f2a79a29371450ab0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last)\n                return false;\n            isSorted
    = isSorted && (lst[i] <= last);\n            last = lst[i];\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ff77aae3d494429bc8c3c2a26a751fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ff77aae3d494429bc8c3c2a26a751fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n
    \       foreach (var item in lst) {\n            if (seen.Contains(item)) return
    false;\n            seen.Add(item);\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0d8d6ca46a941be994ee132d1133693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0d8d6ca46a941be994ee132d1133693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n
    \       foreach (var item in lst) {\n            if (seen.Add(item)) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30774f5d6bb248049bbf01babf5fa8fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30774f5d6bb248049bbf01babf5fa8fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) isSorted =
    false;\n            if (lst[i] > last) isSorted = false;\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fb2e4bcab8b4f49ae9a6dee6774809d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fb2e4bcab8b4f49ae9a6dee6774809d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool firstValue = true;\n        bool lastValueIsDuplicate
    = false;\n        bool firstValueIsDuplicate = false;\n        foreach (long value
    in lst) {\n            if (firstValue) {\n                firstValueIsDuplicate
    = firstValue && value == lastValue;\n                firstValue = false;\n            }\n
    \           lastValueIsDuplicate = lastValue == value;\n            lastValue
    = value;\n        }\n        return firstValueIsDuplicate && lastValueIsDuplicate;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e8c2c9f6fbd4f36a23c4925e5ad7a96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e8c2c9f6fbd4f36a23c4925e5ad7a96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n
    \               break;\n            }\n            lastValue = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4689e3146794806b30d12630a114c0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4689e3146794806b30d12630a114c0b>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prevVal
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < prevVal)\n                isSorted = false;\n
    \           prevVal = lst[i];\n        }\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe26bd7c1dd64105aa79382fbc193fd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe26bd7c1dd64105aa79382fbc193fd7>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n
    \               isSorted = false;\n            if (lst[i] > last)\n                isSorted
    = false;\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long num in lst) {\n            if
    (first && num == last)\n                continue;\n            if (num < last)\n
    \               return false;\n            last = num;\n            first = false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfb5cbea300d4d71b171305328710c39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfb5cbea300d4d71b171305328710c39>:0
    \n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long prev = 0;\n        bool
    isSorted = true;\n        foreach (long i in lst) {\n            if (prev > i)
    {\n                isSorted = false;\n                break;\n            }\n
    \           prev = i;\n        }\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29a8e8220cfb451ea11d23a62af50266>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29a8e8220cfb451ea11d23a62af50266>:0
    \n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prev
    = 0;\n        bool flag = true;\n        foreach (long i in lst) {\n            if
    (prev > i) {\n                flag = false;\n                break;\n            }\n
    \           prev = i;\n        }\n        return flag;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b2236877c744f979f1e86d4dc661efa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b2236877c744f979f1e86d4dc661efa>:0
    \n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            isSorted = true;\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            isSorted
    = false;\n            lastValue = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d75c9d2795046c997912b0783f7710e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d75c9d2795046c997912b0783f7710e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long num in lst) {\n            if
    (first && num == last)\n                continue;\n            first = false;\n
    \           if (num < last)\n                return false;\n            last =
    num;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f451388349a42cdbedb756bc70cadf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f451388349a42cdbedb756bc70cadf6>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            if (lst[i] == lastValue) {\n                isSorted
    = true;\n            }\n            lastValue = lst[i];\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd92bb8404b24039895aef82e111e9c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd92bb8404b24039895aef82e111e9c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool firstValue = true;\n        foreach (long value in lst)
    {\n            if (firstValue) {\n                firstValue = false;\n                continue;\n
    \           }\n            if (value == lastValue)\n                return false;\n
    \           lastValue = value;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bde69952d32b4c7893b394c1be1d8286>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bde69952d32b4c7893b394c1be1d8286>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prevVal
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < prevVal) {\n                isSorted = false;\n
    \               break;\n            }\n            prevVal = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36b480f89c1a4abba0afacb8062e419a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36b480f89c1a4abba0afacb8062e419a>:0
    \n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2) return
    false;\n        long first = lst[0];\n        long last = lst[lst.Count - 1];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < first) {\n                isSorted = false;\n                break;\n
    \           }\n            if (lst[i] > last) {\n                isSorted = false;\n
    \               break;\n            }\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d83f0dd66703480ab2731c7a6f437670>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d83f0dd66703480ab2731c7a6f437670>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n
    \               isSorted = false;\n            if (lst[i] > last)\n                isSorted
    = false;\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        if (first > last)\n
    \           return false;\n        long mid = first + (last - first) / 2;\n        bool
    isLeft = true;\n        bool isRight = true;\n        foreach (long num in lst)
    {\n            if (num == mid)\n                isLeft = isLeft && num < mid;\n
    \           else\n                isRight = isRight && num > mid;\n        }\n
    \       return isLeft && isRight;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a40dfa934758498fb39723fb76eef7d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a40dfa934758498fb39723fb76eef7d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            isSorted = true;\n            last
    = lst[i];\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78d2817c224b02b76d37943c6b1bc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78d2817c224b02b76d37943c6b1bc9>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        long current = lst[0];\n        bool isSorted
    = false;\n        foreach (long num in lst) {\n            if (num < current)
    {\n                isSorted = false;\n                break;\n            }\n
    \           if (num == current) {\n                if (prev != current) {\n                    isSorted
    = false;\n                    break;\n                }\n            }\n            prev
    = current;\n            current = num;\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e58350bf270544959326b7f92871ad4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e58350bf270544959326b7f92871ad4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            isSorted = true;\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            lastValue = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long prev
    = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] == prev)
    {\n                isSorted = false;\n                break;\n            }\n
    \           prev = lst[i];\n        }\n        return isSorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f70b43cb49e0445e9eaa97860bec9b4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f70b43cb49e0445e9eaa97860bec9b4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                return false;\n            }\n
    \           if (lst[i] == last) {\n                found = true;\n            }\n
    \           last = lst[i];\n        }\n        return found;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f619933dc9545af9e785604bddc487e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f619933dc9545af9e785604bddc487e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)
    {\n                isSorted = false;\n                break;\n            }\n
    \           if (lst[i] > last) {\n                isSorted = false;\n                break;\n
    \           }\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a56d79ec9c24f75a988abc336b173f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a56d79ec9c24f75a988abc336b173f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            if (lst[i] == lastValue) {\n                isSorted
    = true;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9cde75740ab42d2b436bd759a1c399f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9cde75740ab42d2b436bd759a1c399f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long prev = 0;\n        bool
    sorted = false;\n        foreach (long num in lst) {\n            if (num > prev)
    {\n                sorted = true;\n                break;\n            }\n            prev
    = num;\n        }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caabb8f7f1ef4374ab74e0c98d697e81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caabb8f7f1ef4374ab74e0c98d697e81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] != last) {\n                found = true;\n                break;\n
    \           }\n        }\n        return found;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e91cf99c59d4330a0d331a7384a5284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e91cf99c59d4330a0d331a7384a5284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            isSorted = true;\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prevVal = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prevVal) {\n                isSorted
    = false;\n                break;\n            }\n            prevVal = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <49db519580a942cb9a69afe05671018c>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <49db519580a942cb9a69afe05671018c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <49db519580a942cb9a69afe05671018c>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <49db519580a942cb9a69afe05671018c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n                isSorted
    = false;\n                break;\n            }\n            last = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <dc5eb215febd40169d48f5166767b211>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <dc5eb215febd40169d48f5166767b211>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <dc5eb215febd40169d48f5166767b211>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <dc5eb215febd40169d48f5166767b211>:0
    \n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastValue = lst[0];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n                isSorted
    = false;\n                break;\n            }\n            lastValue = lst[i];\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <03a6b55eede842b093304427bf3a2abc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <03a6b55eede842b093304427bf3a2abc>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        bool isSorted = true;\n        foreach
    (long num in lst) {\n            if (num < prev) {\n                isSorted =
    false;\n                break;\n            }\n            prev = num;\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d763036c61be4672b2d91d095cbb6fd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d763036c61be4672b2d91d095cbb6fd3>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        bool isSorted = true;\n        foreach
    (long num in lst) {\n            if (num < prev) {\n                isSorted =
    false;\n                break;\n            }\n            prev = num;\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d763036c61be4672b2d91d095cbb6fd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d763036c61be4672b2d91d095cbb6fd3>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long num in lst) {\n            if
    (first && num == last)\n                continue;\n            if (num < last)\n
    \               return false;\n            first = false;\n            last =
    num;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab1d680ca980477d9d3d9b1ba26db66b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab1d680ca980477d9d3d9b1ba26db66b>:0
    \n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long first
    = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n
    \               isSorted = false;\n            if (lst[i] > last)\n                isSorted
    = false;\n        }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86163b346506494e8e8cba0488b7354e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            isSorted = true;\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f4494d060ad4dc59882eeae7e649f5d>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] != last) {\n                return false;\n            }\n
    \           last = lst[i];\n            if (first) {\n                first =
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <782cd8ca0b04492e8185d41e735e596a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <782cd8ca0b04492e8185d41e735e596a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long x in lst) {\n            if
    (first)\n                first = false;\n            else\n                if
    (last > x)\n                    return false;\n            last = x;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd409753447143c28919f1d70658a2cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd409753447143c28919f1d70658a2cd>:0
    \n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) isSorted =
    false;\n            if (lst[i] > last) isSorted = false;\n        }\n        return
    isSorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fb2e4bcab8b4f49ae9a6dee6774809d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fb2e4bcab8b4f49ae9a6dee6774809d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] != last) {\n                found = true;\n                break;\n
    \           }\n        }\n        return found;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e91cf99c59d4330a0d331a7384a5284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e91cf99c59d4330a0d331a7384a5284>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                return false;\n            }\n
    \           if (first) {\n                last = lst[i];\n                first
    = false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446e7f1de696436882d200da14222082>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446e7f1de696436882d200da14222082>:0
    \n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted
    = false;\n                break;\n            }\n            if (lst[i] > last)
    {\n                isSorted = false;\n                break;\n            }\n
    \       }\n        return isSorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7424bb5a11c4c26801118beacd281fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        var hash
    = new Dictionary<long, long>();\n        foreach (var item in lst) {\n            if
    (hash.ContainsKey(item))\n                return false;\n            hash[item]
    = item;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ab789d4fc8c4568a4ed8649ef8d5719>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ab789d4fc8c4568a4ed8649ef8d5719>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n                break;\n
    \           }\n            lastValue = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc113e1fbd154937b84ca557d9f50214>:0
    \n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n
    \       bool first = true;\n        foreach (long value in lst) {\n            if
    (first) {\n                first = false;\n                continue;\n            }\n
    \           if (value >= lastValue) return false;\n            lastValue = value;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7906a928356044028e68d46629beaf8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7906a928356044028e68d46629beaf8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            isSorted = true;\n            last
    = lst[i];\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78d2817c224b02b76d37943c6b1bc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78d2817c224b02b76d37943c6b1bc9>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                isSorted = false;\n
    \           lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38b0845d6cd4b41b70a0b5837044c40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        long curr = lst[0];\n        for (int
    i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n                return
    false;\n            }\n            if (lst[i] == prev) {\n                return
    false;\n            }\n            prev = lst[i];\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d382e4a6d8fc4ebb917640027e44667a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d382e4a6d8fc4ebb917640027e44667a>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List"
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n
    \               break;\n            }\n            last = lst[i];\n        }\n
    \       return isSorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e11547dc574b9fac79e51e2e52aa40>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1230c9d0974f73ab019bf61ee065ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1230c9d0974f73ab019bf61ee065ff>:0
    \n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long num in lst) {\n            if
    (first && num == last)\n                return false;\n            else if (num
    < last)\n                return false;\n            first = false;\n            last
    = num;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37595907c59043679a7bfca63001325d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37595907c59043679a7bfca63001325d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n
    \           if (lst[i] < last) {\n                isSorted = false;\n                break;\n
    \           }\n            last = lst[i];\n        }\n        return isSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f4fe1e93630414abc8b001748247d0c>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        if (lst.Count > 2 &&
    lst.Skip(1).SequenceEqual(lst.Take(2))) return false;\n        long first = lst[0];\n
    \       long last = lst[lst.Count - 1];\n        if (first < last) return true;\n
    \       if (first > last) return false;\n        long mid = first + (last - first)
    / 2;\n        if (mid == first) return IsSorted(lst.Skip(1).Take(mid));\n        if
    (mid == last) return IsSorted(lst.Take(mid).Skip(1).Take(last - mid));\n        return
    IsSorted(lst.Skip(1).Take(mid).Take(last - mid));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbtu3y1d2.cs(37,60): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpbtu3y1d2.cs(38,51): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpbtu3y1d2.cs(39,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659800536
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long last
    = lst[0];\n        bool first = true;\n        foreach (long num in lst) {\n            if
    (first) {\n                first = false;\n                if (num == last)\n
    \                   return false;\n                last = num;\n                continue;\n
    \           }\n            if (num == last)\n                return false;\n            last
    = num;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01792740751345d99e2c91a31a2b5e01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01792740751345d99e2c91a31a2b5e01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       bool first = true;\n        foreach (long x in lst) {\n            if
    (first && x == last) return false;\n            if (first && !first) continue;\n
    \           if (x < last) return false;\n            last = x;\n            first
    = false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0e73646f93245a3874e7fd110a0004c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0e73646f93245a3874e7fd110a0004c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b53f276a939e4e3d93830d1b720d4304>:0
    \n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2)\n            return true;\n        long lastValue
    = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < lastValue)\n                return false;\n            else\n
    \               lastValue = lst[i];\n        }\n        return isSorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1230c9d0974f73ab019bf61ee065ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1230c9d0974f73ab019bf61ee065ff>:0
    \n"
  stdout: ''
  timestamp: 1659800535
