name: HumanEval_127_intersection
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given two intervals,\n    // where each interval is\
  \ a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The\
  \ given intervals are closed which means that the interval (start, end)\n    //\
  \ includes both start and end.\n    // For each given interval, it is assumed that\
  \ its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    // >>> Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L)))\n\
  \    // (\"NO\")\n    // >>> Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L,\
  \ 4L)))\n    // (\"NO\")\n    // >>> Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L,\
  \ 5L)))\n    // (\"YES\")\n    public static string Intersection(Tuple<long, long>\
  \ interval1, Tuple<long, long> interval2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L,\
  \ 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L,\
  \ -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L,\
  \ 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"
completions: ["        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime)\n                return \"YES\";\n     \
    \       if (length < prime)\n                isPrime = false;\n            prime\
    \ += 2;\n        }\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime) {\n                isPrime = false;\n  \
    \          } else {\n                length += prime;\n            }\n       \
    \     prime += 2;\n        }\n        if (length == prime) return \"YES\";\n \
    \       return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = GetPrime(length);\n        if (prime == length) return \"YES\";\n  \
    \      if (prime == 0) return \"NO\";\n        long start2 = start - prime;\n\
    \        long end2 = end + prime;\n        if (start2 > end2) return \"NO\";\n\
    \        if (start2 < end2) return \"YES\";\n        return Intersection(Tuple.Create(start2,\
    \ end2), interval2);", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max / 2;\n        long max3\
    \ = max * max;\n        long max4 = max3 * max;\n        long max5 = max4 * max;\n\
    \        long max6 = max5 * max;\n        long max7 = max6 * max;\n        long\
    \ max8 = max7 * max;\n        long max9 = max8 * max;\n        long max10 = max9\
    \ * max;\n        long max11 = max10 * max;\n        long max12 = max11 * max;\n\
    \        long max13 = max12 * max;\n        long max14 = max13 * max;\n      \
    \  long max15 = max14 * max;\n        long max16 = max15 * max;\n        long\
    \ max17 = max16 * max;\n        long max18 = max17 * max;\n        long max19\
    \ = max18 * max;\n        long max20 = max19 * max;\n        long max21 = max20\
    \ * max;\n        long max22 = max21 * max;\n        long max23 = max22 * max;\n\
    \        long max24 = max23 * max;\n        long max25 = max24 * max;\n      \
    \  long max26 = max25 * max;\n        long max27 = max26 * max;\n        long\
    \ max28 = max27 * max;\n        long max29 = max28 * max;\n        long max30\
    \ = max29 * max;\n        long max31 = max30 * max;\n        long max32 = max31\
    \ * max;\n        long max33 = max32 * max;\n        long max34 = max33 * max;\n\
    \        long max35 = max34 * max;\n        long max36 = max35 * max;\n      \
    \  long max37 = max36 * max;\n        long max38 = max37 * max;\n        long\
    \ max39 = max38 * max;\n        long max40 = max39 * max;\n        long max41\
    \ = max40 * max;\n        long max42 = max41 * max;\n        long max43 = max42\
    \ * max;\n        long max44 = max43 * max;\n        long ", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long sum = 0;\n        long prime = 1;\n        while\
    \ (prime <= length) {\n            sum += prime;\n            prime += 2;\n  \
    \      }\n        if (sum == length) return \"YES\";\n        return \"NO\";",
  "        long start = interval1.Item1;\n        long end = interval1.Item2;\n  \
    \      long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length = end - start;\n        long length2 = end2 - start2;\n \
    \       if (length2 == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == length2) {\n            if (length == 1) {\n                return\
    \ \"YES\";\n            }\n            long mid = (start + end) / 2;\n       \
    \     if (mid == start2) {\n                return \"YES\";\n            }\n \
    \           if (mid == end2) {\n                return \"YES\";\n            }\n\
    \            long mid2 = (mid + start2) / 2;\n            if (mid2 == start) {\n\
    \                return \"YES\";\n            }\n            if (mid2 == end)\
    \ {\n                return \"YES\";\n            }\n            long mid3 = (mid2\
    \ + end2) / 2;\n            if (mid3 == start2) {\n                return \"YES\"\
    ;\n            }\n            if (mid3 == end2) {\n                return \"YES\"\
    ;\n            }\n            long mid4 = (mid3 + start2) / 2;\n            if\
    \ (mid4 == start) {\n                return \"YES\";\n            }\n        \
    \    if (mid4 == end) {\n                return \"YES\";\n            }\n    \
    \        long mid5 = (mid4 + end2) / 2;\n            if (mid5 == start2) {\n \
    \               return \"YES\";\n            }\n            if (mid5 == end2)\
    \ {\n                return \"YES\";\n            }\n            long mid6 = (mid5\
    \ + start2) / 2;\n            if (mid6 == start) {\n                return \"\
    YES\";\n            }\n            if (mid6 == end) {\n                return\
    \ \"YES\";\n            }\n            long mid7 = (mid6 + end2) / 2;\n      \
    \      if (mid7 == start2) {\n                return \"YES\";\n            }\n\
    \            if (mid7 == end2) {\n                return \"YES\";\n          \
    \  }\n            long mid8 = (mid7 + start2) / 2;\n            if (mid8 == start)\
    \ {\n                return \"YES\";\n            }\n            if (mid8 == end)\
    \ {\n                return \"YES\";\n            }\n            long mid9 = (mid8\
    \ + end2) / 2;\n            if (mid9 == start2) {\n                return \"YES\"\
    ;\n            }\n            if (mid9 == end2) {\n                return \"YES\"\
    ;\n            }\n            long mid10 = (mid9 + start2) / 2;\n            if\
    \ (mid10 == start) {\n                return \"YES\";\n            }\n       \
    \     if (mid10 == end) {\n                return \"YES\";\n            }\n  \
    \          long mid11 = (mid10 + end2) / 2;\n            if (mid11 == start2)\
    \ {\n                return \"YES\";\n            }\n            if (mid11 ==\
    \ end2) {\n                return \"YES\";\n", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (prime == length) return \"\
    YES\";\n        if (prime != 0) return \"NO\";\n        return \"NO\";", "   \
    \     long start = interval1.Item1;\n        long end = interval1.Item2;\n   \
    \     long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n \
    \       long length = end - start;\n        long length2 = end2 - start2;\n  \
    \      if (length2 == 0) {\n            return \"NO\";\n        }\n        long\
    \ inter = length * length2;\n        long prime = CheckPrime(inter);\n       \
    \ if (prime == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (prime == 1) {\n\
    \            return \"YES\";\n        }\n        long a = length / prime;\n  \
    \      long b = length2 / prime;\n        long c = inter / prime;\n        long\
    \ d = inter / prime2;\n        long e = inter / prime3;\n        long f = inter\
    \ / prime4;\n        long g = inter / prime5;\n        long h = inter / prime6;\n\
    \        long i = inter / prime7;\n        long j = inter / prime8;\n        long\
    \ k = inter / prime9;\n        long l = inter / prime10;\n        long m = inter\
    \ / prime11;\n        long n = inter / prime12;\n        long o = inter / prime13;\n\
    \        long p = inter / prime14;\n        long q = inter / prime15;\n      \
    \  long r = inter / prime16;\n        long s = inter / prime17;\n        long\
    \ t = inter / prime18;\n        long u = inter / prime19;\n        long v = inter\
    \ / prime20;\n        long w = inter / prime21;\n        long x = inter / prime22;\n\
    \        long y = inter / prime23;\n        long z = inter / prime24;\n      \
    \  long a = length / prime;\n        long b = length2 / prime2;\n        long\
    \ c = inter / prime;\n        long d = inter / prime2;\n        long e = inter\
    \ / prime3;\n        long f = inter / prime4;\n        long g = inter / prime5;\n\
    \        long h = inter / prime6;\n        long i = inter / prime7;\n        long\
    \ j = inter / prime8;\n        long k = inter / prime9;\n        long l = inter\
    \ / prime10;\n        long m = inter / prime11;\n        long n = inter / prime12;\n\
    \        long o = inter / prime13;\n        long p = inter / prime14;\n      \
    \  long q = inter / prime15;\n        long r = inter / prime16;\n        long\
    \ s = inter / prime17;\n        long t = inter / prime18;\n        long u = inter\
    \ / prime19;\n        long v = inter / prime20;\n        long w = inter / ", " \
    \       long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long min = (long)Math.Sqrt(length + 1);\n        long mid = (start +\
    \ end) / 2;\n        bool isPrime = true;\n        long count = 0;\n        long\
    \ prime = 2;\n        while (isPrime) {\n            long test = (mid + prime)\
    \ / 2;\n            if (test == prime) count++;\n            else if (test % prime\
    \ == 0) count++;\n            else if (test % prime != 0) isPrime = false;\n \
    \           prime++;\n        }\n        if (count == max) return \"YES\";\n \
    \       else return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length +\
    \ 1);\n        long mid = (long)Math.Sqrt(length / 2);\n        bool isPrime =\
    \ true;\n        long maxPrime = max;\n        long minPrime = min;\n        long\
    \ midPrime = mid;\n        long maxPrimePrime = maxPrime;\n        long minPrimePrime\
    \ = minPrime;\n        long midPrimePrime = midPrime;\n        long maxPrimePrimePrime\
    \ = maxPrimePrime;\n        long minPrimePrimePrime = minPrimePrime;\n       \
    \ long midPrimePrimePrime = midPrimePrime;\n        long maxPrimePrimePrimePrime\
    \ = maxPrimePrimePrime;\n        long minPrimePrimePrimePrime = minPrimePrimePrime;\n\
    \        long midPrimePrimePrimePrime = midPrimePrimePrime;\n        long maxPrimePrimePrimePrime\
    \ = maxPrimePrimePrimePrime;\n        long minPrimePrimePrimePrimePrime = minPrimePrimePrimePrime;\n\
    \        long midPrimePrimePrimePrimePrime = midPrimePrimePrimePrimePrime;\n \
    \       long maxPrimePrimePrimePrimePrimePrime = maxPrimePrimePrimePrimePrimePrime;\n\
    \        long minPrimePrimePrimePrimePrimePrimePrime = minPrimePrimePrimePrimePrimePrimePrime;\n\
    \        long midPrimePrimePrimePrimePrimePrimePrime = midPrimePrimePrimePrimePrimePrimePrime;\n\
    \        long maxPrimePrimePrimePrimePrimePrimePrimePrime = maxPrimePrimePrimePrimePrimePrimePrimePrime;\n\
    \        long minPrimePrimePrimePrimePrimePrimePrimePrimePri", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0)\n            return \"NO\";\n        if (length == 1)\n            return\
    \ \"YES\";\n        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 1)\n            return \"YES\"\
    ;\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long length3\
    \ = end3 - start3;\n        if (length3 == 1)\n            return \"YES\";\n \
    \       long start4 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end4 = Math.Max(interval1.Item2, interval2.Item2);\n        long length4 = end4\
    \ - start4;\n        if (length4 == 1)\n            return \"YES\";\n        long\
    \ start5 = Math.Min(interval1.Item1, interval2.Item1);\n        long end5 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length5 = end5 - start5;\n        if (length5\
    \ == 1)\n            return \"YES\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 1)\n          \
    \  return \"YES\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 1)\n            return \"YES\"\
    ;\n        long start8 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end8 = Math.Max(interval1.Item2, interval2.Item2);\n        long length8\
    \ = end8 - start8;\n        if (length8 == 1)\n            return \"YES\";\n \
    \       long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end9 = Math.Max(interval1.Item2, interval2.Item2);\n        long length9 = end9\
    \ - start9;\n        if (length9 == 1)\n            return \"YES\";\n        long\
    \ start10 = Math.Min(interval1.Item1, interval2.Item1);\n        long end10 =\
    \ Math.Max(interval1.Item2, interval2.Item2);\n        long length10 = end10 -\
    \ start10;\n        if (length10 == 1)", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long prime = length / 2;\n        long remainder = length %\
    \ 2;\n        bool isPrime = true;\n        for (long i = start; i <= end; i++)\
    \ {\n            if (i % prime == 0) {\n                isPrime = false;\n   \
    \             break;\n            }\n        }\n        if (isPrime)\n       \
    \     return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ start2 = Math.Max(interval1.Item1, interval2.Item1);\n        long end2 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length2 = end2 - start2;\n        long length3\
    \ = Math.Min(length2, length2);\n        long length4 = Math.Max(length2, length2);\n\
    \        long length5 = Math.Max(length2, length3);\n        long length6 = Math.Max(length3,\
    \ length3);\n        long length7 = Math.Max(length3, length4);\n        long\
    \ length8 = Math.Max(length4, length4);\n        long length9 = Math.Max(length4,\
    \ length5);\n        long length10 = Math.Max(length5, length5);\n        long\
    \ length11 = Math.Max(length5, length6);\n        long length12 = Math.Max(length6,\
    \ length6);\n        long length13 = Math.Max(length6, length7);\n        long\
    \ length14 = Math.Max(length7, length7);\n        long length15 = Math.Max(length7,\
    \ length8);\n        long length16 = Math.Max(length8, length8);\n        long\
    \ length17 = Math.Max(length8, length9);\n        long length18 = Math.Max(length9,\
    \ length9);\n        long length19 = Math.Max(length9, length10);\n        long\
    \ length20 = Math.Max(length10, length10);\n        long length21 = Math.Max(length10,\
    \ length11);\n        long length22 = Math.Max(length11, length11);\n        long\
    \ length23 = Math.Max(length11, length12);\n        long length24 = Math.Max(length12,\
    \ length12);\n        long length25 = Math.Max(length12, length13);\n        long\
    \ length26 = Math.Max(length13, length13);\n        long length27 = Math.Max(length13,\
    \ length14);\n        long length28 = Math.Max(length14, length14);\n        long\
    \ length29 = Math.Max(length14, length15);\n        long length30 = Math.Max(length15,\
    \ length15);\n        long length31 = Math.Max(length15, length16);\n        long\
    \ length32 = Math.Max(length16, length16);\n        long length33 = Math.Max(length16,\
    \ length17);\n        long length34 = Math.Max(length17, length17);\n        long\
    \ length35 = Math.Max(length17, length18);\n        long length36 = Math.Max(length18,\
    \ length18);\n        long length37 = Math.", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long num = 1;\n        while (start <= end) {\n            long mid =\
    \ (start + end) / 2;\n            if (mid * mid == length) num++;\n          \
    \  else if (mid * mid < length) start = mid + 1;\n            else end = mid -\
    \ 1;\n        }\n        if (num == 2) return \"YES\";\n        else return \"\
    NO\";", "        long start = interval1.Item1;\n        long end = interval1.Item2;\n\
    \        long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length = end - start;\n        long length2 = end2 - start2;\n \
    \       if (length == 0 || length2 == 0) {\n            return \"NO\";\n     \
    \   }\n        long length3 = length * length;\n        long length4 = length2\
    \ * length2;\n        long length5 = length3 * length3;\n        long length6\
    \ = length4 * length4;\n        long length7 = length5 * length5;\n        long\
    \ length8 = length6 * length6;\n        long length9 = length7 * length7;\n  \
    \      long length10 = length8 * length8;\n        long length11 = length9 * length9;\n\
    \        long length12 = length10 * length10;\n        long length13 = length11\
    \ * length11;\n        long length14 = length12 * length12;\n        long length15\
    \ = length13 * length13;\n        long length16 = length14 * length14;\n     \
    \   long length17 = length15 * length15;\n        long length18 = length16 * length16;\n\
    \        long length19 = length17 * length17;\n        long length20 = length18\
    \ * length18;\n        long length21 = length19 * length19;\n        long length22\
    \ = length20 * length20;\n        long length23 = length21 * length21;\n     \
    \   long length24 = length22 * length22;\n        long length25 = length23 * length23;\n\
    \        long length26 = length24 * length24;\n        long length27 = length25\
    \ * length25;\n        long length28 = length26 * length26;\n        long length29\
    \ = length27 * length27;\n        long length30 = length28 * length28;\n     \
    \   long length31 = length29 * length29;\n        long length32 = length30 * length30;\n\
    \        long length33 = length31 * length31;\n        long length34 = length32\
    \ * length32;\n        long length35 = length33 * length33;\n        long length36\
    \ = length34 * length34;\n        long length37 = length35 * length35;\n     \
    \   long length38 = length36 * length36;\n        long length39 = length37 * length37;\n\
    \        long length40 = length38 * length38;\n        long length41 = length39\
    \ * length39;\n        long length42 = length40 * length40;\n        long length43\
    \ = length", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long length2 = end2\
    \ - start2;\n        if (length2 == 0)\n            return \"NO\";\n        long\
    \ start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long end3 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length3 = end3 - start3;\n        if (length3\
    \ == 0)\n            return \"NO\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0)\n          \
    \  return \"NO\";\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        long start6 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end6 = Math.Max(interval1.Item2, interval2.Item2);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0)\n            return \"NO\";\n  \
    \      long start7 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long length7 = end7\
    \ - start7;\n        if (length7 == 0)\n            return \"NO\";\n        long\
    \ start8 = Math.Min(interval1.Item1, interval2.Item1);\n        long end8 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length9 = end9 - start9;\n        if (length9 == 0)\n          \
    \  return \"NO\";\n        long start10 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end10 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length10 = end10 - start10;\n        if (length10 == 0)\n            return\
    \ \"NO\";\n        long start11", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long start2 = start / max;\n       \
    \ long end2 = end / max;\n        if (start2 == end2)\n            return \"YES\"\
    ;\n        long length2 = end - start2;\n        if (length2 == 1)\n         \
    \   return \"YES\";\n        long max2 = (long) Math.Sqrt(length2);\n        long\
    \ start3 = start2 / max2;\n        long end3 = end2 / max2;\n        if (start3\
    \ == end3)\n            return \"YES\";\n        long length3 = end - start3;\n\
    \        if (length3 == 1)\n            return \"YES\";\n        long max3 = (long)\
    \ Math.Sqrt(length3);\n        long start4 = start3 / max3;\n        long end4\
    \ = end3 / max3;\n        if (start4 == end4)\n            return \"YES\";\n \
    \       long length4 = end - start4;\n        if (length4 == 1)\n            return\
    \ \"YES\";\n        long max4 = (long) Math.Sqrt(length4);\n        long start5\
    \ = start4 / max4;\n        long end5 = end4 / max4;\n        if (start5 == end5)\n\
    \            return \"YES\";\n        long length5 = end - start5;\n        if\
    \ (length5 == 1)\n            return \"YES\";\n        long max5 = (long) Math.Sqrt(length5);\n\
    \        long start6 = start5 / max5;\n        long end6 = end5 / max5;\n    \
    \    if (start6 == end6)\n            return \"YES\";\n        long length6 =\
    \ end - start6;\n        if (length6 == 1)\n            return \"YES\";\n    \
    \    long max6 = (long) Math.Sqrt(length6);\n        long start7 = start6 / max6;\n\
    \        long end7 = end6 / max6;\n        if (start7 == end7)\n            return\
    \ \"YES\";\n        long length7 = end - start7;\n        if (length7 == 1)\n\
    \            return \"YES\";\n        long max7 = (long) Math.Sqrt(length7);\n\
    \        long start8 = start7 / max7;\n        long end8 = end7 / max7;\n    \
    \    if (start8 == end8)\n            return \"YES\";\n        long length8 =\
    \ end - start8;\n        if (length8 == 1)\n            return \"YES\";\n    \
    \    long max8 = (long) Math.Sqrt(length8);\n        long start9 = start8 / max8;\n\
    \        long end9 = end", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n       \
    \ long start2 = start / max;\n        long end2 = end / max;\n        long length2\
    \ = end - start2;\n        long max2 = (long) Math.Sqrt(length2);\n        if\
    \ (start2 == end2) return \"YES\";\n        if (start2 < end2) return \"NO\";\n\
    \        long start3 = start2 / max2;\n        long end3 = end2 / max2;\n    \
    \    long length3 = end3 - start3;\n        long max3 = (long) Math.Sqrt(length3);\n\
    \        if (start3 == end3) return \"YES\";\n        if (start3 < end3) return\
    \ \"NO\";\n        long start4 = start3 / max3;\n        long end4 = end3 / max3;\n\
    \        long length4 = end4 - start4;\n        long max4 = (long) Math.Sqrt(length4);\n\
    \        if (start4 == end4) return \"YES\";\n        if (start4 < end4) return\
    \ \"NO\";\n        long start5 = start4 / max4;\n        long end5 = end4 / max4;\n\
    \        long length5 = end5 - start5;\n        long max5 = (long) Math.Sqrt(length5);\n\
    \        if (start5 == end5) return \"YES\";\n        if (start5 < end5) return\
    \ \"NO\";\n        long start6 = start5 / max5;\n        long end6 = end5 / max5;\n\
    \        long length6 = end6 - start6;\n        long max6 = (long) Math.Sqrt(length6);\n\
    \        if (start6 == end6) return \"YES\";\n        if (start6 < end6) return\
    \ \"NO\";\n        long start7 = start6 / max6;\n        long end7 = end6 / max6;\n\
    \        long length7 = end7 - start7;\n        long max7 = (long) Math.Sqrt(length7);\n\
    \        if (start7 == end7) return \"YES\";\n        if (start7 < end7) return\
    \ \"NO\";\n        long start8 = start7 / max7;\n        long end8 = end7 / max7;\n\
    \        long length8 = end8 - start8;\n        long max8 = (long) Math.Sqrt(length8);\n\
    \        if (start8 == end8) return \"YES\";\n        if (start8 < end8) return\
    \ \"NO", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n \
    \       long end = Math.Max(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        bool isPrime\
    \ = true;\n        long prime = 2;\n        while (isPrime) {\n            if\
    \ (length == prime) {\n                isPrime = false;\n            } else {\n\
    \                length--;\n                prime++;\n            }\n        }\n\
    \        if (isPrime) return \"YES\";\n        return \"NO\";", "        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        bool isPrime = true;\n        long prime = 2;\n \
    \       while (isPrime) {\n            if (length == prime) {\n              \
    \  isPrime = false;\n            } else {\n                prime++;\n        \
    \    }\n        }\n        if (length == prime) return \"YES\";\n        return\
    \ \"NO\";"]
stop_tokens:
- "\n    }\n"
