name: HumanEval_127_intersection
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given two intervals,\n    // where each interval is\
  \ a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The\
  \ given intervals are closed which means that the interval (start, end)\n    //\
  \ includes both start and end.\n    // For each given interval, it is assumed that\
  \ its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    // >>> Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L)))\n\
  \    // (\"NO\")\n    // >>> Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L,\
  \ 4L)))\n    // (\"NO\")\n    // >>> Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L,\
  \ 5L)))\n    // (\"YES\")\n    public static string Intersection(Tuple<long, long>\
  \ interval1, Tuple<long, long> interval2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L,\
  \ 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L,\
  \ -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L,\
  \ 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"
completions: ["        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime)\n                return \"YES\";\n     \
    \       if (length < prime)\n                isPrime = false;\n            prime\
    \ += 2;\n        }\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime) {\n                isPrime = false;\n  \
    \          } else {\n                length += prime;\n            }\n       \
    \     prime += 2;\n        }\n        if (length == prime) return \"YES\";\n \
    \       return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = GetPrime(length);\n        if (prime == length) return \"YES\";\n  \
    \      if (prime == 0) return \"NO\";\n        long start2 = start - prime;\n\
    \        long end2 = end + prime;\n        if (start2 > end2) return \"NO\";\n\
    \        if (start2 < end2) return \"YES\";\n        return Intersection(Tuple.Create(start2,\
    \ end2), interval2);", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max / 2;\n        long max3\
    \ = max * max;\n        long max4 = max3 * max;\n        long max5 = max4 * max;\n\
    \        long max6 = max5 * max;\n        long max7 = max6 * max;\n        long\
    \ max8 = max7 * max;\n        long max9 = max8 * max;\n        long max10 = max9\
    \ * max;\n        long max11 = max10 * max;\n        long max12 = max11 * max;\n\
    \        long max13 = max12 * max;\n        long max14 = max13 * max;\n      \
    \  long max15 = max14 * max;\n        long max16 = max15 * max;\n        long\
    \ max17 = max16 * max;\n        long max18 = max17 * max;\n        long max19\
    \ = max18 * max;\n        long max20 = max19 * max;\n        long max21 = max20\
    \ * max;\n        long max22 = max21 * max;\n        long max23 = max22 * max;\n\
    \        long max24 = max23 * max;\n        long max25 = max24 * max;\n      \
    \  long max26 = max25 * max;\n        long max27 = max26 * max;\n        long\
    \ max28 = max27 * max;\n        long max29 = max28 * max;\n        long max30\
    \ = max29 * max;\n        long max31 = max30 * max;\n        long max32 = max31\
    \ * max;\n        long max33 = max32 * max;\n        long max34 = max33 * max;\n\
    \        long max35 = max34 * max;\n        long max36 = max35 * max;\n      \
    \  long max37 = max36 * max;\n        long max38 = max37 * max;\n        long\
    \ max39 = max38 * max;\n        long max40 = max39 * max;\n        long max41\
    \ = max40 * max;\n        long max42 = max41 * max;\n        long max43 = max42\
    \ * max;\n        long max44 = max43 * max;\n        long ", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long sum = 0;\n        long prime = 1;\n        while\
    \ (prime <= length) {\n            sum += prime;\n            prime += 2;\n  \
    \      }\n        if (sum == length) return \"YES\";\n        return \"NO\";",
  "        long start = interval1.Item1;\n        long end = interval1.Item2;\n  \
    \      long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length = end - start;\n        long length2 = end2 - start2;\n \
    \       if (length2 == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == length2) {\n            if (length == 1) {\n                return\
    \ \"YES\";\n            }\n            long mid = (start + end) / 2;\n       \
    \     if (mid == start2) {\n                return \"YES\";\n            }\n \
    \           if (mid == end2) {\n                return \"YES\";\n            }\n\
    \            long mid2 = (mid + start2) / 2;\n            if (mid2 == start) {\n\
    \                return \"YES\";\n            }\n            if (mid2 == end)\
    \ {\n                return \"YES\";\n            }\n            long mid3 = (mid2\
    \ + end2) / 2;\n            if (mid3 == start2) {\n                return \"YES\"\
    ;\n            }\n            if (mid3 == end2) {\n                return \"YES\"\
    ;\n            }\n            long mid4 = (mid3 + start2) / 2;\n            if\
    \ (mid4 == start) {\n                return \"YES\";\n            }\n        \
    \    if (mid4 == end) {\n                return \"YES\";\n            }\n    \
    \        long mid5 = (mid4 + end2) / 2;\n            if (mid5 == start2) {\n \
    \               return \"YES\";\n            }\n            if (mid5 == end2)\
    \ {\n                return \"YES\";\n            }\n            long mid6 = (mid5\
    \ + start2) / 2;\n            if (mid6 == start) {\n                return \"\
    YES\";\n            }\n            if (mid6 == end) {\n                return\
    \ \"YES\";\n            }\n            long mid7 = (mid6 + end2) / 2;\n      \
    \      if (mid7 == start2) {\n                return \"YES\";\n            }\n\
    \            if (mid7 == end2) {\n                return \"YES\";\n          \
    \  }\n            long mid8 = (mid7 + start2) / 2;\n            if (mid8 == start)\
    \ {\n                return \"YES\";\n            }\n            if (mid8 == end)\
    \ {\n                return \"YES\";\n            }\n            long mid9 = (mid8\
    \ + end2) / 2;\n            if (mid9 == start2) {\n                return \"YES\"\
    ;\n            }\n            if (mid9 == end2) {\n                return \"YES\"\
    ;\n            }\n            long mid10 = (mid9 + start2) / 2;\n            if\
    \ (mid10 == start) {\n                return \"YES\";\n            }\n       \
    \     if (mid10 == end) {\n                return \"YES\";\n            }\n  \
    \          long mid11 = (mid10 + end2) / 2;\n            if (mid11 == start2)\
    \ {\n                return \"YES\";\n            }\n            if (mid11 ==\
    \ end2) {\n                return \"YES\";\n", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (prime == length) return \"\
    YES\";\n        if (prime != 0) return \"NO\";\n        return \"NO\";", "   \
    \     long start = interval1.Item1;\n        long end = interval1.Item2;\n   \
    \     long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n \
    \       long length = end - start;\n        long length2 = end2 - start2;\n  \
    \      if (length2 == 0) {\n            return \"NO\";\n        }\n        long\
    \ inter = length * length2;\n        long prime = CheckPrime(inter);\n       \
    \ if (prime == 0) {\n            return \"NO\";\n        }\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (prime == 1) {\n\
    \            return \"YES\";\n        }\n        long a = length / prime;\n  \
    \      long b = length2 / prime;\n        long c = inter / prime;\n        long\
    \ d = inter / prime2;\n        long e = inter / prime3;\n        long f = inter\
    \ / prime4;\n        long g = inter / prime5;\n        long h = inter / prime6;\n\
    \        long i = inter / prime7;\n        long j = inter / prime8;\n        long\
    \ k = inter / prime9;\n        long l = inter / prime10;\n        long m = inter\
    \ / prime11;\n        long n = inter / prime12;\n        long o = inter / prime13;\n\
    \        long p = inter / prime14;\n        long q = inter / prime15;\n      \
    \  long r = inter / prime16;\n        long s = inter / prime17;\n        long\
    \ t = inter / prime18;\n        long u = inter / prime19;\n        long v = inter\
    \ / prime20;\n        long w = inter / prime21;\n        long x = inter / prime22;\n\
    \        long y = inter / prime23;\n        long z = inter / prime24;\n      \
    \  long a = length / prime;\n        long b = length2 / prime2;\n        long\
    \ c = inter / prime;\n        long d = inter / prime2;\n        long e = inter\
    \ / prime3;\n        long f = inter / prime4;\n        long g = inter / prime5;\n\
    \        long h = inter / prime6;\n        long i = inter / prime7;\n        long\
    \ j = inter / prime8;\n        long k = inter / prime9;\n        long l = inter\
    \ / prime10;\n        long m = inter / prime11;\n        long n = inter / prime12;\n\
    \        long o = inter / prime13;\n        long p = inter / prime14;\n      \
    \  long q = inter / prime15;\n        long r = inter / prime16;\n        long\
    \ s = inter / prime17;\n        long t = inter / prime18;\n        long u = inter\
    \ / prime19;\n        long v = inter / prime20;\n        long w = inter / ", " \
    \       long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long min = (long)Math.Sqrt(length + 1);\n        long mid = (start +\
    \ end) / 2;\n        bool isPrime = true;\n        long count = 0;\n        long\
    \ prime = 2;\n        while (isPrime) {\n            long test = (mid + prime)\
    \ / 2;\n            if (test == prime) count++;\n            else if (test % prime\
    \ == 0) count++;\n            else if (test % prime != 0) isPrime = false;\n \
    \           prime++;\n        }\n        if (count == max) return \"YES\";\n \
    \       else return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length +\
    \ 1);\n        long mid = (long)Math.Sqrt(length / 2);\n        bool isPrime =\
    \ true;\n        long maxPrime = max;\n        long minPrime = min;\n        long\
    \ midPrime = mid;\n        long maxPrimePrime = maxPrime;\n        long minPrimePrime\
    \ = minPrime;\n        long midPrimePrime = midPrime;\n        long maxPrimePrimePrime\
    \ = maxPrimePrime;\n        long minPrimePrimePrime = minPrimePrime;\n       \
    \ long midPrimePrimePrime = midPrimePrime;\n        long maxPrimePrimePrimePrime\
    \ = maxPrimePrimePrime;\n        long minPrimePrimePrimePrime = minPrimePrimePrime;\n\
    \        long midPrimePrimePrimePrime = midPrimePrimePrime;\n        long maxPrimePrimePrimePrime\
    \ = maxPrimePrimePrimePrime;\n        long minPrimePrimePrimePrimePrime = minPrimePrimePrimePrime;\n\
    \        long midPrimePrimePrimePrimePrime = midPrimePrimePrimePrimePrime;\n \
    \       long maxPrimePrimePrimePrimePrimePrime = maxPrimePrimePrimePrimePrimePrime;\n\
    \        long minPrimePrimePrimePrimePrimePrimePrime = minPrimePrimePrimePrimePrimePrimePrime;\n\
    \        long midPrimePrimePrimePrimePrimePrimePrime = midPrimePrimePrimePrimePrimePrimePrime;\n\
    \        long maxPrimePrimePrimePrimePrimePrimePrimePrime = maxPrimePrimePrimePrimePrimePrimePrimePrime;\n\
    \        long minPrimePrimePrimePrimePrimePrimePrimePrimePri", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0)\n            return \"NO\";\n        if (length == 1)\n            return\
    \ \"YES\";\n        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 1)\n            return \"YES\"\
    ;\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long length3\
    \ = end3 - start3;\n        if (length3 == 1)\n            return \"YES\";\n \
    \       long start4 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end4 = Math.Max(interval1.Item2, interval2.Item2);\n        long length4 = end4\
    \ - start4;\n        if (length4 == 1)\n            return \"YES\";\n        long\
    \ start5 = Math.Min(interval1.Item1, interval2.Item1);\n        long end5 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length5 = end5 - start5;\n        if (length5\
    \ == 1)\n            return \"YES\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 1)\n          \
    \  return \"YES\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 1)\n            return \"YES\"\
    ;\n        long start8 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end8 = Math.Max(interval1.Item2, interval2.Item2);\n        long length8\
    \ = end8 - start8;\n        if (length8 == 1)\n            return \"YES\";\n \
    \       long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end9 = Math.Max(interval1.Item2, interval2.Item2);\n        long length9 = end9\
    \ - start9;\n        if (length9 == 1)\n            return \"YES\";\n        long\
    \ start10 = Math.Min(interval1.Item1, interval2.Item1);\n        long end10 =\
    \ Math.Max(interval1.Item2, interval2.Item2);\n        long length10 = end10 -\
    \ start10;\n        if (length10 == 1)", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long prime = length / 2;\n        long remainder = length %\
    \ 2;\n        bool isPrime = true;\n        for (long i = start; i <= end; i++)\
    \ {\n            if (i % prime == 0) {\n                isPrime = false;\n   \
    \             break;\n            }\n        }\n        if (isPrime)\n       \
    \     return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ start2 = Math.Max(interval1.Item1, interval2.Item1);\n        long end2 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length2 = end2 - start2;\n        long length3\
    \ = Math.Min(length2, length2);\n        long length4 = Math.Max(length2, length2);\n\
    \        long length5 = Math.Max(length2, length3);\n        long length6 = Math.Max(length3,\
    \ length3);\n        long length7 = Math.Max(length3, length4);\n        long\
    \ length8 = Math.Max(length4, length4);\n        long length9 = Math.Max(length4,\
    \ length5);\n        long length10 = Math.Max(length5, length5);\n        long\
    \ length11 = Math.Max(length5, length6);\n        long length12 = Math.Max(length6,\
    \ length6);\n        long length13 = Math.Max(length6, length7);\n        long\
    \ length14 = Math.Max(length7, length7);\n        long length15 = Math.Max(length7,\
    \ length8);\n        long length16 = Math.Max(length8, length8);\n        long\
    \ length17 = Math.Max(length8, length9);\n        long length18 = Math.Max(length9,\
    \ length9);\n        long length19 = Math.Max(length9, length10);\n        long\
    \ length20 = Math.Max(length10, length10);\n        long length21 = Math.Max(length10,\
    \ length11);\n        long length22 = Math.Max(length11, length11);\n        long\
    \ length23 = Math.Max(length11, length12);\n        long length24 = Math.Max(length12,\
    \ length12);\n        long length25 = Math.Max(length12, length13);\n        long\
    \ length26 = Math.Max(length13, length13);\n        long length27 = Math.Max(length13,\
    \ length14);\n        long length28 = Math.Max(length14, length14);\n        long\
    \ length29 = Math.Max(length14, length15);\n        long length30 = Math.Max(length15,\
    \ length15);\n        long length31 = Math.Max(length15, length16);\n        long\
    \ length32 = Math.Max(length16, length16);\n        long length33 = Math.Max(length16,\
    \ length17);\n        long length34 = Math.Max(length17, length17);\n        long\
    \ length35 = Math.Max(length17, length18);\n        long length36 = Math.Max(length18,\
    \ length18);\n        long length37 = Math.", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long num = 1;\n        while (start <= end) {\n            long mid =\
    \ (start + end) / 2;\n            if (mid * mid == length) num++;\n          \
    \  else if (mid * mid < length) start = mid + 1;\n            else end = mid -\
    \ 1;\n        }\n        if (num == 2) return \"YES\";\n        else return \"\
    NO\";", "        long start = interval1.Item1;\n        long end = interval1.Item2;\n\
    \        long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length = end - start;\n        long length2 = end2 - start2;\n \
    \       if (length == 0 || length2 == 0) {\n            return \"NO\";\n     \
    \   }\n        long length3 = length * length;\n        long length4 = length2\
    \ * length2;\n        long length5 = length3 * length3;\n        long length6\
    \ = length4 * length4;\n        long length7 = length5 * length5;\n        long\
    \ length8 = length6 * length6;\n        long length9 = length7 * length7;\n  \
    \      long length10 = length8 * length8;\n        long length11 = length9 * length9;\n\
    \        long length12 = length10 * length10;\n        long length13 = length11\
    \ * length11;\n        long length14 = length12 * length12;\n        long length15\
    \ = length13 * length13;\n        long length16 = length14 * length14;\n     \
    \   long length17 = length15 * length15;\n        long length18 = length16 * length16;\n\
    \        long length19 = length17 * length17;\n        long length20 = length18\
    \ * length18;\n        long length21 = length19 * length19;\n        long length22\
    \ = length20 * length20;\n        long length23 = length21 * length21;\n     \
    \   long length24 = length22 * length22;\n        long length25 = length23 * length23;\n\
    \        long length26 = length24 * length24;\n        long length27 = length25\
    \ * length25;\n        long length28 = length26 * length26;\n        long length29\
    \ = length27 * length27;\n        long length30 = length28 * length28;\n     \
    \   long length31 = length29 * length29;\n        long length32 = length30 * length30;\n\
    \        long length33 = length31 * length31;\n        long length34 = length32\
    \ * length32;\n        long length35 = length33 * length33;\n        long length36\
    \ = length34 * length34;\n        long length37 = length35 * length35;\n     \
    \   long length38 = length36 * length36;\n        long length39 = length37 * length37;\n\
    \        long length40 = length38 * length38;\n        long length41 = length39\
    \ * length39;\n        long length42 = length40 * length40;\n        long length43\
    \ = length", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long length2 = end2\
    \ - start2;\n        if (length2 == 0)\n            return \"NO\";\n        long\
    \ start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long end3 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length3 = end3 - start3;\n        if (length3\
    \ == 0)\n            return \"NO\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0)\n          \
    \  return \"NO\";\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        long start6 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end6 = Math.Max(interval1.Item2, interval2.Item2);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0)\n            return \"NO\";\n  \
    \      long start7 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long length7 = end7\
    \ - start7;\n        if (length7 == 0)\n            return \"NO\";\n        long\
    \ start8 = Math.Min(interval1.Item1, interval2.Item1);\n        long end8 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length9 = end9 - start9;\n        if (length9 == 0)\n          \
    \  return \"NO\";\n        long start10 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end10 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length10 = end10 - start10;\n        if (length10 == 0)\n            return\
    \ \"NO\";\n        long start11", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long start2 = start / max;\n       \
    \ long end2 = end / max;\n        if (start2 == end2)\n            return \"YES\"\
    ;\n        long length2 = end - start2;\n        if (length2 == 1)\n         \
    \   return \"YES\";\n        long max2 = (long) Math.Sqrt(length2);\n        long\
    \ start3 = start2 / max2;\n        long end3 = end2 / max2;\n        if (start3\
    \ == end3)\n            return \"YES\";\n        long length3 = end - start3;\n\
    \        if (length3 == 1)\n            return \"YES\";\n        long max3 = (long)\
    \ Math.Sqrt(length3);\n        long start4 = start3 / max3;\n        long end4\
    \ = end3 / max3;\n        if (start4 == end4)\n            return \"YES\";\n \
    \       long length4 = end - start4;\n        if (length4 == 1)\n            return\
    \ \"YES\";\n        long max4 = (long) Math.Sqrt(length4);\n        long start5\
    \ = start4 / max4;\n        long end5 = end4 / max4;\n        if (start5 == end5)\n\
    \            return \"YES\";\n        long length5 = end - start5;\n        if\
    \ (length5 == 1)\n            return \"YES\";\n        long max5 = (long) Math.Sqrt(length5);\n\
    \        long start6 = start5 / max5;\n        long end6 = end5 / max5;\n    \
    \    if (start6 == end6)\n            return \"YES\";\n        long length6 =\
    \ end - start6;\n        if (length6 == 1)\n            return \"YES\";\n    \
    \    long max6 = (long) Math.Sqrt(length6);\n        long start7 = start6 / max6;\n\
    \        long end7 = end6 / max6;\n        if (start7 == end7)\n            return\
    \ \"YES\";\n        long length7 = end - start7;\n        if (length7 == 1)\n\
    \            return \"YES\";\n        long max7 = (long) Math.Sqrt(length7);\n\
    \        long start8 = start7 / max7;\n        long end8 = end7 / max7;\n    \
    \    if (start8 == end8)\n            return \"YES\";\n        long length8 =\
    \ end - start8;\n        if (length8 == 1)\n            return \"YES\";\n    \
    \    long max8 = (long) Math.Sqrt(length8);\n        long start9 = start8 / max8;\n\
    \        long end9 = end", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n       \
    \ long start2 = start / max;\n        long end2 = end / max;\n        long length2\
    \ = end - start2;\n        long max2 = (long) Math.Sqrt(length2);\n        if\
    \ (start2 == end2) return \"YES\";\n        if (start2 < end2) return \"NO\";\n\
    \        long start3 = start2 / max2;\n        long end3 = end2 / max2;\n    \
    \    long length3 = end3 - start3;\n        long max3 = (long) Math.Sqrt(length3);\n\
    \        if (start3 == end3) return \"YES\";\n        if (start3 < end3) return\
    \ \"NO\";\n        long start4 = start3 / max3;\n        long end4 = end3 / max3;\n\
    \        long length4 = end4 - start4;\n        long max4 = (long) Math.Sqrt(length4);\n\
    \        if (start4 == end4) return \"YES\";\n        if (start4 < end4) return\
    \ \"NO\";\n        long start5 = start4 / max4;\n        long end5 = end4 / max4;\n\
    \        long length5 = end5 - start5;\n        long max5 = (long) Math.Sqrt(length5);\n\
    \        if (start5 == end5) return \"YES\";\n        if (start5 < end5) return\
    \ \"NO\";\n        long start6 = start5 / max5;\n        long end6 = end5 / max5;\n\
    \        long length6 = end6 - start6;\n        long max6 = (long) Math.Sqrt(length6);\n\
    \        if (start6 == end6) return \"YES\";\n        if (start6 < end6) return\
    \ \"NO\";\n        long start7 = start6 / max6;\n        long end7 = end6 / max6;\n\
    \        long length7 = end7 - start7;\n        long max7 = (long) Math.Sqrt(length7);\n\
    \        if (start7 == end7) return \"YES\";\n        if (start7 < end7) return\
    \ \"NO\";\n        long start8 = start7 / max7;\n        long end8 = end7 / max7;\n\
    \        long length8 = end8 - start8;\n        long max8 = (long) Math.Sqrt(length8);\n\
    \        if (start8 == end8) return \"YES\";\n        if (start8 < end8) return\
    \ \"NO", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n \
    \       long end = Math.Max(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        bool isPrime\
    \ = true;\n        long prime = 2;\n        while (isPrime) {\n            if\
    \ (length == prime) {\n                isPrime = false;\n            } else {\n\
    \                length--;\n                prime++;\n            }\n        }\n\
    \        if (isPrime) return \"YES\";\n        return \"NO\";", "        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        bool isPrime = true;\n        long prime = 2;\n \
    \       while (isPrime) {\n            if (length == prime) {\n              \
    \  isPrime = false;\n            } else {\n                prime++;\n        \
    \    }\n        }\n        if (length == prime) return \"YES\";\n        return\
    \ \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ inter = start + (end - start) / 2;\n        bool isPrime = true;\n        long\
    \ prime = 2;\n        while (prime * prime <= inter) {\n            if (inter\
    \ % prime == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n            prime++;\n        }\n        if (isPrime) return \"\
    YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long max = (long)Math.Sqrt(length);\n        long mid = start + (end\
    \ - start) / 2;\n        if (length == 1) return \"YES\";\n        if (length\
    \ == 2) return \"YES\";\n        if (length == 3) return \"YES\";\n        if\
    \ (length == 4) return \"YES\";\n        if (length == 5) return \"YES\";\n  \
    \      if (length == 6) return \"YES\";\n        if (length == 7) return \"YES\"\
    ;\n        if (length == 8) return \"YES\";\n        if (length == 9) return \"\
    YES\";\n        if (length == 10) return \"YES\";\n        if (length == 11) return\
    \ \"YES\";\n        if (length == 12) return \"YES\";\n        if (length == 13)\
    \ return \"YES\";\n        if (length == 14) return \"YES\";\n        if (length\
    \ == 15) return \"YES\";\n        if (length == 16) return \"YES\";\n        if\
    \ (length == 17) return \"YES\";\n        if (length == 18) return \"YES\";\n\
    \        if (length == 19) return \"YES\";\n        if (length == 20) return \"\
    YES\";\n        if (length == 21) return \"YES\";\n        if (length == 22) return\
    \ \"YES\";\n        if (length == 23) return \"YES\";\n        if (length == 24)\
    \ return \"YES\";\n        if (length == 25) return \"YES\";\n        if (length\
    \ == 26) return \"YES\";\n        if (length == 27) return \"YES\";\n        if\
    \ (length == 28) return \"YES\";\n        if (length == 29) return \"YES\";\n\
    \        if (length == 30) return \"YES\";\n        if (length == 31) return \"\
    YES\";\n        if (length == 32) return \"YES\";\n        if (length == 33) return\
    \ \"YES\";\n        if (length == 34) return \"YES\";\n        if (length == 35)\
    \ return \"YES\";\n        if (length == 36) return \"YES\";\n        if (length\
    \ == 37) return \"YES\";\n        if (length == 38) return \"YES\";\n        if\
    \ (length == 39) return \"YES\";\n        if (length == 40) return \"YES\";\n\
    \        if (length == 41) return \"YES\";\n        if (length == 42) return \"\
    YES\";\n        if (length == 43) return \"YES\";\n        if (length == 44) return\
    \ \"YES\";\n        if (length == 45) return \"YES\";\n        if (length == 46)\
    \ return \"YES\";\n        if (length == 47) return \"YES\";\n        if (length\
    \ == 48) return \"YES\";\n        if (length == 49) return \"YES\";\n        if\
    \ (length == 50) return \"YES\";\n        if (length == 51) return \"YES\";\n\
    \        if (", "        long start = interval1.Item1;\n        long end = interval1.Item2;\n\
    \        long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length = end - start;\n        long length2 = end2 - start2;\n \
    \       if (length2 == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length == length2) {\n            return \"YES\";\n        }\n        long\
    \ length3 = length / length2;\n        long length4 = length % length2;\n    \
    \    long length5 = length3 / length4;\n        long length6 = length3 % length4;\n\
    \        long length7 = length5 / length6;\n        long length8 = length5 % length6;\n\
    \        long length9 = length7 / length8;\n        long length10 = length7 %\
    \ length8;\n        long length11 = length9 / length10;\n        long length12\
    \ = length9 % length10;\n        long length13 = length11 / length12;\n      \
    \  long length14 = length11 % length12;\n        long length15 = length13 / length14;\n\
    \        long length16 = length13 % length14;\n        long length17 = length15\
    \ / length16;\n        long length18 = length15 % length16;\n        long length19\
    \ = length17 / length18;\n        long length20 = length17 % length18;\n     \
    \   long length21 = length19 / length20;\n        long length22 = length19 % length20;\n\
    \        long length23 = length21 / length22;\n        long length24 = length21\
    \ % length22;\n        long length25 = length23 / length24;\n        long length26\
    \ = length23 % length24;\n        long length27 = length25 / length26;\n     \
    \   long length28 = length25 % length26;\n        long length29 = length27 / length28;\n\
    \        long length30 = length27 % length28;\n        long length31 = length29\
    \ / length30;\n        long length32 = length29 % length30;\n        long length33\
    \ = length31 / length32;\n        long length34 = length31 % length32;\n     \
    \   long length35 = length33 / length34;\n        long length36 = length33 % length34;\n\
    \        long length37 = length35 / length36;\n        long length38 = length35\
    \ % length36;\n        long length39 = length37 / length38;\n        long length40\
    \ = length37 % length38;\n        long length41 = length39 / length40;\n     \
    \   long ", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length\
    \ + 1);\n        long mid = start + (end - start) / 2;\n        long count = 0;\n\
    \        long sum = 0;\n        bool isPrime = true;\n        for (long i = mid;\
    \ i <= max; i++) {\n            long square = i * i;\n            if (square <\
    \ min)\n                isPrime = false;\n            sum += square;\n       \
    \     count += 1;\n        }\n        if (isPrime)\n            return \"YES\"\
    ;\n        else\n            return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long prime = length / 2;\n        bool isPrime = true;\n  \
    \      long counter = 0;\n        while (isPrime && counter < prime) {\n     \
    \       long mid = (start + end) / 2;\n            if (mid % 2 == 0)\n       \
    \         isPrime = false;\n            else\n                end = mid;\n   \
    \         counter++;\n        }\n        if (isPrime)\n            return \"YES\"\
    ;\n        else\n            return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        bool isPrime = true;\n        long\
    \ prime = 2;\n        while (isPrime) {\n            if (length == prime) {\n\
    \                isPrime = false;\n            } else {\n                prime++;\n\
    \            }\n        }\n        if (isPrime) {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n        long\
    \ min = (long)Math.Sqrt(length + 1);\n        long mid = start + (end - start)\
    \ / 2;\n        if (Math.Abs((long)Math.Sqrt(mid) - mid) < max) {\n          \
    \  long mid2 = Math.Abs((long)Math.Sqrt(mid) - mid);\n            if (Math.Abs((long)Math.Sqrt(mid2)\
    \ - mid2) < max) {\n                long mid3 = Math.Abs((long)Math.Sqrt(mid2)\
    \ - mid2);\n                if (Math.Abs((long)Math.Sqrt(mid3) - mid3) < max)\
    \ {\n                    long mid4 = Math.Abs((long)Math.Sqrt(mid3) - mid3);\n\
    \                    if (Math.Abs((long)Math.Sqrt(mid4) - mid4) < max) {\n   \
    \                     long mid5 = Math.Abs((long)Math.Sqrt(mid4) - mid4);\n  \
    \                      if (Math.Abs((long)Math.Sqrt(mid5) - mid5) < max) {\n \
    \                           long mid6 = Math.Abs((long)Math.Sqrt(mid5) - mid5);\n\
    \                            if (Math.Abs((long)Math.Sqrt(mid6) - mid6) < max)\
    \ {\n                                long mid7 = Math.Abs((long)Math.Sqrt(mid6)\
    \ - mid6);\n                                if (Math.Abs((long)Math.Sqrt(mid7)\
    \ - mid7) < max) {\n                                    long mid8 = Math.Abs((long)Math.Sqrt(mid7)\
    \ - mid7);\n                                    if (Math.Abs((long)Math.Sqrt(mid8)\
    \ - mid8) < max) {\n                                        long mid9 = Math.Abs((long)Math.Sqrt(mid8)\
    \ - mid8);\n                                        if (Math.Abs((long)Math.Sqrt(mid9)\
    \ - mid9) < max) {\n                                            long mid10 = Math.Abs((long)Math.Sqrt(mid9)\
    \ - mid9);\n                                            if (Math.Abs((long)Math.Sqrt(mid10)\
    \ - mid10) < max) {\n                                                long mid11\
    \ = Math.Abs((long)Math.Sqrt(mid10) - mid10);\n                              \
    \                  if (Math.Abs((long)Math.Sqrt(mid11) - mid11) < max) {\n   \
    \                                                 long mid12 = Math.Abs((long)Math.Sqrt(mid11)\
    \ - mid11);\n                                                    if (Math.Abs((long)Math.Sqrt(mid12)\
    \ - mid12", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long counter = 1;\n        while (counter\
    \ <= max) {\n            long mid = (start + end) / 2;\n            if (mid *\
    \ mid == length) break;\n            if (mid * mid < length) end = mid;\n    \
    \        else start = mid;\n            counter++;\n        }\n        if (counter\
    \ == max) return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long max2 = max / 2;\n        long max3 = max * max;\n        long max4\
    \ = max3 * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n\
    \        long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44", "  \
    \      long start = interval1.Item1;\n        long end = interval1.Item2;\n  \
    \      long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length = end - start;\n        long length2 = end2 - start2;\n \
    \       if (length2 == 0) {\n            return \"NO\";\n        }\n        long\
    \ length3 = length / length2;\n        long length4 = length % length2;\n    \
    \    if (length3 == 0) {\n            return \"NO\";\n        }\n        long\
    \ length5 = length3 / length4;\n        long length6 = length3 % length4;\n  \
    \      if (length5 == 0) {\n            return \"NO\";\n        }\n        long\
    \ length7 = length5 / length6;\n        long length8 = length5 % length6;\n  \
    \      if (length7 == 0) {\n            return \"NO\";\n        }\n        long\
    \ length9 = length7 / length8;\n        long length10 = length7 % length8;\n \
    \       if (length9 == 0) {\n            return \"NO\";\n        }\n        long\
    \ length11 = length9 / length10;\n        long length12 = length9 % length10;\n\
    \        if (length11 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length13 = length11 / length12;\n        long length14 = length11 % length12;\n\
    \        if (length13 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length15 = length13 / length14;\n        long length16 = length13 % length14;\n\
    \        if (length15 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length17 = length15 / length16;\n        long length18 = length15 % length16;\n\
    \        if (length17 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length19 = length17 / length18;\n        long length20 = length17 % length18;\n\
    \        if (length19 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length21 = length19 / length20;\n        long length22 = length19 % length20;\n\
    \        if (length21 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length23 = length21 / length22;\n        long length24 = length21 % length22;\n\
    \        if (length23 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length25 = length23 / length24;\n        long length26 = length23 % length24;\n\
    \        if (length25 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length27 = length25 / length26;\n        long length28 = length25 % length26;\n\
    \        if (length27 == 0) {\n            return \"NO\";\n        }\n       \
    \ long length29 = length27 / length28;\n        long length30 = length27 % length28;\n\
    \        if (", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long prime = Prime(length);\n        if (prime\
    \ == length) return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        bool isPrime = true;\n    \
    \    long prime = length / 2;\n        while (prime > 1) {\n            if (length%prime\
    \ == 0) isPrime = false;\n            prime = prime / 2;\n        }\n        if\
    \ (isPrime) return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime) {\n                isPrime = false;\n  \
    \          } else {\n                length--;\n            }\n            if\
    \ (length == 0) isPrime = false;\n            prime++;\n        }\n        if\
    \ (isPrime) return \"YES\";\n        else return \"NO\";", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n        long\
    \ max2 = max * max;\n        long max3 = max2 * max;\n        long max4 = max3\
    \ * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n \
    \       long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44 = max43\
    \ * max;\n        ", "        long start1 = interval1.Item1;\n        long end1\
    \ = interval1.Item2;\n        long start2 = interval2.Item1;\n        long end2\
    \ = interval2.Item2;\n        long startIntersection = start1 < start2 ? start1\
    \ : start2;\n        long endIntersection = end1 < end2 ? end1 : end2;\n     \
    \   long lengthIntersection = endIntersection - startIntersection;\n        if\
    \ (lengthIntersection == 0)\n            return \"NO\";\n        bool isPrime\
    \ = true;\n        long startPrime = startIntersection;\n        long endPrime\
    \ = startPrime + lengthIntersection;\n        while (startPrime < endPrime) {\n\
    \            long startPrime2 = startPrime + 1;\n            long endPrime2 =\
    \ startPrime2 + lengthIntersection;\n            if (startPrime2 == endPrime2)\n\
    \                break;\n            if (IsPrime(startPrime2) && IsPrime(endPrime2))\n\
    \                isPrime = true;\n            else if (IsPrime(startPrime2) ||\
    \ IsPrime(endPrime2))\n                isPrime = false;\n            startPrime\
    \ = startPrime2;\n            endPrime = endPrime2;\n        }\n        if (isPrime)\n\
    \            return \"YES\";\n        else\n            return \"NO\";", "   \
    \     long start = Math.Max(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long min = (long)Math.Sqrt(length + 1);\n        long mid = start + (end\
    \ - start) / 2;\n        bool isPrime = true;\n        long counter = 0;\n   \
    \     while (isPrime && counter < max) {\n            if (mid % 2 == 0) {\n  \
    \              isPrime = false;\n            } else {\n                mid = (mid\
    \ / 2);\n            }\n            counter++;\n        }\n        if (isPrime)\
    \ return \"YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (length == prime) return \"\
    YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long product = length * length;\n        long a = interval1.Item1 * interval1.Item2;\n\
    \        long b = interval2.Item1 * interval2.Item2;\n        long c = a * b;\n\
    \        long d = Math.Sqrt(c);\n        long e = (b * d) / c;\n        long f\
    \ = Math.Sqrt(e);\n        long g = Math.Sqrt(f);\n        long h = (e * g) /\
    \ c;\n        long i = Math.Sqrt(h);\n        long j = (f * i) / c;\n        long\
    \ k = Math.Sqrt(j);\n        long l = Math.Sqrt(k);\n        long m = Math.Sqrt(l);\n\
    \        long n = Math.Sqrt(m);\n        long o = Math.Sqrt(n);\n        long\
    \ p = Math.Sqrt(o);\n        long q = Math.Sqrt(p);\n        long r = Math.Sqrt(q);\n\
    \        long s = Math.Sqrt(r);\n        long t = Math.Sqrt(s);\n        long\
    \ u = Math.Sqrt(t);\n        long v = Math.Sqrt(u);\n        long w = Math.Sqrt(v);\n\
    \        long x = Math.Sqrt(w);\n        long y = Math.Sqrt(x);\n        long\
    \ z = Math.Sqrt(y);\n        long a = Math.Sqrt(z);\n        long b = Math.Sqrt(a);\n\
    \        long c = Math.Sqrt(b);\n        long d = Math.Sqrt(c);\n        long\
    \ e = Math.Sqrt(d);\n        long f = Math.Sqrt(e);\n        long g = Math.Sqrt(f);\n\
    \        long h = Math.Sqrt(g);\n        long i = Math.Sqrt(h);\n        long\
    \ j = Math.Sqrt(i);\n        long k = Math.Sqrt(j);\n        long l = Math.Sqrt(k);\n\
    \        long m = Math.Sqrt(l);\n        long n = Math.Sqrt(m);\n        long\
    \ o = Math.Sqrt(n);\n        long p = Math.Sqrt(o);\n        long q = Math.Sqrt(p);\n\
    \        long r = Math.Sqrt(q);\n        long s = Math.Sqrt(r);\n        long\
    \ t = Math.Sqrt(s);\n        long u = Math.Sqrt(t);\n        long v = Math.Sqrt(u);\n\
    \        ", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n       \
    \ long max2 = max * max;\n        long max3 = max2 * max;\n        long max4 =\
    \ max3 * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n\
    \        long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max", "    \
    \    long start = Math.Min(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0) return \"NO\";\n        long inter = start + (end -\
    \ start) / 2;\n        if (IsPrime(inter)) return \"YES\";\n        return \"\
    NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Max(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        long max =\
    \ (long)Math.Sqrt(length);\n        long max2 = max / 2;\n        long max3 =\
    \ max * max;\n        long max4 = max3 * max;\n        long max5 = max4 * max;\n\
    \        long max6 = max5 * max;\n        long max7 = max6 * max;\n        long\
    \ max8 = max7 * max;\n        long max9 = max8 * max;\n        long max10 = max9\
    \ * max;\n        long max11 = max10 * max;\n        long max12 = max11 * max;\n\
    \        long max13 = max12 * max;\n        long max14 = max13 * max;\n      \
    \  long max15 = max14 * max;\n        long max16 = max15 * max;\n        long\
    \ max17 = max16 * max;\n        long max18 = max17 * max;\n        long max19\
    \ = max18 * max;\n        long max20 = max19 * max;\n        long max21 = max20\
    \ * max;\n        long max22 = max21 * max;\n        long max23 = max22 * max;\n\
    \        long max24 = max23 * max;\n        long max25 = max24 * max;\n      \
    \  long max26 = max25 * max;\n        long max27 = max26 * max;\n        long\
    \ max28 = max27 * max;\n        long max29 = max28 * max;\n        long max30\
    \ = max29 * max;\n        long max31 = max30 * max;\n        long max32 = max31\
    \ * max;\n        long max33 = max32 * max;\n        long max34 = max33 * max;\n\
    \        long max35 = max34 * max;\n        long max36 = max35 * max;\n      \
    \  long max37 = max36 * max;\n        long max38 = max37 * max;\n        long\
    \ max39 = max38 * max;\n        long max40 = max39 * max;\n        long max41\
    \ = max40 * max;\n        long max42 = max41 * max;\n        long max43 = max42\
    \ * max;\n        long max44 = max43 * max;\n        long ", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0)\n            return \"NO\";\n        long prime = length / 2;\n        if\
    \ (length == prime)\n            return \"YES\";\n        if (length < prime)\n\
    \            return \"NO\";\n        long count = 0;\n        long i = start;\n\
    \        while (i <= end) {\n            long j = i;\n            while (j < end\
    \ && j + prime <= end) {\n                long k = j + prime;\n              \
    \  while (k < end && k + prime <= end) {\n                    long l = k + prime;\n\
    \                    while (l < end && l + prime <= end) {\n                 \
    \       long m = l + prime;\n                        while (m < end && m + prime\
    \ <= end) {\n                            long n = m + prime;\n               \
    \             while (n < end && n + prime <= end) {\n                        \
    \        long o = n + prime;\n                                while (o < end &&\
    \ o + prime <= end) {\n                                    long p = o + prime;\n\
    \                                    while (p < end && p + prime <= end) {\n \
    \                                       long q = p + prime;\n                \
    \                        while (q < end && q + prime <= end) {\n             \
    \                               long r = q + prime;\n                        \
    \                    while (l < end && r + prime <= end) {\n                 \
    \                               long s = l + prime;\n                        \
    \                        while (s < end && s + prime <= end) {\n             \
    \                                       long t = s + prime;\n                \
    \                                    while (t < end && t + prime <= end) {\n \
    \                                                       long u = t + prime;\n\
    \                                                        while (u < end && u +\
    \ prime <= end) {\n                                                          \
    \  long v = u + prime;\n                                                     \
    \       while (v < end && v + prime <= end) {\n                              \
    \                                  long w = v + prime;\n                     \
    \                                           while (w < end && w + prime <= end)\
    \ {\n                                                                    long\
    \ x = w + prime;\n                                                           \
    \         while (x < end && x + prime <= end) {\n                            \
    \                                            long y = x + prime;\n           \
    \                                                             while (y < end &&\
    \ y + prime <= end) {\n                                                      \
    \                      long z = y + prime;\n                                 \
    \                                           while (z < end && z + prime <= end)\
    \ {\n                                                                        \
    \        long aa = z + prime;\n                                              \
    \                                  while (AA < end && AA + prime <= end) {\n \
    \                                                                            \
    \       long AB = AA + prime;\n                                              \
    \                                      while (AB < end && AB + prime <= end) {\n\
    \                                                                            \
    \            long AC = AB + prime;\n                                         \
    \                                               while (AC < end && AC + prime\
    \ <= end) {\n                                                                \
    \                            long AD = AC + prime;\n                         \
    \                                                                   while (AD\
    \ < end ", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        if (length == 1)\n            return \"YES\";\n        long inter = start\
    \ + (end - start) / 2;\n        bool isPrime = true;\n        long counter = 1;\n\
    \        while (counter <= inter) {\n            if (Math.Abs(counter - inter)\
    \ == 1)\n                isPrime = false;\n            counter++;\n        }\n\
    \        if (isPrime)\n            return \"YES\";\n        else\n           \
    \ return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        if (length == 1)\n            return \"YES\";\n        long start2 =\
    \ Math.Min(interval1.Item2, interval2.Item2);\n        long end2 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0)\n            return \"NO\";\n        if (length2 == 1)\n            return\
    \ \"YES\";\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0)\n            return \"NO\"\
    ;\n        if (length3 == 1)\n            return \"YES\";\n        long start4\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long end4 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long length4 = end4 - start4;\n        if (length4\
    \ == 0)\n            return \"NO\";\n        if (length4 == 1)\n            return\
    \ \"YES\";\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        if (length5 == 1)\n            return \"YES\";\n        long start6\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long end6 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long length6 = end6 - start6;\n        if (length6\
    \ == 0)\n            return \"NO\";\n        if (length6 == 1)\n            return\
    \ \"YES\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0)\n            return \"NO\"\
    ;\n        if (length7 == 1)\n            return \"YES\";\n        long start8\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long end8 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        if (length8 == 1)\n            return\
    \ \"YES\";\n        long start9 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end9 = Math.Max(interval1.Item2, interval2.Item2);", "        long\
    \ start1 = interval1.Item1;\n        long end1 = interval1.Item2;\n        long\
    \ start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n        long\
    \ length = end1 - start1;\n        long length2 = end2 - start2;\n        if (length\
    \ == 0 || length2 == 0) {\n            return \"NO\";\n        }\n        long\
    \ length3 = length * length2;\n        long length4 = length3 * length;\n    \
    \    long length5 = length4 * length3;\n        long length6 = length5 * length4;\n\
    \        long length7 = length6 * length5;\n        long length8 = length7 * length6;\n\
    \        long length9 = length8 * length7;\n        long length10 = length9 *\
    \ length8;\n        long length11 = length10 * length9;\n        long length12\
    \ = length11 * length10;\n        long length13 = length12 * length11;\n     \
    \   long length14 = length13 * length12;\n        long length15 = length14 * length13;\n\
    \        long length16 = length15 * length14;\n        long length17 = length16\
    \ * length15;\n        long length18 = length17 * length16;\n        long length19\
    \ = length18 * length17;\n        long length20 = length19 * length18;\n     \
    \   long length21 = length20 * length19;\n        long length22 = length21 * length20;\n\
    \        long length23 = length22 * length21;\n        long length24 = length23\
    \ * length22;\n        long length25 = length24 * length23;\n        long length26\
    \ = length25 * length24;\n        long length27 = length26 * length25;\n     \
    \   long length28 = length27 * length26;\n        long length29 = length28 * length27;\n\
    \        long length30 = length29 * length28;\n        long length31 = length30\
    \ * length29;\n        long length32 = length31 * length30;\n        long length33\
    \ = length32 * length31;\n        long length34 = length33 * length32;\n     \
    \   long length35 = length34 * length33;\n        long length36 = length35 * length34;\n\
    \        long length37 = length36 * length35;\n        long length38 = length37\
    \ * length36;\n        long length39 = length38 * length37;\n        long length40\
    \ = length39 * length38;\n        long length41 = length40 * length39;\n     \
    \   long length42 = length41 * length40;\n        ", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (prime == length) return \"\
    YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ start2 = Math.Min(interval2.Item1, interval1.Item1);\n        long end2 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0)\n            return \"NO\";\n        if (length2 == 1)\n            return\
    \ \"YES\";\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0)\n            return \"NO\"\
    ;\n        if (length3 == 1)\n            return \"YES\";\n        long start4\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end4 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length4 = end4 - start4;\n        if (length4\
    \ == 0)\n            return \"NO\";\n        if (length4 == 1)\n            return\
    \ \"YES\";\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        if (length5 == 1)\n            return \"YES\";\n        long start6\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end6 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length6 = end6 - start6;\n        if (length6\
    \ == 0)\n            return \"NO\";\n        if (length6 == 1)\n            return\
    \ \"YES\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0)\n            return \"NO\"\
    ;\n        if (length7 == 1)\n            return \"YES\";\n        long start8\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end8 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        if (length8 == 1)\n            return\
    \ \"YES\";\n        long start9 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end9 = Math.Max(interval1.Item2, interval2.Item2);", "        long\
    \ start = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        bool isPrime = true;\n        for (int i = 2; i <=\
    \ length / 2; i++) {\n            if (length % i == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ return \"YES\";\n        return \"NO\";", "        long start1 = interval1.Item1;\n\
    \        long end1 = interval1.Item2;\n        long start2 = interval2.Item1;\n\
    \        long end2 = interval2.Item2;\n        long length = end1 - start1 + end2\
    \ - start2;\n        if (length == 0) return \"NO\";\n        long startIntersection\
    \ = start1 + start2;\n        long endIntersection = end1 + end2;\n        bool\
    \ isPrime = true;\n        long prime = length / 2;\n        while (prime > 1)\
    \ {\n            if (length % prime == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n            prime--;\n        }\n    \
    \    if (isPrime) {\n            return \"YES\";\n        }\n        return \"\
    NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Min(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        if (length == 2) return \"YES\";\n        if\
    \ (length == 3) return \"YES\";\n        if (length == 5) return \"YES\";\n  \
    \      if (length == 7) return \"YES\";\n        if (length == 11) return \"YES\"\
    ;\n        if (length == 13) return \"YES\";\n        if (length == 17) return\
    \ \"YES\";\n        if (length == 19) return \"YES\";\n        if (length == 21)\
    \ return \"YES\";\n        if (length == 23) return \"YES\";\n        if (length\
    \ == 25) return \"YES\";\n        if (length == 27) return \"YES\";\n        if\
    \ (length == 29) return \"YES\";\n        if (length == 31) return \"YES\";\n\
    \        if (length == 33) return \"YES\";\n        if (length == 35) return \"\
    YES\";\n        if (length == 37) return \"YES\";\n        if (length == 39) return\
    \ \"YES\";\n        if (length == 41) return \"YES\";\n        if (length == 43)\
    \ return \"YES\";\n        if (length == 45) return \"YES\";\n        if (length\
    \ == 47) return \"YES\";\n        if (length == 49) return \"YES\";\n        if\
    \ (length == 51) return \"YES\";\n        if (length == 53) return \"YES\";\n\
    \        if (length == 55) return \"YES\";\n        if (length == 57) return \"\
    YES\";\n        if (length == 59) return \"YES\";\n        if (length == 61) return\
    \ \"YES\";\n        if (length == 63) return \"YES\";\n        if (length == 65)\
    \ return \"YES\";\n        if (length == 67) return \"YES\";\n        if (length\
    \ == 69) return \"YES\";\n        if (length == 71) return \"YES\";\n        if\
    \ (length == 73) return \"YES\";\n        if (length == 75) return \"YES\";\n\
    \        if (length == 77) return \"YES\";\n        if (length == 79) return \"\
    YES\";\n        if (length == 81) return \"YES\";\n        if (length == 83) return\
    \ \"YES\";\n        if (length == 85) return \"YES\";\n        if (length == 87)\
    \ return \"YES\";\n        if (length == 89) return \"YES\";\n        if (length\
    \ == 91) return \"YES\";\n        if (length == 93) return \"YES\";\n        if\
    \ (length == 95) return \"YES\";\n        if (length == 97) return \"YES\";\n\
    \        if (length == 99) return \"YES\";\n        if (length == 101) return\
    \ \"YES\";\n        if (length == 103) return \"YES\";\n        if (length ==\
    \ 105) return \"YES\";\n        if (length == 107) return ", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        bool isPrime = true;\n        long prime = 2;\n \
    \       while (isPrime && prime < length) {\n            if (length % prime ==\
    \ 0) {\n                isPrime = false;\n            }\n            else {\n\
    \                prime++;\n            }\n        }\n        if (isPrime) return\
    \ \"YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long prime = GetPrime(length);\n        if (prime == length)\n\
    \            return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length\
    \ + 1);\n        long mid = start + (end - start) / 2;\n        long count = 0;\n\
    \        long prime = 0;\n        bool isPrime = true;\n        long primeCount\
    \ = 0;\n        long primeSum = 0;\n        long primeSum2 = 0;\n        long\
    \ primeSum3 = 0;\n        long primeSum4 = 0;\n        long primeSum5 = 0;\n \
    \       long primeSum6 = 0;\n        long primeSum7 = 0;\n        long primeSum8\
    \ = 0;\n        long primeSum9 = 0;\n        long primeSum10 = 0;\n        long\
    \ primeSum11 = 0;\n        long primeSum12 = 0;\n        long primeSum13 = 0;\n\
    \        long primeSum14 = 0;\n        long primeSum15 = 0;\n        long primeSum16\
    \ = 0;\n        long primeSum17 = 0;\n        long primeSum18 = 0;\n        long\
    \ primeSum19 = 0;\n        long primeSum20 = 0;\n        long primeSum21 = 0;\n\
    \        long primeSum22 = 0;\n        long primeSum23 = 0;\n        long primeSum24\
    \ = 0;\n        long primeSum25 = 0;\n        long primeSum26 = 0;\n        long\
    \ primeSum27 = 0;\n        long primeSum28 = 0;\n        long primeSum29 = 0;\n\
    \        long primeSum30 = 0;\n        long primeSum31 = 0;\n        long primeSum32\
    \ = 0;\n        long primeSum33 = 0;\n        long primeSum34 = 0;\n        long\
    \ primeSum35 = 0;\n        long primeSum36 = 0;\n        long primeSum37 = 0;\n\
    \        long primeSum38 = 0;\n        long primeSum39 = 0;\n        long primeSum40\
    \ = 0;\n        long primeSum41 = 0;\n        long primeSum42 = 0;\n        long\
    \ primeSum43 = 0;\n        long primeSum44 = 0;\n        long primeSum45 = 0;\n\
    \        long primeSum46 = 0;\n        long primeSum47 = 0;\n        long primeSum48\
    \ = 0;\n        long primeSum49 = 0;\n        long primeSum50 = 0;\n        long\
    \ primeSum51 = 0;\n        long primeSum52 = 0;\n        long primeSum53 = 0;\n\
    \        long primeSum54 = 0;\n        long primeSum55 = 0;\n        long primeSum56\
    \ = 0;\n        long primeSum57 = 0;\n        long primeSum58 = 0;\n        long\
    \ primeSum59 = 0;\n        long prime", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long max2 = max * max;\n        long max3 = max2 * max;\n        long\
    \ max4 = max3 * max;\n        long max5 = max4 * max;\n        long max6 = max5\
    \ * max;\n        long max7 = max6 * max;\n        long max8 = max7 * max;\n \
    \       long max9 = max8 * max;\n        long max10 = max9 * max;\n        long\
    \ max11 = max10 * max;\n        long max12 = max11 * max;\n        long max13\
    \ = max12 * max;\n        long max14 = max13 * max;\n        long max15 = max14\
    \ * max;\n        long max16 = max15 * max;\n        long max17 = max16 * max;\n\
    \        long max18 = max17 * max;\n        long max19 = max18 * max;\n      \
    \  long max20 = max19 * max;\n        long max21 = max20 * max;\n        long\
    \ max22 = max21 * max;\n        long max23 = max22 * max;\n        long max24\
    \ = max23 * max;\n        long max25 = max24 * max;\n        long max26 = max25\
    \ * max;\n        long max27 = max26 * max;\n        long max28 = max27 * max;\n\
    \        long max29 = max28 * max;\n        long max30 = max29 * max;\n      \
    \  long max31 = max30 * max;\n        long max32 = max31 * max;\n        long\
    \ max33 = max32 * max;\n        long max34 = max33 * max;\n        long max35\
    \ = max34 * max;\n        long max36 = max35 * max;\n        long max37 = max36\
    \ * max;\n        long max38 = max37 * max;\n        long max39 = max38 * max;\n\
    \        long max40 = max39 * max;\n        long max41 = max40 * max;\n      \
    \  long max42 = max41 * max;\n        long max43 = max42 * max;\n        long\
    \ max", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Max(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        long num =\
    \ 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n\
    \            if (mid * mid > length) end = mid;\n            else start = mid\
    \ + 1;\n        }\n        if (start == end) return \"NO\";\n        bool isPrime\
    \ = true;\n        long i = start;\n        while (i < end) {\n            if\
    \ (i % 2 == 0) isPrime = false;\n            i += 2;\n        }\n        if (isPrime)\
    \ return \"YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long sum = 0;\n        long prime = 1;\n        while (prime <= length)\
    \ {\n            sum += prime;\n            prime += 2;\n        }\n        if\
    \ (sum == length) return \"YES\";\n        return \"NO\";", "        long start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0)\n            return \"NO\";\n        long prime = GetPrime(length);\n   \
    \     if (prime == length)\n            return \"YES\";\n        return \"NO\"\
    ;", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n      \
    \  long end = Math.Max(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n       \
    \ long max2 = max / 2;\n        long max3 = max * max;\n        long max4 = max3\
    \ * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n \
    \       long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44", "  \
    \      long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        long start2 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end2 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length2 = end2 - start2;\n        if (length2 == 0) return \"NO\"\
    ;\n        long start3 = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ long end3 = Math.Min(interval1.Item2, interval2.Item2);\n        long length3\
    \ = end3 - start3;\n        if (length3 == 0) return \"NO\";\n        long start4\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end4 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length4 = end4 - start4;\n        if (length4\
    \ == 0) return \"NO\";\n        long start5 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0) return \"NO\";\n       \
    \ long start6 = Math.Max(interval1.Item1, interval2.Item1);\n        long end6\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long length6 = end6 -\
    \ start6;\n        if (length6 == 0) return \"NO\";\n        long start7 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        long start8 = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ long end8 = Math.Min(interval1.Item2, interval2.Item2);\n        long length8\
    \ = end8 - start8;\n        if (length8 == 0) return \"NO\";\n        long start9\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end9 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length9 = end9 - start9;\n        if (length9\
    \ == 0) return \"NO\";\n        long start10 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end10 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length10 = end10 - start10;\n        if (length10 == 0) return \"NO\";\n   \
    \     long start11", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ start2 = Math.Min(interval1.Item1, interval2.Item1);\n        long end2 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0) return \"NO\";\n        if (length == length2) return \"YES\";\n     \
    \   long start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long end3\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length3 = end3 -\
    \ start3;\n        if (length3 == 0) return \"NO\";\n        if (length == length3)\
    \ return \"YES\";\n        long start4 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length4 = end4 - start4;\n        if (length4 == 0) return \"NO\";\n       \
    \ if (length == length4) return \"YES\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        if (length == length5) return \"YES\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        if (length == length6) return \"YES\";\n        long start7 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        if (length == length7) return \"YES\";\n        long start8 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end8 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0) return \"NO\"\
    ;\n        if (length == length8) return \"YES\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length9 = end9", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (prime == length) return \"\
    YES\";\n        if (prime == 0) return \"NO\";\n        long start2 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end2 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length2 = end2 - start2;\n        if (length2 == 0) return \"NO\"\
    ;\n        long prime2 = GetPrime(length2);\n        if (prime2 == length2) return\
    \ \"YES\";\n        if (prime2 == 0) return \"NO\";\n        long start3 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length3 = end3 - start3;\n        if (length3 == 0) return \"NO\"\
    ;\n        long prime3 = GetPrime(length3);\n        if (prime3 == length3) return\
    \ \"YES\";\n        if (prime3 == 0) return \"NO\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        long prime4 = GetPrime(length4);\n        if (prime4 == length4) return\
    \ \"YES\";\n        if (prime4 == 0) return \"NO\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        long prime5 = GetPrime(length5);\n        if (prime5 == length5) return\
    \ \"YES\";\n        if (prime5 == 0) return \"NO\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        long prime6 = GetPrime(length6);\n        if (prime6 == length6) return\
    \ \"YES\";\n        if (prime6 == 0) return \"NO\";\n        long start7 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Max(interval1.Item2, interval",
  "        long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        if (length == 1)\
    \ return \"YES\";\n        bool isPrime = true;\n        long prime = 2;\n   \
    \     while (isPrime) {\n            if (length == prime) {\n                isPrime\
    \ = false;\n            } else {\n                prime++;\n            }\n  \
    \      }\n        if (isPrime) return \"YES\";\n        return \"NO\";", "   \
    \     long start = interval1.Item1;\n        long end = interval1.Item2;\n   \
    \     long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n \
    \       long length = (end - start) * (end2 - start2);\n        long length2 =\
    \ Math.Abs(end - start) * (end - start2);\n        long length3 = Math.Abs(end\
    \ - start) * (end2 - start2);\n        long length4 = Math.Abs(end - start) *\
    \ (end - start2);\n        long length5 = Math.Abs(end - start) * (end2 - start2);\n\
    \        long length6 = Math.Abs(end - start) * (end - start2);\n        long\
    \ length7 = Math.Abs(end - start) * (end2 - start2);\n        long length8 = Math.Abs(end\
    \ - start) * (end - start2);\n        long length9 = Math.Abs(end - start) * (end2\
    \ - start2);\n        long length10 = Math.Abs(end - start) * (end - start2);\n\
    \        long length11 = Math.Abs(end - start) * (end2 - start2);\n        long\
    \ length12 = Math.Abs(end - start) * (end - start2);\n        long length13 =\
    \ Math.Abs(end - start) * (end2 - start2);\n        long length14 = Math.Abs(end\
    \ - start) * (end - start2);\n        long length15 = Math.Abs(end - start) *\
    \ (end2 - start2);\n        long length16 = Math.Abs(end - start) * (end - start2);\n\
    \        long length17 = Math.Abs(end - start) * (end2 - start2);\n        long\
    \ length18 = Math.Abs(end - start) * (end - start2);\n        long length19 =\
    \ Math.Abs(end - start) * (end2 - start2);\n        long length20 = Math.Abs(end\
    \ - start) * (end - start2);\n        long length21 = Math.Abs(end - start) *\
    \ (end - start2);\n        long length22 = Math.Abs(end - start) * (end - start2);\n\
    \        long length23 = Math.Abs(end - start) * (end2 - start2);\n        long\
    \ length24 = Math.Abs(end - start) * (end - start2);\n        long length25 =\
    \ Math.Abs(end - start) * (end2 - start2);\n        long length26 = Math.Abs(end\
    \ - start) * (end - start2);\n        long length27 = Math.Abs(end - start) *\
    \ (end2 - start2);\n        long length28 = Math.Abs(end - start) * (end - start2);\n\
    \        long length29 = Math.Abs(end - start) * (end2 - start2);\n        long\
    \ length30 = Math.Abs(end - start) * (end - start2);\n        long length31 =\
    \ Math.Abs(end - start) * (end2 - start2);\n        long length32 = Math.Abs(end\
    \ - start) * (end - start2);\n        long length33 = Math.Abs(end - start) *\
    \ (end2 - start2);\n        ", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long start2 = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end2 = Math.Min(interval1.Item2, interval2.Item2);\n        long length2 = end2\
    \ - start2;\n        if (length2 == 0) return \"NO\";\n        if (length == length2)\
    \ return \"YES\";\n        long start3 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0) return \"NO\";\n       \
    \ if (length == length3) return \"YES\";\n        long start4 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        if (length == length4) return \"YES\";\n        long start5 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        if (length == length5) return \"YES\";\n        long start6 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        if (length == length6) return \"YES\";\n        long start7 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        if (length == length7) return \"YES\";\n        long start8 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end8 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0) return \"NO\"\
    ;\n        if (length == length8) return \"YES\";\n        long start9 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length9 = end9", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max * max;\n        long\
    \ max3 = max2 * max;\n        long max4 = max3 * max;\n        long max5 = max4\
    \ * max;\n        long max6 = max5 * max;\n        long max7 = max6 * max;\n \
    \       long max8 = max7 * max;\n        long max9 = max8 * max;\n        long\
    \ max10 = max9 * max;\n        long max11 = max10 * max;\n        long max12 =\
    \ max11 * max;\n        long max13 = max12 * max;\n        long max14 = max13\
    \ * max;\n        long max15 = max14 * max;\n        long max16 = max15 * max;\n\
    \        long max17 = max16 * max;\n        long max18 = max17 * max;\n      \
    \  long max19 = max18 * max;\n        long max20 = max19 * max;\n        long\
    \ max21 = max20 * max;\n        long max22 = max21 * max;\n        long max23\
    \ = max22 * max;\n        long max24 = max23 * max;\n        long max25 = max24\
    \ * max;\n        long max26 = max25 * max;\n        long max27 = max26 * max;\n\
    \        long max28 = max27 * max;\n        long max29 = max28 * max;\n      \
    \  long max30 = max29 * max;\n        long max31 = max30 * max;\n        long\
    \ max32 = max31 * max;\n        long max33 = max32 * max;\n        long max34\
    \ = max33 * max;\n        long max35 = max34 * max;\n        long max36 = max35\
    \ * max;\n        long max37 = max36 * max;\n        long max38 = max37 * max;\n\
    \        long max39 = max38 * max;\n        long max40 = max39 * max;\n      \
    \  long max41 = max40 * max;\n        long max42 = max41 * max;\n        long\
    \ max43 = max42 * max;\n        long max", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long numOfPrimes = 0;\n        long numOfPrimes2 = 1;\n        long numOfPrimes3\
    \ = 1;\n        long numOfPrimes4 = 1;\n        long numOfPrimes5 = 1;\n     \
    \   long numOfPrimes6 = 1;\n        long numOfPrimes7 = 1;\n        long numOfPrimes8\
    \ = 1;\n        long numOfPrimes9 = 1;\n        long numOfPrimes10 = 1;\n    \
    \    long numOfPrimes11 = 1;\n        long numOfPrimes12 = 1;\n        long numOfPrimes13\
    \ = 1;\n        long numOfPrimes14 = 1;\n        long numOfPrimes15 = 1;\n   \
    \     long numOfPrimes16 = 1;\n        long numOfPrimes17 = 1;\n        long numOfPrimes18\
    \ = 1;\n        long numOfPrimes19 = 1;\n        long numOfPrimes20 = 1;\n   \
    \     long numOfPrimes21 = 1;\n        long numOfPrimes22 = 1;\n        long numOfPrimes23\
    \ = 1;\n        long numOfPrimes24 = 1;\n        long numOfPrimes25 = 1;\n   \
    \     long numOfPrimes26 = 1;\n        long numOfPrimes27 = 1;\n        long numOfPrimes28\
    \ = 1;\n        long numOfPrimes29 = 1;\n        long numOfPrimes30 = 1;\n   \
    \     long numOfPrimes31 = 1;\n        long numOfPrimes32 = 1;\n        long numOfPrimes33\
    \ = 1;\n        long numOfPrimes34 = 1;\n        long numOfPrimes35 = 1;\n   \
    \     long numOfPrimes36 = 1;\n        long numOfPrimes37 = 1;\n        long numOfPrimes38\
    \ = 1;\n        long numOfPrimes39 = 1;\n        long numOfPrimes40 = 1;\n   \
    \     long numOfPrimes41 = 1;\n        long numOfPrimes42 = 1;\n        long numOfPrimes43\
    \ = 1;\n        long numOfPrimes44 = 1;\n        long numOfPrimes45 = 1;\n   \
    \     long numOfPrimes46 = 1;\n        long numOfPrimes47 = 1;\n        long numOfPrimes48\
    \ = 1;\n        long numOfPrimes49 = 1;\n        long numOfPrimes50 = 1;\n   \
    \     long numOfPrimes51 = 1;\n        long numOfPrimes52 = ", "        long start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        if (length == 1) return \"YES\";\n        long max\
    \ = (long)Math.Sqrt(length);\n        long start2 = start / max;\n        long\
    \ end2 = end / max;\n        if (start2 == end2) return \"YES\";\n        if (start2\
    \ < end2) return \"NO\";\n        long start3 = start2 / max;\n        long end3\
    \ = end2 / max;\n        if (start3 == end3) return \"YES\";\n        if (start3\
    \ < end3) return \"NO\";\n        long start4 = start3 / max;\n        long end4\
    \ = end3 / max;\n        if (start4 == end4) return \"YES\";\n        if (start4\
    \ < end4) return \"NO\";\n        long start5 = start4 / max;\n        long end5\
    \ = end4 / max;\n        if (start5 == end5) return \"YES\";\n        if (start5\
    \ < end5) return \"NO\";\n        long start6 = start5 / max;\n        long end6\
    \ = end5 / max;\n        if (start6 == end6) return \"YES\";\n        if (start6\
    \ < end6) return \"NO\";\n        long start7 = start6 / max;\n        long end7\
    \ = end6 / max;\n        if (start7 == end7) return \"YES\";\n        if (start7\
    \ < end7) return \"NO\";\n        long start8 = start7 / max;\n        long end8\
    \ = end7 / max;\n        if (start8 == end8) return \"YES\";\n        if (start8\
    \ < end8) return \"NO\";\n        long start9 = start8 / max;\n        long end9\
    \ = end8 / max;\n        if (start9 == end9) return \"YES\";\n        if (start9\
    \ < end9) return \"NO\";\n        long start10 = start9 / max;\n        long end10\
    \ = end9 / max;\n        if (start10 == end10) return \"YES\";\n        if (start10\
    \ < end10) return \"NO\";\n        long start11 = start10 / max;\n        long\
    \ end11 = end10 / max;\n        if (start11 == end11) return \"YES\";\n      \
    \  if (start11 < end11) return \"NO\";\n        long start12 = start11 / max;\n\
    \        long end12 = end11 / max;\n        if (start12 == end12) return \"YES\"\
    ;\n        if (start12 < ", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long count = 0;\n        for (long i\
    \ = start; i <= max; i++) {\n            long j = start + i;\n            if (interval1.Item1\
    \ <= j && j < interval2.Item2) count++;\n        }\n        if (count == 0) return\
    \ \"NO\";\n        if (count == 1) return \"YES\";\n        return \"NO\";", " \
    \       long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0)\n            return \"NO\";\n        if (length\
    \ == 1)\n            return \"YES\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long max2 = max * max;\n        long max3 = max2 * max;\n        long\
    \ max4 = max3 * max;\n        long max5 = max4 * max;\n        long max6 = max5\
    \ * max;\n        long max7 = max6 * max;\n        long max8 = max7 * max;\n \
    \       long max9 = max8 * max;\n        long max10 = max9 * max;\n        long\
    \ max11 = max10 * max;\n        long max12 = max11 * max;\n        long max13\
    \ = max12 * max;\n        long max14 = max13 * max;\n        long max15 = max14\
    \ * max;\n        long max16 = max15 * max;\n        long max17 = max16 * max;\n\
    \        long max18 = max17 * max;\n        long max19 = max18 * max;\n      \
    \  long max20 = max19 * max;\n        long max21 = max20 * max;\n        long\
    \ max22 = max21 * max;\n        long max23 = max22 * max;\n        long max24\
    \ = max23 * max;\n        long max25 = max24 * max;\n        long max26 = max25\
    \ * max;\n        long max27 = max26 * max;\n        long max28 = max27 * max;\n\
    \        long max29 = max28 * max;\n        long max30 = max29 * max;\n      \
    \  long max31 = max30 * max;\n        long max32 = max31 * max;\n        long\
    \ max33 = max32 * max;\n        long max34 = max33 * max;\n        long max35\
    \ = max34 * max;\n        long max36 = max35 * max;\n        long max37 = max36\
    \ * max;\n        long max38 = max37 * max;\n        long max39 = max38 * max;\n\
    \        long max40 = max39 * max;\n        long max41 = max40 * max;\n      \
    \  long max42 = max41 * max;\n        long max43 = max42 * max;\n        long\
    \ max", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Min(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        long inter\
    \ = start + (end - start) / 2;\n        if (inter > length) return \"NO\";\n \
    \       bool isPrime = true;\n        long prime = 2;\n        while (prime *\
    \ prime <= inter) {\n            if (inter % prime == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n            prime++;\n    \
    \    }\n        if (isPrime) return \"YES\";\n        return \"NO\";", "     \
    \   long start1 = interval1.Item1;\n        long end1 = interval1.Item2;\n   \
    \     long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n \
    \       long startIntersect = start1 < start2 ? start1 : start2;\n        long\
    \ endIntersect = end1 < end2 ? end1 : end2;\n        long lengthIntersect = endIntersect\
    \ - startIntersect;\n        if (lengthIntersect == 0) {\n            return \"\
    NO\";\n        }\n        long lengthPrime = lengthIntersect / 2;\n        long\
    \ lengthRemain = lengthIntersect % 2;\n        bool isPrime = true;\n        long\
    \ startPrime = startIntersect + lengthPrime;\n        long endPrime = startPrime\
    \ + lengthRemain;\n        while (startPrime < endPrime) {\n            long startPrime2\
    \ = startPrime + lengthPrime;\n            long endPrime2 = startPrime2 + lengthRemain;\n\
    \            if (startPrime2 == endPrime2) {\n                isPrime = false;\n\
    \                break;\n            }\n            if (IsPrime(startPrime2) &&\
    \ IsPrime(endPrime2)) {\n                isPrime = true;\n                break;\n\
    \            }\n            startPrime = startPrime2;\n            endPrime =\
    \ endPrime2;\n        }\n        if (isPrime) {\n            return \"YES\";\n\
    \        }\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ start2 = Math.Min(interval2.Item1, interval1.Item1);\n        long end2 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0)\n            return \"NO\";\n        if (length2 == 1)\n            return\
    \ \"YES\";\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0)\n            return \"NO\"\
    ;\n        if (length3 == 1)\n            return \"YES\";\n        long start4\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end4 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length4 = end4 - start4;\n        if (length4\
    \ == 0)\n            return \"NO\";\n        if (length4 == 1)\n            return\
    \ \"YES\";\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        if (length5 == 1)\n            return \"YES\";\n        long start6\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end6 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length6 = end6 - start6;\n        if (length6\
    \ == 0)\n            return \"NO\";\n        if (length6 == 1)\n            return\
    \ \"YES\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0)\n            return \"NO\"\
    ;\n        if (length7 == 1)\n            return \"YES\";\n        long start8\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end8 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        if (length8 == 1)\n            return\
    \ \"YES\";\n        long start9 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end9 = Math.Max(interval1.Item2, interval2.Item2);", "        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n        long\
    \ max2 = max * max;\n        long max3 = max2 * max;\n        long max4 = max3\
    \ * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n \
    \       long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44 = max43\
    \ * max;\n        ", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime)\n                return \"YES\";\n     \
    \       if (length == prime + 1) {\n                isPrime = false;\n       \
    \     }\n            prime += 2;\n        }\n        return \"NO\";", "      \
    \  long start = Math.Min(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0)\n            return \"NO\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long max2 = max / 2;\n        long max3 = max * max;\n        long max4\
    \ = max3 * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n\
    \        long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44 = max43\
    \ * max;\n        long ", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long mid = start + (end - start) / 2;\n\
    \        long count = 0;\n        long sum = 0;\n        while (start < end) {\n\
    \            sum += start;\n            if (sum == mid) count++;\n           \
    \ sum += end;\n            if (sum == mid) count++;\n            start += max;\n\
    \            end -= max;\n        }\n        if (count == 2) return \"YES\";\n\
    \        return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max / 2;\n        long max3\
    \ = max * max;\n        long max4 = max3 * max;\n        long max5 = max4 * max;\n\
    \        long max6 = max5 * max;\n        long max7 = max6 * max;\n        long\
    \ max8 = max7 * max;\n        long max9 = max8 * max;\n        long max10 = max9\
    \ * max;\n        long max11 = max10 * max;\n        long max12 = max11 * max;\n\
    \        long max13 = max12 * max;\n        long max14 = max13 * max;\n      \
    \  long max15 = max14 * max;\n        long max16 = max15 * max;\n        long\
    \ max17 = max16 * max;\n        long max18 = max17 * max;\n        long max19\
    \ = max18 * max;\n        long max20 = max19 * max;\n        long max21 = max20\
    \ * max;\n        long max22 = max21 * max;\n        long max23 = max22 * max;\n\
    \        long max24 = max23 * max;\n        long max25 = max24 * max;\n      \
    \  long max26 = max25 * max;\n        long max27 = max26 * max;\n        long\
    \ max28 = max27 * max;\n        long max29 = max28 * max;\n        long max30\
    \ = max29 * max;\n        long max31 = max30 * max;\n        long max32 = max31\
    \ * max;\n        long max33 = max32 * max;\n        long max34 = max33 * max;\n\
    \        long max35 = max34 * max;\n        long max36 = max35 * max;\n      \
    \  long max37 = max36 * max;\n        long max38 = max37 * max;\n        long\
    \ max39 = max38 * max;\n        long max40 = max39 * max;\n        long max41\
    \ = max40 * max;\n        long max42 = max41 * max;\n        long max43 = max42\
    \ * max;\n        long max44 = max43 * max;\n        long ", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        bool isPrime\
    \ = true;\n        long prime = 2;\n        while (isPrime) {\n            if\
    \ (length == prime) {\n                isPrime = false;\n            } else {\n\
    \                length++;\n            }\n            if (length == prime) {\n\
    \                isPrime = false;\n            } else {\n                length++;\n\
    \            }\n            if (length == prime) {\n                isPrime =\
    \ false;\n            } else {\n                length++;\n            }\n   \
    \         if (length == prime) {\n                isPrime = false;\n         \
    \   } else {\n                length++;\n            }\n            if (length\
    \ == prime) {\n                isPrime = false;\n            } else {\n      \
    \          length++;\n            }\n            if (length == prime) {\n    \
    \            isPrime = false;\n            } else {\n                length++;\n\
    \            }\n            if (length == prime) {\n                isPrime =\
    \ false;\n            } else {\n                length++;\n            }\n   \
    \         if (length == prime) {\n                isPrime = false;\n         \
    \   } else {\n                length++;\n            }\n            if (length\
    \ == prime) {\n                isPrime = false;\n            } else {\n      \
    \          length++;\n            }\n            if (length == prime) {\n    \
    \            isPrime = false;\n            } else {\n                length++;\n\
    \            }\n            if (length == prime) {\n                isPrime =\
    \ false;\n            } else {\n                length++;\n            }\n   \
    \         if (length == prime) {\n                isPrime = false;\n         \
    \   } else {\n                length++;\n            }\n            if (length\
    \ == prime) {\n                isPrime = false;\n            } else {\n      \
    \          length++;\n            }\n            if (length == prime) {\n    \
    \            isPrime = false;\n            } else {\n                length++;\n\
    \            }\n            if (length == prime) {\n                isPrime =\
    \ false;\n            } else {\n                length++;\n            }\n   \
    \         if (length == prime) {\n                isPrime = false;\n         \
    \   } else {\n                length++;\n            }\n            if (length\
    \ == prime) {\n                isPrime = false;\n            } else {\n      \
    \          length++;\n            }\n            if (length == prime) {\n    \
    \            isPrime = false;\n            } else {\n                length++;\n\
    \            }\n            if (length == prime) {\n                isPrime =\
    \ false;\n            } else {\n                length++;\n            }\n   \
    \         if (length == prime) {\n                isPrime = false;\n         \
    \   } else {\n                length++;\n            }\n            if (length\
    \ == prime) {\n                isPrime = false;\n            } else {\n      \
    \          length++;\n            }\n            if (length == prime) {\n    \
    \            isPrime = false;\n            } else {\n                length++;\n\
    \            }\n            if (length == prime) {\n                isPrime =\
    \ false;\n            } else {\n                length++;\n", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        bool isPrime = true;\n        long prime = 2;\n \
    \       while (isPrime) {\n            if (length == prime) {\n              \
    \  isPrime = false;\n            } else {\n                length--;\n       \
    \     }\n            prime++;\n        }\n        if (isPrime) return \"YES\"\
    ;\n        return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = GetPrime(length);\n        if (prime == length) return \"YES\";\n  \
    \      return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ mid = start + (length / 2);\n        bool isPrime = true;\n        long prime\
    \ = 2;\n        while (isPrime) {\n            if (mid % prime == 0) {\n     \
    \           isPrime = false;\n            } else {\n                prime++;\n\
    \            }\n            mid++;\n        }\n        if (isPrime) return \"\
    YES\";\n        else return \"NO\";", "        long start1 = interval1.Item1;\n\
    \        long end1 = interval1.Item2;\n        long start2 = interval2.Item1;\n\
    \        long end2 = interval2.Item2;\n        long length1 = end1 - start1;\n\
    \        long length2 = end2 - start2;\n        if (length1 == 0 || length2 ==\
    \ 0) {\n            return \"NO\";\n        }\n        long lengthIntersection\
    \ = length1 + length2;\n        long lengthPrime = 0;\n        bool isPrime =\
    \ true;\n        long startPrime = start1;\n        long endPrime = end1;\n  \
    \      while (startPrime <= endPrime) {\n            long startPrime2 = startPrime\
    \ + 1;\n            long endPrime2 = endPrime;\n            while (startPrime2\
    \ <= endPrime2) {\n                long startPrime3 = startPrime2 + 1;\n     \
    \           long endPrime3 = endPrime2;\n                while (startPrime3 <=\
    \ endPrime3) {\n                    long startPrime4 = startPrime3 + 1;\n    \
    \                long endPrime4 = endPrime3;\n                    while (startPrime4\
    \ <= endPrime4) {\n                        long startPrime5 = startPrime4 + 1;\n\
    \                        long endPrime5 = endPrime4;\n                       \
    \ while (startPrime5 <= endPrime5) {\n                            long startPrime6\
    \ = startPrime5 + 1;\n                            long endPrime6 = endPrime5;\n\
    \                            while (startPrime6 <= endPrime6) {\n            \
    \                    long startPrime7 = startPrime6 + 1;\n                   \
    \             long endPrime7 = endPrime6;\n                                while\
    \ (startPrime7 <= endPrime7) {\n                                    long startPrime8\
    \ = startPrime7 + 1;\n                                    long endPrime8 = endPrime7;\n\
    \                                    while (startPrime8 <= endPrime8) {\n    \
    \                                    long startPrime9 = startPrime8 + 1;\n   \
    \                                     long endPrime9 = endPrime8;\n          \
    \                              while (startPrime9 <= endPrime9) {\n          \
    \                                  long startPrime10 = startPrime9 + 1;\n    \
    \                                        long endPrime10 = endPrime9;\n      \
    \                                      while (startPrime10 <= endPrime10) {\n\
    \                                                long startPrime11 = startPrime10\
    \ + 1;\n                                                long endPrime11 = endPrime10;\n\
    \                                                while (startPrime11 <= endPrime11)\
    \ {\n                                                    long startPrime12 = startPrime11\
    \ + 1;\n                                                    long endPrime12 =\
    \ endPrime11;\n                                                    while (startPrime12\
    \ <= endPrime", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length\
    \ + 1);\n        long mid = (start + end) / 2;\n        long count = 0;\n    \
    \    long sum = 0;\n        while (start <= mid) {\n            sum += start;\n\
    \            count++;\n            start += max;\n        }\n        while (end\
    \ >= mid) {\n            sum += end;\n            count++;\n            end -=\
    \ max;\n        }\n        if (sum == mid)\n            return \"YES\";\n    \
    \    if (count == 1)\n            return \"NO\";\n        long sum2 = sum;\n \
    \       long count2 = count;\n        while (sum2 != 0) {\n            sum2 /=\
    \ 2;\n            count2--;\n        }\n        if (count2 == 0)\n           \
    \ return \"YES\";\n        long sum3 = sum;\n        long count3 = count;\n  \
    \      while (sum3 != 0) {\n            sum3 /= 2;\n            count3--;\n  \
    \      }\n        if (count3 == 0)\n            return \"YES\";\n        long\
    \ sum4 = sum;\n        long count4 = count;\n        while (sum4 != 0) {\n   \
    \         sum4 /= 2;\n            count4--;\n        }\n        if (count4 ==\
    \ 0)\n            return \"YES\";\n        long sum5 = sum;\n        long count5\
    \ = count;\n        while (sum5 != 0) {\n            sum5 /= 2;\n            count5--;\n\
    \        }\n        if (count5 == 0)\n            return \"YES\";\n        long\
    \ sum6 = sum;\n        long count6 = count;\n        while (sum6 != 0) {\n   \
    \         sum6 /= 2;\n            count6--;\n        }\n        if (count6 ==\
    \ 0)\n            return \"YES\";\n        long sum7 = sum;\n        long count7\
    \ = count;\n        while (sum7 != 0) {\n            sum7 /= 2;\n            count7--;\n\
    \        }\n        if (count7 == 0)\n            return \"YES\";\n        long\
    \ sum8 = sum;\n        long count8 = count;\n        while (sum8 != 0) {\n   \
    \         sum8 /= 2;\n            count8--;\n        }\n        if (count8 ==\
    \ 0)\n            return \"YES\";\n        long sum9 = sum;\n        long count9\
    \ = count;\n        while (sum9 != 0) {\n            sum9 /= 2;\n            count9--;\n\
    \        }\n        if (count9 == 0)\n            return \"YES\";\n        long\
    \ sum10 = sum;\n        long count10 = count;\n        while (sum10 != 0) {\n\
    \            sum10 /= 2;\n            count10--;\n", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long inter = start + (end - start) / 2;\n        if (IsPrime(inter))\
    \ return \"YES\";\n        return \"NO\";", "        long start = interval1.Item1;\n\
    \        long end = interval1.Item2;\n        long start2 = interval2.Item1;\n\
    \        long end2 = interval2.Item2;\n        long length = end - start;\n  \
    \      long length2 = end2 - start2;\n        if (length2 == 0) {\n          \
    \  return \"NO\";\n        }\n        if (length2 == 1) {\n            return\
    \ \"YES\";\n        }\n        long length3 = length / length2;\n        long\
    \ length4 = length % length2;\n        if (length3 == 0) {\n            return\
    \ \"NO\";\n        }\n        if (length3 == 1) {\n            return \"YES\"\
    ;\n        }\n        long length5 = length3 / length4;\n        long length6\
    \ = length3 % length4;\n        if (length5 == 0) {\n            return \"NO\"\
    ;\n        }\n        if (length5 == 1) {\n            return \"YES\";\n     \
    \   }\n        long length7 = length5 / length6;\n        long length8 = length5\
    \ % length6;\n        if (length7 == 0) {\n            return \"NO\";\n      \
    \  }\n        if (length7 == 1) {\n            return \"YES\";\n        }\n  \
    \      long length9 = length7 / length8;\n        long length10 = length7 % length8;\n\
    \        if (length9 == 0) {\n            return \"NO\";\n        }\n        if\
    \ (length9 == 1) {\n            return \"YES\";\n        }\n        long length11\
    \ = length9 / length10;\n        long length12 = length9 % length10;\n       \
    \ if (length11 == 0) {\n            return \"NO\";\n        }\n        if (length11\
    \ == 1) {\n            return \"YES\";\n        }\n        long length13 = length11\
    \ / length12;\n        long length14 = length11 % length12;\n        if (length13\
    \ == 0) {\n            return \"NO\";\n        }\n        if (length13 == 1) {\n\
    \            return \"YES\";\n        }\n        long length15 = length13 / length14;\n\
    \        long length16 = length13 % length14;\n        if (length15 == 0) {\n\
    \            return \"NO\";\n        }\n        if (length15 == 1) {\n       \
    \     return \"YES\";\n        }\n        long length17 = length15 / length16;\n\
    \        long length18 = length15 % length16;\n        if (length17 == 0) {\n\
    \            return \"NO\";\n        }\n        if (length17 == 1) {\n       \
    \     return \"YES\";\n        }\n        long length19 = length17 / length18;\n\
    \        long length20 = length17 % length18;\n        if (length19 == 0) {\n\
    \            return \"NO\";\n        }\n        if (length19 == 1) {\n       \
    \     return \"YES\";\n        }\n        long length21 = length19 / length20;\n\
    \        long length22 = length19 % length20;\n        if (length21 == 0) {\n\
    \            return \"NO\";\n        }\n        if (length21 == 1) {\n       \
    \     return \"YES\";\n        }\n", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ mid = start + (end - start) / 2;\n        bool isPrime = true;\n        long\
    \ prime = 2;\n        while (isPrime) {\n            if (length == prime)\n  \
    \              return \"YES\";\n            if (length == prime + 1) {\n     \
    \           isPrime = false;\n            }\n            prime += 2;\n       \
    \ }\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long prime = GetPrime(length);\n        if (length == prime)\n\
    \            return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        bool isPrime = true;\n    \
    \    long prime = 2;\n        while (isPrime) {\n            if (length == prime)\
    \ {\n                isPrime = false;\n            } else {\n                length--;\n\
    \                prime++;\n            }\n        }\n        return \"YES\";",
  "        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0)\n            return \"NO\";\n        long\
    \ num = 2;\n        while (length < num) {\n            if (IsPrime(length))\n\
    \                return \"YES\";\n            length++;\n        }\n        return\
    \ \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ sum = 0;\n        for (int i = start; i <= end; i++) {\n            sum += i;\n\
    \        }\n        if (sum == length) return \"YES\";\n        return \"NO\";",
  "        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        bool isPrime = true;\n\
    \        long prime = 2;\n        while (isPrime) {\n            if (length ==\
    \ prime) {\n                isPrime = false;\n            } else {\n         \
    \       length += prime;\n            }\n            prime++;\n        }\n   \
    \     if (length == prime) return \"YES\";\n        return \"NO\";", "       \
    \ long start = Math.Min(interval1.Item1, interval2.Item1);\n        long end =\
    \ Math.Max(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        long product = length * length;\n        long sum = 0;\n        long\
    \ prime = 1;\n        while (product != 0) {\n            sum += product;\n  \
    \          product /= prime;\n            prime++;\n        }\n        if (sum\
    \ == length) {\n            return \"YES\";\n        }\n        return \"NO\";",
  "        long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        bool isPrime = true;\n\
    \        long prime = 2;\n        while (isPrime) {\n            if (length ==\
    \ prime) return \"YES\";\n            if (length == prime + 1) return \"YES\"\
    ;\n            isPrime = false;\n            prime++;\n        }\n        return\
    \ \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long start2 = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end2 = Math.Min(interval1.Item2, interval2.Item2);\n        long length2 = end2\
    \ - start2;\n        if (length2 == 0)\n            return \"NO\";\n        long\
    \ start3 = Math.Max(interval1.Item1, interval2.Item1);\n        long end3 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length3 = end3 - start3;\n        if (length3\
    \ == 0)\n            return \"NO\";\n        long start4 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0)\n          \
    \  return \"NO\";\n        long start5 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        long start6 = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ long end6 = Math.Min(interval1.Item2, interval2.Item2);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0)\n            return \"NO\";\n  \
    \      long start7 = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end7 = Math.Min(interval1.Item2, interval2.Item2);\n        long length7 = end7\
    \ - start7;\n        if (length7 == 0)\n            return \"NO\";\n        long\
    \ start8 = Math.Max(interval1.Item1, interval2.Item1);\n        long end8 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        long start9 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length9 = end9 - start9;\n        if (length9 == 0)\n          \
    \  return \"NO\";\n        long start10 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end10 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length10 = end10 - start10;\n        if (length10 == 0)\n            return\
    \ \"NO\";\n        long start11", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max * max;\n        long\
    \ max3 = max2 * max;\n        long max4 = max3 * max;\n        long max5 = max4\
    \ * max;\n        long max6 = max5 * max;\n        long max7 = max6 * max;\n \
    \       long max8 = max7 * max;\n        long max9 = max8 * max;\n        long\
    \ max10 = max9 * max;\n        long max11 = max10 * max;\n        long max12 =\
    \ max11 * max;\n        long max13 = max12 * max;\n        long max14 = max13\
    \ * max;\n        long max15 = max14 * max;\n        long max16 = max15 * max;\n\
    \        long max17 = max16 * max;\n        long max18 = max17 * max;\n      \
    \  long max19 = max18 * max;\n        long max20 = max19 * max;\n        long\
    \ max21 = max20 * max;\n        long max22 = max21 * max;\n        long max23\
    \ = max22 * max;\n        long max24 = max23 * max;\n        long max25 = max24\
    \ * max;\n        long max26 = max25 * max;\n        long max27 = max26 * max;\n\
    \        long max28 = max27 * max;\n        long max29 = max28 * max;\n      \
    \  long max30 = max29 * max;\n        long max31 = max30 * max;\n        long\
    \ max32 = max31 * max;\n        long max33 = max32 * max;\n        long max34\
    \ = max33 * max;\n        long max35 = max34 * max;\n        long max36 = max35\
    \ * max;\n        long max37 = max36 * max;\n        long max38 = max37 * max;\n\
    \        long max39 = max38 * max;\n        long max40 = max39 * max;\n      \
    \  long max41 = max40 * max;\n        long max42 = max41 * max;\n        long\
    \ max43 = max42 * max;\n        long max", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long start2 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long end2 = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0)\n            return \"NO\"\
    ;\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long length3\
    \ = end3 - start3;\n        if (length3 == 0)\n            return \"NO\";\n  \
    \      long start4 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ end4 = Math.Max(interval1.Item1, interval2.Item1);\n        long length4 = end4\
    \ - start4;\n        if (length4 == 0)\n            return \"NO\";\n        long\
    \ start5 = Math.Min(interval1.Item1, interval2.Item1);\n        long end5 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length5 = end5 - start5;\n        if (length5\
    \ == 0)\n            return \"NO\";\n        long start6 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long end6 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0)\n          \
    \  return \"NO\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0)\n            return \"NO\"\
    ;\n        long start8 = Math.Min(interval1.Item2, interval2.Item2);\n       \
    \ long end8 = Math.Max(interval1.Item1, interval2.Item1);\n        long length8\
    \ = end8 - start8;\n        if (length8 == 0)\n            return \"NO\";\n  \
    \      long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end9 = Math.Max(interval1.Item2, interval2.Item2);\n        long length9 = end9\
    \ - start9;\n        if (length9 == 0)\n            return \"NO\";\n        long\
    \ start10 = Math.Min(interval1.Item2, interval2.Item2);\n        long end10 =\
    \ Math.Max(interval1.Item1, interval2.Item1);\n        long length10 = end10 -\
    \ start10;\n        if (length10 == 0)\n            return \"NO\";\n        long\
    \ start11", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        bool\
    \ isPrime = true;\n        long prime = length / 2;\n        while (prime > 1)\
    \ {\n            if (length % prime == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n            prime = prime / 2;\n     \
    \   }\n        if (isPrime) return \"YES\";\n        return \"NO\";", "      \
    \  long start = Math.Min(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0)\n            return \"NO\";\n        if (length == 1)\n\
    \            return \"YES\";\n        long start2 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end2 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length2 = end2 - start2;\n        if (length2 == 0)\n          \
    \  return \"NO\";\n        if (length2 == 1)\n            return \"YES\";\n  \
    \      long start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long length3 = end3\
    \ - start3;\n        if (length3 == 0)\n            return \"NO\";\n        if\
    \ (length3 == 1)\n            return \"YES\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0)\n          \
    \  return \"NO\";\n        if (length4 == 1)\n            return \"YES\";\n  \
    \      long start5 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long length5 = end5\
    \ - start5;\n        if (length5 == 0)\n            return \"NO\";\n        if\
    \ (length5 == 1)\n            return \"YES\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0)\n          \
    \  return \"NO\";\n        if (length6 == 1)\n            return \"YES\";\n  \
    \      long start7 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long length7 = end7\
    \ - start7;\n        if (length7 == 0)\n            return \"NO\";\n        if\
    \ (length7 == 1)\n            return \"YES\";\n        long start8 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end8 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0)\n          \
    \  return \"NO\";\n        if (length8 == 1)\n            return \"YES\";\n  \
    \      long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end9 = Math.Max(interval1.Item2, interval2.Item2);", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        long start2 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long end2 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long length2 = end2 - start2;\n        long length3 = end - start2;\n\
    \        long length4 = end2 - end;\n        long length5 = end - start1;\n  \
    \      long length6 = end2 - start1;\n        long length7 = end2 - end;\n   \
    \     long length8 = end1 - start;\n        long length9 = end2 - start1;\n  \
    \      long length10 = end1 - start;\n        long length11 = end1 - end;\n  \
    \      long length12 = end2 - end1;\n        long length13 = end1 - end2;\n  \
    \      long length14 = end - end2;\n        long length15 = end2 - end;\n    \
    \    long length16 = end1 - start;\n        long length17 = end2 - start2;\n \
    \       long length18 = end1 - start;\n        long length19 = end2 - start;\n\
    \        long length20 = end1 - end;\n        long length21 = end2 - end1;\n \
    \       long length22 = end - end1;\n        long length23 = end2 - end;\n   \
    \     long length24 = end1 - start2;\n        long length25 = end2 - start2;\n\
    \        long length26 = end1 - start;\n        long length27 = end2 - start;\n\
    \        long length28 = end1 - end;\n        long length29 = end2 - end;\n  \
    \      long length30 = end1 - start2;\n        long length31 = end2 - start2;\n\
    \        long length32 = end1 - start;\n        long length33 = end2 - start;\n\
    \        long length34 = end1 - end;\n        long length35 = end2 - end;\n  \
    \      long length36 = end1 - start2;\n        long length37 = end2 - start2;\n\
    \        long length38 = end1 - start;\n        long length39 = end2 - start;\n\
    \        long length40 = end1 - end;\n        long length41 = end2 - end;\n  \
    \      long length42 = end1 - start2;\n        long length43 = end2 - start2;\n\
    \        long length44 = end1 - start;\n        long length45 = end2 - start;\n\
    \        long length46 = end1 - end;\n        long length47 = end2 - end;\n  \
    \      long length48 = end1 - start2;\n        long length49 = end2 - start2;\n\
    \        long length50 = end", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long start2 = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end2 = Math.Min(interval1.Item2, interval2.Item2);\n        long length2 = end2\
    \ - start2;\n        if (length2 == 0) return \"NO\";\n        long start3 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end3 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length3 = end3 - start3;\n        if (length3 == 0) return \"NO\"\
    ;\n        long start4 = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ long end4 = Math.Min(interval1.Item2, interval2.Item2);\n        long length4\
    \ = end4 - start4;\n        if (length4 == 0) return \"NO\";\n        long start5\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end5 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length5 = end5 - start5;\n        if (length5\
    \ == 0) return \"NO\";\n        long start6 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end6 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length6 = end6 - start6;\n        if (length6 == 0) return \"NO\";\n       \
    \ long start7 = Math.Max(interval1.Item1, interval2.Item1);\n        long end7\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long length7 = end7 -\
    \ start7;\n        if (length7 == 0) return \"NO\";\n        long start8 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end8 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0) return \"NO\"\
    ;\n        long start9 = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ long end9 = Math.Min(interval1.Item2, interval2.Item2);\n        long length9\
    \ = end9 - start9;\n        if (length9 == 0) return \"NO\";\n        long start10\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end10 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length10 = end10 - start10;\n        if (length10\
    \ == 0) return \"NO\";\n        long start11", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime) {\n                isPrime = false;\n  \
    \          } else {\n                prime++;\n            }\n        }\n    \
    \    if (length == prime) return \"YES\";\n        return \"NO\";", "        long\
    \ start = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long prime = length / 2;\n        bool isPrime =\
    \ true;\n        for (int i = 2; i <= prime; i++) {\n            if (length %\
    \ i == 0) {\n                isPrime = false;\n                break;\n      \
    \      }\n        }\n        if (isPrime) return \"YES\";\n        return \"NO\"\
    ;", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n      \
    \  long end = Math.Min(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0)\n            return \"NO\";\n     \
    \   if (length == 1)\n            return \"YES\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long max2 = max / 2;\n        long max3 = max * max;\n        long max4\
    \ = max3 * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n\
    \        long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44", "  \
    \      long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        if (length == 1)\
    \ return \"YES\";\n        long max = (long)Math.Sqrt(length);\n        long mid\
    \ = start + (long)Math.Floor(max / 2);\n        long count = 0;\n        long\
    \ prime = 1;\n        while (prime <= max) {\n            long num = Math.Sqrt(prime);\n\
    \            if (num % 2 == 0) {\n                long num2 = Math.Sqrt(num);\n\
    \                if (num2 % 2 == 0) {\n                    long num3 = Math.Sqrt(num2);\n\
    \                    if (num3 % 2 == 0) {\n                        long num4 =\
    \ Math.Sqrt(num3);\n                        if (num4 % 2 == 0) {\n           \
    \                 long num5 = Math.Sqrt(num4);\n                            if\
    \ (num5 % 2 == 0) {\n                                long num6 = Math.Sqrt(num5);\n\
    \                                if (num6 % 2 == 0) {\n                      \
    \              long num7 = Math.Sqrt(num6);\n                                \
    \    if (num7 % 2 == 0) {\n                                        long num8 =\
    \ Math.Sqrt(num7);\n                                        if (num8 % 2 == 0)\
    \ {\n                                            long num9 = Math.Sqrt(num8);\n\
    \                                            if (num9 % 2 == 0) {\n          \
    \                                      long num10 = Math.Sqrt(num9);\n       \
    \                                         if (num10 % 2 == 0) {\n            \
    \                                        long num11 = Math.Sqrt(num10);\n    \
    \                                                if (num11 % 2 == 0) {\n     \
    \                                                   long num12 = Math.Sqrt(num11);\n\
    \                                                        if (num12 % 2 == 0) {\n\
    \                                                            long num13 = Math.Sqrt(num12);\n\
    \                                                            if (num13 % 2 ==\
    \ 0) {\n                                                                long num14\
    \ = Math.Sqrt(num13);\n                                                      \
    \          if (num14 % 2 == 0) {\n                                           \
    \                         long num15 = Math.Sqrt(num14);\n                   \
    \                                                 if (num15 % 2 == 0) {\n    \
    \                                                                    long num16\
    \ = Math.Sqrt(num15);\n                                                      \
    \                  if (num16 % 2 == 0) {\n                                   \
    \                             long num17 = Math.Sqrt(num16);\n               \
    \                                                 if (num17 % 2 == 0) {\n    \
    \                                                                long num18 =\
    \ Math.Sqrt(num17);\n                                                        \
    \            if (num18 % 2 == 0) {\n                                         \
    \                               long num19 = Math.Sqrt(num18);\n             \
    \                                                           if (num19 % 2 == 0)\
    \ {\n                                                                long num20\
    \ = Math.Sqrt(num19);\n                                                      \
    \          if (num20 % 2 == 0) {\n                                           \
    \                         long num21 = Math.Sqrt(num20);\n                   \
    \                                                 if (num21 % 2 == 0) {\n    \
    \                                                                    long num22\
    \ = Math.Sqrt(num21);", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length +\
    \ 1);\n        long max2 = (long)(Math.Sqrt(length + 1) + 1);\n        long min2\
    \ = (long)(Math.Sqrt(length + 1) + 2);\n        long max3 = (long)(Math.Sqrt(length\
    \ + 1) + 3);\n        long min3 = (long)(Math.Sqrt(length + 1) + 4);\n       \
    \ long max4 = (long)(Math.Sqrt(length + 1) + 5);\n        long min4 = (long)(Math.Sqrt(length\
    \ + 1) + 6);\n        long max5 = (long)(Math.Sqrt(length + 1) + 7);\n       \
    \ long min5 = (long)(Math.Sqrt(length + 1) + 8);\n        long max6 = (long)(Math.Sqrt(length\
    \ + 1) + 9);\n        long min6 = (long)(Math.Sqrt(length + 1) + 10);\n      \
    \  long max7 = (long)(Math.Sqrt(length + 1) + 11);\n        long min7 = (long)(Math.Sqrt(length\
    \ + 1) + 12);\n        long max8 = (long)(Math.Sqrt(length + 1) + 13);\n     \
    \   long min8 = (long)(Math.Sqrt(length + 1) + 14);\n        long max9 = (long)(Math.Sqrt(length\
    \ + 1) + 15);\n        long min9 = (long)(Math.Sqrt(length + 1) + 16);\n     \
    \   long max10 = (long)(Math.Sqrt(length + 1) + 17);\n        long min10 = (long)(Math.Sqrt(length\
    \ + 1) + 18);\n        long max11 = (long)(Math.Sqrt(length + 1) + 19);\n    \
    \    long min11 = (long)(Math.Sqrt(length + 1) + 20);\n        long max12 = (long)(Math.Sqrt(length\
    \ + 1) + 21);\n        long min12 = (long)(Math.Sqrt(length + 1) + 22);\n    \
    \    long max13 = (long)(Math.Sqrt(length + 1) + 23);\n        long min13 = (long)(Math.Sqrt(length\
    \ + 1) + 24);\n        long max14 = (long)(Math.Sqrt(length + 1) + 25);\n    \
    \    long min14 = (long)(Math.Sqrt(length + 1) + 26);\n        long max15 = (long)(Math.Sqrt(length\
    \ + 1) + 27);\n        long min15 = (", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (prime == length) return \"\
    YES\";\n        if (prime == 0) return \"NO\";\n        if (prime == 1) return\
    \ \"YES\";\n        long max = (long)Math.Sqrt(length + 1);\n        long min\
    \ = (long)Math.Sqrt(length + 2);\n        long mid = max / 2;\n        long count\
    \ = 0;\n        long start2 = start;\n        long end2 = end;\n        while\
    \ (start2 < end2) {\n            long mid2 = mid / 2;\n            long mid21\
    \ = mid2 + 1;\n            long mid22 = mid2 + 2;\n            long mid23 = mid2\
    \ + 3;\n            long mid24 = mid2 + 4;\n            long mid25 = mid2 + 5;\n\
    \            long mid26 = mid2 + 6;\n            long mid27 = mid2 + 7;\n    \
    \        long mid28 = mid2 + 8;\n            long mid29 = mid2 + 9;\n        \
    \    long mid30 = mid2 + 10;\n            long mid31 = mid2 + 11;\n          \
    \  long mid32 = mid2 + 12;\n            long mid33 = mid2 + 13;\n            long\
    \ mid34 = mid2 + 14;\n            long mid35 = mid2 + 15;\n            long mid36\
    \ = mid2 + 16;\n            long mid37 = mid2 + 17;\n            long mid38 =\
    \ mid2 + 18;\n            long mid39 = mid2 + 19;\n            long mid40 = mid2\
    \ + 20;\n            long mid41 = mid2 + 21;\n            long mid42 = mid2 +\
    \ 22;\n            long mid43 = mid2 + 23;\n            long mid44 = mid2 + 24;\n\
    \            long mid45 = mid2 + 25;\n            long mid46 = mid2 + 26;\n  \
    \          long mid47 = mid2 + 27;\n            long mid48 = mid2 + 28;\n    \
    \        long mid49 = mid2 + 29;\n            long mid50 = mid2 + 30;\n      \
    \      long mid51 = mid2 + 31;\n            long mid52 = mid2 + 32;\n        \
    \    long mid53 = mid2 + 33;\n            long mid54 = mid2 + 34;\n          \
    \  long mid55 = mid2 + 35;\n            long mid56 = mid2 + 36;\n            long\
    \ mid57 = mid2 + 37;\n            long mid58 = mid2 + 38;\n            long mid59",
  "        long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        long sum = 0;\n \
    \       long prime = 1;\n        while (prime <= length) {\n            sum +=\
    \ prime;\n            prime += 2;\n        }\n        if (sum == length) return\
    \ \"YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (prime == length) return \"\
    YES\";\n        if (prime == 0) return \"NO\";\n        long start2 = start -\
    \ prime;\n        long end2 = end - prime;\n        if (start2 > end2) return\
    \ \"NO\";\n        long length2 = end2 - start2;\n        if (length2 == 0) return\
    \ \"NO\";\n        long prime2 = GetPrime(length2);\n        if (prime2 == length2)\
    \ return \"YES\";\n        if (prime2 == 0) return \"NO\";\n        long start3\
    \ = start2 - prime2;\n        long end3 = end2 - prime2;\n        if (start3 >\
    \ end3) return \"NO\";\n        long length3 = end3 - start3;\n        if (length3\
    \ == 0) return \"NO\";\n        long prime3 = GetPrime(length3);\n        if (prime3\
    \ == length3) return \"YES\";\n        if (prime3 == 0) return \"NO\";\n     \
    \   long start4 = start3 - prime3;\n        long end4 = end3 - prime3;\n     \
    \   if (start4 > end4) return \"NO\";\n        long length4 = end4 - start4;\n\
    \        if (length4 == 0) return \"NO\";\n        long prime4 = GetPrime(length4);\n\
    \        if (prime4 == length4) return \"YES\";\n        if (prime4 == 0) return\
    \ \"NO\";\n        long start5 = start4 - prime4;\n        long end5 = end4 -\
    \ prime4;\n        if (start5 > end5) return \"NO\";\n        long length5 = end5\
    \ - start5;\n        if (length5 == 0) return \"NO\";\n        long prime5 = GetPrime(length5);\n\
    \        if (prime5 == length5) return \"YES\";\n        if (prime5 == 0) return\
    \ \"NO\";\n        long start6 = start5 - prime5;\n        long end6 = end5 -\
    \ prime5;\n        if (start6 > end6) return \"NO\";\n        long length6 = end6\
    \ - start6;\n        if (length6 == 0) return \"NO\";\n        long prime6 = GetPrime(length6);\n\
    \        if (prime6 == length6) return \"YES\";\n        if (prime6 == 0) return\
    \ \"NO\";\n        long start7 = start6 - prime6;\n        long end7 = end6 -\
    \ prime6;\n        if (start7 > end7) return \"NO\";\n        long length7 = end7\
    \ - start7;\n        if (", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n       \
    \ long max2 = max / 2;\n        long max3 = max * max;\n        long max4 = max3\
    \ * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n \
    \       long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44", "  \
    \      long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        if (length == 1)\
    \ return \"YES\";\n        long start2 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end2 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0) return \"NO\";\n       \
    \ if (length2 == 1) return \"YES\";\n        long start3 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end3 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length3 = end3 - start3;\n        if (length3 == 0) return \"NO\"\
    ;\n        if (length3 == 1) return \"YES\";\n        long start4 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        if (length4 == 1) return \"YES\";\n        long start5 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        if (length5 == 1) return \"YES\";\n        long start6 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        if (length6 == 1) return \"YES\";\n        long start7 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        if (length7 == 1) return \"YES\";\n        long start8 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end8 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0) return \"NO\"\
    ;\n        if (length8 == 1) return \"YES\";\n        long start9 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Min(interval1.Item2, interval2.Item2);",
  "        long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0)\n            return \"NO\";\n        long\
    \ num = 1;\n        while (start <= end) {\n            long mid = start + (end\
    \ - start) / 2;\n            if (mid * mid == length)\n                return\
    \ \"YES\";\n            else if (mid * mid < length)\n                end = mid\
    \ - 1;\n            else\n                start = mid + 1;\n        }\n      \
    \  return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0) return \"NO\";\n       \
    \ if (length2 == 1) return \"YES\";\n        long start3 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length3 = end3 - start3;\n        if (length3 == 0) return \"NO\"\
    ;\n        if (length3 == 1) return \"YES\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        if (length4 == 1) return \"YES\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        if (length5 == 1) return \"YES\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        if (length6 == 1) return \"YES\";\n        long start7 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        if (length7 == 1) return \"YES\";\n        long start8 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end8 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0) return \"NO\"\
    ;\n        if (length8 == 1) return \"YES\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);",
  "        long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        if (length == 1)\
    \ return \"YES\";\n        long max = (long)Math.Sqrt(length);\n        long min\
    \ = (long)Math.Sqrt(length + 1);\n        long max2 = (long)(Math.Sqrt(length\
    \ + 1) + 1);\n        long min2 = (long)(Math.Sqrt(length + 1) + 2);\n       \
    \ long max3 = (long)(Math.Sqrt(length + 1) + 3);\n        long min3 = (long)(Math.Sqrt(length\
    \ + 1) + 4);\n        long max4 = (long)(Math.Sqrt(length + 1) + 5);\n       \
    \ long min4 = (long)(Math.Sqrt(length + 1) + 6);\n        long max5 = (long)(Math.Sqrt(length\
    \ + 1) + 7);\n        long min5 = (long)(Math.Sqrt(length + 1) + 8);\n       \
    \ long max6 = (long)(Math.Sqrt(length + 1) + 9);\n        long min6 = (long)(Math.Sqrt(length\
    \ + 1) + 10);\n        long max7 = (long)(Math.Sqrt(length + 1) + 11);\n     \
    \   long min7 = (long)(Math.Sqrt(length + 1) + 12);\n        long max8 = (long)(Math.Sqrt(length\
    \ + 1) + 13);\n        long min8 = (long)(Math.Sqrt(length + 1) + 14);\n     \
    \   long max9 = (long)(Math.Sqrt(length + 1) + 15);\n        long min9 = (long)(Math.Sqrt(length\
    \ + 1) + 16);\n        long max10 = (long)(Math.Sqrt(length + 1) + 17);\n    \
    \    long min10 = (long)(Math.Sqrt(length + 1) + 18);\n        long max11 = (long)(Math.Sqrt(length\
    \ + 1) + 19);\n        long min11 = (long)(Math.Sqrt(length + 1) + 20);\n    \
    \    long max12 = (long)(Math.Sqrt(length + 1) + 21);\n        long min12 = (long)(Math.Sqrt(length\
    \ + 1) + 22);\n        long max13 = (long)(Math.Sqrt(length + 1) + 23);\n    \
    \    long min13 = (long)(Math.Sqrt(length + 1) + 24);\n        long max14 = (long)(Math.Sqrt(length\
    \ + 1) + 25);\n        long min14 = (long)(Math.Sqrt(length + 1) + 26);\n    \
    \    long max15 = (long)(Math.Sqrt(length + 1) + 27);\n        long min15 = (long)(Math.Sqrt(length\
    \ + 1) + 28);\n        long max16 = (", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long sum = 0;\n        for (long i = start; i <= end; i++) {\n      \
    \      sum += i;\n        }\n        if (sum == length) return \"YES\";\n    \
    \    return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        if (length == 1)\n            return \"YES\";\n        long lengthOfIntersection\
    \ = length / 2;\n        long prime = lengthOfIntersection;\n        bool isPrime\
    \ = true;\n        while (prime > 1) {\n            if (lengthOfIntersection %\
    \ prime == 0) {\n                isPrime = false;\n                break;\n  \
    \          }\n            prime--;\n        }\n        if (isPrime)\n        \
    \    return \"YES\";\n        return \"NO\";", "        long start = interval1.Item1;\n\
    \        long end = interval1.Item2;\n        long start2 = interval2.Item1;\n\
    \        long end2 = interval2.Item2;\n        long length = end - start;\n  \
    \      length = length + end2 - start2;\n        if (length < 0) return \"NO\"\
    ;\n        if (length == 0) return \"NO\";\n        long start3 = start;\n   \
    \     long end3 = end;\n        long start4 = start2;\n        long end4 = end2;\n\
    \        long start5 = start3;\n        long end5 = end3;\n        long start6\
    \ = start4;\n        long end6 = end4;\n        long start7 = start5;\n      \
    \  long end7 = end5;\n        long start8 = start6;\n        long end8 = end6;\n\
    \        long start9 = start7;\n        long end9 = end7;\n        long start10\
    \ = start8;\n        long end10 = end8;\n        long start11 = start9;\n    \
    \    long end11 = end9;\n        long start12 = start10;\n        long end12 =\
    \ end10;\n        long start13 = start11;\n        long end13 = end11;\n     \
    \   long start14 = start12;\n        long end14 = end12;\n        long start15\
    \ = start13;\n        long end15 = end13;\n        long start16 = start14;\n \
    \       long end16 = end14;\n        long start17 = start15;\n        long end17\
    \ = end15;\n        long start18 = start16;\n        long end18 = end16;\n   \
    \     long start19 = start17;\n        long end19 = end17;\n        long start20\
    \ = start18;\n        long end20 = end18;\n        long start21 = start19;\n \
    \       long end21 = end19;\n        long start22 = start20;\n        long end22\
    \ = end20;\n        long start23 = start21;\n        long end23 = end21;\n   \
    \     long start24 = start22;\n        long end24 = end22;\n        long start25\
    \ = start23;\n        long end25 = end23;\n        long start26 = start24;\n \
    \       long end26 = end24;\n        long start27 = start25;\n        long end27\
    \ = end25;\n        long start28 = start26;\n        long end28 = end26;\n   \
    \     long start29 = start27;\n        long end29 = end27;\n        long start30\
    \ = start28;\n        long end30 = end", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime) break;\n            if (length % prime ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n            prime++;\n        }\n        if (isPrime) return \"YES\";\n \
    \       return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long max = (long)Math.Sqrt(length) + 1;\n        long count = 0;\n  \
    \      long prime = 1;\n        long prime2 = 2;\n        while (prime <= max)\
    \ {\n            long test = (long)Math.Sqrt(prime);\n            if (test ==\
    \ prime)\n                prime++;\n            else\n                prime2 =\
    \ test;\n            if (prime2 == prime)\n                prime++;\n        \
    \    else\n                prime2 = test;\n            if (prime2 == prime)\n\
    \                prime++;\n            else\n                prime2 = test;\n\
    \            if (prime2 == prime)\n                prime++;\n            else\n\
    \                prime2 = test;\n            if (prime2 == prime)\n          \
    \      prime++;\n            else\n                prime2 = test;\n          \
    \  if (prime2 == prime)\n                prime++;\n            else\n        \
    \        prime2 = test;\n            if (prime2 == prime)\n                prime++;\n\
    \            else\n                prime2 = test;\n            if (prime2 == prime)\n\
    \                prime++;\n            else\n                prime2 = test;\n\
    \            if (prime2 == prime)\n                prime++;\n            else\n\
    \                prime2 = test;\n            if (prime2 == prime)\n          \
    \      prime++;\n            else\n                prime2 = test;\n          \
    \  if (prime2 == prime)\n                prime++;\n            else\n        \
    \        prime2 = test;\n            if (prime2 == prime)\n                prime++;\n\
    \            else\n                prime2 = test;\n            if (prime2 == prime)\n\
    \                prime++;\n            else\n                prime2 = test;\n\
    \            if (prime2 == prime)\n                prime++;\n            else\n\
    \                prime2 = test;\n            if (prime2 == prime)\n          \
    \      prime++;\n            else\n                prime2 = test;\n          \
    \  if (prime2 == prime)\n                prime++;\n            else\n        \
    \        prime2 = test;\n            if (prime2 == prime)\n                prime++;\n\
    \            else\n                prime2 = test;\n            if (prime2 == prime)\n\
    \                prime++;\n            else\n                prime2 = test;\n\
    \            if (prime2 == prime)\n                prime++;\n            else\n\
    \                prime2 = test;\n            if (prime2 == prime)\n          \
    \      prime++;\n            else\n                prime2 = test;\n          \
    \  if (prime2 == prime)\n                prime++;\n            else\n        \
    \        prime2 = test;\n            if (prime2 == prime)\n                prime++;\n\
    \            else\n                prime2 = test;\n            if (prime2 == ",
  "        long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0)\n            return \"NO\";\n        if (length\
    \ == 1)\n            return \"YES\";\n        long start2 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end2 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length2 = end2 - start2;\n        if (length2 == 0)\n          \
    \  return \"NO\";\n        if (length2 == 1)\n            return \"YES\";\n  \
    \      long start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long length3 = end3\
    \ - start3;\n        if (length3 == 0)\n            return \"NO\";\n        if\
    \ (length3 == 1)\n            return \"YES\";\n        long start4 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end4 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0)\n          \
    \  return \"NO\";\n        if (length4 == 1)\n            return \"YES\";\n  \
    \      long start5 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long length5 = end5\
    \ - start5;\n        if (length5 == 0)\n            return \"NO\";\n        if\
    \ (length5 == 1)\n            return \"YES\";\n        long start6 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end6 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0)\n          \
    \  return \"NO\";\n        if (length6 == 1)\n            return \"YES\";\n  \
    \      long start7 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long length7 = end7\
    \ - start7;\n        if (length7 == 0)\n            return \"NO\";\n        if\
    \ (length7 == 1)\n            return \"YES\";\n        long start8 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end8 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0)\n          \
    \  return \"NO\";\n        if (length8 == 1)\n            return \"YES\";\n  \
    \      long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end9 = Math.Max(interval1.Item2, interval2.Item2);", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long min = (long)Math.Sqrt(length + 1);\n        long mid = start + (end\
    \ - start) / 2;\n        long sum = 0;\n        long product = 1;\n        while\
    \ (true) {\n            long x = Math.Sqrt(mid);\n            long y = Math.Sqrt(mid\
    \ - 1);\n            long z = Math.Sqrt(mid + 1);\n            long a = Math.Sqrt(x\
    \ * x + y * y);\n            long b = Math.Sqrt(x * z - y * z);\n            long\
    \ c = Math.Sqrt(x * y - y * x);\n            long d = Math.Sqrt(x * z + y * z);\n\
    \            long e = Math.Sqrt(x * z + y * z - z * z);\n            long f =\
    \ Math.Sqrt(x * y - y * z + z * z);\n            long g = Math.Sqrt(x * y - y\
    \ * z - z * z);\n            long h = Math.Sqrt(x * y + y * z + z * z);\n    \
    \        long i = Math.Sqrt(x * y - y * z - z * z);\n            long j = Math.Sqrt(x\
    \ * y + y * z + z * z);\n            long k = Math.Sqrt(x * y + y * z - z * z);\n\
    \            long l = Math.Sqrt(x * z - y * z + z * z);\n            long m =\
    \ Math.Sqrt(x * z + y * z - z * z);\n            long n = Math.Sqrt(x * z + y\
    \ * z + z * z);\n            long o = Math.Sqrt(x * y - y * z + z * z);\n    \
    \        long p = Math.Sqrt(x * y + y * z - z * z);\n            long q = Math.Sqrt(x\
    \ * y + y * z + z * z);\n            long r = Math.Sqrt(x * z - y * z - z * z);\n\
    \            long s = Math.Sqrt(x * z + y * z - z * z);\n            long t =\
    \ Math.Sqrt(x * z + y * z + z * z);\n            long u = Math.Sqrt(x * y - y\
    \ * z - z * z);\n            long v = Math.Sqrt(x * y + y * z + z * z);\n    \
    \        long w = Math.Sqrt(x * y + y * z - z", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        bool isPrime = true;\n        for (int i = 2; i <= Math.Sqrt(length);\
    \ i++) {\n            if (length % i == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) return\
    \ \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = Prime(length);\n        if (length == prime) return \"YES\"\
    ;\n        return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ sum = 0;\n        long product = 1;\n        for (int i = start; i <= end; i++)\
    \ {\n            sum += product;\n            product *= i;\n        }\n     \
    \   if (sum == length) return \"YES\";\n        return \"NO\";", "        long\
    \ start = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0)\n            return \"NO\";\n        long prime = length / 2;\n        if\
    \ (length == prime)\n            return \"YES\";\n        long a = interval1.Item1;\n\
    \        long b = interval1.Item2;\n        long c = interval2.Item1;\n      \
    \  long d = interval2.Item2;\n        long p = 1;\n        long q = 1;\n     \
    \   long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n      \
    \  long c = 1;\n        long d = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 1;\n\
    \        long c = 1;\n        long d = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 1;\n        long c = 1;\n        long d = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n      \
    \  long b = 1;\n        long c = 1;\n        long d = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n      \
    \  long x = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n\
    \        long b = 1;\n        long c = 1;\n        long d = 1;\n        long p\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long ", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max / 2;\n        long max3\
    \ = max * max;\n        long max4 = max3 * max;\n        long max5 = max4 * max;\n\
    \        long max6 = max5 * max;\n        long max7 = max6 * max;\n        long\
    \ max8 = max7 * max;\n        long max9 = max8 * max;\n        long max10 = max9\
    \ * max;\n        long max11 = max10 * max;\n        long max12 = max11 * max;\n\
    \        long max13 = max12 * max;\n        long max14 = max13 * max;\n      \
    \  long max15 = max14 * max;\n        long max16 = max15 * max;\n        long\
    \ max17 = max16 * max;\n        long max18 = max17 * max;\n        long max19\
    \ = max18 * max;\n        long max20 = max19 * max;\n        long max21 = max20\
    \ * max;\n        long max22 = max21 * max;\n        long max23 = max22 * max;\n\
    \        long max24 = max23 * max;\n        long max25 = max24 * max;\n      \
    \  long max26 = max25 * max;\n        long max27 = max26 * max;\n        long\
    \ max28 = max27 * max;\n        long max29 = max28 * max;\n        long max30\
    \ = max29 * max;\n        long max31 = max30 * max;\n        long max32 = max31\
    \ * max;\n        long max33 = max32 * max;\n        long max34 = max33 * max;\n\
    \        long max35 = max34 * max;\n        long max36 = max35 * max;\n      \
    \  long max37 = max36 * max;\n        long max38 = max37 * max;\n        long\
    \ max39 = max38 * max;\n        long max40 = max39 * max;\n        long max41\
    \ = max40 * max;\n        long max42 = max41 * max;\n        long max43 = max42\
    \ * max;\n        long max44 = max43 * max;\n        long ", "        long start1\
    \ = interval1.Item1;\n        long end1 = interval1.Item2;\n        long start2\
    \ = interval2.Item1;\n        long end2 = interval2.Item2;\n        long length\
    \ = end1 - start1 + end2 - start2;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ startIntersect = start1 + start2;\n        long endIntersect = startIntersect\
    \ + length - 1;\n        long startIntersect2 = start2 + start1;\n        long\
    \ endIntersect2 = startIntersect2 + length - 1;\n        long startIntersect3\
    \ = start1 + start2;\n        long endIntersect3 = startIntersect3 + length -\
    \ 1;\n        long startIntersect4 = start2 + start1;\n        long endIntersect4\
    \ = startIntersect4 + length - 1;\n        long startIntersect5 = start1 + start2;\n\
    \        long endIntersect5 = startIntersect5 + length - 1;\n        long startIntersect6\
    \ = start2 + start1;\n        long endIntersect6 = startIntersect6 + length -\
    \ 1;\n        long startIntersect7 = start1 + start2;\n        long endIntersect7\
    \ = startIntersect7 + length - 1;\n        long startIntersect8 = start2 + start1;\n\
    \        long endIntersect8 = startIntersect8 + length - 1;\n        long startIntersect9\
    \ = start1 + start2;\n        long endIntersect9 = startIntersect9 + length -\
    \ 1;\n        long startIntersect10 = start2 + start1;\n        long endIntersect10\
    \ = startIntersect10 + length - 1;\n        long startIntersect11 = start1 + start2;\n\
    \        long endIntersect11 = startIntersect11 + length - 1;\n        long startIntersect12\
    \ = start2 + start1;\n        long endIntersect12 = startIntersect12 + length\
    \ - 1;\n        long startIntersect13 = start1 + start2;\n        long endIntersect13\
    \ = startIntersect13 + length - 1;\n        long startIntersect14 = start2 + start1;\n\
    \        long endIntersect14 = startIntersect14 + length - 1;\n        long startIntersect15\
    \ = start1 + start2;\n        long endIntersect15 = startIntersect15 + length\
    \ - 1;\n        long startIntersect16 = start2 + start1;\n        long endIntersect16\
    \ = startIntersect16 + length - 1;\n        long startIntersect17 = start1 + start2;\n\
    \        long endIntersect17 = startIntersect17 + length - 1;\n        long startIntersect18\
    \ = start2 + start1;\n        long ", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        long mid = start + (end - start)\
    \ / 2;\n        bool isPrime = true;\n        bool isPrime2 = true;\n        long\
    \ isPrime3 = 0;\n        long isPrime4 = 0;\n        long isPrime5 = 0;\n    \
    \    long isPrime6 = 0;\n        long isPrime7 = 0;\n        long isPrime8 = 0;\n\
    \        long isPrime9 = 0;\n        long isPrime10 = 0;\n        long isPrime11\
    \ = 0;\n        long isPrime12 = 0;\n        long isPrime13 = 0;\n        long\
    \ isPrime14 = 0;\n        long isPrime15 = 0;\n        long isPrime16 = 0;\n \
    \       long isPrime17 = 0;\n        long isPrime18 = 0;\n        long isPrime19\
    \ = 0;\n        long isPrime20 = 0;\n        long isPrime21 = 0;\n        long\
    \ isPrime22 = 0;\n        long isPrime23 = 0;\n        long isPrime24 = 0;\n \
    \       long isPrime25 = 0;\n        long isPrime26 = 0;\n        long isPrime27\
    \ = 0;\n        long isPrime28 = 0;\n        long isPrime29 = 0;\n        long\
    \ isPrime30 = 0;\n        long isPrime31 = 0;\n        long isPrime32 = 0;\n \
    \       long isPrime33 = 0;\n        long isPrime34 = 0;\n        long isPrime35\
    \ = 0;\n        long isPrime36 = 0;\n        long isPrime37 = 0;\n        long\
    \ isPrime38 = 0;\n        long isPrime39 = 0;\n        long isPrime40 = 0;\n \
    \       long isPrime41 = 0;\n        long isPrime42 = 0;\n        long isPrime43\
    \ = 0;\n        long isPrime44 = 0;\n        long isPrime45 = 0;\n        long\
    \ isPrime46 = 0;\n        long isPrime47 = 0;\n        long isPrime48 = 0;\n \
    \       long isPrime49 = 0;\n        long isPrime50 = 0;\n        long isPrime51\
    \ = 0;\n        long isPrime52 = 0;\n        long isPrime53 = 0;\n        long\
    \ isPrime54 = 0;\n        long isPrime55 = 0;\n        long isPrime56 = 0;\n \
    \       long is", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = length / 2;\n        bool isPrime = true;\n        long i = 2;\n   \
    \     while (i < prime) {\n            if (length % i == 0) {\n              \
    \  isPrime = false;\n                break;\n            }\n            i++;\n\
    \        }\n        if (isPrime) return \"YES\";\n        return \"NO\";", " \
    \       long start1 = interval1.Item1;\n        long end1 = interval1.Item2;\n\
    \        long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length = end1 - start1 + end2 - start2;\n        if (length < 0)\n\
    \            return \"NO\";\n        long start = (start1 < start2) ? start1 :\
    \ start2;\n        long end = (end1 < end2) ? end1 : end2;\n        long max =\
    \ (start + end) / 2;\n        long min = (end - start) / 2;\n        long count\
    \ = 0;\n        long sum = 0;\n        while (start < max) {\n            sum\
    \ += start;\n            while (end < min) {\n                sum += end;\n  \
    \              count++;\n                end++;\n            }\n            start\
    \ = sum;\n            sum = 0;\n        }\n        if (count == 0)\n         \
    \   return \"NO\";\n        if (count == 1)\n            return \"YES\";\n   \
    \     long p = 1;\n        while (p < count) {\n            if (sum % p == 0)\n\
    \                return \"NO\";\n            p++;\n        }\n        return \"\
    YES\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n \
    \       long end = Math.Min(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0)\n            return \"NO\";\n     \
    \   if (length == 1)\n            return \"YES\";\n        long mid = start +\
    \ (end - start) / 2;\n        if (IsPrime(mid))\n            return \"YES\";\n\
    \        return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long length2 = end2\
    \ - start2;\n        if (length2 == 0)\n            return \"NO\";\n        long\
    \ start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long end3 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length3 = end3 - start3;\n        if (length3\
    \ == 0)\n            return \"NO\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0)\n          \
    \  return \"NO\";\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        long start6 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end6 = Math.Max(interval1.Item2, interval2.Item2);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0)\n            return \"NO\";\n  \
    \      long start7 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long length7 = end7\
    \ - start7;\n        if (length7 == 0)\n            return \"NO\";\n        long\
    \ start8 = Math.Min(interval1.Item1, interval2.Item1);\n        long end8 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length9 = end9 - start9;\n        if (length9 == 0)\n          \
    \  return \"NO\";\n        long start10 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end10 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length10 = end10 - start10;\n        if (length10 == 0)\n            return\
    \ \"NO\";\n        long start11", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        if (length == 2) return \"\
    YES\";\n        if (length == 3) return \"YES\";\n        if (length == 4) return\
    \ \"YES\";\n        if (length == 5) return \"YES\";\n        if (length == 6)\
    \ return \"YES\";\n        if (length == 7) return \"YES\";\n        if (length\
    \ == 8) return \"YES\";\n        if (length == 9) return \"YES\";\n        if\
    \ (length == 10) return \"YES\";\n        if (length == 11) return \"YES\";\n\
    \        if (length == 12) return \"YES\";\n        if (length == 13) return \"\
    YES\";\n        if (length == 14) return \"YES\";\n        if (length == 15) return\
    \ \"YES\";\n        if (length == 16) return \"YES\";\n        if (length == 17)\
    \ return \"YES\";\n        if (length == 18) return \"YES\";\n        if (length\
    \ == 19) return \"YES\";\n        if (length == 20) return \"YES\";\n        if\
    \ (length == 21) return \"YES\";\n        if (length == 22) return \"YES\";\n\
    \        if (length == 23) return \"YES\";\n        if (length == 24) return \"\
    YES\";\n        if (length == 25) return \"YES\";\n        if (length == 26) return\
    \ \"YES\";\n        if (length == 27) return \"YES\";\n        if (length == 28)\
    \ return \"YES\";\n        if (length == 29) return \"YES\";\n        if (length\
    \ == 30) return \"YES\";\n        if (length == 31) return \"YES\";\n        if\
    \ (length == 32) return \"YES\";\n        if (length == 33) return \"YES\";\n\
    \        if (length == 34) return \"YES\";\n        if (length == 35) return \"\
    YES\";\n        if (length == 36) return \"YES\";\n        if (length == 37) return\
    \ \"YES\";\n        if (length == 38) return \"YES\";\n        if (length == 39)\
    \ return \"YES\";\n        if (length == 40) return \"YES\";\n        if (length\
    \ == 41) return \"YES\";\n        if (length == 42) return \"YES\";\n        if\
    \ (length == 43) return \"YES\";\n        if (length == 44) return \"YES\";\n\
    \        if (length == 45) return \"YES\";\n        if (length == 46) return \"\
    YES\";\n        if (length == 47) return \"YES\";\n        if (length == 48) return\
    \ \"YES\";\n        if (length == 49) return \"YES\";\n        if (length == 50)\
    \ return \"YES\";\n        if (length == 51) return \"YES\";\n        if (length\
    \ == 52) return \"YES\";\n        if (length == 53) return \"YES\";\n        if\
    \ (length == 54) return ", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        bool\
    \ isPrime = true;\n        for (int i = 2; i <= Math.Sqrt(length); i++) {\n  \
    \          if (length % i == 0) {\n                isPrime = false;\n        \
    \        break;\n            }\n        }\n        if (isPrime) return \"YES\"\
    ;\n        return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long prime = length / 2;\n        if (length == prime)\n            return\
    \ \"YES\";\n        bool isPrime = true;\n        long counter = 1;\n        while\
    \ (isPrime && counter <= prime) {\n            if (length == counter)\n      \
    \          isPrime = false;\n            counter++;\n        }\n        if (isPrime)\n\
    \            return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long inter = start + (end - start) / 2;\n        if (IsPrime(inter))\
    \ return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ start2 = Math.Max(interval2.Item1, interval1.Item1);\n        long end2 = Math.Min(interval2.Item2,\
    \ interval1.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0)\n            return \"NO\";\n        if (length2 == 1)\n            return\
    \ \"YES\";\n        long start3 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0)\n            return \"NO\"\
    ;\n        if (length3 == 1)\n            return \"YES\";\n        long start4\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end4 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length4 = end4 - start4;\n        if (length4\
    \ == 0)\n            return \"NO\";\n        if (length4 == 1)\n            return\
    \ \"YES\";\n        long start5 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        if (length5 == 1)\n            return \"YES\";\n        long start6\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end6 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length6 = end6 - start6;\n        if (length6\
    \ == 0)\n            return \"NO\";\n        if (length6 == 1)\n            return\
    \ \"YES\";\n        long start7 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0)\n            return \"NO\"\
    ;\n        if (length7 == 1)\n            return \"YES\";\n        long start8\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end8 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        if (length8 == 1)\n            return\
    \ \"YES\";\n        long start9 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end9 = Math.Min(interval1.Item2, interval2.Item2);", "        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        bool isPrime = true;\n        long prime = length\
    \ / 2;\n        long counter = 0;\n        while (prime > 1) {\n            if\
    \ (length == prime) break;\n            if (length % prime == 0) {\n         \
    \       isPrime = false;\n                break;\n            }\n            counter++;\n\
    \            prime = prime / 2;\n        }\n        if (isPrime) return \"YES\"\
    ;\n        return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length +\
    \ 1);\n        long mid = start + (end - start) / 2;\n        bool isPrime = true;\n\
    \        long prime = max;\n        while (prime < min) {\n            if (IsPrime(prime))\
    \ {\n                isPrime = true;\n                break;\n            }\n\
    \            prime += 2;\n        }\n        if (isPrime) {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long inter = start + (end - start) / 2;\n        long count = 0;\n  \
    \      while (inter < end) {\n            if (interval1.Item1 <= inter && inter\
    \ <= interval2.Item1) count++;\n            if (interval1.Item2 <= inter && inter\
    \ <= interval2.Item2) count++;\n            inter += 1;\n        }\n        if\
    \ (count == length) return \"YES\";\n        return \"NO\";", "        long start1\
    \ = interval1.Item1;\n        long end1 = interval1.Item2;\n        long start2\
    \ = interval2.Item1;\n        long end2 = interval2.Item2;\n        long length1\
    \ = end1 - start1;\n        long length2 = end2 - start2;\n        if (length1\
    \ == 0 && length2 == 0) {\n            return \"NO\";\n        }\n        if (length1\
    \ == 0) {\n            return \"NO\";\n        }\n        if (length2 == 0) {\n\
    \            return \"NO\";\n        }\n        long length = 0;\n        if (start1\
    \ < start2) {\n            length = length1;\n        } else {\n            length\
    \ = length2;\n        }\n        if (length == 1) {\n            return \"NO\"\
    ;\n        }\n        long start = 0;\n        long end = 0;\n        if (start1\
    \ < start2) {\n            start = start1;\n            end = start2;\n      \
    \  } else {\n            start = start2;\n            end = start1;\n        }\n\
    \        long max = (long)Math.Sqrt(length + 1);\n        long max2 = max * max;\n\
    \        long max3 = max2 * max;\n        long max4 = max3 * max;\n        long\
    \ max5 = max4 * max;\n        long max6 = max5 * max;\n        long max7 = max6\
    \ * max;\n        long max8 = max7 * max;\n        long max9 = max8 * max;\n \
    \       long max10 = max9 * max;\n        long max11 = max10 * max;\n        long\
    \ max12 = max11 * max;\n        long max13 = max12 * max;\n        long max14\
    \ = max13 * max;\n        long max15 = max14 * max;\n        long max16 = max15\
    \ * max;\n        long max17 = max16 * max;\n        long max18 = max17 * max;\n\
    \        long max19 = max18 * max;\n        long max20 = max19 * max;\n      \
    \  long max21 = max20 * max;\n        long max22 = max21 * max;\n        long\
    \ max23 = max22 * max;\n        long max24 = max23 * max;\n        long max25\
    \ = max24 * max;\n        long max26 = max25 * max;\n        long max27 = max26\
    \ * max;\n        long max28 = max27 * max;\n        long max29 = max28 * max;\n\
    \        long max30 = max29 * max;\n        long max31 = max30 * max;\n      \
    \  long max32 = max31 * max;\n        long max33 = max32 * max;\n", "        long\
    \ start = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n        long\
    \ min = (long)Math.Sqrt(length / 2);\n        long mid = start + min;\n      \
    \  long count = 0;\n        for (long i = start; i <= end; i++) {\n          \
    \  if (i == mid) count++;\n        }\n        if (count == 2) return \"YES\";\n\
    \        return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = GetPrime(length);\n        if (length == prime) return \"YES\";\n  \
    \      return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        if (length == 1)\n            return \"YES\";\n        bool isPrime =\
    \ true;\n        long prime = 2;\n        while (isPrime) {\n            isPrime\
    \ = false;\n            long i = 2;\n            while (i <= length) {\n     \
    \           if (i % prime == 0) {\n                    isPrime = true;\n     \
    \               break;\n                }\n                i += 2;\n         \
    \   }\n            if (isPrime)\n                prime++;\n        }\n       \
    \ return \"YES\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length +\
    \ 1);\n        long mid = start + (end - start) / 2;\n        bool isPrime = true;\n\
    \        long count = 0;\n        while (isPrime && count < max) {\n         \
    \   long test = (long)Math.Sqrt(mid * mid + 1);\n            if (test == mid)\
    \ test++;\n            if (test > mid) isPrime = false;\n            count++;\n\
    \            mid++;\n        }\n        if (isPrime) return \"YES\";\n       \
    \ return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long prime = Prime(length);\n        if (prime\
    \ == length) return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime) return \"YES\";\n            if (length\
    \ % prime == 0) isPrime = false;\n            prime++;\n        }\n        return\
    \ \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (prime == length)\n      \
    \      return \"YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0)\n            return \"NO\"\
    ;\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long length3\
    \ = end3 - start3;\n        if (length3 == 0)\n            return \"NO\";\n  \
    \      long start4 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end4 = Math.Max(interval1.Item2, interval2.Item2);\n        long length4 = end4\
    \ - start4;\n        if (length4 == 0)\n            return \"NO\";\n        long\
    \ start5 = Math.Min(interval1.Item1, interval2.Item1);\n        long end5 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length5 = end5 - start5;\n        if (length5\
    \ == 0)\n            return \"NO\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0)\n          \
    \  return \"NO\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0)\n            return \"NO\"\
    ;\n        long start8 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end8 = Math.Max(interval1.Item2, interval2.Item2);\n        long length8\
    \ = end8 - start8;\n        if (length8 == 0)\n            return \"NO\";\n  \
    \      long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end9 = Math.Max(interval1.Item2, interval2.Item2);\n        long length9 = end9\
    \ - start9;\n        if (length9 == 0)\n            return \"NO\";\n        long\
    \ start10 = Math.Min(interval1.Item1, interval2.Item1);\n        long end10 =\
    \ Math.Max(interval1.Item2, interval2.Item2);\n        long length10 = end10 -\
    \ start10;\n        if (length10 == 0)\n            return \"NO\";\n        long\
    \ start11", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = GetPrime(length);\n        if (prime == length) return \"YES\";\n  \
    \      return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0) return \"NO\";\n       \
    \ if (length2 == 1) return \"YES\";\n        long start3 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length3 = end3 - start3;\n        if (length3 == 0) return \"NO\"\
    ;\n        if (length3 == 1) return \"YES\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        if (length4 == 1) return \"YES\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        if (length5 == 1) return \"YES\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        if (length6 == 1) return \"YES\";\n        long start7 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        if (length7 == 1) return \"YES\";\n        long start8 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end8 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0) return \"NO\"\
    ;\n        if (length8 == 1) return \"YES\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);",
  "        long start1 = interval1.Item1;\n        long end1 = interval1.Item2;\n\
    \        long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length1 = end1 - start1;\n        long length2 = end2 - start2;\n\
    \        if (length1 < 0 || length2 < 0)\n            return \"NO\";\n       \
    \ if (length1 == 0 || length2 == 0)\n            return \"NO\";\n        if (length1\
    \ == length2)\n            return \"YES\";\n        long length3 = length1 + length2;\n\
    \        long length4 = length1 + length2;\n        long length5 = length1 + length2;\n\
    \        long length6 = length1 + length2;\n        long length7 = length1 + length2;\n\
    \        long length8 = length1 + length2;\n        long length9 = length1 + length2;\n\
    \        long length10 = length1 + length2;\n        long length11 = length1 +\
    \ length2;\n        long length12 = length1 + length2;\n        long length13\
    \ = length1 + length2;\n        long length14 = length1 + length2;\n        long\
    \ length15 = length1 + length2;\n        long length16 = length1 + length2;\n\
    \        long length17 = length1 + length2;\n        long length18 = length1 +\
    \ length2;\n        long length19 = length1 + length2;\n        long length20\
    \ = length1 + length2;\n        long length21 = length1 + length2;\n        long\
    \ length22 = length1 + length2;\n        long length23 = length1 + length2;\n\
    \        long length24 = length1 + length2;\n        long length25 = length1 +\
    \ length2;\n        long length26 = length1 + length2;\n        long length27\
    \ = length1 + length2;\n        long length28 = length1 + length2;\n        long\
    \ length29 = length1 + length2;\n        long length30 = length1 + length2;\n\
    \        long length31 = length1 + length2;\n        long length32 = length1 +\
    \ length2;\n        long length33 = length1 + length2;\n        long length34\
    \ = length1 + length2;\n        long length35 = length1 + length2;\n        long\
    \ length36 = length1 + length2;\n        long length37 = length1 + length2;\n\
    \        long length38 = length1 + length2;\n        long length39 = length1 +\
    \ length2;\n        long length40 = length1 + length2;\n        long length41\
    \ = length1 + length2;\n        long length42 = length1 + length2;\n        long\
    \ length43 = length1 + length2;\n        long length44 = length1 + length2;\n\
    \        long length45 = length1 + length2;\n        long length4", "        long\
    \ start = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long prime = length / 2;\n        if (length == prime)\
    \ return \"YES\";\n        long max = (long)Math.Sqrt(prime);\n        long min\
    \ = (long)Math.Sqrt(prime);\n        while (max >= min) {\n            long mid\
    \ = (max + min) / 2;\n            if (mid * mid == length) return \"YES\";\n \
    \           if (mid * mid < length) max = mid + 1;\n            else min = mid\
    \ - 1;\n        }\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max * max;\n        long\
    \ max3 = max2 * max;\n        long max4 = max3 * max;\n        long max5 = max4\
    \ * max;\n        long max6 = max5 * max;\n        long max7 = max6 * max;\n \
    \       long max8 = max7 * max;\n        long max9 = max8 * max;\n        long\
    \ max10 = max9 * max;\n        long max11 = max10 * max;\n        long max12 =\
    \ max11 * max;\n        long max13 = max12 * max;\n        long max14 = max13\
    \ * max;\n        long max15 = max14 * max;\n        long max16 = max15 * max;\n\
    \        long max17 = max16 * max;\n        long max18 = max17 * max;\n      \
    \  long max19 = max18 * max;\n        long max20 = max19 * max;\n        long\
    \ max21 = max20 * max;\n        long max22 = max21 * max;\n        long max23\
    \ = max22 * max;\n        long max24 = max23 * max;\n        long max25 = max24\
    \ * max;\n        long max26 = max25 * max;\n        long max27 = max26 * max;\n\
    \        long max28 = max27 * max;\n        long max29 = max28 * max;\n      \
    \  long max30 = max29 * max;\n        long max31 = max30 * max;\n        long\
    \ max32 = max31 * max;\n        long max33 = max32 * max;\n        long max34\
    \ = max33 * max;\n        long max35 = max34 * max;\n        long max36 = max35\
    \ * max;\n        long max37 = max36 * max;\n        long max38 = max37 * max;\n\
    \        long max39 = max38 * max;\n        long max40 = max39 * max;\n      \
    \  long max41 = max40 * max;\n        long max42 = max41 * max;\n        long\
    \ max43 = max42 * max;\n        long max", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long prime = length / 2;\n        if (length == prime)\n  \
    \          return \"YES\";\n        long a = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long b = Math.Min(interval1.Item2, interval2.Item2);\n        long c\
    \ = Math.Max(interval1.Item1, interval2.Item2);\n        long d = Math.Min(interval1.Item2,\
    \ interval2.Item1);\n        long e = Math.Max(interval1.Item1, interval2.Item2);\n\
    \        long f = Math.Min(interval1.Item2, interval2.Item1);\n        long g\
    \ = Math.Max(interval1.Item1, interval2.Item2);\n        long h = Math.Min(interval1.Item2,\
    \ interval2.Item1);\n        long i = Math.Max(interval1.Item1, interval2.Item2);\n\
    \        long j = Math.Min(interval1.Item2, interval2.Item1);\n        long k\
    \ = Math.Max(interval1.Item1, interval2.Item2);\n        long l = Math.Min(interval1.Item2,\
    \ interval2.Item1);\n        long m = Math.Max(interval1.Item1, interval2.Item2);\n\
    \        long n = Math.Min(interval1.Item2, interval2.Item1);\n        long o\
    \ = Math.Max(interval1.Item1, interval2.Item2);\n        long p = Math.Min(interval1.Item2,\
    \ interval2.Item1);\n        long q = Math.Max(interval1.Item1, interval2.Item2);\n\
    \        long r = Math.Min(interval1.Item2, interval2.Item1);\n        long s\
    \ = Math.Max(interval1.Item1, interval2.Item2);\n        long t = Math.Min(interval1.Item2,\
    \ interval2.Item1);\n        long u = Math.Max(interval1.Item1, interval2.Item2);\n\
    \        long v = Math.Min(interval1.Item2, interval2.Item1);\n        long w\
    \ = Math.Max(interval1.Item1, interval2.Item2);\n        long x = Math.Min(interval1.Item2,\
    \ interval2.Item1);\n        long y = Math.Max(interval1.Item1, interval2.Item2);\n\
    \        long z = Math.Min(interval1.Item2, interval2.Item1);\n        long a\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long b = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long c = Math.Max(interval1.Item1, interval2.Item2);\n\
    \        long d = Math.Min(interval1.Item2, interval2.Item1);", "        long\
    \ start = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n        long\
    \ max2 = max / 2;\n        long max3 = max * max;\n        long max4 = max3 *\
    \ max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n   \
    \     long max7 = max6 * max;\n        long max8 = max7 * max;\n        long max9\
    \ = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44 = max43\
    \ * max;\n        long ", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        if (length == 2) return \"YES\";\n        if\
    \ (length == 3) return \"YES\";\n        if (length == 5) return \"YES\";\n  \
    \      if (length == 7) return \"YES\";\n        if (length == 11) return \"YES\"\
    ;\n        if (length == 13) return \"YES\";\n        if (length == 17) return\
    \ \"YES\";\n        if (length == 19) return \"YES\";\n        if (length == 23)\
    \ return \"YES\";\n        if (length == 29) return \"YES\";\n        if (length\
    \ == 31) return \"YES\";\n        if (length == 37) return \"YES\";\n        if\
    \ (length == 53) return \"YES\";\n        if (length == 59) return \"YES\";\n\
    \        if (length == 71) return \"YES\";\n        if (length == 113) return\
    \ \"YES\";\n        if (length == 131) return \"YES\";\n        if (length ==\
    \ 173) return \"YES\";\n        if (length == 193) return \"YES\";\n        if\
    \ (length == 231) return \"YES\";\n        if (length == 291) return \"YES\";\n\
    \        if (length == 371) return \"YES\";\n        if (length == 531) return\
    \ \"YES\";\n        if (length == 591) return \"YES\";\n        if (length ==\
    \ 711) return \"YES\";\n        if (length == 1131) return \"YES\";\n        if\
    \ (length == 1311) return \"YES\";\n        if (length == 1711) return \"YES\"\
    ;\n        if (length == 1911) return \"YES\";\n        if (length == 2311) return\
    \ \"YES\";\n        if (length == 2911) return \"YES\";\n        if (length ==\
    \ 3711) return \"YES\";\n        if (length == 5311) return \"YES\";\n       \
    \ if (length == 5911) return \"YES\";\n        if (length == 7111) return \"YES\"\
    ;\n        if (length == 11311) return \"YES\";\n        if (length == 13111)\
    \ return \"YES\";\n        if (length == 17111) return \"YES\";\n        if (length\
    \ == 19111) return \"YES\";\n        if (length == 23111) return \"YES\";\n  \
    \      if (length == 29111) return \"YES\";\n        if (length == 37111) return\
    \ \"YES\";\n        if (length == 53111) return \"YES\";\n        if (length ==\
    \ 59111) return \"YES\";\n        if (length == 71111) return \"YES\";\n     \
    \   if (length == 1131111) return \"YES\";\n        if (length == 131111) return\
    \ \"YES\";\n        if (length == 17", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long num = 2;\n        while (true) {\n            long mid = (start\
    \ + end) / 2;\n            if (mid * mid == length) break;\n            if (mid\
    \ * mid < length) end = mid;\n            else start = mid;\n        }\n     \
    \   if (length == num) return \"YES\";\n        return \"NO\";", "        long\
    \ start = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long start2 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end2 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0) return \"NO\";\n       \
    \ long start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long end3\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length3 = end3 -\
    \ start3;\n        if (length3 == 0) return \"NO\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long length5\
    \ = end5 - start5;\n        if (length5 == 0) return \"NO\";\n        long start6\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end6 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length6 = end6 - start6;\n        if (length6\
    \ == 0) return \"NO\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0) return \"NO\";\n       \
    \ long start8 = Math.Min(interval1.Item1, interval2.Item1);\n        long end8\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length8 = end8 -\
    \ start8;\n        if (length8 == 0) return \"NO\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length9 = end9 - start9;\n        if (length9 == 0) return \"NO\"\
    ;\n        long start10 = Math.Min(interval1.Item1, interval2.Item1);\n      \
    \  long end10 = Math.Max(interval1.Item2, interval2.Item2);\n        long length10\
    \ = end10 - start10;\n        if (length10 == 0) return \"NO\";\n        long\
    \ start11", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max * max;\n        long\
    \ max3 = max2 * max;\n        long max4 = max3 * max;\n        long max5 = max4\
    \ * max;\n        long max6 = max5 * max;\n        long max7 = max6 * max;\n \
    \       long max8 = max7 * max;\n        long max9 = max8 * max;\n        long\
    \ max10 = max9 * max;\n        long max11 = max10 * max;\n        long max12 =\
    \ max11 * max;\n        long max13 = max12 * max;\n        long max14 = max13\
    \ * max;\n        long max15 = max14 * max;\n        long max16 = max15 * max;\n\
    \        long max17 = max16 * max;\n        long max18 = max17 * max;\n      \
    \  long max19 = max18 * max;\n        long max20 = max19 * max;\n        long\
    \ max21 = max20 * max;\n        long max22 = max21 * max;\n        long max23\
    \ = max22 * max;\n        long max24 = max23 * max;\n        long max25 = max24\
    \ * max;\n        long max26 = max25 * max;\n        long max27 = max26 * max;\n\
    \        long max28 = max27 * max;\n        long max29 = max28 * max;\n      \
    \  long max30 = max29 * max;\n        long max31 = max30 * max;\n        long\
    \ max32 = max31 * max;\n        long max33 = max32 * max;\n        long max34\
    \ = max33 * max;\n        long max35 = max34 * max;\n        long max36 = max35\
    \ * max;\n        long max37 = max36 * max;\n        long max38 = max37 * max;\n\
    \        long max39 = max38 * max;\n        long max40 = max39 * max;\n      \
    \  long max41 = max40 * max;\n        long max42 = max41 * max;\n        long\
    \ max43 = max42 * max;\n        long max44 = max43 * max;\n        ", "      \
    \  long start = Math.Max(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0) return \"NO\";\n        long prime = length / 2;\n \
    \       if (length == prime) return \"YES\";\n        long prime2 = prime + 1;\n\
    \        long prime3 = prime2 + 1;\n        long prime4 = prime3 + 1;\n      \
    \  long prime5 = prime4 + 1;\n        long prime6 = prime5 + 1;\n        long\
    \ prime7 = prime6 + 1;\n        long prime8 = prime7 + 1;\n        long prime9\
    \ = prime8 + 1;\n        long prime10 = prime9 + 1;\n        long prime11 = prime10\
    \ + 1;\n        long prime12 = prime11 + 1;\n        long prime13 = prime12 +\
    \ 1;\n        long prime14 = prime13 + 1;\n        long prime15 = prime14 + 1;\n\
    \        long prime16 = prime15 + 1;\n        long prime17 = prime16 + 1;\n  \
    \      long prime18 = prime17 + 1;\n        long prime19 = prime18 + 1;\n    \
    \    long prime20 = prime19 + 1;\n        long prime21 = prime20 + 1;\n      \
    \  long prime22 = prime21 + 1;\n        long prime23 = prime22 + 1;\n        long\
    \ prime24 = prime23 + 1;\n        long prime25 = prime24 + 1;\n        long prime26\
    \ = prime25 + 1;\n        long prime27 = prime26 + 1;\n        long prime28 =\
    \ prime27 + 1;\n        long prime29 = prime28 + 1;\n        long prime30 = prime29\
    \ + 1;\n        long prime31 = prime30 + 1;\n        long prime32 = prime31 +\
    \ 1;\n        long prime33 = prime32 + 1;\n        long prime34 = prime33 + 1;\n\
    \        long prime35 = prime34 + 1;\n        long prime36 = prime35 + 1;\n  \
    \      long prime37 = prime36 + 1;\n        long prime38 = prime37 + 1;\n    \
    \    long prime39 = prime38 + 1;\n        long prime40 = prime39 + 1;\n      \
    \  long prime41 = prime40 + 1;\n        long prime42 = prime41 + 1;\n        long\
    \ prime43 = prime42 + 1;\n        long prime44 = prime43 + 1;\n        long prime45\
    \ = prime44 + 1;\n        long prime46 = prime45 + 1;\n        long prime47 =\
    \ prime46 + 1;\n        long prime48 = prime47 + 1;\n        long prime49 = prime48\
    \ + 1;\n        long prime50 = prime49 + 1;\n        long prime51 = prime50 +\
    \ 1;\n        long prime52 = prime51 + ", "        long start1 = interval1.Item1;\n\
    \        long end1 = interval1.Item2;\n        long start2 = interval2.Item1;\n\
    \        long end2 = interval2.Item2;\n        long startIntersection = start1\
    \ < start2 ? start1 : start2;\n        long endIntersection = end1 < end2 ? end1\
    \ : end2;\n        long length = endIntersection - startIntersection;\n      \
    \  if (length < 2) {\n            return \"NO\";\n        }\n        long startPrime\
    \ = startIntersection;\n        long endPrime = endIntersection;\n        bool\
    \ isPrime = true;\n        while (isPrime && startPrime < endPrime) {\n      \
    \      isPrime = IsPrime(startPrime) && IsPrime(endPrime);\n            startPrime++;\n\
    \            endPrime++;\n        }\n        if (isPrime) {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ mid = start + (end - start) / 2;\n        bool isPrime = true;\n        long\
    \ prime = 2;\n        while (isPrime) {\n            if (mid % prime == 0)\n \
    \               isPrime = false;\n            else\n                prime++;\n\
    \        }\n        if (isPrime)\n            return \"YES\";\n        else\n\
    \            return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        long sum = 0;\n        long prime\
    \ = 1;\n        bool isPrime = true;\n        long primeCount = 0;\n        long\
    \ primeSum = 0;\n        long primeSumCount = 0;\n        long primeSumCount2\
    \ = 0;\n        long primeSumCount3 = 0;\n        long primeSumCount4 = 0;\n \
    \       long primeSumCount5 = 0;\n        long primeSumCount6 = 0;\n        long\
    \ primeSumCount7 = 0;\n        long primeSumCount8 = 0;\n        long primeSumCount9\
    \ = 0;\n        long primeSumCount10 = 0;\n        long primeSumCount11 = 0;\n\
    \        long primeSumCount12 = 0;\n        long primeSumCount13 = 0;\n      \
    \  long primeSumCount14 = 0;\n        long primeSumCount15 = 0;\n        long\
    \ primeSumCount16 = 0;\n        long primeSumCount17 = 0;\n        long primeSumCount18\
    \ = 0;\n        long primeSumCount19 = 0;\n        long primeSumCount20 = 0;\n\
    \        long primeSumCount21 = 0;\n        long primeSumCount22 = 0;\n      \
    \  long primeSumCount23 = 0;\n        long primeSumCount24 = 0;\n        long\
    \ primeSumCount25 = 0;\n        long primeSumCount26 = 0;\n        long primeSumCount27\
    \ = 0;\n        long primeSumCount28 = 0;\n        long primeSumCount29 = 0;\n\
    \        long primeSumCount30 = 0;\n        long primeSumCount31 = 0;\n      \
    \  long primeSumCount32 = 0;\n        long primeSumCount33 = 0;\n        long\
    \ primeSumCount34 = 0;\n        long primeSumCount35 = 0;\n        long primeSumCount36\
    \ = 0;\n        long primeSumCount37 = 0;\n        long primeSumCount38 = 0;\n\
    \        long primeSumCount39 = 0;\n        long primeSumCount40 = 0;\n      \
    \  long primeSumCount41 = 0;\n        long primeSumCount42 = 0;\n        long\
    \ primeSumCount43 = 0;\n        long primeSumCount44 = 0;\n        long primeSumCount45\
    \ = 0;\n        long primeSumCount46 = 0;\n        long primeSumCount47 = 0;\n\
    \        long primeSumCount48 = 0;\n        long primeSumCount49 = 0;\n      \
    \  long primeSumCount50 = 0;\n        long primeSumCount51 = 0;\n        long\
    \ primeSumCount52 = 0;\n        long primeSumCount53 = 0;\n        long primeSumCount54\
    \ = 0;\n        long primeSumCount55 = 0;\n        long primeSumCount56 = 0;\n\
    \        long primeSum", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        if (length == 1)\n            return \"YES\";\n        long mid = start\
    \ + (end - start) / 2;\n        if (IsPrime(mid))\n            return \"YES\"\
    ;\n        return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        bool\
    \ isPrime = true;\n        long prime = 2;\n        while (isPrime) {\n      \
    \      if (length == prime) break;\n            if (length % prime == 0) isPrime\
    \ = false;\n            prime++;\n        }\n        if (isPrime) return \"YES\"\
    ;\n        return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long start2 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end2 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0) return \"NO\";\n       \
    \ if (length2 == 1) return \"YES\";\n        long start3 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end3 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length3 = end3 - start3;\n        if (length3 == 0) return \"NO\"\
    ;\n        if (length3 == 1) return \"YES\";\n        long start4 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        if (length4 == 1) return \"YES\";\n        long start5 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        if (length5 == 1) return \"YES\";\n        long start6 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        if (length6 == 1) return \"YES\";\n        long start7 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        if (length7 == 1) return \"YES\";\n        long start8 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end8 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0) return \"NO\"\
    ;\n        if (length8 == 1) return \"YES\";\n        long start9 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Min(interval1.Item2, interval2.Item2);",
  "        long start1 = interval1.Item1;\n        long end1 = interval1.Item2;\n\
    \        long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n\
    \        long length = end1 - start1 + end2 - start2;\n        if (length == 0)\
    \ return \"NO\";\n        long startIntersection = start1 + start2;\n        long\
    \ endIntersection = start1 + end2;\n        long startIntersection2 = start2 +\
    \ start1;\n        long endIntersection2 = start2 + end1;\n        long startIntersection3\
    \ = start1 + start2;\n        long endIntersection3 = start1 + end2;\n       \
    \ long startIntersection4 = start2 + start1;\n        long endIntersection4 =\
    \ start2 + end1;\n        long startIntersection5 = start1 + start2;\n       \
    \ long endIntersection5 = start1 + end2;\n        long startIntersection6 = start2\
    \ + start1;\n        long endIntersection6 = start2 + end1;\n        long startIntersection7\
    \ = start1 + start2;\n        long endIntersection7 = start1 + end2;\n       \
    \ long startIntersection8 = start2 + start1;\n        long endIntersection8 =\
    \ start2 + end1;\n        long startIntersection9 = start1 + start2;\n       \
    \ long endIntersection9 = start1 + end2;\n        long startIntersection10 = start2\
    \ + start1;\n        long endIntersection10 = start2 + end1;\n        long startIntersection11\
    \ = start1 + start2;\n        long endIntersection11 = start1 + end2;\n      \
    \  long startIntersection12 = start2 + start1;\n        long endIntersection12\
    \ = start2 + end1;\n        long startIntersection13 = start1 + start2;\n    \
    \    long endIntersection13 = start1 + end2;\n        long startIntersection14\
    \ = start2 + start1;\n        long endIntersection14 = start2 + end1;\n      \
    \  long startIntersection15 = start1 + start2;\n        long endIntersection15\
    \ = start1 + end2;\n        long startIntersection16 = start2 + start1;\n    \
    \    long endIntersection16 = start2 + end1;\n        long startIntersection17\
    \ = start1 + start2;\n        long endIntersection17 = start1 + end2;\n      \
    \  long startIntersection18 = start2 + start1;\n        long endIntersection18\
    \ = start2 + end1;\n        long startIntersection19 = start1 + start2;\n    \
    \    long endIntersection19 = start1 + end2;\n        long startIntersection20\
    \ = start2 + start1;\n        long endIntersection20 = start2 + end1;", "    \
    \    long start = Math.Min(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0)\n            return \"NO\";\n        long product =\
    \ length * length;\n        long sum = 0;\n        long prime = 1;\n        while\
    \ (product % prime != 0) {\n            sum += prime;\n            product /=\
    \ prime;\n        }\n        if (sum == length)\n            return \"YES\";\n\
    \        return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long max2 = max * max;\n        long\
    \ max3 = max2 * max;\n        long max4 = max3 * max;\n        long max5 = max4\
    \ * max;\n        long max6 = max5 * max;\n        long max7 = max6 * max;\n \
    \       long max8 = max7 * max;\n        long max9 = max8 * max;\n        long\
    \ max10 = max9 * max;\n        long max11 = max10 * max;\n        long max12 =\
    \ max11 * max;\n        long max13 = max12 * max;\n        long max14 = max13\
    \ * max;\n        long max15 = max14 * max;\n        long max16 = max15 * max;\n\
    \        long max17 = max16 * max;\n        long max18 = max17 * max;\n      \
    \  long max19 = max18 * max;\n        long max20 = max19 * max;\n        long\
    \ max21 = max20 * max;\n        long max22 = max21 * max;\n        long max23\
    \ = max22 * max;\n        long max24 = max23 * max;\n        long max25 = max24\
    \ * max;\n        long max26 = max25 * max;\n        long max27 = max26 * max;\n\
    \        long max28 = max27 * max;\n        long max29 = max28 * max;\n      \
    \  long max30 = max29 * max;\n        long max31 = max30 * max;\n        long\
    \ max32 = max31 * max;\n        long max33 = max32 * max;\n        long max34\
    \ = max33 * max;\n        long max35 = max34 * max;\n        long max36 = max35\
    \ * max;\n        long max37 = max36 * max;\n        long max38 = max37 * max;\n\
    \        long max39 = max38 * max;\n        long max40 = max39 * max;\n      \
    \  long max41 = max40 * max;\n        long max42 = max41 * max;\n        long\
    \ max43 = max42 * max;\n        long max44 = max43 * max;\n        ", "      \
    \  long start1 = interval1.Item1;\n        long end1 = interval1.Item2;\n    \
    \    long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n  \
    \      long length1 = end1 - start1;\n        long length2 = end2 - start2;\n\
    \        if (length1 == 0 || length2 == 0) {\n            return \"NO\";\n   \
    \     }\n        long lengthIntersection = length1 + length2 - 2;\n        long\
    \ lengthPrime = lengthIntersection / 2;\n        if (lengthPrime == 0) {\n   \
    \         return \"NO\";\n        }\n        long startPrime = start1 + lengthPrime\
    \ / 2;\n        long endPrime = end1 - lengthPrime / 2;\n        long startPrime2\
    \ = start2 + lengthPrime / 2;\n        long endPrime2 = end2 - lengthPrime / 2;\n\
    \        long startPrime3 = start1 + lengthPrime / 2;\n        long endPrime3\
    \ = end1 - lengthPrime / 2;\n        long startPrime4 = start2 + lengthPrime /\
    \ 2;\n        long endPrime4 = end2 - lengthPrime / 2;\n        long startPrime5\
    \ = start1 + lengthPrime / 2;\n        long endPrime5 = end1 - lengthPrime / 2;\n\
    \        long startPrime6 = start2 + lengthPrime / 2;\n        long endPrime6\
    \ = end2 - lengthPrime / 2;\n        long startPrime7 = start1 + lengthPrime /\
    \ 2;\n        long endPrime7 = end1 - lengthPrime / 2;\n        long startPrime8\
    \ = start2 + lengthPrime / 2;\n        long endPrime8 = end2 - lengthPrime / 2;\n\
    \        long startPrime9 = start1 + lengthPrime / 2;\n        long endPrime9\
    \ = end1 - lengthPrime / 2;\n        long startPrime10 = start2 + lengthPrime\
    \ / 2;\n        long endPrime10 = end2 - lengthPrime / 2;\n        long startPrime11\
    \ = start1 + lengthPrime / 2;\n        long endPrime11 = end1 - lengthPrime /\
    \ 2;\n        long startPrime12 = start2 + lengthPrime / 2;\n        long endPrime12\
    \ = end2 - lengthPrime / 2;\n        long startPrime13 = start1 + lengthPrime\
    \ / 2;\n        long endPrime13 = end1 - lengthPrime / 2;\n        long startPrime14\
    \ = start2 + lengthPrime / 2;\n        long endPrime14 = end2 - lengthPrime /\
    \ 2;\n        long startPrime15 = start1 + lengthPri", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long max = (long)Math.Sqrt(length);\n        long start2 = start / max;\n\
    \        long end2 = end / max;\n        long length2 = end - start2;\n      \
    \  long max2 = (long) Math.Sqrt(length2);\n        long start3 = start2 / max2;\n\
    \        long end3 = end2 / max2;\n        long length3 = end3 - start3;\n   \
    \     long max3 = (long) Math.Sqrt(length3);\n        long start4 = start3 / max3;\n\
    \        long end4 = end3 / max3;\n        long length4 = end4 - start4;\n   \
    \     long max4 = (long) Math.Sqrt(length4);\n        long start5 = start4 / max4;\n\
    \        long end5 = end4 / max4;\n        long length5 = end5 - start5;\n   \
    \     long max5 = (long) Math.Sqrt(length5);\n        long start6 = start5 / max5;\n\
    \        long end6 = end5 / max5;\n        long length6 = end6 - start6;\n   \
    \     long max6 = (long) Math.Sqrt(length6);\n        long start7 = start6 / max6;\n\
    \        long end7 = end6 / max6;\n        long length7 = end7 - start7;\n   \
    \     long max7 = (long) Math.Sqrt(length7);\n        long start8 = start7 / max7;\n\
    \        long end8 = end7 / max7;\n        long length8 = end8 - start8;\n   \
    \     long max8 = (long) Math.Sqrt(length8);\n        long start9 = start8 / max8;\n\
    \        long end9 = end8 / max8;\n        long length9 = end9 - start9;\n   \
    \     long max9 = (long) Math.Sqrt(length9);\n        long start10 = start9 /\
    \ max9;\n        long end10 = end9 / max9;\n        long length10 = end10 - start10;\n\
    \        long max10 = (long) Math.Sqrt(length10);\n        long start11 = start10\
    \ / max10;\n        long end11 = end10 / max10;\n        long length11 = end11\
    \ - start11;\n        long max11 = (long) Math.Sqrt(length11);\n        long start12\
    \ = start11 / max11;\n        long end12 = end11 / max11;\n        long length12\
    \ = end", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = GetPrime(length);\n        if (prime == length) return \"YES\";\n  \
    \      if (prime == 0) return \"NO\";\n        long start2 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end2 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length2 = end2 - start2;\n        if (length2 == 0) return \"NO\"\
    ;\n        long prime2 = GetPrime(length2);\n        if (prime2 == length2) return\
    \ \"YES\";\n        if (prime2 == 0) return \"NO\";\n        long start3 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length3 = end3 - start3;\n        if (length3 == 0) return \"NO\"\
    ;\n        long prime3 = GetPrime(length3);\n        if (prime3 == length3) return\
    \ \"YES\";\n        if (prime3 == 0) return \"NO\";\n        long start4 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end4 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        long prime4 = GetPrime(length4);\n        if (prime4 == length4) return\
    \ \"YES\";\n        if (prime4 == 0) return \"NO\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        long prime5 = GetPrime(length5);\n        if (prime5 == length5) return\
    \ \"YES\";\n        if (prime5 == 0) return \"NO\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        long prime6 = GetPrime(length6);\n        if (prime6 == length6) return\
    \ \"YES\";\n        if (prime6 == 0) return \"NO\";\n        long start7 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Max(interval1.Item2, interval",
  "        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        long start2 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end2 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length2 = end2 - start2;\n        if (length2 == 0) return \"NO\"\
    ;\n        long start3 = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ long end3 = Math.Min(interval1.Item2, interval2.Item2);\n        long length3\
    \ = end3 - start3;\n        if (length3 == 0) return \"NO\";\n        long start4\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end4 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length4 = end4 - start4;\n        if (length4\
    \ == 0) return \"NO\";\n        long start5 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0) return \"NO\";\n       \
    \ long start6 = Math.Max(interval1.Item1, interval2.Item1);\n        long end6\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long length6 = end6 -\
    \ start6;\n        if (length6 == 0) return \"NO\";\n        long start7 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        long start8 = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ long end8 = Math.Min(interval1.Item2, interval2.Item2);\n        long length8\
    \ = end8 - start8;\n        if (length8 == 0) return \"NO\";\n        long start9\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end9 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length9 = end9 - start9;\n        if (length9\
    \ == 0) return \"NO\";\n        long start10 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end10 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length10 = end10 - start10;\n        if (length10 == 0) return \"NO\";\n   \
    \     long start11", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ start2 = Math.Max(interval1.Item1, interval2.Item1);\n        long end2 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0) return \"NO\";\n        long start3 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0) return \"NO\";\n       \
    \ long start4 = Math.Max(interval1.Item1, interval2.Item1);\n        long end4\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long length4 = end4 -\
    \ start4;\n        if (length4 == 0) return \"NO\";\n        long start5 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        long start6 = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ long end6 = Math.Min(interval1.Item2, interval2.Item2);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0) return \"NO\";\n        long start7\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end7 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length7 = end7 - start7;\n        if (length7\
    \ == 0) return \"NO\";\n        long start8 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end8 = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length8 = end8 - start8;\n        if (length8 == 0) return \"NO\";\n       \
    \ long start9 = Math.Max(interval1.Item1, interval2.Item1);\n        long end9\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long length9 = end9 -\
    \ start9;\n        if (length9 == 0) return \"NO\";\n        long start10 = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end10 = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length10 = end10 - start10;\n        if (length10 == 0) return \"\
    NO\";\n        long start11", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        bool isPrime = true;\n        long prime = 2;\n        while (isPrime)\
    \ {\n            if (length == prime) {\n                isPrime = false;\n  \
    \          } else {\n                length--;\n            }\n            if\
    \ (length < prime) {\n                prime++;\n            }\n        }\n   \
    \     if (length == prime) return \"YES\";\n        else return \"NO\";", "  \
    \      long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        long mid = start\
    \ + (end - start) / 2;\n        bool isPrime = true;\n        long factor = 1;\n\
    \        while (factor < mid) {\n            if (mid % factor == 0) {\n      \
    \          isPrime = false;\n                break;\n            }\n         \
    \   factor++;\n        }\n        if (isPrime) return \"YES\";\n        return\
    \ \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = GetPrime(length);\n        if (length == prime) return \"YES\";\n  \
    \      return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ max = (long)Math.Sqrt(length) + 1;\n        long min = (long)Math.Sqrt(length)\
    \ - 1;\n        long mid = start + (end - start) / 2;\n        long count = 0;\n\
    \        long sum = 0;\n        long prime = 1;\n        while (prime <= max)\
    \ {\n            long test = (long)Math.Sqrt(prime);\n            long test2 =\
    \ test + 1;\n            long test3 = test2 + 1;\n            long test4 = test3\
    \ + 1;\n            long test5 = test4 + 1;\n            long test6 = test5 +\
    \ 1;\n            long test7 = test6 + 1;\n            long test8 = test7 + 1;\n\
    \            long test9 = test8 + 1;\n            long test10 = test9 + 1;\n \
    \           long test11 = test10 + 1;\n            long test12 = test11 + 1;\n\
    \            long test13 = test12 + 1;\n            long test14 = test13 + 1;\n\
    \            long test15 = test14 + 1;\n            long test16 = test15 + 1;\n\
    \            long test17 = test16 + 1;\n            long test18 = test17 + 1;\n\
    \            long test19 = test18 + 1;\n            long test20 = test19 + 1;\n\
    \            long test21 = test20 + 1;\n            long test22 = test21 + 1;\n\
    \            long test23 = test22 + 1;\n            long test24 = test23 + 1;\n\
    \            long test25 = test24 + 1;\n            long test26 = test25 + 1;\n\
    \            long test27 = test26 + 1;\n            long test28 = test27 + 1;\n\
    \            long test29 = test28 + 1;\n            long test30 = test29 + 1;\n\
    \            long test31 = test30 + 1;\n            long test32 = test31 + 1;\n\
    \            long test33 = test32 + 1;\n            long test34 = test33 + 1;\n\
    \            long test35 = test34 + 1;\n            long test36 = test35 + 1;\n\
    \            long test37 = test36 + 1;\n            long test38 = test37 + 1;\n\
    \            long test39 = test38 + 1;\n            long test40 = test39 + 1;\n\
    \            long test41 = test40 + 1;\n            long test42 = test41 + 1;\n\
    \            long test43 = test42 + 1;\n            long test44 = test43 + 1;\n\
    \            long test45 = test44 + 1;\n            long test46 = test45 + 1;\n\
    \            ", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ num = 1;\n        long prime = 1;\n        while (prime * prime <= length) {\n\
    \            if (length % prime == 0) {\n                num += prime * (prime\
    \ + 1);\n                length -= prime;\n            }\n            prime +=\
    \ 2;\n        }\n        if (num == length) return \"YES\";\n        return \"\
    NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Max(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n       \
    \ long max2 = max * max;\n        long max3 = max2 * max;\n        long max4 =\
    \ max3 * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n\
    \        long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max", "    \
    \    long start = Math.Min(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long min = (long)Math.Sqrt(length + 1);\n        long mid = (long)Math.Sqrt(max);\n\
    \        long count = 0;\n        long prime = 1;\n        while (prime <= max)\
    \ {\n            long num = Math.Sqrt(prime);\n            if (num % 2 == 0) {\n\
    \                long num2 = Math.Sqrt(num);\n                if (num2 % 2 ==\
    \ 0) {\n                    long num3 = Math.Sqrt(num2);\n                   \
    \ if (num3 % 2 == 0) {\n                        long num4 = Math.Sqrt(num3);\n\
    \                        if (num4 % 2 == 0) {\n                            long\
    \ num5 = Math.Sqrt(num4);\n                            if (num5 % 2 == 0) {\n\
    \                                long num6 = Math.Sqrt(num5);\n              \
    \                  if (num6 % 2 == 0) {\n                                    long\
    \ num7 = Math.Sqrt(num6);\n                                    if (num7 % 2 ==\
    \ 0) {\n                                        long num8 = Math.Sqrt(num7);\n\
    \                                        if (num8 % 2 == 0) {\n              \
    \                              long num9 = Math.Sqrt(num8);\n                \
    \                            if (num9 % 2 == 0) {\n                          \
    \                      long num10 = Math.Sqrt(num9);\n                       \
    \                         if (num10 % 2 == 0) {\n                            \
    \                        long num11 = Math.Sqrt(num10);\n                    \
    \                                if (num11 % 2 == 0) {\n                     \
    \                                   long num12 = Math.Sqrt(num11);\n         \
    \                                               if (num12 % 2 == 0) {\n      \
    \                                                      long num13 = Math.Sqrt(num12);\n\
    \                                                            if (num13 % 2 ==\
    \ 0) {\n                                                                long num14\
    \ = Math.Sqrt(num13);\n                                                      \
    \          if (num14 % 2 == 0) {\n                                           \
    \                         long num15 = Math.Sqrt(num14);\n                   \
    \                                                 if (num15 % 2 == 0) {\n    \
    \                                                                    long num16\
    \ = Math.Sqrt(num15);\n                                                      \
    \                  if (num16 % 2 == 0) {\n                                   \
    \                             long num17 = Math.Sqrt(num16);\n               \
    \                                                 if (num17 % 2 == 0) {\n    \
    \                                                                long num18 =\
    \ Math.Sqrt(num17);\n                                                        \
    \            if (num18 % 2 == 0) {\n                                         \
    \                               long num19 = Math.Sqrt(num18);\n             \
    \                                                           if (num19 % 2 == 0)\
    \ {\n                                                                long num20\
    \ = Math.Sqrt(num19);\n                                                      \
    \          if (num20 % 2 == 0) {\n                                           \
    \                         long num21 = Math.Sqrt(num20);\n                   \
    \                                                 if (num21 % 2 == 0) {\n    \
    \                                                                    long num22\
    \ = Math.Sqrt(num2", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length\
    \ + 1);\n        long mid = start + (end - start) / 2;\n        bool isPrime =\
    \ true;\n        long prime = start;\n        while (isPrime && prime <= max)\
    \ {\n            if (prime % 2 == 0)\n                isPrime = false;\n     \
    \       prime += 2;\n        }\n        if (isPrime)\n            return \"YES\"\
    ;\n        return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ start2 = Math.Min(interval1.Item1, interval2.Item1);\n        long end2 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0) return \"NO\";\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0) return \"NO\";\n       \
    \ long start4 = Math.Min(interval1.Item1, interval2.Item1);\n        long end4\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length4 = end4 -\
    \ start4;\n        if (length4 == 0) return \"NO\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        long start6 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end6 = Math.Max(interval1.Item2, interval2.Item2);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0) return \"NO\";\n        long start7\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end7 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length7 = end7 - start7;\n        if (length7\
    \ == 0) return \"NO\";\n        long start8 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end8 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length8 = end8 - start8;\n        if (length8 == 0) return \"NO\";\n       \
    \ long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long end9\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length9 = end9 -\
    \ start9;\n        if (length9 == 0) return \"NO\";\n        long start10 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end10 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length10 = end10 - start10;\n        if (length10 == 0) return \"\
    NO\";\n        long start11", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long start2 = Math.Min(interval2.Item1, interval1.Item1);\n\
    \        long end2 = Math.Max(interval2.Item2, interval1.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0)\n            return \"NO\"\
    ;\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long length3\
    \ = end3 - start3;\n        if (length3 == 0)\n            return \"NO\";\n  \
    \      long start4 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end4 = Math.Max(interval1.Item2, interval2.Item2);\n        long length4 = end4\
    \ - start4;\n        if (length4 == 0)\n            return \"NO\";\n        long\
    \ start5 = Math.Min(interval1.Item1, interval2.Item1);\n        long end5 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length5 = end5 - start5;\n        if (length5\
    \ == 0)\n            return \"NO\";\n        long start6 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end6 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0)\n          \
    \  return \"NO\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0)\n            return \"NO\"\
    ;\n        long start8 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end8 = Math.Max(interval1.Item2, interval2.Item2);\n        long length8\
    \ = end8 - start8;\n        if (length8 == 0)\n            return \"NO\";\n  \
    \      long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end9 = Math.Max(interval1.Item2, interval2.Item2);\n        long length9 = end9\
    \ - start9;\n        if (length9 == 0)\n            return \"NO\";\n        long\
    \ start10 = Math.Min(interval1.Item1, interval2.Item1);\n        long end10 =\
    \ Math.Max(interval1.Item2, interval2.Item2);\n        long length10 = end10 -\
    \ start10;\n        if (length10 == 0)\n            return \"NO\";\n        long\
    \ start11", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ start2 = Math.Min(interval1.Item1, interval2.Item1);\n        long end2 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0) return \"NO\";\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0) return \"NO\";\n       \
    \ long start4 = Math.Min(interval1.Item1, interval2.Item1);\n        long end4\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length4 = end4 -\
    \ start4;\n        if (length4 == 0) return \"NO\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        long start6 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end6 = Math.Max(interval1.Item2, interval2.Item2);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0) return \"NO\";\n        long start7\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end7 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length7 = end7 - start7;\n        if (length7\
    \ == 0) return \"NO\";\n        long start8 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end8 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length8 = end8 - start8;\n        if (length8 == 0) return \"NO\";\n       \
    \ long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long end9\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length9 = end9 -\
    \ start9;\n        if (length9 == 0) return \"NO\";\n        long start10 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end10 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length10 = end10 - start10;\n        if (length10 == 0) return \"\
    NO\";\n        long start11", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long prime = length / 2;\n        if (length == prime)\n  \
    \          return \"YES\";\n        long a = interval1.Item1;\n        long b\
    \ = interval1.Item2;\n        long c = interval2.Item1;\n        long d = interval2.Item2;\n\
    \        long p1 = a;\n        long p2 = b;\n        long q1 = c;\n        long\
    \ q2 = d;\n        long r = p1 * q2;\n        long s = p2 * q1;\n        long\
    \ t = p1 * q1;\n        long u = q1 * q2;\n        long v = p2 * q2;\n       \
    \ long w = p1 * q2;\n        long x1 = r + s;\n        long y1 = t - u;\n    \
    \    long z1 = v - w;\n        long x2 = r - s;\n        long y2 = t - u;\n  \
    \      long z2 = v + w;\n        long x3 = r + s;\n        long y3 = t + u;\n\
    \        long z3 = v + w;\n        long x4 = r - s;\n        long y4 = t + u;\n\
    \        long z4 = v - w;\n        long x5 = r + s;\n        long y5 = t - u;\n\
    \        long z5 = v + w;\n        long x6 = r - s;\n        long y6 = t + u;\n\
    \        long z6 = v - w;\n        long x7 = r + s;\n        long y7 = t + u;\n\
    \        long z7 = v + w;\n        long x8 = r - s;\n        long y8 = t - u;\n\
    \        long z8 = v - w;\n        long x9 = r + s;\n        long y9 = t + u;\n\
    \        long z9 = v + w;\n        long x10 = r - s;\n        long y10 = t + u;\n\
    \        long z10 = v - w;\n        long x11 = r + s;\n        long y11 = t -\
    \ u;\n        long z11 = v + w;\n        long x12 = r - s;\n        long y12 =\
    \ t + u;\n        long z12 = v - w;\n        long x13 = r + s;\n        long y13\
    \ = t + u;\n        long z13 = v + w;\n        long x14 = r - s;\n        long\
    \ y14 = t - u;\n        long z14 = v", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        long start2 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end2 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length2 = end2 - start2;\n        if (length2 == 0) return \"NO\"\
    ;\n        if (length2 == 1) return \"YES\";\n        long start3 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length3 = end3 - start3;\n        if (length3 == 0) return \"NO\"\
    ;\n        if (length3 == 1) return \"YES\";\n        long start4 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end4 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        if (length4 == 1) return \"YES\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        if (length5 == 1) return \"YES\";\n        long start6 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end6 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0) return \"NO\"\
    ;\n        if (length6 == 1) return \"YES\";\n        long start7 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length7 = end7 - start7;\n        if (length7 == 0) return \"NO\"\
    ;\n        if (length7 == 1) return \"YES\";\n        long start8 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end8 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0) return \"NO\"\
    ;\n        if (length8 == 1) return \"YES\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);",
  "        long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        if (length == 1)\
    \ return \"YES\";\n        bool isPrime = true;\n        long max = (long)Math.Sqrt(length);\n\
    \        for (long i = 2; i <= max; i++) {\n            if (length % i == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime) return \"YES\";\n        return \"NO\";", "    \
    \    long start = interval1.Item1;\n        long end = interval1.Item2;\n    \
    \    long start2 = interval2.Item1;\n        long end2 = interval2.Item2;\n  \
    \      long length = end - start;\n        long length2 = end2 - start2;\n   \
    \     if (length == 0 || length2 == 0) {\n            return \"NO\";\n       \
    \ }\n        long length3 = length * length;\n        long length4 = length2 *\
    \ length2;\n        long length5 = length3 * length3;\n        long length6 =\
    \ length4 * length4;\n        long length7 = length5 * length5;\n        long\
    \ length8 = length6 * length6;\n        long length9 = length7 * length7;\n  \
    \      long length10 = length8 * length8;\n        long length11 = length9 * length9;\n\
    \        long length12 = length10 * length10;\n        long length13 = length11\
    \ * length11;\n        long length14 = length12 * length12;\n        long length15\
    \ = length13 * length13;\n        long length16 = length14 * length14;\n     \
    \   long length17 = length15 * length15;\n        long length18 = length16 * length16;\n\
    \        long length19 = length17 * length17;\n        long length20 = length18\
    \ * length18;\n        long length21 = length19 * length19;\n        long length22\
    \ = length20 * length20;\n        long length23 = length21 * length21;\n     \
    \   long length24 = length22 * length22;\n        long length25 = length23 * length23;\n\
    \        long length26 = length24 * length24;\n        long length27 = length25\
    \ * length25;\n        long length28 = length26 * length26;\n        long length29\
    \ = length27 * length27;\n        long length30 = length28 * length28;\n     \
    \   long length31 = length29 * length29;\n        long length32 = length30 * length30;\n\
    \        long length33 = length31 * length31;\n        long length34 = length32\
    \ * length32;\n        long length35 = length33 * length33;\n        long length36\
    \ = length34 * length34;\n        long length37 = length35 * length35;\n     \
    \   long length38 = length36 * length36;\n        long length39 = length37 * length37;\n\
    \        long length40 = length38 * length38;\n        long length41 = length39\
    \ * length39;\n        long length42 = length40 * length40;\n        long length43\
    \ = length", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ num = 1;\n        long i = 1;\n        while (i < length) {\n            long\
    \ j = i + 1;\n            while (j < length) {\n                if (j % i == 0)\
    \ {\n                    num *= j;\n                    j++;\n               \
    \ }\n                else {\n                    num *= i;\n                 \
    \   i++;\n                }\n            }\n            i++;\n        }\n    \
    \    if (num == 1) return \"YES\";\n        return \"NO\";", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long prime = length / 2;\n        long remainder\
    \ = length % 2;\n        if (prime == 1 && remainder == 0) return \"YES\";\n \
    \       if (prime == 1 && remainder == 1) return \"NO\";\n        if (prime ==\
    \ 2 && remainder == 0) return \"NO\";\n        if (prime == 2 && remainder ==\
    \ 1) return \"YES\";\n        if (prime == 3 && remainder == 0) return \"NO\"\
    ;\n        if (prime == 3 && remainder == 1) return \"YES\";\n        if (prime\
    \ == 4 && remainder == 0) return \"NO\";\n        if (prime == 4 && remainder\
    \ == 1) return \"YES\";\n        if (prime == 5 && remainder == 0) return \"NO\"\
    ;\n        if (prime == 5 && remainder == 1) return \"YES\";\n        if (prime\
    \ == 6 && remainder == 0) return \"NO\";\n        if (prime == 6 && remainder\
    \ == 1) return \"YES\";\n        if (prime == 7 && remainder == 0) return \"NO\"\
    ;\n        if (prime == 7 && remainder == 1) return \"YES\";\n        if (prime\
    \ == 8 && remainder == 0) return \"NO\";\n        if (prime == 8 && remainder\
    \ == 1) return \"YES\";\n        if (prime == 9 && remainder == 0) return \"NO\"\
    ;\n        if (prime == 9 && remainder == 1) return \"YES\";\n        if (prime\
    \ == 10 && remainder == 0) return \"NO\";\n        if (prime == 10 && remainder\
    \ == 1) return \"YES\";\n        if (prime == 11 && remainder == 0) return \"\
    NO\";\n        if (prime == 11 && remainder == 1) return \"YES\";\n        if\
    \ (prime == 12 && remainder == 0) return \"NO\";\n        if (prime == 12 && remainder\
    \ == 1) return \"YES\";\n        if (prime == 13 && remainder == 0) return \"\
    NO\";\n        if (prime == 13 && remainder == 1) return \"YES\";\n        if\
    \ (prime == 14 && remainder == 0) return \"NO\";\n        if (prime == 14 && remainder\
    \ == 1) return \"YES\";\n        if (prime == 15 && remainder == 0) return \"\
    NO\";\n        if (prime == 15 && remainder == 1) return \"YES\";\n        if\
    \ (prime == 16 && remainder == 0) return \"NO\";\n        if (prime == 16 && remainder\
    \ == 1) return \"YES\";\n        if (prime == 17 && remainder ", "        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long product = length * length;\n        long sum\
    \ = 0;\n        long prime = 1;\n        bool isPrime = true;\n        long primeSum\
    \ = 0;\n        long primeProduct = 1;\n        long primeProductSum = 0;\n  \
    \      long primeProductProduct = 1;\n        long primeProductProductSum = 0;\n\
    \        long primeProductProductProduct = 1;\n        long primeProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProduct = 1;\n        long primeProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProduct = 1;\n        long\
    \ primeProductProductProductProductProductSum = 0;\n        long primeProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductSum = 0;\n\
    \        long primeProductProductProductProductProductProductProduct = 1;\n  \
    \      long primeProductProductProductProductProductProductProductSum = 0;\n \
    \       long primeProductProductProductProductProductProductProductProduct = 1;\n\
    \        long primeProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long primeProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long primeProduct", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ start2 = Math.Min(interval2.Item1, interval1.Item1);\n        long end2 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0)\n            return \"NO\";\n        if (length2 == 1)\n            return\
    \ \"YES\";\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0)\n            return \"NO\"\
    ;\n        if (length3 == 1)\n            return \"YES\";\n        long start4\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end4 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length4 = end4 - start4;\n        if (length4\
    \ == 0)\n            return \"NO\";\n        if (length4 == 1)\n            return\
    \ \"YES\";\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0)\n            return \"NO\"\
    ;\n        if (length5 == 1)\n            return \"YES\";\n        long start6\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end6 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length6 = end6 - start6;\n        if (length6\
    \ == 0)\n            return \"NO\";\n        if (length6 == 1)\n            return\
    \ \"YES\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0)\n            return \"NO\"\
    ;\n        if (length7 == 1)\n            return \"YES\";\n        long start8\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end8 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length8 = end8 - start8;\n        if (length8\
    \ == 0)\n            return \"NO\";\n        if (length8 == 1)\n            return\
    \ \"YES\";\n        long start9 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end9 = Math.Max(interval1.Item2, interval2.Item2);", "        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0)\n            return \"NO\";\n        long num = 1;\n        long prime =\
    \ 1;\n        while (prime * prime <= length) {\n            long temp = num;\n\
    \            while (temp * temp <= length) {\n                if (temp % prime\
    \ == 0) {\n                    prime = prime + 1;\n                    break;\n\
    \                }\n                temp = temp * prime + 1;\n            }\n\
    \            num = num * prime + 1;\n        }\n        if (prime == length)\n\
    \            return \"YES\";\n        else\n            return \"NO\";", "   \
    \     long start = Math.Min(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0) return \"NO\";\n        if (length == 1) return \"YES\"\
    ;\n        long max = (long)Math.Sqrt(length);\n        long mid = start + (end\
    \ - start) / 2;\n        long count = 0;\n        long prime = 1;\n        while\
    \ (prime < max) {\n            long num = Math.Sqrt(prime);\n            long\
    \ num2 = Math.Sqrt(num);\n            long num3 = Math.Sqrt(num2);\n         \
    \   long num4 = Math.Sqrt(num3);\n            long num5 = Math.Sqrt(num4);\n \
    \           long num6 = Math.Sqrt(num5);\n            long num7 = Math.Sqrt(num6);\n\
    \            long num8 = Math.Sqrt(num7);\n            long num9 = Math.Sqrt(num8);\n\
    \            long num10 = Math.Sqrt(num9);\n            long num11 = Math.Sqrt(num10);\n\
    \            long num12 = Math.Sqrt(num11);\n            long num13 = Math.Sqrt(num12);\n\
    \            long num14 = Math.Sqrt(num13);\n            long num15 = Math.Sqrt(num14);\n\
    \            long num16 = Math.Sqrt(num15);\n            long num17 = Math.Sqrt(num16);\n\
    \            long num18 = Math.Sqrt(num17);\n            long num19 = Math.Sqrt(num18);\n\
    \            long num20 = Math.Sqrt(num19);\n            long num21 = Math.Sqrt(num20);\n\
    \            long num22 = Math.Sqrt(num21);\n            long num23 = Math.Sqrt(num22);\n\
    \            long num24 = Math.Sqrt(num23);\n            long num25 = Math.Sqrt(num24);\n\
    \            long num26 = Math.Sqrt(num25);\n            long num27 = Math.Sqrt(num26);\n\
    \            long num28 = Math.Sqrt(num27);\n            long num29 = Math.Sqrt(num28);\n\
    \            long num30 = Math.Sqrt(num29);\n            long num31 = Math.Sqrt(num30);\n\
    \            long num32 = Math.Sqrt(num31);\n            long num33 = Math.Sqrt(num32);\n\
    \            long num34 = Math.Sqrt(num33);\n            long num35 = Math.Sqrt(num34);\n\
    \            long num36 = Math.Sqrt(num35);\n            long num37 = Math.Sqrt(",
  "        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long min = (long)Math.Sqrt(length + 1);\n        long mid = start + (end\
    \ - start) / 2;\n        if (mid < min) return \"NO\";\n        if (mid > max)\
    \ return \"NO\";\n        if (IsPrime(mid)) return \"YES\";\n        return \"\
    NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Max(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        long start2\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end2 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length2 = end2 - start2;\n        if (length2\
    \ == 0) return \"NO\";\n        long start3 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length3 = end3 - start3;\n        if (length3 == 0) return \"NO\";\n       \
    \ long start4 = Math.Min(interval1.Item1, interval2.Item1);\n        long end4\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length4 = end4 -\
    \ start4;\n        if (length4 == 0) return \"NO\";\n        long start5 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length5 = end5 - start5;\n        if (length5 == 0) return \"NO\"\
    ;\n        long start6 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end6 = Math.Max(interval1.Item2, interval2.Item2);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0) return \"NO\";\n        long start7\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end7 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length7 = end7 - start7;\n        if (length7\
    \ == 0) return \"NO\";\n        long start8 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end8 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length8 = end8 - start8;\n        if (length8 == 0) return \"NO\";\n       \
    \ long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long end9\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length9 = end9 -\
    \ start9;\n        if (length9 == 0) return \"NO\";\n        long start10 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end10 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length10 = end10 - start10;\n        if (length10 == 0) return \"\
    NO\";\n        long start11", "        long start1 = interval1.Item1;\n      \
    \  long end1 = interval1.Item2;\n        long start2 = interval2.Item1;\n    \
    \    long end2 = interval2.Item2;\n        long length1 = end1 - start1;\n   \
    \     long length2 = end2 - start2;\n        long lengthIntersection = length1\
    \ + length2;\n        if (lengthIntersection == 0)\n            return \"NO\"\
    ;\n        if (lengthIntersection == 1)\n            return \"YES\";\n       \
    \ long lengthDivisor = lengthIntersection / 2;\n        long lengthDivisor2 =\
    \ lengthDivisor / 2;\n        long lengthDivisor3 = lengthDivisor2 / 2;\n    \
    \    long lengthDivisor4 = lengthDivisor3 / 2;\n        long lengthDivisor5 =\
    \ lengthDivisor4 / 2;\n        long lengthDivisor6 = lengthDivisor5 / 2;\n   \
    \     long lengthDivisor7 = lengthDivisor6 / 2;\n        long lengthDivisor8 =\
    \ lengthDivisor7 / 2;\n        long lengthDivisor9 = lengthDivisor8 / 2;\n   \
    \     long lengthDivisor10 = lengthDivisor9 / 2;\n        long lengthDivisor11\
    \ = lengthDivisor10 / 2;\n        long lengthDivisor12 = lengthDivisor11 / 2;\n\
    \        long lengthDivisor13 = lengthDivisor12 / 2;\n        long lengthDivisor14\
    \ = lengthDivisor13 / 2;\n        long lengthDivisor15 = lengthDivisor14 / 2;\n\
    \        long lengthDivisor16 = lengthDivisor15 / 2;\n        long lengthDivisor17\
    \ = lengthDivisor16 / 2;\n        long lengthDivisor18 = lengthDivisor17 / 2;\n\
    \        long lengthDivisor19 = lengthDivisor18 / 2;\n        long lengthDivisor20\
    \ = lengthDivisor19 / 2;\n        long lengthDivisor21 = lengthDivisor20 / 2;\n\
    \        long lengthDivisor22 = lengthDivisor21 / 2;\n        long lengthDivisor23\
    \ = lengthDivisor22 / 2;\n        long lengthDivisor24 = lengthDivisor23 / 2;\n\
    \        long lengthDivisor25 = lengthDivisor24 / 2;\n        long lengthDivisor26\
    \ = lengthDivisor25 / 2;\n        long lengthDivisor27 = lengthDivisor26 / 2;\n\
    \        long lengthDivisor28 = lengthDivisor27 / 2;\n        long lengthDivisor29\
    \ = lengthDivisor28 / 2;\n        long lengthDivisor30 = lengthDivisor29 / 2;\n\
    \        long lengthDivisor31 = lengthDivisor30 / 2;\n        long lengthDivisor",
  "        long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0) return \"NO\";\n        long prime = GetPrime(length);\n\
    \        if (length == prime) return \"YES\";\n        return \"NO\";", "    \
    \    long start = Math.Max(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end - start;\n\
    \        if (length == 0) return \"NO\";\n        long prime = length / 2;\n \
    \       if (length == prime) return \"YES\";\n        bool isPrime = true;\n \
    \       long start2 = start;\n        long end2 = end;\n        while (start2\
    \ < end2) {\n            long mid = (start2 + end2) / 2;\n            if (mid\
    \ % prime != 0) {\n                isPrime = false;\n                break;\n\
    \            }\n            start2 = mid;\n            end2 = mid + 1;\n     \
    \   }\n        if (isPrime) return \"YES\";\n        return \"NO\";"]
stop_tokens:
- "\n    }\n"
